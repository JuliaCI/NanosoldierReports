cset: moving following pidspec: 2148068
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "find"... done (took 2.619927942 seconds)
loading group "problem"... done (took 1.583855788 seconds)
loading group "io"... done (took 1.508072536 seconds)
loading group "simd"... done (took 1.111086951 seconds)
loading group "sparse"... done (took 0.540696054 seconds)
loading group "micro"... done (took 0.045281572 seconds)
loading group "parallel"... done (took 0.019170351 seconds)
loading group "dates"... done (took 0.183615342 seconds)
loading group "scalar"... done (took 1.148622011 seconds)
loading group "misc"... done (took 0.397200946 seconds)
loading group "union"... done (took 2.854919857 seconds)
loading group "alloc"... done (took 0.016691476 seconds)
loading group "random"... done (took 2.143316693 seconds)
loading group "shootout"... done (took 0.641465665 seconds)
loading group "broadcast"... done (took 0.668797014 seconds)
loading group "sort"... done (took 0.310585026 seconds)
loading group "array"... done (took 2.478444595 seconds)
loading group "string"... done (took 0.201036725 seconds)
loading group "linalg"... done (took 2.472456156 seconds)
loading group "tuple"... done (took 0.573276017 seconds)
loading group "collection"... done (took 5.602599458 seconds)
loading group "inference"... done (took 2.61995544 seconds)
loading group "frontend"... done (took 0.003580731 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.091805391 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038329514 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040947171 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7325e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040902176 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055490983 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041718428 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.054240753 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040755327 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.2112e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040898047 seconds)
  done (took 1.150381261 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.084408866 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.1576e-5 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.085414972 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.050154625 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 0.01893581 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.2916e-5 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.083740672 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.4062e-5 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08169582 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.088303961 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.087668778 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.083763833 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091881014 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 2.3361e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083323497 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 3.095e-5 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.7249e-5 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.0914e-5 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082082989 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 3.0952e-5 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082512513 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.9926e-5 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.0046e-5 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.6127e-5 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.3282e-5 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 9.551e-6 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082252001 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.8359e-5 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.5779e-5 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.6758e-5 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.3989e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.0581e-5 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082593945 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 3.0284e-5 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 1.2471e-5 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.3074e-5 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.082e-5 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082300108 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.6491e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.0003e-5 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.2296e-5 seconds)
  done (took 1.927473585 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030206947 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.026838843 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039641725 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6474e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.04057896 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051960099 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041004173 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.051334489 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.04074691 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.6073e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040600541 seconds)
  done (took 1.046647335 seconds)
done (took 4.867310156 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.251813305 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.203453158 seconds)
  done (took 1.133551415 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.265859182 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.222592215 seconds)
  done (took 1.172252511 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.250454251 seconds)
  done (took 0.937860266 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.087215985 seconds)
  done (took 1.776066803 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.32087319 seconds)
  done (took 1.005101762 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.359640623 seconds)
  done (took 2.047107079 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.696058854 seconds)
  done (took 1.39337063 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.676064851 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.143232636 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 0.149969897 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 1.148418476 seconds)
  done (took 3.819294356 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.752129666 seconds)
  done (took 5.457472176 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.421280007 seconds)
  done (took 1.125524049 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.964532421 seconds)
  done (took 1.670996509 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052347204 seconds)
  done (took 0.758240458 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.978445798 seconds)
  done (took 1.688275059 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.552384645 seconds)
  done (took 2.261932931 seconds)
done (took 26.929982193 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.852014189 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.898124426 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.741291858 seconds)
  done (took 4.205218034 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 0.032962628 seconds)
    (2/2) benchmarking "readstring"...
    done (took 0.022156387 seconds)
  done (took 0.796868412 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.882248313 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138796348 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021444555 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.039145254 seconds)
  done (took 1.799806236 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 0.245619013 seconds)
done (took 7.779356681 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.19493905 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.090447094 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.044609905 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.082864325 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.048077857 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.107854899 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.065110139 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.098199264 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.077320721 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.02471962 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.052978808 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032340196 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.0841376 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.056700625 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.087875196 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.081372111 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.063924273 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.03238743 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.059020297 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.052539721 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.065359305 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.061444422 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.064391139 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.02486055 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.053400626 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.061694202 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.6518e-5 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.073450565 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.079703181 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.072199386 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.071306483 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.061708329 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.040804722 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.058487883 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033593081 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.031645487 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.074462311 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.073680438 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.083158556 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.028589005 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 3.8188e-5 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.058828906 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.06592191 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.047118477 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.070215459 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.059114191 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.077868391 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.047427951 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 3.5841e-5 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.057033021 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.075401696 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.082322518 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.5667e-5 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.2891e-5 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.060303048 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.051672221 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 3.9921e-5 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.068058518 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.6207e-5 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.04989438 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.075493313 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.055856401 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.074596189 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.068517343 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.032693667 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.071682457 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 3.5017e-5 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.069391293 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.9089e-5 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.042051515 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 5.0006e-5 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.057132474 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.039918061 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 3.3751e-5 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.06819055 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.072275218 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.067996872 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.075620671 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028815176 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.080751924 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.041679853 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 5.0031e-5 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.6606e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.071675337 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.2443e-5 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.032684929 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.05553141 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.062625819 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.6755e-5 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 3.882e-5 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.059815426 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.056571 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.058922147 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.067399974 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.076219504 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.4211e-5 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035801565 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.2748e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.076368864 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032452005 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.063434267 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.049624316 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.074000566 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.073449556 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.030605606 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.032931726 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.4841e-5 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.047314405 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.040840466 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 4.2859e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.061959954 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.068320008 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.048569239 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.040850405 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 3.2775e-5 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 3.7371e-5 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.2081e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.9663e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.073623704 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.068963462 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.0330757 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 4.7725e-5 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.059723816 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 4.2755e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.9871e-5 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.071031887 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.063957353 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.6829e-5 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.048544954 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.029200812 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 3.3018e-5 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.029811436 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.041338621 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.078688719 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.078723337 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 3.5879e-5 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.050877395 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.9515e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.8471e-5 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.050848943 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 3.1503e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.4453e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.9755e-5 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.071059561 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.040473595 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.047378514 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.060012326 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.066715766 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 3.4568e-5 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.049065123 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 3.9858e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.064818552 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.069198184 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 4.198e-5 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 3.2128e-5 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.7899e-5 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.052200257 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 3.2594e-5 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.068582786 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.06474187 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.3272e-5 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.0727e-5 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.075073308 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.077192059 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 6.6599e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.065225545 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 6.7735e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.056002906 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.049359241 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.061027152 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.000113112 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.5705e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.3827e-5 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.9551e-5 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.1047e-5 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.06461354 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.8769e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.075014884 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.368e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.533e-5 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.029349708 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 3.0029e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.065072148 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.033216058 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 4.4848e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.068647614 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.032656463 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.6897e-5 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.7466e-5 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.1635e-5 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.5395e-5 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.058514381 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.030620706 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 4.6895e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.5537e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 3.3971e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.1386e-5 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.6072e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.073668662 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.8381e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.8187e-5 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 4.9018e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.5313e-5 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.037853662 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 5.6788e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.825e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.047185836 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.081459877 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.064290985 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 3.7363e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 5.2339e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.8503e-5 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.1391e-5 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041240227 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 5.6567e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.03249372 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 4.4786e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.07e-5 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.0568627 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.050534974 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.5406e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 3.0175e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.2253e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.1512e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.1624e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.083695669 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.040642109 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.127960617 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.1604e-5 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.8159e-5 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 4.2671e-5 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.725e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.138e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.7039e-5 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.7271e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.4599e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036439433 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.059625466 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.5978e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.5283e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.1056e-5 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3572e-5 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6985e-5 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.061886922 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049387753 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.4779e-5 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.0872e-5 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9446e-5 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.6948e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.068514184 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 8.3135e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.9617e-5 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.0888e-5 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057580312 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.067089895 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.5579e-5 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.5585e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7032e-5 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.3346e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.067303004 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.8767e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8969e-5 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.035045845 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.7559e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.064187085 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.0933e-5 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.5554e-5 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.063934363 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 4.052e-5 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6555e-5 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.5747e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.8852e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.7309e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1478e-5 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.8876e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.8118e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.2498e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.745e-5 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.073697236 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 8.3092e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.071611265 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 4.2984e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.8277e-5 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.010947109 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.6652e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.3614e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.7238e-5 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.054400921 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.6864e-5 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.05497118 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.071771904 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.5636e-5 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.1123e-5 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.6556e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.061338789 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.2989e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.0986e-5 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.054800422 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.5971e-5 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 4.0563e-5 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.5409e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.063932202 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.9054e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.1659e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.7742e-5 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028756964 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.2074e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.4389e-5 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 9.889e-6 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.8636e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 3.1774e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.5595e-5 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.6918e-5 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.4215e-5 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 3.0189e-5 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.031408717 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.7307e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.060937202 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.034e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.039597388 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.050399539 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.5917e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 4.0454e-5 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.9841e-5 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.7833e-5 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.499e-5 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.071493477 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 3.0907e-5 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.2102e-5 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.8635e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.9185e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.051324078 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.3648e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.8342e-5 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.7727e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 3.798e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.7961e-5 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.0398e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.8645e-5 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.6594e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.8233e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.8502e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.461e-5 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.0514e-5 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.546e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.3487e-5 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.3921e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.4582e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.0194e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.0482e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.3532e-5 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011006545 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.7326e-5 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 3.1448e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.7423e-5 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.5585e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.0472e-5 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.506e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.9392e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0193e-5 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.4981e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.2906e-5 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4867e-5 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.6913e-5 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.6518e-5 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.3694e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3432e-5 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0905e-5 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.0469e-5 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.1748e-5 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031349871 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.029397414 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.3336e-5 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.9603e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.3123e-5 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.9516e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.063485676 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 3.1283e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.1391e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.6161e-5 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.9984e-5 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.9362e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.2764e-5 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.8136e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.8473e-5 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3529e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.6965e-5 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.0574e-5 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8365e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.1917e-5 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.3147e-5 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.2405e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.0448e-5 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.7305e-5 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.3159e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.4068e-5 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 3.4e-5 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.3401e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2645e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.9176e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.2834e-5 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.2004e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3617e-5 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.8874e-5 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6392e-5 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.3573e-5 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.037156248 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.6455e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.5939e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.6912e-5 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.9061e-5 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.8592e-5 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.3114e-5 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.697e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.3967e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.2854e-5 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6501e-5 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.2356e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.3311e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.1213e-5 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.6552e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.7369e-5 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.2615e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.077693676 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4869e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.0861e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.3369e-5 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 3.0182e-5 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.2439e-5 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.5488e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.2283e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.9085e-5 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028172453 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 4.101e-5 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.7771e-5 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3656e-5 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.6767e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.9793e-5 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.9628e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.9987e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035920319 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 3.0067e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 3.2904e-5 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.6922e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.4938e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.9202e-5 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.5592e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.8815e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.06109538 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.1267e-5 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.3434e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.7636e-5 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.4177e-5 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.8181e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.9853e-5 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.9284e-5 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.0269e-5 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7584e-5 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.7658e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.06739308 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.6867e-5 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.0151e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.1809e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.9723e-5 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.1019e-5 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.7524e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.1324e-5 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.7882e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.9318e-5 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.0994e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.9738e-5 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.8249e-5 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.6748e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.9086e-5 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.2538e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 4.229e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.4257e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.5336e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.3617e-5 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.6637e-5 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.4701e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.4355e-5 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.6363e-5 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.01099015 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 3.3446e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.0478e-5 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.7481e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.2009e-5 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.7303e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.9858e-5 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.534e-5 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.9904e-5 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.4875e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.2659e-5 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.0205e-5 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.3011e-5 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.6132e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.5484e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.2748e-5 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.6496e-5 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.7018e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.5663e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.9987e-5 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.9567e-5 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.3189e-5 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.5791e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.9074e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.35e-5 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.5478e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.9e-5 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.3112e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.6604e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.0939e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.3083e-5 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.5597e-5 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.7603e-5 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 9.427e-6 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.7241e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.1512e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.3919e-5 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.6493e-5 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029566754 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.5148e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.2505e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.0788e-5 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.7486e-5 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.6558e-5 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.9359e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.9886e-5 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.0499e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.2156e-5 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 9.55e-6 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.7315e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.2527e-5 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.9027e-5 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.9439e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.0089e-5 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.8913e-5 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.0926e-5 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.7456e-5 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.1467e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.2813e-5 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.0469e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.052268349 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.2048e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.9032e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.3972e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.4242e-5 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.2148e-5 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1318e-5 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.0513e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.4205e-5 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.6422e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5463e-5 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.7128e-5 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.3423e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.036e-5 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011309439 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 3.1707e-5 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.9619e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.0716e-5 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.988e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.5504e-5 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.2045e-5 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 3.3306e-5 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.8373e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7642e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7684e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.1699e-5 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.0231e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.1293e-5 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.73e-5 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.8982e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.1408e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.9634e-5 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.9607e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.5879e-5 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.2409e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.8105e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.2812e-5 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.7738e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.6964e-5 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6625e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.2641e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.9699e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.2635e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.4523e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.3022e-5 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.8734e-5 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.395e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.1499e-5 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.6124e-5 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.3894e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.2613e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.743e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.3986e-5 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.8528e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.0713e-5 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.6943e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.3061e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.9052e-5 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6671e-5 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5174e-5 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.4479e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.6425e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.8836e-5 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032279224 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.4176e-5 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3505e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.6589e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.4898e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 3.4874e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.8969e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.952e-5 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.6493e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.0843e-5 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 3.9909e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.0609e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5342e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.1491e-5 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.9544e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.9258e-5 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 9.653e-6 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.000166992 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.2335e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5057e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.7483e-5 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.4913e-5 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.0487e-5 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.8491e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.8698e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.4094e-5 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.8133e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.9538e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.797e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.5908e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.4276e-5 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.4633e-5 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.4039e-5 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.752e-5 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.2186e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.93e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 3.3546e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.508e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.6726e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.4122e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.8818e-5 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.8344e-5 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.4139e-5 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.8684e-5 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.7886e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.5687e-5 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.0085e-5 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.233e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.7673e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.8116e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.9959e-5 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.8755e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.6875e-5 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0798e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.3708e-5 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1461e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.812e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.4476e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.2995e-5 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 9.954e-6 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.5086e-5 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.4534e-5 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.4349e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.4581e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.3895e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.3751e-5 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.3742e-5 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 9.507e-6 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.2054e-5 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.1616e-5 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.9846e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.6282e-5 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.1921e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.2177e-5 seconds)
done (took 11.691225651 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.538893414 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.469132387 seconds)
  done (took 1.752199142 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.39820156 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.099813255 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.415414037 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.075645186 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072638022 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.166000541 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000147899 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.083891621 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001342566 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.140089674 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079027497 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.139087162 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.077723964 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.029234221 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.034123409 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077012625 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000828789 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.7012e-5 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000146059 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.034141388 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03435602 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.0028841 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031048528 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.043073465 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004819574 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.527e-5 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000198951 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001620067 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.2098e-5 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083850295 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.3926e-5 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000123295 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003566597 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027130942 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.00010539 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002192477 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.02979567 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07607926 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001580966 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.03542374 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000115795 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.029672384 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000120552 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.034437667 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.7718e-5 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000117821 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000147987 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000202795 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.5749e-5 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000126518 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.1675e-5 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.7783e-5 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003228207 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.00175011 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002644001 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029947361 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000229831 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007352639 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002604104 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000836752 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003678508 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000244778 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001342246 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035418787 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001488 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000213113 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.036100163 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003076163 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008458361 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000103481 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002192609 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.8485e-5 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004715184 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.00424761 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.5757e-5 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.007124934 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002784613 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.6984e-5 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001713522 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.00012282 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000198489 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.001012129 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000104167 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003588212 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.002456959 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.6517e-5 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.011531961 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000127097 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000175047 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001488677 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.0121265 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.2829e-5 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.001363328 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001415334 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002429962 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030810719 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00014103 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.7961e-5 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 9.8133e-5 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000103253 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002551576 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000124145 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001305726 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 3.5968e-5 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.3339e-5 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000192879 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001770671 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.9253e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000233562 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000126746 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001626548 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002296806 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011952806 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000251139 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 6.9574e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001720357 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000351431 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.1524e-5 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001492303 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002226846 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002812115 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000113115 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000482713 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.0582e-5 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000100675 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.3922e-5 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.6565e-5 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000145471 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000167533 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000238759 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002115088 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.00859007 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000233774 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001911437 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.00279224 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.8153e-5 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013048062 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004086062 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 8.5323e-5 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008021555 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000192037 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000164085 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.0862e-5 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.00010158 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000679495 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009487947 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005325594 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001796856 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001742551 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.6896e-5 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004694412 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000267323 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002078513 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001414807 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.7925e-5 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.021200656 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.001846985 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.8031e-5 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004291783 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013323236 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.9729e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000171968 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000101398 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0001167 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.00173216 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.8703e-5 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.8563e-5 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005247727 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002035507 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008639976 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000154754 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001525602 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.9537e-5 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.00046434 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000108253 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.5015e-5 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.002916829 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000124751 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000696104 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001520434 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000122109 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.8412e-5 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 8.6513e-5 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000111455 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.6311e-5 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005240541 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.006862662 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002126923 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.00042023 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.0081669 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002174902 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004122057 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.017385354 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.005591168 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.000340209 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000777424 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000181168 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001338176 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002387901 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001775073 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.011944667 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 6.9813e-5 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000158939 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000227033 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000124059 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.1757e-5 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000205141 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.7854e-5 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012680594 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000193711 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.5594e-5 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001321835 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.3539e-5 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.009548948 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000122921 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.0037e-5 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002933467 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000142517 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000201714 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014318126 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004789435 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000152673 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000130571 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009812119 seconds)
  done (took 3.651720849 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.238327274 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025687407 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.315116359 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.023845635 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000175503 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000197267 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.128168013 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.280677546 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.00020619 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000110261 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000202777 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.065056665 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.270864069 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.00016039 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.710739031 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.084481419 seconds)
  done (took 3.896533293 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 0.227993048 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.12838073 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.0675e-5 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.4327e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 6.1815e-5 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 0.058935716 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 0.156199411 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.111812683 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111625025 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.4932e-5 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 3.9859e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 1.1922e-5 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 8.453e-6 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 1.1419e-5 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 1.2444e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.0056e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.034e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.9779e-5 seconds)
  done (took 1.601164356 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.225577865 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.102126641 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.059814686 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.0021e-5 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.109667451 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.04587592 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000800888 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.069500742 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000740932 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.0519e-5 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.06077663 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.035627276 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.05438841 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082751093 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 0.029570235 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.050340823 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.055196605 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.109420218 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.1531e-5 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.00261062 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.9517e-5 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.05175129 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.08722357 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 3.8645e-5 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.9572e-5 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000930172 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 4.1734e-5 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037642711 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.002308652 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 9.4786e-5 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.6684e-5 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 1.4178e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.06705208 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.1162e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000710573 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 4.6754e-5 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 8.864e-6 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.00108065 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000679181 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.3896e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 6.1178e-5 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.3608e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.5641e-5 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000716772 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000133438 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.6583e-5 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.6435e-5 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.7862e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 8.391e-6 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001003187 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.0156e-5 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 4.4054e-5 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0524e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.9332e-5 seconds)
  done (took 2.143783376 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059441536 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.189645252 seconds)
  done (took 1.013705153 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 2.652487814 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.230092927 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.41201358 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 0.221681141 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.110084054 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.377354892 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.098872135 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.111336432 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.104418876 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.122762005 seconds)
  done (took 5.213364828 seconds)
done (took 20.029486911 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 0.102404284 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 0.12469264 seconds)
  (3/8) benchmarking "fib"...
  done (took 0.024098913 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.690525177 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.059164134 seconds)
  (6/8) benchmarking "parseint"...
  done (took 0.037976072 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 0.039544591 seconds)
  (8/8) benchmarking "printfd"...
  done (took 0.169867548 seconds)
done (took 2.025236803 seconds)
(7/23) benchmarking "parallel"...
done (took 0.794901203 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 0.520250769 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026023795 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.138690394 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.326995101 seconds)
    (5/9) benchmarking "Date"...
    done (took 0.021505067 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.149534601 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024838542 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024797659 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 0.021039605 seconds)
  done (took 2.063152803 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024159594 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022954587 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021341829 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02249885 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.026013907 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020796083 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.02321931 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020977436 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023196518 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021589659 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020552356 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026731588 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031164567 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.0216222 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.031786734 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021838624 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020888384 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021457698 seconds)
  done (took 1.214274238 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.034206196 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029683715 seconds)
  done (took 0.853050516 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 0.020001477 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018729354 seconds)
    (3/7) benchmarking "second"...
    done (took 0.020947933 seconds)
    (4/7) benchmarking "day"...
    done (took 0.018732627 seconds)
    (5/7) benchmarking "year"...
    done (took 0.019320019 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021739826 seconds)
    (7/7) benchmarking "hour"...
    done (took 0.021654149 seconds)
  done (took 0.932337218 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.124835915 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019456283 seconds)
  done (took 0.931643401 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 0.020428909 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 0.019193885 seconds)
  done (took 0.829467819 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020590228 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 0.036032671 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 0.020265364 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 0.033191942 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 0.034332311 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020764645 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 0.021521152 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 0.031139971 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021237947 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021122367 seconds)
  done (took 1.049543081 seconds)
done (took 8.654178328 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.023134311 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.066e-5 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022190733 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019329276 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.018958845 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018950804 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 3.1349e-5 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.024305928 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.021409136 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.01933164 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021042039 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.8888e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.0036e-5 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.1157e-5 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.1157e-5 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 9.907e-6 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 7.11e-6 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022733679 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.0942e-5 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 9.256e-6 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.053e-5 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.2195e-5 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 9.357e-6 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 9.348e-6 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 8.627e-6 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.021078894 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.8966e-5 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.4593e-5 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.1049e-5 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 8.418e-6 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 7.094e-6 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 8.058e-6 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 8.27e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 5.807e-6 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 5.901e-6 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 7.467e-6 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 6.834e-6 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 7.981e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.875e-6 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 5.276e-6 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 7.577e-6 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 7.556e-6 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.6102e-5 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.395e-6 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 5.867e-6 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.104e-6 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 5.183e-6 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.368e-6 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.446e-6 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020907228 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.6493e-5 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.204e-5 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.0348e-5 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 8.379e-6 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 7.545e-6 seconds)
  done (took 1.041839064 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.054649303 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042338331 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043733246 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037872476 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.027645199 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.042121841 seconds)
  done (took 1.039167463 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019047041 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02054217 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.4592e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 7.487e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.1829e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.433e-6 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.178e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.099e-6 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.548e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.11e-6 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.2262e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.015e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.446e-6 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.736e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.398e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.815e-6 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.527e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.824e-6 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.591e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 6.279e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.945e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.614e-6 seconds)
  done (took 0.832756855 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018734294 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.026e-5 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.798e-6 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.599e-6 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018580363 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.771e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.316e-6 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.796e-6 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.473e-6 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 9.777e-6 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.0161e-5 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 8.081e-6 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.329e-6 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.581e-6 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.428e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.753e-6 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.668e-6 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.673e-6 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.896e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.516e-6 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.224e-6 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.572e-6 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.746e-6 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 6.178e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.458e-6 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.367e-6 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 5.761e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.568e-6 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.441e-6 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.398e-6 seconds)
  done (took 0.829554216 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036644137 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.025985615 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.010594223 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.878e-5 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.4602e-5 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.1626e-5 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 8.568e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.753e-6 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 6.786e-6 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.243e-6 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.241e-5 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.2874e-5 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 7.744e-6 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 7.555e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.439e-6 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.186e-6 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 6.64e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.593e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.354e-6 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.525e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.806e-6 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 5.959e-6 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.011362243 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 4.171e-5 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.1204e-5 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.4268e-5 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 7.67e-6 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.528e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.527e-6 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 7.174e-6 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.578e-6 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.159e-6 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.108e-6 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.2526e-5 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.487e-6 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.344e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 6.274e-6 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.445e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 5.841e-6 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.333e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.944e-6 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 8.703e-6 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.9988e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 8.077e-6 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.165e-6 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.708e-6 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 5.942e-6 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.105e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.849e-6 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.909e-6 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.629e-6 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.76e-6 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.415e-6 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.785e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 5.637e-6 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.665e-6 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.681e-6 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.434e-6 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 6.06e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 5.972e-6 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.64e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 5.867e-6 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.662e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.402e-6 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.368e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.545e-6 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 1.2327e-5 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 6.236e-6 seconds)
  done (took 0.966336786 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015834556 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 0.02017286 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015348515 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 0.019002201 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020425091 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 0.01935647 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.020004922 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020384045 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 0.019649833 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 0.020034245 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016419657 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.023358122 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016275084 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029622669 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023326007 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.021096866 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016019295 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019991171 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019819742 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020059762 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019654768 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020243172 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.019732952 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021254866 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019532168 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015830012 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 0.019580457 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020375052 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015831031 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 0.021204178 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021214081 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.01604152 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024543177 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01940154 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019891811 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 0.015829075 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015862452 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019925999 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01585567 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 0.01945048 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.01587524 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020377025 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020438658 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.02089532 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.02006311 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015901604 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019585081 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 0.020234756 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 0.01951508 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 0.019447504 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.01583979 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 0.015937687 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015858999 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 0.02094052 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021836922 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023491584 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019302605 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015813273 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.020031194 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020919425 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.02034624 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 0.019526454 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.0158642 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019468501 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020642892 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01581311 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019685574 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020217761 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 0.021112118 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015904126 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015916705 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019525043 seconds)
  done (took 2.17959968 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01732505 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018391481 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01875921 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.000151604 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017087147 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.6847e-5 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.0527e-5 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017303079 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.6296e-5 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 8.909e-6 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.3376e-5 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017614611 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 9.0463e-5 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.2506e-5 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.374e-6 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 1.2555e-5 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.706e-6 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 7.6e-5 seconds)
  done (took 0.903130254 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019019322 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.0908e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.623e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.91e-6 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.083e-6 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.645e-6 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.962e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.313e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.032e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.023e-6 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.0007e-5 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.601e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.228e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.543e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 6.201e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.238e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.832e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.725e-6 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.174e-6 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.607e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.782e-6 seconds)
  done (took 0.814190364 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018609637 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0894e-5 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018732467 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.533e-6 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.541e-6 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 1.0366e-5 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 8.188e-6 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.743e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.784e-6 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.057e-6 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.517e-6 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.325e-6 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.061e-6 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.531e-6 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.37e-6 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 5.376e-6 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 8.675e-6 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.479e-6 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 5.685e-6 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 5.501e-6 seconds)
  done (took 0.832289916 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.05192835 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.069e-5 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.966e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.463e-6 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.131e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.05e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.047e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.077e-6 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.979e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.098e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.0036e-5 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 6.509e-6 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.75e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.774e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.804e-6 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.55e-6 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.485e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.38e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.786e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.685e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.698e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 6.532e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.449e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.945e-6 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.052e-6 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.44e-6 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.782e-6 seconds)
  done (took 0.846986651 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018687363 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 9.588e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.926e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018636389 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 7.482e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.935e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.126e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.551e-6 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.424e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.226e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.482e-6 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2266e-5 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.284e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.827e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.378e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.051e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.887e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.052e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.158e-6 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.443e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.03e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.905e-6 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.643e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.651e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.862e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.324e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.019e-6 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.566e-6 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.319e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.213e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.689e-6 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.015e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.943e-6 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.706e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.874e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.776e-6 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.205e-6 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.974e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.607e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.011e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.157e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0456e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.758e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.185e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.713e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.357e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.444e-6 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.031e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.734e-6 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 6.082e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.017e-6 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.181e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.073e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.792e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.819e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.516e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.719e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.924e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.769e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.507e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.743e-6 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.753e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.698e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.612e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.95e-6 seconds)
  done (took 0.835801076 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018595163 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 0.018649661 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017188217 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.1281e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.0308e-5 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.554e-6 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.6787e-5 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.384e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.963e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.747e-6 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 6.6332e-5 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.921e-6 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.296e-6 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.217e-6 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.715e-6 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.559e-6 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 1.0094e-5 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.775e-6 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.553e-6 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.701e-6 seconds)
  done (took 0.84995846 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021491553 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019500492 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 0.018648506 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020444806 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026003429 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.026289808 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 0.01935287 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 0.020330131 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 0.019728823 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019951764 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020574231 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 0.020922589 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020451954 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020212445 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020878179 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 0.020080728 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021861547 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 0.019576647 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.026733394 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020675811 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 0.019601157 seconds)
    (22/49) benchmarking "13786"...
    done (took 0.035496121 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033096318 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020304177 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021829329 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 0.019537541 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026146589 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 0.019765282 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 0.019387081 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020591603 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020896351 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 0.020824226 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021049012 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 0.019605612 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 0.021580948 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.047181415 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020752668 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 0.019225136 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020739294 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 0.019474103 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020775054 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 0.019614904 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 0.019738176 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021996549 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 0.020247169 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 0.02097089 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 0.019327117 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021052087 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 0.019961075 seconds)
  done (took 1.871604377 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020396688 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018646899 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.0956e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 9.736e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 9.284e-6 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.008e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.103e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.653e-6 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.57e-6 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.316e-6 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 8.863e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.337e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.284e-6 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.078e-6 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.027e-6 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.133e-6 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 4.883e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.036e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.104e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.873e-6 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 5.857e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.112e-6 seconds)
  done (took 0.83748428 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018698889 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020521619 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.1281e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.1755e-5 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 7.247e-6 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.423e-6 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 9.721e-6 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 6.176e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.671e-6 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.662e-6 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 9.738e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.427e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.046e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.916e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.82e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 6.078e-6 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.727e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.941e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.548e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.415e-6 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.528e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.812e-6 seconds)
  done (took 0.836625802 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018710465 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.0057e-5 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01863819 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.0034e-5 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 9.435e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 8.545e-6 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 6.311e-6 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.396e-6 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.225e-6 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.638e-6 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.016e-5 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.438e-6 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 5.555e-6 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.366e-6 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.026e-6 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 4.995e-6 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.569e-6 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 5.699e-6 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.265e-6 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.239e-6 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.117e-6 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 4.939e-6 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 4.94e-6 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 4.852e-6 seconds)
  done (took 0.837775864 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 0.019931347 seconds)
    (2/2) benchmarking "indexed"...
    done (took 0.020034648 seconds)
  done (took 0.837546692 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018621335 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.0701e-5 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018492906 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.1503e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.206e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 8.875e-6 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 1.1259e-5 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 6.02e-6 seconds)
  done (took 0.834213196 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020706025 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020548568 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.2906e-5 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 1.1223e-5 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 6.981e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.138e-6 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.804e-6 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.35e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.491e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.214e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 9.541e-6 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 5.578e-6 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.467e-6 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.059e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 4.928e-6 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 4.868e-6 seconds)
  done (took 0.837875868 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018658431 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.1657e-5 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018389529 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 9.917e-6 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.941e-6 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.202e-6 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.255e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 7.421e-6 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 1.095e-5 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.854e-6 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.0681e-5 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.564e-6 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 5.156e-6 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 8.524e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.783e-6 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.15e-6 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 4.959e-6 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.824e-6 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.245e-6 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.672e-6 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.89e-6 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.599e-6 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 4.87e-6 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.226e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.882e-6 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 5.573e-6 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.046e-6 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.832e-6 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 4.984e-6 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 4.923e-6 seconds)
  done (took 0.834306558 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018872604 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.0275e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.077e-6 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018447658 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.1871e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.736e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.931e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.112e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.108e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.298e-6 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.2002e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.153e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.91e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.221e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.433e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.4e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.802e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.182e-6 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.431e-6 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1843e-5 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.337e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.942e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.393e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.5e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.372e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.813e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.463e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.91e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.07e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.186e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.174e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.19e-6 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 4.896e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.677e-6 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.882e-6 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.151e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.228e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.497e-6 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.217e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.133e-6 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.191e-6 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.116e-6 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.5936e-5 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.905e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.061e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.362e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.995e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.618e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.658e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.986e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.714e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.432e-6 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.047e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.203e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.963e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.349e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.357e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.116e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.31e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.195e-6 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.317e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.318e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.039e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.916e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.031e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.213e-6 seconds)
  done (took 0.835231597 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.018790043 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.0294e-5 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018362173 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.149e-5 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 7.019e-6 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.859e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 6.394e-6 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 1.1955e-5 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.18e-6 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 7.224e-6 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 9.642e-6 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.156e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 6.363e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.657e-6 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.513e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.89e-6 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.754e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.236e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.268e-6 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.866e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.951e-6 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.835e-6 seconds)
  done (took 0.837633671 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019421587 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019519141 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.4008e-5 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.455e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.371e-6 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 5.758e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.608e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.91e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.369e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.269e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 8.76e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.373e-6 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.238e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.951e-6 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.211e-6 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.238e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.61e-6 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.079e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.239e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.369e-6 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.151e-6 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.336e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.43e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.107e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.144e-6 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.196e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.59e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.325e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.599e-6 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 4.992e-6 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 4.735e-6 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.369e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.446e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.711e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.594e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.156e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.292e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.295e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.29e-6 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.599e-6 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.132e-6 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.006e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.7927e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.179e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.32e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.736e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.263e-6 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.935e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.372e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.366e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.405e-6 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.3e-6 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 4.966e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 4.962e-6 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.251e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 4.828e-6 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.312e-6 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.399e-6 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.569e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.995e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.237e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.199e-6 seconds)
  done (took 0.837352557 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017263311 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018212273 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.018751493 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.7432e-5 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 6.323e-6 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.249e-6 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.032e-6 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.5146e-5 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.665e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.935e-6 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.0325e-5 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.758e-6 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.651e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.788e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 6.494e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.953e-6 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.416e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.000285794 seconds)
  done (took 0.852658999 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022994945 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027520476 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022130346 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021021216 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020452548 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022134793 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022194925 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020409253 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020033503 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.029681244 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019505664 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.023601218 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02168688 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.022770996 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.021064065 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020341549 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021066854 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027603416 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.020910689 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020977162 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019232473 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.021837245 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022319452 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.02001034 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021798583 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020527369 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024299915 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.024519314 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020531708 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.02142863 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.02137851 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.02131027 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.028174177 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023205879 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019420624 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022376028 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022721084 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020792607 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021176319 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.021785744 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023066427 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021223591 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.02098256 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023475481 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021366202 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020516174 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021522081 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019853346 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.021185073 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.022539549 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019442785 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020963532 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.021120434 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022229907 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02258134 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.023004558 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.023016149 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.02234659 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.023354072 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021759303 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020359069 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.021015846 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.022346899 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.022476278 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022577077 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020870431 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021785226 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.021651401 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.022127411 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024666184 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022948278 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.008859472 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.031575652 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020097126 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.0219535 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020397538 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020844759 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021020276 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027524045 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021027625 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021134775 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020925426 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021340497 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021976439 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026960913 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020802995 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019324643 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02043726 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020428223 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.022635293 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0214914 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027526924 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027370354 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021220036 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022501227 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.028143892 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021012002 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.022319236 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020360988 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023907946 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019779332 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022388525 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019635087 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021431869 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021516032 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024696667 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.023147729 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.020100497 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019782257 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023333525 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022365297 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019329461 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.02004185 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021431562 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022211988 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020278812 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021417195 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021561464 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019499144 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020849531 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022365045 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.023195027 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024335281 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.022310143 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027743947 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021254581 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.023700355 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.022003435 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019693408 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020213378 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.023090947 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023908527 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022625934 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008831184 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019686326 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020966358 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.02279868 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021076599 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021965978 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.023136127 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021912387 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.00320527 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019966815 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.027951061 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.021115197 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023553938 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019491192 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023840171 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021170502 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027010228 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021504371 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024108842 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021009086 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021625029 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022287691 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020463525 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021027024 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020650824 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021619147 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021708813 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021437867 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019585623 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020428015 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.023068222 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021081776 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020036788 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01938429 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021117789 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.021467999 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.022447155 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026959671 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019984244 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019281948 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.02033203 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020892668 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.02299946 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024363331 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.023375103 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02123265 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020182682 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022992129 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023448933 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.0205775 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.021182766 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023707839 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019256786 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020147841 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020589239 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028034462 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02739966 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021642665 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020392027 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026677203 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020916455 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.02167685 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020239308 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021708299 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022516245 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019616484 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027604469 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023770604 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022936404 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023167964 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021043566 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020514954 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020533887 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027747874 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026626237 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.022291153 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021864266 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.023226009 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.02132669 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003143869 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020989775 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020223928 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021418057 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022575275 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021124072 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02098544 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021298573 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023163447 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021089545 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020945454 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020890925 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021294165 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022362152 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.020039513 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.023598873 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.023072402 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022422693 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020401478 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.020023501 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020308921 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022487232 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022732269 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02256494 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022863387 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021769511 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003291603 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021260321 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020495405 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020395237 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021455512 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019168498 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021413837 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.02017634 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02124116 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021751034 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.02128224 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024173667 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022259969 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020609688 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019710311 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021182253 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019660402 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021848666 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.024463075 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023798415 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.00400276 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.022055425 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.023268531 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.024966608 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.022028587 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021074876 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022317422 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020766013 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021002418 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020710352 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027959596 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026666548 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.023126589 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020592987 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021729092 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.020077507 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023073686 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021586699 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022368642 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021381912 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021066996 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020991182 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02027327 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019584734 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01997243 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020250092 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019865144 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020781436 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020294524 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020908407 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022275586 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020557422 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021668919 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025711172 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022640683 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019357889 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022652832 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023049238 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020389926 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021075128 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022382681 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021369819 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019738105 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022142298 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021799596 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022963656 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021754565 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021458597 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.02056999 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021096233 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022594059 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021370964 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022844656 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021586677 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021617357 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019208141 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019597849 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021882647 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020171075 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020571851 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020356997 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026779964 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020566549 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021607634 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022572852 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022230133 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023476806 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028081049 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021855471 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020449792 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020496988 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020591799 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020417886 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.022008387 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020874095 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020583025 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021964374 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.02034748 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.021168068 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026482993 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021007383 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.02072711 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021502177 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019298816 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022295154 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025103754 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.021082852 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021574785 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02405479 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020368382 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020250419 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021707564 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020973159 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019307358 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022079212 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020695419 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.023088814 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020619472 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020360097 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020831542 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026515129 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022450739 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026443263 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.023235706 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.023025591 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025822904 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.026739384 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003126661 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019213796 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021035821 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022091209 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.02108918 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020080105 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022387829 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022428859 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.02101215 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020501189 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021014866 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021251455 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020577399 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021410359 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.01942313 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020930346 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021770371 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026851081 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020192277 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021821954 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022160173 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008907196 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020252354 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020256252 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020010072 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021602567 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026616406 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020830113 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020335087 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021794414 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021971155 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019441248 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021110168 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019963592 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019242566 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021698833 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026976619 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020589782 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020334214 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020384856 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022980938 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021963209 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.02052256 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.022028761 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022791597 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019921627 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022269822 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020272805 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021123495 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021869563 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.01993238 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021628371 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.02142693 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020883351 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020430752 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023925913 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020487436 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020957278 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021576059 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004091184 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019949108 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019757195 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022057988 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021274579 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021621857 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022692792 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019620184 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026779726 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020662957 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.02035946 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02120511 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021958066 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022356751 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02227714 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020124997 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.02105576 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022542312 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019274897 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.02074231 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022474512 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020803389 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.02110007 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022729695 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020726218 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020920781 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020708697 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021118415 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020902627 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022318572 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02096986 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022007707 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020135275 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021227301 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02372077 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003285628 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.022084139 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022337052 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.02220439 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003831244 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021363089 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019957267 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023336002 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020242558 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.021902374 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021207903 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.004561856 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020199104 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.02023738 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.021772981 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022737052 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019799365 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019896268 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020020234 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019309801 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019620913 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020352797 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020257972 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.02151763 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026318596 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021081186 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020991973 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022898791 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020479569 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021708069 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021623882 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021811868 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.02024238 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019496251 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019059491 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020247565 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020398327 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019988828 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020858581 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019822824 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021397282 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020145736 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020804318 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021728184 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020656859 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026362713 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025953831 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020760848 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01916026 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004250877 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019999612 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022875009 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020659311 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020896744 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022128922 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019863146 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023991849 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021445581 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023598026 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020233428 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.01970302 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019933123 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019593347 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026300322 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020809307 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021674347 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020867763 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020221887 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022420246 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022947093 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019732604 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019789195 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020073528 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025695083 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021189378 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019893544 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020118588 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026829068 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020700726 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022055032 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020459938 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021449649 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021969566 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025477492 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020828463 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019107554 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020762632 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020298209 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.01905032 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020571105 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019386082 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020292994 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023047356 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021302512 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021473321 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021344011 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.022027144 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020237814 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022952907 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022366078 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020174976 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019995341 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020605211 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020520585 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.02025051 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003779881 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021802397 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019404744 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020798965 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020057054 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019084425 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025296815 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019172882 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020346123 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02113263 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020281348 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027876663 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021369199 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020931348 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022700575 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019325761 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.02146014 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022599474 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.019962906 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021626136 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020055418 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020221993 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021521002 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021666846 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028577893 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003732126 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.023102544 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022971221 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020230519 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021774697 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021365594 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020698707 seconds)
  done (took 13.521738012 seconds)
done (took 37.37702829 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 0.021974851 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021523808 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.0215886 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 0.021389619 seconds)
  done (took 0.918446161 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.20694768 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.130414695 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 6.2706e-5 seconds)
  done (took 0.981028842 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033678959 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034427274 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.038521511 seconds)
  done (took 0.949982878 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.059552207 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053341625 seconds)
  done (took 0.953244523 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 0.058546177 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 0.064493268 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.053265979 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022640609 seconds)
    (4/4) benchmarking "Float64"...
    done (took 0.026716798 seconds)
  done (took 1.01234214 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039571422 seconds)
  done (took 0.881954714 seconds)
  (9/15) benchmarking "18129"...
  done (took 0.16911552 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.265722983 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.141083663 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.083224311 seconds)
  done (took 1.333579096 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.091327423 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036424403 seconds)
  done (took 0.976266417 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.063483348 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.061218673 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.056456667 seconds)
  done (took 1.028643861 seconds)
  (13/15) benchmarking "20517"...
  done (took 0.060510418 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.080138115 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.148502919 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.035896811 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.5951e-5 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 0.081299046 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 1.1305e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.1241e-5 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086528068 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.108981439 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.4853e-5 seconds)
  done (took 1.392905506 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 0.030457965 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044413498 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 0.019300002 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 0.019667544 seconds)
  done (took 0.968325067 seconds)
done (took 12.744000798 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.117965237 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.037442482 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.229589046 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.033471976 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026693795 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.055625928 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.112366016 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.177544362 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.07008868 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.110711248 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037484889 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.029916154 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.03016595 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.118251045 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.054329536 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025478574 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.035525342 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.115381478 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.072681902 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.037283975 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.033586389 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029505831 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029925571 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029576399 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030005861 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030374224 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029471147 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.19094964 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.276580599 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032963738 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.039617366 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.0376e-5 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.03759367 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.201845339 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.037298278 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.117875942 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.095128739 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024594866 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.06168418 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.033224889 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.10964658 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026356581 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.175041998 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.111295328 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.037727904 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032667814 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097978758 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.035559428 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.030076435 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031459379 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045760047 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.177112802 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.144805854 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.03041402 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.040454103 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.035076479 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.251083431 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030040021 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.107749586 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.051047145 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024733174 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029970245 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02988207 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.15633783 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 6.5366e-5 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.16474813 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.033142317 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.031096888 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.07046158 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.113327104 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.9374e-5 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027679893 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.029898557 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.133231924 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.11012222 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.029621763 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.088841425 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.109833293 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.111634106 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031414293 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 9.4749e-5 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.096711438 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067597329 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029501932 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000988336 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.044748449 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.065084722 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029508262 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027928145 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.112647948 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029436157 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029928909 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.029239541 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001078423 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.036132773 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 7.8947e-5 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036515579 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.02749725 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.2859e-5 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.028558252 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.133770037 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.088919819 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 6.8079e-5 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.029090362 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029521627 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.11332071 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030059208 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.085520846 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029624308 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.176528865 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.131992464 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.036198847 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.5611e-5 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.025109475 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.130931367 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.123668929 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025997291 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028875343 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029143035 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.030536516 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 8.743e-5 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000847051 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.085305707 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.040417603 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.090211163 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.149590288 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.029634295 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.216040297 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.138649306 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.2817e-5 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.000122876 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.02607418 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046514692 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.0341206 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035809861 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.766e-5 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.240770623 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.033497001 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.026068418 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.0876215 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000848585 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.088701234 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.037694262 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029234276 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.030125276 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.121089732 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.039471327 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.117093233 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027716446 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.6321e-5 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001720938 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.177858717 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026805252 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029732529 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 6.5563e-5 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029595139 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.135921839 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.333458315 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 1.018820828 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035763402 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.033578377 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030269859 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.03075291 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043643386 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002542678 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049333922 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 8.2788e-5 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036955663 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 4.2215e-5 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029589923 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.034329602 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032339661 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.230347933 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046503978 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 4.2794e-5 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.054916984 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026849933 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.028809015 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.095751435 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.033553992 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.030165459 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.034027469 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031655566 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.034232238 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.043877159 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000146143 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029969514 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.035571593 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.8901e-5 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020088156 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.910914894 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.200388809 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 8.8214e-5 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.5755e-5 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.034017445 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.094137389 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.5963e-5 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.337e-5 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000104841 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.7264e-5 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.033899288 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.493432891 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.041827573 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.141620305 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.155428786 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.09528277 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.028853491 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031743154 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.4871e-5 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001499248 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028747001 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089640217 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034662007 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.248e-5 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.032722617 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030664544 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 4.07e-5 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.6709e-5 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033127949 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045432668 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.034240586 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.074117828 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.180199784 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.00216111 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.173246791 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.100799759 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.036681176 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000219357 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.8563e-5 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.1787e-5 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033944371 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.03775588 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.044168813 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.233261494 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.037863697 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.000113488 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.032070092 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.188921646 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.116110652 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.001854785 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.7462e-5 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.063618726 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031610207 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 4.9276e-5 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.001721864 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000123676 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.003049921 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032366943 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.136112948 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.028614238 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.1687e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.036708166 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028649961 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029496269 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 4.2576e-5 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028910488 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076398933 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.000101024 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037239402 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.934519172 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.000122357 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001740884 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.111272246 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 7.164e-5 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.141068886 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028681251 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.003188505 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031734332 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001259076 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.036555848 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.033601026 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 4.0821e-5 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 3.4603e-5 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000131896 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.0144e-5 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.5322e-5 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 7.2071e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.042843546 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000107273 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 6.801e-5 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029431215 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000130696 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036981834 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 6.5536e-5 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026644035 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000248752 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.032105496 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.032447619 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.04555315 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 4.4382e-5 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.029551429 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.9043e-5 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028535597 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.031448853 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027274074 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002296569 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.152834538 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036843266 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029636053 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.136715107 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 7.343e-5 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.029063614 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 9.9474e-5 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.109898854 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030044308 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044158395 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.034378311 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.027997135 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 7.1026e-5 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.9875e-5 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029882672 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3906e-5 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 7.0929e-5 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002617429 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029469891 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.0001144 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024280705 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034608652 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001743477 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066170671 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037508188 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.8122e-5 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.6311e-5 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.088689964 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001789578 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.037065641 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.6718e-5 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033883958 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.6738e-5 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.251607045 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.034009673 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 7.9199e-5 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.091134097 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.16e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.001387099 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031308342 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 3.5802e-5 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.109553892 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.05880086 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.1618e-5 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029786684 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.315355791 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.028576536 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 8.2689e-5 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 7.9394e-5 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 6.312e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.03415437 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.018755835 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001668985 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028783269 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.040127626 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 3.8948e-5 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.0215e-5 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.046128938 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.1641e-5 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 8.2975e-5 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.036331765 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.038194339 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.036072022 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.3983e-5 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.039116365 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.030912061 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.000108679 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000104401 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.026425788 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.6953e-5 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038854686 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.040054973 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.3009e-5 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002375477 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030513253 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 9.6733e-5 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 4.0121e-5 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.03526387 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.8933e-5 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 8.6653e-5 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.7574e-5 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.709e-5 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.5019e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.9278e-5 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 9.5935e-5 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068484328 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000113392 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.3197e-5 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000101359 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040971696 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 9.6846e-5 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000926253 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030416127 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.7176e-5 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027919269 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030799854 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.939e-5 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030450486 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030443674 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.0287967 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.6718e-5 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.482183529 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.3727e-5 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.039529549 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002465873 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.8283e-5 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032225742 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.9595e-5 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 9.8706e-5 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 8.7287e-5 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000109008 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 6.5567e-5 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037474674 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070116048 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.032580344 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 3.6913e-5 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000107377 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031858622 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.030200231 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 6.8603e-5 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.1412e-5 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000116329 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.9851e-5 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 7.7806e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.028030847 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 9.8324e-5 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.9028e-5 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.032930199 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 3.5226e-5 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 6.8196e-5 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000153547 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.035692496 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000134299 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.897e-5 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.156e-5 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.038005231 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.108e-5 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.114224054 seconds)
  done (took 24.216763596 seconds)
done (took 25.069661434 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.093176539 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 0.030478171 seconds)
  (3/4) benchmarking "arrays"...
  done (took 0.053966981 seconds)
  (4/4) benchmarking "structs"...
  done (took 0.061833657 seconds)
done (took 1.205435976 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.036194247 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.063336642 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037531536 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040405313 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.04202798 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.039793939 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.049132616 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.044859096 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042906773 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035659071 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025794323 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.039552406 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035775529 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.6837e-5 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.048031992 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.027238581 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043375708 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035138059 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.041704844 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.05244313 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.002467482 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.6608e-5 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.025335417 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001096601 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.9889e-5 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.6077e-5 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.031467921 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.034872868 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.025769233 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.21e-5 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.1428e-5 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.108e-5 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 8.435e-6 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 8.915e-6 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.029383759 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041286396 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.6395e-5 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.040636926 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.038929085 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.029350726 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.040710736 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.9009e-5 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.036124924 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001103276 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.030061349 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002517482 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035011351 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.1007e-5 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.7993e-5 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.0367e-5 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 9.015e-6 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 5.783e-5 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.03723376 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.7138e-5 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.030837438 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.5402e-5 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.042916187 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.862e-5 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.024055204 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.8367e-5 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 7.7159e-5 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.001094422 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 9.338e-6 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.0558e-5 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 8.035e-6 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 6.653e-6 seconds)
  done (took 2.30988953 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.038597363 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020923092 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.033827265 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035007586 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.031128594 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022117169 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.1369e-5 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023860718 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.7297e-5 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 8.448e-6 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021208548 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025573693 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.024896573 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.024912541 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.8735e-5 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.02186048 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035122058 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.036666846 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.0237556 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.3483e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.051754451 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.022059421 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.2175e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 7.056e-6 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020906359 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024160624 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.020549127 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.2215e-5 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.4086e-5 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 8.638e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.0199e-5 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 5.479e-6 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 6.654e-6 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 9.082e-6 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024383438 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.9238e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.2933e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021075076 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.3953e-5 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.8881e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 7.597e-6 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.024378962 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 4.9406e-5 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.4232e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.3978e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.021272857 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021673136 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.8401e-5 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.1309e-5 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.4263e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.7684e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.1719e-5 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.02491501 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026067719 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022485112 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.4214e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.941e-5 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 6.267e-6 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 9.007e-6 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 9.587e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 9.388e-6 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.908e-6 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.642e-6 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021163429 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.1707e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.1741e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 6.243e-6 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 8.834e-6 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.0609e-5 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 5.295e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 9.479e-6 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.02434293 seconds)
  done (took 1.74222878 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.042085297 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.069876188 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.034621264 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.02025513 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021377552 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.032393863 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.021287078 seconds)
  done (took 1.194587078 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.039148554 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02915116 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.02443386 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019854099 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.024119385 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023822312 seconds)
  done (took 1.113354683 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020690017 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.023952557 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021631054 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.04985413 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023497932 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021794503 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.028239385 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024355629 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020624848 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.03158427 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.02178298 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.05460349 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.031769302 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.039383806 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034007521 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020466573 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.052900917 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064249228 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023918688 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.034184394 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021352353 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.044418039 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.03005489 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023387461 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024092289 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019653976 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021768147 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021093125 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037736494 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030442088 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025873552 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023909107 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024878316 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.02202351 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022379662 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022907909 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.03096466 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.036280154 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025062695 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.035281184 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022605034 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.040698292 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.028447572 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02185259 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022806053 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.033572391 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021580937 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024943843 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022609065 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022161439 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.02030828 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02195341 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.035005197 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.030888493 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.030892209 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.031690716 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022267001 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022188607 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.02217416 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021434548 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022399384 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.036638958 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.035292113 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034172029 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.025230929 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029585505 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022229956 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023829929 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.051633636 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.022368572 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025904021 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024878295 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021767954 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021680769 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.02161689 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.02317105 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022060395 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034701771 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024512767 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022476693 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024554559 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.031174275 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.01929742 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.025637161 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023276016 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.02492138 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.035309559 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025262398 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034953839 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023399901 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022925335 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022793914 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025944178 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.022355576 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025788751 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023822732 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022761039 seconds)
  done (took 3.642252343 seconds)
done (took 10.950528612 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 0.121727754 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 0.534228912 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 0.076899883 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 0.106052356 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.068016816 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.096232859 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 2.807000835 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 0.1254941 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 0.414652933 seconds)
  (10/12) benchmarking "nbody"...
  done (took 0.077486133 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 0.05616395 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 0.121968728 seconds)
done (took 5.567853905 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.097041652 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.23815076 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.069455114 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.117399114 seconds)
  done (took 1.484298071 seconds)
  (2/6) benchmarking "26942"...
  done (took 0.059458344 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.297535184 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.121225575 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 0.164830181 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.162650629 seconds)
  done (took 1.722057102 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.037411067 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.036518368 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.020429718 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 0.02568247 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.029186503 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 0.025017768 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029858436 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.02052384 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.090985975 seconds)
  done (took 1.328731618 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.061400179 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 0.045852187 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.036826299 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 1.4992e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 7.068e-6 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.033090739 seconds)
  done (took 1.15643613 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.273122307 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181862207 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.279366039 seconds)
  done (took 1.711001671 seconds)
done (took 8.438963947 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040754292 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 0.180085282 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.207792587 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.035901108 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.270295273 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 0.101338656 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.229468383 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.415257505 seconds)
    (9/13) benchmarking "Float16"...
    done (took 1.021609501 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 8.649016085 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.980821796 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 0.929395682 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.974794465 seconds)
  done (took 23.0142288 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 0.03100718 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.0285347 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.417171813 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 9.19e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.095320074 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.036332557 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.130458999 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026746173 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.03528338 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.030282418 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.024192542 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.5144e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.4831e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025324103 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.115804459 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.3609e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.593276937 seconds)
  done (took 9.626401047 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 0.056312206 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 0.03005968 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 0.036037408 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 0.063730682 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 0.031700447 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 0.033390958 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.031020823 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.026370755 seconds)
  done (took 1.372792354 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.8011e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 8.473e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.7339e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.431e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.294e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6372e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.956e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.511e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 7.109e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 6.623e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.346e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.75e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.805e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.255e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.0058e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.987e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.011607102 seconds)
  done (took 1.052213186 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.160479832 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.159310225 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.058699351 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.134385072 seconds)
  done (took 1.552198622 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.8348e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 1.4314e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.9993e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.884e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.399e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.8672e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 1.9559e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.23e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 1.4127e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 1.1376e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7855e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.674e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.536e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.113e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.8886e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.86e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.000434846 seconds)
  done (took 1.044968951 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 7.2747e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.000557836 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000357002 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000347397 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.3649e-5 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000345504 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.000962922 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000531408 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.000600571 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.000547449 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001033735 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000333847 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000362793 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2255e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.000888278 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000321176 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.016497398 seconds)
  done (took 1.064713143 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.212129804 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.206574957 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.060284131 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.076348008 seconds)
  done (took 1.591932942 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 3.9886e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.7311e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.3513e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.5803e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.157e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.7218e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.3053e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.3592e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.8993e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.8314e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.9392e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.3834e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.0367e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.671e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 7.8108e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.0869e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.001799097 seconds)
  done (took 1.051324692 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.070945734 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.085336867 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.053698449 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.06845465 seconds)
  done (took 1.318809825 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.5695e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 5.78e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.895e-6 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.364e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.96e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5233e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 8.314e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.165e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.184e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.111e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.095e-6 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 3.969e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.61e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.375e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 7.039e-6 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.129e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.8568e-5 seconds)
  done (took 1.04778601 seconds)
done (took 44.724699551 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.172762427 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.022057575 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.016869237 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.045087982 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.015345269 seconds)
  done (took 1.313327252 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.612725243 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.953212758 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.045355036 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.814165844 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170089606 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.643912687 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005522805 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142095338 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.517698045 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.312256329 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009300848 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.09712053 seconds)
  done (took 27.368897106 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.091890961 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.101198821 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.280073308 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105816437 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.223450697 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.222690766 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.321406073 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.184886389 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.329131394 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.524433814 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.041119823 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058988432 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0243767 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.212408345 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067593575 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092956737 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.353916947 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.039427097 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065720713 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.146316798 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000375214 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021520561 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17644624 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068779926 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.089365106 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114159527 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.218194439 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042466578 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000123652 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037677928 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043436206 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041401626 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074461936 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064542188 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08721762 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043255447 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023885231 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.00012495 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034403519 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031861276 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04070165 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052041507 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020267495 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.04830222 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 0.048835496 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030698543 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095086646 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.013451616 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04538185 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.03488496 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061122607 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031437176 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.242199198 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140358266 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041220536 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03573692 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039193375 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08158505 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081355901 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037514936 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016139518 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000107185 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000309109 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028406218 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03757725 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.323233238 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.5107e-5 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02459181 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014872467 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087803622 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023919663 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052728661 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052191934 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022093116 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 3.0226e-5 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03262627 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041556215 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042561836 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064278416 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041485964 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053178126 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083940112 seconds)
    (83/608) benchmarking "6d"...
    done (took 0.267562536 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026164624 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.3619e-5 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.042175392 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000215893 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111514849 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076331017 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05820483 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038537705 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040352803 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063135385 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.04022582 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158977354 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025306709 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036717086 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022067952 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.6597e-5 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023086645 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041468356 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083883817 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06193302 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 0.069717121 seconds)
    (105/608) benchmarking "5d"...
    done (took 0.142047258 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.012444616 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057814128 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.042348226 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048518906 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026329729 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034126806 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042746458 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037874792 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04821178 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049286998 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.022857452 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02207089 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082827841 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.025348949 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0708644 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 7.1899e-5 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043004625 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029111239 seconds)
    (124/608) benchmarking "3d"...
    done (took 0.067241616 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040381185 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.041626907 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046546376 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.053628985 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067544482 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063951536 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063530322 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027686496 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029759145 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020226321 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029061583 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057770652 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091269968 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000164353 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053796621 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027295291 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000294439 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06897943 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033962122 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024088238 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.052806193 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.018790171 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056736994 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081477478 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.0002199 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084399252 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 9.8396e-5 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.0388e-5 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031059688 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000111717 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.9613e-5 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040613526 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031804219 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.7904e-5 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.062115848 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048500136 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044878539 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032981102 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045267149 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.02296238 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.021099669 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037883481 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05602908 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057344328 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05960555 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034261186 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017868604 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013276573 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015583326 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024731499 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038815378 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071554861 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057910082 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.0914e-5 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064283324 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029610731 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070549688 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05562066 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.034056065 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000444682 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044556482 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047544123 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026849482 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104083407 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048452604 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048721595 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05777396 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020873651 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.350719828 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023353174 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.1854e-5 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044914948 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.9251e-5 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076339295 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082018208 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022214689 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033693869 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.017171976 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.019349744 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.017693919 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042946554 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 7.5063e-5 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000568254 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025774938 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.037969766 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02034844 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056544107 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022122984 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059794582 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065403313 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.2349e-5 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060725289 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048331889 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0632083 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041617376 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053584652 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025524832 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0400934 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000310128 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000530355 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035104167 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023999071 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050409719 seconds)
    (228/608) benchmarking "7d"...
    done (took 0.282350354 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050720645 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026149094 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012911064 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041356596 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.040915579 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050762998 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017925542 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.079230182 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.018003569 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056279665 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042389252 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.016217709 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020767326 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022095512 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.060121235 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061201598 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2283e-5 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.040039052 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01821149 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048204983 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.031752446 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.019600096 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06066244 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.5641e-5 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021044916 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027175484 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018621204 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026367387 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.018846991 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000112328 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083680306 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054878063 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022729585 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.1777e-5 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01091152 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052764831 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043901936 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067646387 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035326848 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.028444935 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043544585 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013949001 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018839768 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042456721 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079897099 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051734543 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079673543 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062854985 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1221e-5 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000296284 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064699669 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031852896 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052296231 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046513098 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048346114 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033897243 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080802041 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044829335 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.00025885 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024652526 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0548156 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054949481 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026020115 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.070388839 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046869518 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026485239 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035165304 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059666332 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016933067 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028355696 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051582069 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042021228 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057181216 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.042613275 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.057609472 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.058902256 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.01685296 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018867579 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042621074 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048163102 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08788946 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040299341 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022273614 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039694541 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093106283 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045579602 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043287772 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027918695 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047760905 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000165231 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020691044 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016404834 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051208369 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060002618 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014451563 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033297285 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018717818 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02933293 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043687065 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0487e-5 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064780812 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053089164 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055135087 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028209971 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045427925 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015021649 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048364136 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062322091 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.039539741 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000487323 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000344375 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035840879 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.057691386 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065466442 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024067775 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046599958 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.2079e-5 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072370724 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070137594 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065186695 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069215211 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051084855 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070898608 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017132988 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093824913 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000115514 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.2134e-5 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018161447 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075102471 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025231237 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.02911624 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2531e-5 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031112835 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023208965 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01667911 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067728414 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018754056 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000150878 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092529487 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062985922 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061158028 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017430053 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000124399 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04587937 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.1183e-5 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015811001 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035407003 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.014188034 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033966661 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051700457 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04673328 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011108706 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015920084 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03926717 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03295505 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044806367 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.210102662 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.4428e-5 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028321149 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023173425 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025109976 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000485518 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042468038 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02553097 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026499405 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055637699 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010963127 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066071616 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010216471 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015933768 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088712749 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047914566 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054067694 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021527966 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.1829e-5 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085335454 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063837174 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022567859 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4407e-5 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021661035 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013120017 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029143866 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044020702 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028695304 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045222879 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061533384 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059958019 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040524781 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0826189 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054376833 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051192638 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.3685e-5 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.9862e-5 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.5011e-5 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011658283 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024684645 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082177033 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070190723 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012476039 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016524051 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080792226 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.054653303 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057724744 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027985629 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034315676 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018361355 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018814433 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021006252 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063769853 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.8332e-5 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014441086 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025709539 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163080668 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015786596 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062801095 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075408755 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000155629 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.035825806 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032563732 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024598513 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034881361 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039433268 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015675442 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.244663689 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059723094 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063364694 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.056183021 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040384644 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.021021783 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.3993e-5 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.4336e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03002367 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02194524 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.016887863 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078124024 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020274686 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.012078474 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063174927 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054557074 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022667482 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012522203 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.013850879 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 0.300006552 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062276742 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046175499 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067656102 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02036485 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1547e-5 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.031502895 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000333094 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000301511 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048656239 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.2252e-5 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022461641 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044973854 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034695228 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016612682 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2885e-5 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047114675 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046996618 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031230425 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077821873 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027919588 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.1879e-5 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027387697 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018290118 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033057657 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8057e-5 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051177043 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000397133 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070364776 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.359249404 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044905612 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026702912 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.01596308 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020307955 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042006545 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.8809e-5 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046327891 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015125031 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055387619 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037925813 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03044582 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024119748 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062303937 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044264054 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06813209 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054722704 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072421201 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018509198 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03929388 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063416622 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.022191543 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022960091 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055888428 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014852442 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046691972 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054270451 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.4433e-5 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156623777 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.019933425 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023513079 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046818 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.026688273 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.058039919 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.054191955 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02605548 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.063238458 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.019989882 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062018434 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045085821 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015417895 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06263217 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031914907 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.022207311 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032535752 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.9774e-5 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026342271 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032683089 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058472631 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053732414 seconds)
    (550/608) benchmarking "4d"...
    done (took 0.093469745 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076096371 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000110459 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.017967345 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01831491 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083805193 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014507237 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060366159 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000123478 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02879336 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045453355 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063841472 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013438107 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059662267 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053530244 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.038756549 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027681246 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016464375 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.01171165 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.058499164 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014967244 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029298396 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030238938 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040616411 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019285308 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01468333 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05085362 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098512914 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014319063 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058828051 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072767794 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5139e-5 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.0078e-5 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04531743 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054155289 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071079883 seconds)
    (586/608) benchmarking "2d"...
    done (took 0.05198152 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078188823 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060314843 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024477187 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05823837 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011414327 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046602414 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034319585 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.030424095 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.058941306 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.4199e-5 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.242358511 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.5685e-5 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027946448 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.3921e-5 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.5847e-5 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045610904 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056251512 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042670639 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.020034903 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053379663 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017980727 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088945738 seconds)
  done (took 29.764384816 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 0.136809226 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.12432936 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.096640684 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 0.032254487 seconds)
  done (took 1.543956322 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.0568878 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025024857 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 0.024544805 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025423664 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.04602493 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 0.03598219 seconds)
  done (took 1.364001804 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 0.04992731 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 0.038775781 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.094630647 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045711145 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028083358 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026767607 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.043333375 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.089548423 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037061212 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 0.031180902 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.027589231 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.036104122 seconds)
  done (took 1.697369104 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.039009044 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.4899e-5 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5752e-5 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 0.043755988 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 2.9222e-5 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 0.031701459 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 0.042632364 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.6225e-5 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.2569e-5 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 7.848e-6 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 1.9427e-5 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 6.446e-6 seconds)
  done (took 1.307468724 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.057199817 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065374427 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 0.060362882 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.058349578 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 0.217384434 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 0.042043134 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 0.040778389 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 0.040948105 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.053264473 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 0.227464056 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 0.035753615 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.041513431 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.025917939 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.06259939 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 0.054085061 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 0.035145997 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 0.088767868 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 0.075408722 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.053085486 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 0.053400936 seconds)
  done (took 2.53995384 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.047414477 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.053040312 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 0.049696894 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053268031 seconds)
  done (took 1.359575928 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.046548732 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040249972 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038265943 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027670898 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.047304872 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.041792966 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022853699 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038952362 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035493725 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045553793 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040761242 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034346144 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038697912 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045865134 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 0.02762281 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.04059235 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.041290111 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022693406 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033973176 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033858841 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026319751 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.02384147 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022654626 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.029230499 seconds)
  done (took 2.00040808 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.033556296 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 0.083742187 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 1.4701e-5 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 0.049814793 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 0.192648452 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.05176238 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 0.033304652 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 0.074652824 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002544322 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 0.547582099 seconds)
    (11/17) benchmarking "4467"...
    done (took 0.02966573 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.617e-5 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 0.004713715 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.004080589 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.3411e-5 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 0.00245012 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003373514 seconds)
  done (took 2.268347843 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.264233727 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.13489838 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.318239889 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.497085317 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.113494228 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.204305154 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.300580809 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.191086066 seconds)
  done (took 3.190584202 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039953862 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.052973646 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.052282964 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.064526153 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.041328214 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.047822345 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.05806764 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.046454452 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.033138066 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037375579 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.045611901 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.042293407 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.033139439 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 0.032072473 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025942446 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.044070691 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.05154346 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031845205 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.052872013 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.036075127 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020774234 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.047787283 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.052235425 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.048584179 seconds)
  done (took 2.205257317 seconds)
done (took 78.96904376 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 0.041133618 seconds)
    (2/4) benchmarking "identical"...
    done (took 0.021964489 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.3568e-5 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.668e-5 seconds)
  done (took 1.221922226 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 0.021145762 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02481828 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 0.03720296 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022220918 seconds)
  done (took 1.268929083 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 0.023080929 seconds)
    (2/3) benchmarking "equal"...
    done (took 9.189e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.091e-6 seconds)
  done (took 1.190681099 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020330769 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 0.023600577 seconds)
    (2/2) benchmarking "Char"...
    done (took 0.023175191 seconds)
  done (took 1.211820026 seconds)
  (6/7) benchmarking "join"...
  done (took 0.273271421 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 0.136240811 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 9.343e-6 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.467e-6 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 8.311e-6 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000203064 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 0.000577906 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 0.000967118 seconds)
  done (took 1.322214864 seconds)
done (took 7.675151635 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 0.148707407 seconds)
    (2/36) benchmarking "symv"...
    done (took 0.042486252 seconds)
    (3/36) benchmarking "dotu"...
    done (took 0.025215033 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 0.041492323 seconds)
    (5/36) benchmarking "scal!"...
    done (took 0.031514659 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 0.121638028 seconds)
    (7/36) benchmarking "trmv"...
    done (took 0.041773186 seconds)
    (8/36) benchmarking "asum"...
    done (took 0.022997359 seconds)
    (9/36) benchmarking "gemm"...
    done (took 0.119231302 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 0.040835304 seconds)
    (11/36) benchmarking "trsm"...
    done (took 0.107145964 seconds)
    (12/36) benchmarking "ger!"...
    done (took 0.042424885 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.041290705 seconds)
    (14/36) benchmarking "syr!"...
    done (took 0.04441728 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 0.025919555 seconds)
    (16/36) benchmarking "symm"...
    done (took 0.118644767 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029494221 seconds)
    (18/36) benchmarking "scal"...
    done (took 0.029057655 seconds)
    (19/36) benchmarking "trmm"...
    done (took 0.080392875 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 0.028437271 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 0.08216364 seconds)
    (22/36) benchmarking "dotc"...
    done (took 0.02317127 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 0.091062582 seconds)
    (24/36) benchmarking "syrk"...
    done (took 0.088929463 seconds)
    (25/36) benchmarking "gemv"...
    done (took 0.024842196 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.02443966 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 0.022134798 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 0.024663591 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 0.027793159 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 0.03754666 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 0.087619271 seconds)
    (32/36) benchmarking "her!"...
    done (took 0.048154099 seconds)
    (33/36) benchmarking "herk"...
    done (took 0.246342109 seconds)
    (34/36) benchmarking "dot"...
    done (took 0.022017124 seconds)
    (35/36) benchmarking "herk!"...
    done (took 0.230138279 seconds)
    (36/36) benchmarking "symv!"...
    done (took 0.028416586 seconds)
  done (took 3.452040374 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.171293392 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.149536524 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.298891905 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021596985 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.085544162 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.488843663 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.233532028 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.075350882 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.02108001 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.052313729 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.05420714 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.034060295 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.064858345 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.024836381 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.114545495 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.080669553 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020470477 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094386054 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.000104814 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.049511868 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086929541 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034851546 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.123957251 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 2.438156226 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.000136654 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.128769154 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.163927867 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025787492 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.108711859 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.434508084 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 4.046476832 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 3.9204e-5 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022112093 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.000123724 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.5022e-5 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.044800624 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007688236 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.185540703 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.443469063 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.044806008 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.128859122 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.085393731 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021026861 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.2661e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082638316 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.110307024 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102643792 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.002584501 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066750466 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.5717e-5 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.01399051 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.086053809 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.095387675 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118172557 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000712037 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.1063e-5 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.115224436 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 3.0649e-5 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001458417 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.065624916 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021751797 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 5.826e-5 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020831509 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.149053263 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.053321604 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.2745e-5 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.746503689 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.113719706 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001280975 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.024208751 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020090865 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.8498e-5 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.034645479 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.060304304 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000140291 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026662622 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.6982e-5 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.8287e-5 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.000155907 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.004264657 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 6.0229e-5 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.2566e-5 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.3692e-5 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001646144 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.000121074 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.142355948 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001774124 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.173363796 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.093142676 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.7443e-5 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000806197 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.208203003 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.7701e-5 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.007512432 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.038724027 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.509e-5 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.9207e-5 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 3.1008e-5 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054171602 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 3.2835e-5 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.3275e-5 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067417387 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.7942e-5 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001702936 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000704777 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001705366 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.4658e-5 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.345756213 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.039984923 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.4864e-5 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.6372e-5 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.18722373 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.431e-5 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007725647 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.1971e-5 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 3.0694e-5 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.002439185 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.93428464 seconds)
  done (took 20.333077245 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.629061116 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.07097385 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.314379348 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.260514663 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.575770696 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.046015859 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.155579719 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.297509988 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.032449345 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.024268161 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.037215299 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003925135 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.356502122 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.174177114 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.428679763 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.813451016 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.023554898 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.154687202 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.249758505 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.290485783 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032769931 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.4842e-5 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011867395 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.001480054 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008380387 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.626595795 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000607387 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000253245 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003806541 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003736428 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.034249407 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 7.9112e-5 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.089320606 seconds)
  done (took 13.325419612 seconds)
done (took 38.905940532 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.23924776 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.141033316 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.142723433 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.321726543 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038232513 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.022020757 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.081195555 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022455611 seconds)
  done (took 4.201558059 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021251084 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044784674 seconds)
  done (took 1.272339256 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021957956 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 0.022712076 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023404618 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021811825 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023084938 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025908619 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022648979 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.024252416 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020674529 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023195314 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.022128392 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023851967 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027552656 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 0.022591975 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.022505891 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 0.023425541 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.023083187 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 0.023033804 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021863105 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020508467 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.023045075 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023638876 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027077501 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024741719 seconds)
  done (took 1.762751051 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.072301268 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022349771 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021111123 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022878314 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022455839 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022685977 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.0215049 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021307922 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020651888 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020217048 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020446958 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020344099 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021847524 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020498209 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021316985 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022295508 seconds)
  done (took 1.636933144 seconds)
done (took 10.067832183 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021476611 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021857041 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038883509 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022072545 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067014456 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.7848e-5 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.029394461 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.027457035 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003447639 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.027556146 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011842957 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.037655007 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.040769191 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.025502263 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.031109848 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.013620837 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024871663 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.029752882 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.036698736 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003581808 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027995234 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029878942 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.039370251 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.006068719 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.008004186 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008751224 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.005089403 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.013735538 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.7655e-5 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005651201 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027551608 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.021098685 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.005045391 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024978465 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.005156869 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011707823 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031364827 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012159603 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011976293 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005627982 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.6126e-5 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013469958 seconds)
  done (took 2.027099563 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028170913 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028966839 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.02977727 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024421413 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030783223 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030539657 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022975839 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028288315 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027565421 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025722338 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.02340024 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026869185 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029109744 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029202339 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02733901 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028530922 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024570153 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022472934 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032032431 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029217647 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.027060978 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028726372 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028869337 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028879654 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024933087 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026948894 seconds)
  done (took 1.932830224 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038239539 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.04922881 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.06569847 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03244184 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.03669993 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.040946951 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 0.045177137 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031754335 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.031920896 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043552282 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.04567019 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.031761881 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032820085 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.051125965 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037417749 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052382293 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.056279388 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.041100426 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.041431156 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.04957209 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.036400641 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.044084701 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.039061517 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.037162086 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038593258 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035709384 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.035848156 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037618471 seconds)
  done (took 2.370229817 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019378606 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.059650369 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.104900717 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.055682768 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.032204223 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023549314 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027524425 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027818214 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.060655683 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100548717 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033718109 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.062298432 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.020984523 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.058164929 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.072206022 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.034434849 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.027211615 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021446377 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.021052003 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020780987 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027515186 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.029105083 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 0.021089076 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020576979 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047054966 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021528081 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020482444 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.021511949 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026369667 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.046578206 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026375722 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.03456052 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027764583 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027994999 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.067779219 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.030527781 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.01957436 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020909337 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032362228 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023515518 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.6078e-5 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026237425 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038483854 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.036114269 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031957479 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.059814292 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 4.3761e-5 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.084121086 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027943325 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.02998178 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.026501715 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.130390168 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020005414 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.01918607 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028714683 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041825869 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031525893 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027071053 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049458565 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036275773 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.14136721 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019614934 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029099195 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025245034 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.040474055 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.038463673 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030741384 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.036971994 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.060168171 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.0913e-5 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.041789031 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029989624 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.035610861 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.1418e-5 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.032157234 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.026374623 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.2845e-5 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035266807 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.027002216 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.028026726 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021586015 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041607983 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.033611043 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030603173 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.0253513 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.04047542 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032952523 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027985886 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026342336 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.040065663 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.045332877 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041315618 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.028936601 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.031814986 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019658053 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.044766316 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030447485 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020800468 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025844246 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.030435728 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037903426 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.020777948 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.031239853 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024833991 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.046745588 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.3315e-5 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021516663 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.019698581 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054288119 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.0113e-5 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022669163 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.026206802 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.044488594 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026372993 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 3.1031e-5 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035609226 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021578003 seconds)
  done (took 5.193364113 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029557876 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.033994346 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024468669 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027153723 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028214943 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018736264 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020955521 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.04164353 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.020480498 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029859269 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.032196425 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040489088 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.026066796 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026767527 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.020655938 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.021045522 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.0229889 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022889816 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018957459 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.3558e-5 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024364426 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.1849e-5 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020459693 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024182002 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023592579 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 4.1815e-5 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021514882 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034997024 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028270708 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026918185 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038550852 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.9432e-5 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.028500684 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.031881956 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026461954 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.037595671 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021086298 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.035023109 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.0205671 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.1651e-5 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019043302 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026822247 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.031263864 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038008871 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027015451 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021433606 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023490251 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021124704 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.9507e-5 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.035720787 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030182692 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.8168e-5 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.3199e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.021123397 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025950425 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.04145958 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022903534 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.038609323 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021812304 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 5.8133e-5 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.02248676 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.03814206 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.03306558 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.66e-5 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 3.4123e-5 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025763863 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.7403e-5 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.026426676 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.4012e-5 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.5928e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.020864668 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020602125 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037770604 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.03835879 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.033092169 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 4.6672e-5 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.03166082 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.021390862 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027916522 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.029501724 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020674593 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.5761e-5 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.021156642 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.9003e-5 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.768e-5 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.3137e-5 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.3986e-5 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.023770738 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.02832341 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.4153e-5 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019970322 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.7717e-5 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025174804 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 3.1204e-5 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022033777 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.022540143 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.4984e-5 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.4495e-5 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 3.1036e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026628591 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.5234e-5 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.022772862 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023436746 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 6.1985e-5 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000143739 seconds)
  done (took 3.291806433 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.051046805 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.031525062 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.132916554 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.093279841 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 0.044544607 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.09083214 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.084353518 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.094812253 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.054775831 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090805218 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.057873549 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.088372221 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.06140548 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.02496529 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022219831 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.045443303 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.044204658 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.096202293 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022548067 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070440643 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.042533254 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.035218162 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.023049636 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.024409879 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022103423 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.026861811 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.071609295 seconds)
  done (took 2.778621295 seconds)
done (took 18.798776272 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 16.712623448 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.731554773 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.260869302 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.415541104 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.312945242 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.973849445 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.088133038 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.614025355 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.115259097 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.388378711 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 10.34596603 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.299394008 seconds)
  done (took 42.480396772 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 2.150891105 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.943492362 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.101842994 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.059308405 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.154816133 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.107605 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.046935472 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.375812033 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.04176216 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.150892565 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 2.025336938 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.398564884 seconds)
  done (took 10.416401137 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 0.102135042 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.636065969 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.250966684 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.399330568 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.291479138 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.83813514 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.078497356 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.584236877 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.103995122 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.374790232 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.358664367 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.488479535 seconds)
  done (took 24.570618179 seconds)
done (took 78.701414264 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.029065334 seconds)
done (took 2.514359776 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.688170167 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 2.928014508 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.625901698 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.51232753 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.619530021 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.545443565 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.544485923 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.629407787 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.636965896 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.52784981 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.54474689 seconds)
  done (took 31.171030475 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.404315766 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.403440357 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.417445938 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.471625348 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 5.093145034 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.418998466 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.426707177 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.424528815 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.584940813 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.487616803 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.421772931 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.465289068 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.536211735 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 4.111721179 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.486367312 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.487834642 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.524901218 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.40068727 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.462651117 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.484608685 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.462276215 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.495009356 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.439905562 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.525241097 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.483485946 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.503172509 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.500961837 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.412685217 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.480417499 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.544854399 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.548727507 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.42316709 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.479452059 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.487824866 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 2.807419184 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.742815507 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.500880702 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.472768907 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.455268914 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.438191227 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.428621787 seconds)
  done (took 108.51801516 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.64037539 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 3.281524917 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.62713523 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.584549633 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.630769344 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.539843022 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.545574856 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.647771111 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.637801572 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.655102848 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.539627457 seconds)
  done (took 33.710615556 seconds)
done (took 175.849253868 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.372981577 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.370841361 seconds)
  done (took 17.116545097 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.435690942 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.395162654 seconds)
  done (took 17.204424477 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.39370375 seconds)
  done (took 9.76379081 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.726943443 seconds)
  done (took 10.095594039 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.495252608 seconds)
  done (took 9.858283105 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.80114879 seconds)
  done (took 10.169105292 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.586128896 seconds)
  done (took 9.955636419 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.403047196 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.38252301 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 7.381487056 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 7.408275488 seconds)
  done (took 31.94586438 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.297831047 seconds)
  done (took 11.66468981 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.37325291 seconds)
  done (took 9.741977068 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.620654312 seconds)
  done (took 10.001161204 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.377622067 seconds)
  done (took 9.753157272 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.79198631 seconds)
  done (took 10.159192151 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.702157615 seconds)
  done (took 10.066822716 seconds)
done (took 179.865790182 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.94446046 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 8.083142743 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 8.051092707 seconds)
  done (took 26.45431461 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 2.925686557 seconds)
    (2/2) benchmarking "readstring"...
    done (took 2.866861338 seconds)
  done (took 8.188345678 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.384436599 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.800888452 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.796074433 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.374090232 seconds)
  done (took 27.722921745 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 7.498483332 seconds)
done (took 72.233094689 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.425025645 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.396956773 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.377538518 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.426857577 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.39732103 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.395417716 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.383560385 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.389877208 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.386841935 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.379505749 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.401816679 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.393382773 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.401758238 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.388938568 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.394152655 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.394330966 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.401247014 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.391715707 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.400349461 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.384589689 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.397474266 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.408811466 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.399832621 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.380748581 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.388436158 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.387414728 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.3895115 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.393693526 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.402335532 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.388325343 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.390487963 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.390368877 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.387611938 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.388757144 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.401357764 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.390490876 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.395751442 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.41942274 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.410129373 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.379519556 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.389556264 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.399535971 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.392817441 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.393745298 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.389443931 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.387533628 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.394886338 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.403826182 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.411264076 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.434174593 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.405647589 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.634343307 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.631482093 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.567495962 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.401611104 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.38842047 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.393796318 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.395870479 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.399337821 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.398498606 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.402783895 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.544890671 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.507275223 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.421008975 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.393319653 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.40365224 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.407095884 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.388122869 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.403160616 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.508782888 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.440872802 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.401623516 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.411101835 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.403691058 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.3930881 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.400376077 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.39699542 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.423845125 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.385238385 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.404448517 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.403916899 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.428315496 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.510839193 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.420644015 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.390571857 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.383784989 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.422106944 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.400237888 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.390205242 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.42050645 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.612761514 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.507886742 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.404935471 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.413375012 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.425656154 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.379522055 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.388335535 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.390409628 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.410880448 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.384259541 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.415768171 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.39182888 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.420840996 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.391833679 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.381818185 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.382400249 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.397396358 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.452217434 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.512173987 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.407892531 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.408642738 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.400401197 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.398150113 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.398096986 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.385455333 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.399635614 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.401968036 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.403695544 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.407803032 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.411782256 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.390727943 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.417771181 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.398477897 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.415478366 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.407038707 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.403437695 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.402201689 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.428800426 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.392650761 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.381792955 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.392289917 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.39370594 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.407433489 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.406131422 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.406726453 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.396560436 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.390769283 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.405621536 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.416153584 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.421516041 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.421022212 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.455299325 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.387879725 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.421319237 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.437617517 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.41578687 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.562137698 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.430307732 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.418919849 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.405841575 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.40910412 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.444051996 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.413026615 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.414773317 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.43020292 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.40584006 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.395802953 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.41259427 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.39464489 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.402633024 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.396148866 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.396572441 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.428318795 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.418554776 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.55679791 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.408673213 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.419826539 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.412200693 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.408642509 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.390407827 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.432847567 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.398569245 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.514950917 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.445861939 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.401132914 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.396141014 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.400922879 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.422487576 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.406435067 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.408840563 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.388281474 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.392625409 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.393526523 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.399342935 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.40174101 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.392513906 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.386721957 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.407550959 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.414371936 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.393139864 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.388495957 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.625363168 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.392662275 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.405692025 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.416794525 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.431062692 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.40488681 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.393583574 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.419298968 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.403582073 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.416109105 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.435965074 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.402549446 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.390553872 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.405905419 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.432677034 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.439457026 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.444149084 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.429334391 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.410105633 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.498448527 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.398542257 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.40242311 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.408232298 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.430582008 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.407959363 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.407672285 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.402522882 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.397178332 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.403845218 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.400835041 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.424384954 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.402390409 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.428489743 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.406940216 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.440363195 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.40333745 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.425633177 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.396824124 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.406041826 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.419646689 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.406899223 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.40609881 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.405549341 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.410503653 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.398152754 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.394508661 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.435237219 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.394516195 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.392522053 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.420817869 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.414416244 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.399174522 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.402517688 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.412794354 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.42249319 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.413285759 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.415914003 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.440355962 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.409656263 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.627868534 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.402683798 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.404478397 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.558025683 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.430268644 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.437594129 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.439933354 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.393980647 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.392899772 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.4224927 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.400583771 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.41028044 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.392994566 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.413745682 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.400606647 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.390896729 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.387211308 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.39920042 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.438972095 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.438912913 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.396019733 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.412141252 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.403774058 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.387845525 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.402426902 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.40440273 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.436338987 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.399010573 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.43576058 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.616917225 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.422388985 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.430197645 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.410616728 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.402555431 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.404085765 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.392753146 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.411112823 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.506682662 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.409798812 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.538489859 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.426960564 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.404413889 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.392911704 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.388245714 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.408350297 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.39950764 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.420917257 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.405954438 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.404002149 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.423789392 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.406560583 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.404809031 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.454947957 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.41578449 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.401554548 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.388667514 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.436914099 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.405142886 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.384403027 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.425326313 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.442816877 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.43440719 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.401752256 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.401127494 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.398642113 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.401175161 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.397955163 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.408905688 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.41398211 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.404493688 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.397537412 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.394971633 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.404396866 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.400570544 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.401580235 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.432902074 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.415792407 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.436256714 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.418577665 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.398487619 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.403776943 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.405622594 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.41166042 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.402206046 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.386536787 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.442238685 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.400927188 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.451066519 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.405984401 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.400327461 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.406041604 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.399274063 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.389800158 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.405887115 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.397113904 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.424896001 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.399154922 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.394818442 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.41672775 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.389694338 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.405668039 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.388928782 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.437036518 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.401735548 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.439586572 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.400446118 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.415088269 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.388247361 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.414122734 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.406149153 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.396475296 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.397172827 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.432299951 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.40426096 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.402330666 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.560309515 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.397049758 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.394425216 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.415750621 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.427861243 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.384958433 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.4098813 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.398472642 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.414146047 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.413608714 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.401080458 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.414635714 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.41466821 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.403618876 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.395350275 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.40582961 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.411560153 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.407916225 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.388949448 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.407661255 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.391830564 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.41001554 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.384969423 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.405209832 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.413264298 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.403552988 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.393646709 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.407856033 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.4547076 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.397013731 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.397525913 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.413041531 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.403634919 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.412619116 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.415615496 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.39969996 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.392266838 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.398311408 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.411113148 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.390001558 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.39900195 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.40000989 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.414301895 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.391557033 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.418503338 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.398051906 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.404287832 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.405360245 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.404495069 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.424833209 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.39842038 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.406852753 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.425063125 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.401337212 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.435481302 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.410224288 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.410974553 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.401157952 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.413694401 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.414370036 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.406944351 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.425870292 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.442246051 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.437333877 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.411929845 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.428786553 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.397254655 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.394311812 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.423573203 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.409035959 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.391430357 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.429450602 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.405785451 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.40661007 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.408740116 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.39808251 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.428695386 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.413079593 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.418277579 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.40920793 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.412950001 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.429808452 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.40453568 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.41462227 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.418337895 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.434938125 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.41168232 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.402990612 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.398259245 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.414226996 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.42636588 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.416125102 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.405270045 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.407494225 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.401401791 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.423124436 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.405313895 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.410182886 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.400627272 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.418270917 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.409417723 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.413108624 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.4009232 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.414981585 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.402870996 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.407486388 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.407497204 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.410095658 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.425601911 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.401036729 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.443370974 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.411599906 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.409727115 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.480816127 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.406679318 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.404830754 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.400566949 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.408763262 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.393518917 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.423493551 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.402674381 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.402912183 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.401591629 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.414985418 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.397870628 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.402009798 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.414007848 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.398547564 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.398737603 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.413702353 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.402409888 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.405135018 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.400772432 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.392693122 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.42004766 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.413192161 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.415156573 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.41223222 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.407279537 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.399821765 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.515005023 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.414198062 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.4032243 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.397475299 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.410930171 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.399503505 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.413002346 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.427065654 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.398283204 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.41258979 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.411687644 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.397224214 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.415866726 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.399106382 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.427410744 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.402047118 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.391939747 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.426810045 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.414626081 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.41687391 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.415543879 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.402562192 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.412493638 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.447247574 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.412731602 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.433809553 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.397300172 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.405310671 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.397943693 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.421762791 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.416037185 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.415977032 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.407989741 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.60142802 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.426976117 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.399676854 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.414905618 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.429871105 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.427655139 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.407687378 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.433972869 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.431374641 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.41254367 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.406447795 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.488951079 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.396193392 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.409493906 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.401128178 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.39648667 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.41196222 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.40151705 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.445099088 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.407677938 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.413617507 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.409733429 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.424793865 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.397050989 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.413898394 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.398710257 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.421343471 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.406119916 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.415396197 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.409843518 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.431646927 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.425280403 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.425827218 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.406856175 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.407119509 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.409767572 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.43262479 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.417029294 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.421296799 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.398833668 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.416909258 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.401298694 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.408906511 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.436906993 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.402553063 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.417274162 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.423882813 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.427199186 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.448286135 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.409024146 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.425940761 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.419749375 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.438787857 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.410939681 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.418908182 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.42253479 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.463120744 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.500024579 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.416069814 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.428235536 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.417080242 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.413636709 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.427043524 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.413173155 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.407861409 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.416065804 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.427654538 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.413124232 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.433571938 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.407036797 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.404214467 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.445357639 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.44369956 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.406587869 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.559654932 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.427766588 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.40672606 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.395935974 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.512475839 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.437526427 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.403529134 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.429076134 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.419378716 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.46503932 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.40187561 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.435419351 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.421907362 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.428097721 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.435028151 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.402507331 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.405461928 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.39965152 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.413734384 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.41515617 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.416468261 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.417408609 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.416724708 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.417075893 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.409435017 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.403240777 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.415110311 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.521324386 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.398363561 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.423163148 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.430986607 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.415402322 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.40365908 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.418607839 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.428902296 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.434395318 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.414520202 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.432301467 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.416392297 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.405287916 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.395379133 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.415883445 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.418013065 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.414926673 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.432001087 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.416110938 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.45016417 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.412439892 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.463110162 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.410185863 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.443207911 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.414682169 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.412399421 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.401819351 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.413768654 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.413708948 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.423384458 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.421564761 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.416858162 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.443268484 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.422702531 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.410945046 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.452365609 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.408018512 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.455622061 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.432205971 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.418878903 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.40915656 seconds)
done (took 1645.067097002 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.5662486 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.731151366 seconds)
  done (took 17.688522521 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.99427543 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.39717837 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.062230326 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.513143645 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.472319557 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.585765106 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.053570949 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.41365412 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.402360489 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.962671907 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.409425625 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.665431216 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.444860681 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.403372101 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.612936071 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.520200219 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.401338257 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 3.037132699 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.04010673 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.877700236 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.404387548 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.388477127 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.393559413 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.396827796 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.395484149 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.836076494 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.16993119 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.413797593 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.633665737 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.41155438 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.630984303 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.954793134 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.410987377 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.38937835 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.698000278 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.39905641 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.393160378 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.390187346 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.392129789 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.19611071 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.937905152 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.403588802 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.779312016 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.951847507 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.729793776 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.899037357 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.167875699 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.247456288 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.954619627 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.955188602 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.831208486 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.857379108 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.393580418 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.494852656 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.487891477 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.380974096 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.300721292 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.401688392 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.395736202 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.030565409 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.393089004 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.332552664 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.392413336 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.76575748 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.396158208 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.35313834 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.789934712 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.40477134 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.396285421 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.680915069 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.397835835 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.885432436 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.406822069 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.390282343 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.72577952 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.420081135 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.386274844 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.190553302 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.420512101 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.780999936 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.196837914 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.917712639 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.821463518 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.398879747 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.398340935 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.933524127 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.422461141 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.84669616 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.097709055 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.403602367 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.401939548 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.695052903 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.11425875 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.185674879 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.415603182 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.397182233 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.937065012 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.989854997 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.896064886 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.857939015 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.409232537 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.965175188 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.39710675 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.905723521 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.579198818 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.221197477 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.405397178 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.898558405 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.47512173 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 3.092477131 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.390856702 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.398297947 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.399116011 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.396058114 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.963865928 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.389191312 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.316807737 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.829730769 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.394796472 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.394631833 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.390564589 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.887639093 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.167091566 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.617556552 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.868441622 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.881061035 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.578234597 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.786547536 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.112153404 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.389880101 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.388227463 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.40289192 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.170805897 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.40429098 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.395641457 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.749124347 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.409882495 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.392067824 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.831319234 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.411035468 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.030354757 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.097323052 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.868055697 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.822343353 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.679148849 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.404563761 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.396258964 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.389132292 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.389104669 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.657549739 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.405477959 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.352176886 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.394897221 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.398037013 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.893473077 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.405294813 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.385984106 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.76619186 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.403230741 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.396606259 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.913728182 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.12639228 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.87624678 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.920932735 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.396170434 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.986618642 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.896003505 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.404430712 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.388726712 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.395733972 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.969533512 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.403697352 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.888299325 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.803007375 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.908862096 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.905929553 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.403478666 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.913006988 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.714471705 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.391013333 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.895667695 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.855541088 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.725721052 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.898763235 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.63224775 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.417450212 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.395598388 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.3881398 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.650346481 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.403713366 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.390353382 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.39393971 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.419845361 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.394520786 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.39422797 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.973627092 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.894802718 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.406382261 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.393384633 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.397877997 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.406863219 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.960715185 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.919122368 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.369646695 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.772185808 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.699597015 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.268911079 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.991179558 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.410114162 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.164620576 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.637295083 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.398825068 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.80704804 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.413568017 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.936635981 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.903450212 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.40634106 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.805702075 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.50720046 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.4122416 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.397208658 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.944295657 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.906742502 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.404474073 seconds)
  done (took 1137.575392939 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.751799083 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.673040134 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.534629111 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 8.264278418 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.9979824 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.29868415 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.482006611 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.588989066 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.187560513 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.804425768 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.254126405 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.438075867 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.591278925 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.910967988 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.654221374 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.460083634 seconds)
  done (took 88.279547174 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 2.781064637 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.552398607 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.356926626 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.882143874 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.635620369 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 2.696006231 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.83247278 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.499302355 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.292702718 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.968708352 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 2.779010861 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 2.986027368 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.687316514 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 2.971154499 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 2.943641648 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.62156129 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.915055475 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.96410688 seconds)
  done (took 61.755181833 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.571517698 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.354637525 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.593581929 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.489421791 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.938841408 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.612039589 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.226319098 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.300631338 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.092611619 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.037832487 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.712569163 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.015725293 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.207734117 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.475925129 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 2.489961937 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.397657934 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.443030461 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.016218764 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.176425406 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.51001245 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.554263962 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.954422954 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.479380123 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.576514815 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.763544482 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.368489624 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 2.800318524 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.373941517 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.391210611 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.718409512 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.583770117 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 4.050688116 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.108850924 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.54473684 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.128570743 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.805155165 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.074367746 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.414063059 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.388260408 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.499145122 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.757700912 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.639102709 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.666533477 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.145182517 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 2.874800348 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.315806775 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.611399217 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.535996795 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.032629928 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.476159067 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.227421106 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.62280809 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.167848122 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.598599622 seconds)
  done (took 234.313475057 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.866385497 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.544191982 seconds)
  done (took 12.834897352 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.440264053 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.454423887 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.465185656 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 7.469289238 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.442218754 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.444768318 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.446303498 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.44117168 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.470489806 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.491318726 seconds)
  done (took 76.955840704 seconds)
done (took 1631.797431682 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 3.822594845 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 7.454637956 seconds)
  (3/8) benchmarking "fib"...
  done (took 2.792630713 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.419628037 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.426807896 seconds)
  (6/8) benchmarking "parseint"...
  done (took 3.340268981 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 5.468034538 seconds)
  (8/8) benchmarking "printfd"...
  done (took 7.394377219 seconds)
done (took 47.50800704 seconds)
(7/23) benchmarking "parallel"...
done (took 2.431199778 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 2.425108143 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.008409165 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.844009407 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.193584171 seconds)
    (5/9) benchmarking "Date"...
    done (took 2.865657772 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.453902636 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.186391108 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.136015065 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 3.010246129 seconds)
  done (took 28.520037689 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.569066355 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.478969227 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.446007575 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 2.589230433 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.626849677 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 2.436619677 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.460871996 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 2.524569137 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.598081717 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.440413614 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.57317892 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.634298243 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.614224424 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.598406545 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.646664231 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.450002499 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.56712634 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.611367354 seconds)
  done (took 48.262179125 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.417864256 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.418140838 seconds)
  done (took 7.234940907 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 2.435054975 seconds)
    (2/7) benchmarking "month"...
    done (took 2.546996073 seconds)
    (3/7) benchmarking "second"...
    done (took 2.44987566 seconds)
    (4/7) benchmarking "day"...
    done (took 2.558871806 seconds)
    (5/7) benchmarking "year"...
    done (took 2.517360197 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.45366271 seconds)
    (7/7) benchmarking "hour"...
    done (took 2.446086398 seconds)
  done (took 19.805668302 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.484670672 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.650974499 seconds)
  done (took 9.536811849 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 2.435636996 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 2.433059773 seconds)
  done (took 7.337441896 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 2.428123682 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 2.936497605 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 2.435040775 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 2.75130946 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 2.85823843 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.431670485 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 2.438370976 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 2.691424308 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.430880488 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.432455759 seconds)
  done (took 28.23146149 seconds)
done (took 151.324320749 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.798637626 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.439311558 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.435784788 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.464697913 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.445396358 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.448837978 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.471168325 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.429952019 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.430716434 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.467366988 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.438815774 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.466492745 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.466831869 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.918824739 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.442552508 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.466771374 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.458833347 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.43355393 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.471669344 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.454264888 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.432552328 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.471833108 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.921868296 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.434817029 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.466256561 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.432661452 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.440029777 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.457480846 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.464550718 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.432702039 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.470468156 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.431872436 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.800261323 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.432721907 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.429592454 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.449241539 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.429192124 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.437464751 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.467535139 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.438845055 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.433167111 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.461943616 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.444146162 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.466523019 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.816236131 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.439131018 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.464570601 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.464038335 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.80628974 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.429949883 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.463377194 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.44649085 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.465218304 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.44844163 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.434358264 seconds)
  done (took 139.465993118 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.412873098 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.411873337 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.396230821 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.401391221 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.403486208 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.414532485 seconds)
  done (took 16.829076345 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.470510244 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.859121442 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.919131019 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.45192702 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.468324051 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.446627473 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.510120625 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.435576576 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.452020694 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.505764489 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.496834862 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.922895781 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.444137468 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.448247058 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.498498736 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.44954442 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.46406409 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.445783668 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.854412833 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.451400125 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.458767925 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.46634805 seconds)
  done (took 58.325061774 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.467412019 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.451870112 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.479641355 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.474514373 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.447365932 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.521624831 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.521657529 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.511144077 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.533403073 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 2.484566816 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.576497016 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.654534958 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.674115639 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.462433588 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.475417063 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.477337408 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.471785156 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.51794587 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.565357379 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.44756102 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.475832714 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.451499375 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.440817284 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.524137877 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.449339411 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.476245859 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 2.452575677 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.468566209 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.527586748 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.522976705 seconds)
  done (took 77.395774803 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.457569468 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.456982853 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.441344068 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.586834614 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.453888128 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.447107653 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.514312065 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.461608584 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.596226105 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.531593359 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.535703007 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.447820972 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.453395831 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.586547664 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.459756325 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.447908586 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.447100905 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.448985254 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.511118979 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.576513491 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.457416346 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.457444031 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.458387349 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.582237939 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.456937941 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.458681423 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.515874244 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.44827065 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.6398778 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.451380987 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.456273844 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.456415442 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.457266165 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.449341755 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.443130984 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.459014321 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.440782954 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.457519308 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.445077831 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.458986924 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.576630086 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.448070816 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.452336519 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.517415502 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.462176816 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.445646501 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.527143698 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.47224997 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.533619854 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.456577589 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.440035303 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.444291184 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.446246083 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.468876444 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.463731254 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.472830597 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.465291757 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.447427556 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.467980767 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.533348258 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.466883208 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.534839301 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.471302498 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.584182996 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.530901976 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.458928892 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 2.49149881 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.453966463 seconds)
  done (took 171.245700395 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 2.451186078 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 2.456823359 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.410189415 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 2.430810467 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.425530994 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 2.424885755 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.435867724 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.432935207 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 2.427176145 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 2.428037675 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 2.418675829 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.424547427 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.411889178 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.586091802 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.521690325 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.430067745 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.413878582 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.425083794 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 2.429383983 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.427846608 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 2.427363197 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.431178566 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 2.423397059 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.433866155 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 2.426402419 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.418415285 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 2.428015939 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.432177571 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 2.412534824 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 2.488167029 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.551521082 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.425016015 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.499725025 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 2.431720793 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.426862833 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 2.416370732 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.416808624 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.426933479 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 2.416046879 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 2.430251068 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.417385097 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.430845279 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 2.437579536 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.432941744 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.429376331 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.408251069 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.425811928 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 2.430893002 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 2.427418229 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 2.427133406 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.412178442 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 2.410183713 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.415990911 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 2.461812925 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.474300016 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 2.519251472 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 2.430773107 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.411308663 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.422493493 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 2.464101634 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.429914129 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 2.432420523 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.414732371 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 2.420381934 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.43075047 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 2.417583935 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.426592673 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.430895154 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 2.435591083 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.417299007 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 2.418601678 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 2.431603712 seconds)
  done (took 177.777302664 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.255196308 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.446238902 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.443965041 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.251887053 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.360496025 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.450029544 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.274703008 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.267136838 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.441380703 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.447343937 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.447070406 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.251442205 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.274268498 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.450743456 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.449713373 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 2.447752874 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.449469627 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.302154155 seconds)
  done (took 53.097872314 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.444693969 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.448696832 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.469747933 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.448438094 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.457128359 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.446561311 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.447302976 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.453728975 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.470426858 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.443997783 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.451771511 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.452517157 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.451012298 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.46916011 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.475952304 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.650887986 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.457051044 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.447429997 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.501501484 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.491857565 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.650522136 seconds)
  done (took 54.418607895 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.443364767 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.359737254 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.608971064 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.539923658 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.542102569 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 2.4365646 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.512725755 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.541633479 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.606997332 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.531464541 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.528041916 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.51691414 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.537507631 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.51895196 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.360099755 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.441735196 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.512663461 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.45030627 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 2.512210409 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 2.535173036 seconds)
  done (took 56.424108339 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.476859176 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.476194725 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.480502423 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.481931872 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.477041036 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.456033589 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.448710274 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.448559182 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.475381797 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.444608172 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.451306768 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.448062055 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.457812 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.452422184 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.447862662 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.636005083 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.456159818 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.455088419 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.443866618 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.450406487 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.442371689 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.450590559 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.443239658 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.444471174 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.445751163 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.47926989 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.633342796 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.480228166 seconds)
  done (took 71.573555659 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.662120139 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.467714263 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.470427483 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.476798631 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.525440949 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.476468002 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.479086047 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.474857184 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.478332426 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.532362464 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.689011558 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.474078609 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.455275491 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.47423706 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.47712712 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.468709071 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.476838214 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.52969627 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.480566074 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.677272336 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.452765277 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.481138506 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.474425885 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.459436083 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.473666867 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.520454286 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.686044141 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.468917445 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.531466146 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.676759713 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.537170094 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.472457458 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.462348258 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.465563354 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.460894329 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.481989215 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.533172601 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.668737308 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.675073278 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.483303569 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.528823166 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.476858532 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.482160169 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.473985347 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.483842168 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.475707127 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.471524127 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.49922538 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.532887244 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.476057552 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.459437249 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.481669213 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.53233451 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.527319328 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.495366929 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.667699208 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.53204434 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.477284359 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.478241932 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.467352698 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.481160564 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.533767895 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.479454366 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.476568643 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.479381731 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.532472368 seconds)
  done (took 168.106980228 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.448721729 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.44978655 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.294409281 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.44594275 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.449236155 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.444851838 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.470192383 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.507088427 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.46582699 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.446441236 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.261103456 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.449305529 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.492788815 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.448631788 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.447038076 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.45164092 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 2.448535703 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.449799513 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.467345124 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.493971264 seconds)
  done (took 53.223631328 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.469478514 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 4.011148391 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 2.420146414 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 3.180501445 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.349229888 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.13588066 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 2.498534225 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 2.92580524 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 3.244397354 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.431989574 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.43000203 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 3.435788545 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.45553285 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.43292719 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.433945855 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 2.44318752 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.395266873 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 4.010815893 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.475199662 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.428776073 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 2.430325408 seconds)
    (22/49) benchmarking "13786"...
    done (took 2.426117518 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.035377261 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 2.436357931 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.410146704 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 2.442513786 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.483532194 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 2.439012473 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 2.424215135 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.159495473 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 3.247636427 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 2.892657879 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.498203814 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 2.429381241 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 3.262851647 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.938425219 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.441305022 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 2.427072444 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.42407951 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 2.424994394 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 2.760253616 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 2.493548408 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 2.42719078 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.263326193 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 2.902315975 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 3.247025836 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 2.430172803 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.433859841 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 2.442377548 seconds)
  done (took 143.072837779 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.455640819 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.455051947 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.502587945 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.451222529 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.4606465 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.486172862 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.502443781 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.460282222 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.503001798 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.497483062 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.457711326 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.488318244 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.500488198 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.504193825 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.503321843 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.501825805 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.45843795 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.449642976 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.456347624 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.447071813 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 2.444871766 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.454510968 seconds)
  done (took 56.830189073 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.846423389 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.008956996 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.502072727 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.486908876 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.490321373 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.508061494 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.465500305 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.504123823 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.009252867 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.496101953 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.460159457 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.517608148 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.515704917 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.467204624 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.844123939 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.507198289 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.509575928 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.458179739 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.449241585 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.485217873 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.514462235 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.488260935 seconds)
  done (took 58.927873206 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.264791232 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.442610694 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.778074887 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.461352191 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.463787518 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.447311169 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.468829076 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.790593914 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.454669897 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.401940096 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.457125664 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.464943451 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.465010853 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.465371009 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.263918921 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.409298356 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.402944784 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 2.463265647 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.466058481 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.456232339 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.462058926 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.406865382 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 2.463584205 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 2.461680411 seconds)
  done (took 71.480179334 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 2.425783929 seconds)
    (2/2) benchmarking "indexed"...
    done (took 2.431060586 seconds)
  done (took 7.255036747 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.585860464 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.50535053 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.514139368 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.58592175 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.627272803 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.559778718 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 2.453262376 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 2.448480856 seconds)
  done (took 22.672531436 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.24801738 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.286257644 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.529346802 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 2.471002549 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.540560049 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.530660522 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.291318629 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.531192279 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.250521346 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.534314159 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.579712601 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 2.471355972 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.580109186 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.536874568 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.461100627 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 2.465613716 seconds)
  done (took 45.706121216 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.449044448 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.933378042 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.400967254 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.455061047 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.458897691 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.46916935 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.443364314 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.451226379 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 2.484850807 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.441585254 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.465006798 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.444141543 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.470204491 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.453346668 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.396278307 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.481463435 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.471195101 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.484973356 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.44134814 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.474960698 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.468457804 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.472556132 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.468157394 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.478864494 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.944499144 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 2.464228229 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.456481666 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.435584974 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 2.453765383 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 2.456549197 seconds)
  done (took 93.067528138 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.688281273 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.477918753 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.480507744 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.448953765 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.536032712 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507851133 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.475423808 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.465959492 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.467167218 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.468273633 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.457457987 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.456983068 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.451908801 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.467554932 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.480315684 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.480829737 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.476714034 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.679681819 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.459020908 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.445776224 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.465043872 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.46981174 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.468291463 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485281256 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.47914881 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.477475267 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.670291626 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.471161244 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.482523002 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.453614038 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.536507173 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.477213313 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.676812363 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.46262888 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.681123598 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.453986835 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.534466101 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.533543282 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.529801513 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.464064382 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.461712775 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.535210384 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.676685396 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.6689019 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.470634488 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.461568147 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.475443084 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.532726593 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.476813227 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.504704474 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.467198799 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.529493236 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.456435522 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.463607706 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.493688879 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.478981477 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.470221585 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.466088504 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.474522942 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.472910315 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.694208972 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.46053607 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.470953221 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.470201653 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.467879848 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.47574695 seconds)
  done (took 167.608243606 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.534875849 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.634666776 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.453357444 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.460076979 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.574958003 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.625401497 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.533659068 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 2.461972813 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.518350785 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.587898569 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.517400953 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.456713847 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.479109554 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.513918743 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.634242942 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.511543139 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.577758742 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.455833688 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.459040055 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.626236208 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.484818631 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.58908171 seconds)
  done (took 58.090522603 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.591608586 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.503562245 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.584238241 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.526335546 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.532948682 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.502900825 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.526550732 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.500845266 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.530368394 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.591698378 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.527760071 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.528384339 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.736111409 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.527313455 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.485214948 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.590475369 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.524997318 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.586586174 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.545763142 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.527666528 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.503366226 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.481859939 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.535053158 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.527992228 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.527208055 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.531709625 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.49867173 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.532748151 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.528319071 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.7376553 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.52985094 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.586663855 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.531955974 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.52925624 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.506252413 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.532729134 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.525855638 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.531190622 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.533792577 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.738734261 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.524904733 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.50553998 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.526974523 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.589198898 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.497657893 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.524585147 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.581430464 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.59031193 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.588648894 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.528650277 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.525729513 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.53640924 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.585608584 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.52606674 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.539545211 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.584397386 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.524680623 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.498576142 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.733353725 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.587469583 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.57573118 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.529755045 seconds)
  done (took 160.524707309 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.28709417 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.456876862 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.450280803 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.461172168 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.444131978 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.447098575 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.437418169 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.481257075 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.509547364 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.447072303 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.459490205 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.447764394 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.455431587 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.457940891 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.462450579 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.45839139 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.481832495 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.274136528 seconds)
  done (took 48.307144877 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.638032329 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.447601151 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.310909052 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.754654159 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.644116981 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.293225652 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 4.03361841 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.429977096 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.434716167 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.875057886 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.496748594 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.083678117 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.959987853 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.830222166 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.470400463 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.432685274 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.4379135 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.16906948 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.449666004 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.427336554 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.429151752 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.368965534 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.58583447 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 3.974893887 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.390221171 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.443579374 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.29323088 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.737113312 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.438533687 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.437325624 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.437925231 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.44003971 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.522016114 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.282119713 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 4.02842955 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.739622852 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.235789506 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.977601137 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 3.258723076 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.440806831 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.658400065 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.434395715 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.424452321 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.151112917 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.137161702 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.96845082 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 3.2468071 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.484046004 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.434124552 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.886891885 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 3.249712064 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.430571665 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.49555464 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.794224325 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.358111481 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.563279929 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.490149315 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.341511979 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.471530139 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.803359923 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.508676634 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.434109449 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.131320921 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.47860493 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.196825927 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.599527473 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.929363651 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.488396933 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.650793512 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.168179607 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.612867448 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.194638749 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.599298395 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.560569342 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.438147325 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.484308878 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.432329588 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.430757448 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.365515363 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.895682169 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.509140551 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.871538268 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.384550172 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.125875396 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.441769752 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.953393756 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 3.25181195 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.183239242 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.501412272 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.108642472 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.592402045 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.923405055 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.363329258 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.420058896 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.469688837 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.533357094 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.387584673 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.637589847 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 3.963699251 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.524133571 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 3.970531793 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.139507084 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 3.244404547 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.084114995 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.214430479 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.674235855 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.371412459 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.5035438 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.432736207 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.072465542 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.461525437 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.484175471 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.443626049 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.817611355 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.212073597 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.576279011 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.077927563 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.805447478 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.490923418 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.751315729 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.641532546 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.57753305 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.342946081 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.540323612 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.994374842 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.991837763 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.883755468 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.589796721 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.431622619 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.155391819 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.771684448 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.920482813 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.544591453 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.600615613 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.427425292 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.927332466 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.091127814 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.455825788 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.799459998 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.661550766 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.207509259 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.511005465 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.435649818 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.10209337 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.613296082 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.815674984 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.558755442 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.320945789 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 4.703693106 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.344938078 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.095531306 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.307011109 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.93295919 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.924982388 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.731834624 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.936277502 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.50584232 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.436542048 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.444003203 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.477396915 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.295369304 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.5711731 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.438189843 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.62906328 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 4.47874522 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.741133179 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.251886985 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.437229633 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.441905423 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.866315194 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.016597172 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.698787342 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.43151905 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.433485719 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.435458069 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.888246484 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.770458917 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.127644106 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 4.876563357 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 3.253017138 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.146563202 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 3.273279188 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.427475638 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.764137082 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.665203129 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.436303869 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.432784824 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.441808273 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.349820303 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.233812035 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.549647913 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.431918424 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.387567232 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.444508542 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.426072426 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.502462258 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.920463232 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.61689721 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 3.974156714 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.254744485 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.947250439 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.937292413 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.322750255 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.867963046 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.495796781 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.430392441 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.778196159 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.819541161 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.922155235 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.718253097 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.151579834 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.538021132 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.429972575 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.92450444 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.576394267 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.44265633 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.848594975 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.676000553 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.777132767 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.331979594 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.507360624 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.783740238 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.512948989 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.441491943 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.434628897 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.492569015 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.435231314 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.883863309 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.669479443 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.787334333 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 3.960725809 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.438639511 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.435489344 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.811537305 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.36169348 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.007798632 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.980575718 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.400708259 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.085269367 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 3.269210207 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.435203752 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.440013127 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.616873251 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.630572189 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.126693529 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.580872527 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.44384962 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.044654528 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.634126133 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.910471467 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.681700262 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.573850019 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.438259757 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.464991515 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.443504079 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.679684534 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.255831438 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.601572729 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.420733361 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.196129309 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.662730782 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.877688504 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.233565021 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.57955094 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.83190033 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.673998068 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.444083017 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.745178384 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.797237445 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.330237163 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.866955154 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.69792004 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.128638038 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 3.248079964 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.91092989 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.726113763 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.376671588 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.599779398 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 4.016857384 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.432108637 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.432940486 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.435851793 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.436403049 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.434056406 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.46954794 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.756612998 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.490326425 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.321173953 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.172328135 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.561266959 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.662832847 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.692384033 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.947346235 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.668132493 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.902245288 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.141622805 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.589465623 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.338570484 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.467995285 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.636514735 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.429920142 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.005031846 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.873231819 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.687046899 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.875998442 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.63780514 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 3.960462358 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.43721334 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.904977775 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.70080997 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.88512964 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.397271884 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.666050302 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.571849203 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.427496034 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.121896086 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.584307814 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.415613472 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.806683483 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.937861824 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.758457904 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.247131278 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.450960868 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.288821825 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.432629949 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.887695088 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.470398679 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.466669024 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.440967161 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.440386633 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.432946152 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.315688111 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.591796595 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.510147289 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.592843165 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.017185393 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.500850527 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.861746068 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.74920236 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.444238335 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.552564302 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.562869359 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.547743799 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.621185656 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.43405139 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.441278752 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.847846981 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.582680906 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.432181126 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.539415668 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.962211032 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.432114201 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.124065313 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.581437727 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.792038882 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.531958084 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.43668649 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.433965651 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.620316862 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.678825344 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.740215877 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.145363644 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.14219949 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.806188374 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.704294567 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.589498368 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.446765964 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.465186942 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.63840342 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.537837522 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.43751995 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.507416274 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.53055042 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.578018471 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.435167002 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.45834436 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.255972507 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.480999118 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.2668658 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.469326088 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.047524444 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.324054565 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.782349861 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.544074382 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.116068522 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.98026531 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.699991526 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.43851957 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.436871724 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.436932121 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.289607246 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.320516902 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 4.46755521 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.494254014 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.562351417 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.881377 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.66688335 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.440901934 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.436718002 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.436726051 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.568884751 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.704152832 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.665978235 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.438094068 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.436637553 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.859628553 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.830638825 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.580984941 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.904164599 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.721467207 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.54621935 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.143899063 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.579435398 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.468956318 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.148248712 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.636358918 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.482803309 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.578303919 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.963642886 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.440174465 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.87362668 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.587610738 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.447763263 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.707531634 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.53707063 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.443412286 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.433405801 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.485612927 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.424475252 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.576060525 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 4.667876155 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 3.255028834 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.292882759 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 3.836594561 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.438540986 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.394660894 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.10669852 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.274424873 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.256643435 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.267928138 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.164784672 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.76439496 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.568069533 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.540588027 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.865825682 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.565014281 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.292218374 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.480293509 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.777564076 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.817303357 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.381402655 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.387240127 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.143295955 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.694339066 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.073390894 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.331460988 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 4.664891513 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.429076873 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.103905485 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.547992424 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.644973026 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.333628199 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.974522006 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.69912523 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.763091544 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.500347775 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.864943476 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.555431546 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.940568083 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.857457898 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.609860573 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.439566409 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.44282127 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.451103584 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.602778152 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.439984605 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.474874929 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.151695017 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 3.245799675 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.441527489 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.096310471 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.49913898 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.822819987 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.930578066 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.736807102 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.128367774 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.744048663 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.717135188 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.510929013 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 4.863846012 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.684282976 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.574013795 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.436923702 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.436062887 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.438204341 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.784991888 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.234052808 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 3.253507799 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.171535039 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.436382986 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.645792755 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.387675191 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.889969412 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 3.26856972 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.476958159 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.655898549 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.852503857 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.498220187 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.488466248 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.444878054 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.926712969 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.596152072 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.591196652 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.117355008 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.580475649 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.550116287 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.106426224 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.956530475 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.513942815 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.507574294 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.441378886 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.448168856 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.402792446 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.897706376 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.594148489 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.58965725 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.502109311 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.865678768 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.168131786 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.594146945 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.441842981 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.443635656 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.78571597 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.749941232 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.899181199 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.252908813 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.703354539 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.658619133 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.214104575 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.584309177 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.20876686 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.829453219 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.663562756 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.646076067 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.436840275 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.447195479 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.439587746 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.432987443 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.445252704 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.441570875 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.447854089 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.979226439 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.444084553 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.367104405 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.619029073 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.625016794 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.924129178 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.926902888 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.366416592 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.558334124 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.508053552 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.44757181 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.412482707 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.459183541 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.494556844 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.552572452 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.547874121 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.761702171 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.502513222 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.441090366 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.591468785 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.58598671 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.437118039 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.455411745 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.432790755 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.747555177 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.91170604 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.712897361 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.892858474 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.692950916 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.513064651 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.863877403 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.256145352 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.263488791 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.566068018 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.440315976 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.756931705 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.29675472 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.933681262 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.736184455 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.849837816 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.951671011 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.552857453 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.339937672 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.337388865 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.848467338 seconds)
  done (took 1944.395521049 seconds)
done (took 3978.217866308 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 2.465685382 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.441997469 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.452783644 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 2.4572619 seconds)
  done (took 12.236382546 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 3.003034063 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 3.351993966 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.694095182 seconds)
  done (took 8.523022662 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.473939991 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.044356593 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.048975118 seconds)
  done (took 10.981772979 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.277129226 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.252037942 seconds)
  done (took 8.936669737 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 2.675750958 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 2.875187306 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.588195918 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 4.140490713 seconds)
    (4/4) benchmarking "Float64"...
    done (took 3.865962852 seconds)
  done (took 16.875537533 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.574428249 seconds)
  done (took 4.997925749 seconds)
  (9/15) benchmarking "18129"...
  done (took 7.430379314 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.589295351 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.919275969 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.771971643 seconds)
  done (took 10.701711197 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.029329383 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.207016764 seconds)
  done (took 8.641882088 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.416674447 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.411340027 seconds)
    (3/3) benchmarking "Float64"...
    done (took 7.415718439 seconds)
  done (took 24.657118765 seconds)
  (13/15) benchmarking "20517"...
  done (took 2.943460948 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.719282564 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.68476276 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.85922259 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.864194014 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 2.558425376 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 2.769194508 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.636828784 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.251523841 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.93401694 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.890542715 seconds)
  done (took 30.57335401 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 7.402501296 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.478382026 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 2.798819692 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 4.450917896 seconds)
  done (took 24.552381998 seconds)
done (took 180.195766915 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.614247499 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.632860551 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.405527884 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.755799452 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.506964787 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.680371596 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.632228176 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.857766479 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.417492078 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 9.247174018 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.617686472 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.657520836 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.653252165 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.593112012 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.82749778 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.463131772 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.534371538 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.487584636 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.501315264 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.62386134 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.468746246 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.418433433 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 9.545654472 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.422458016 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 13.937540294 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 3.072028998 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.421200794 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.640660857 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.421641849 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.776956097 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.413834333 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 3.078590451 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.740873701 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.939977156 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.647490391 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.579843097 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.649936636 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.459027329 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.914795301 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.920479113 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.60252316 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.485970067 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.821682536 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.644378401 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.653357714 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.964301561 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.523630489 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.294916074 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.6552714 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.547219515 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.714402152 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.648218926 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.406944307 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.40528917 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.496069397 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.413915503 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.057566142 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.651967746 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.480366735 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.970029065 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.467855869 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.644658197 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.483009351 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.637814365 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.635074943 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.964593945 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.630418011 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.419458998 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 10.674373702 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.513882447 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.62298685 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.583758007 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.841722267 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.663859322 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.604331321 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.678285335 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.649742887 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.593206385 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.677544604 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.674827178 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.701250611 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.349653727 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.486270056 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.735595929 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.409195176 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 3.105883414 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.446950525 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.429247456 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.547091207 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.600613282 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.431461134 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.652943874 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.434963016 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.408377584 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.66138233 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.591329631 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.86455835 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.505297396 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.471789024 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.415650084 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.819212647 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.511343728 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.601587527 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.421376405 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.489366587 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.607952453 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.49746388 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.594380268 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.439190483 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.408792183 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 7.595680595 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.305178112 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.486072672 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.483200721 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.407875963 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 7.589234523 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.492827349 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.423892407 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.420895246 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.402270182 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.70678512 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.986960625 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.623543517 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.894590875 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.452596717 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.652002128 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.413893507 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.173209347 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.748228561 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.636503631 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.30127763 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.518642198 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.203874116 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.515410202 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 3.099973207 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.483957805 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.404295673 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.474172685 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.489584263 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.479187396 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.947189975 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.501844516 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.74216782 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.511868112 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.652718126 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.554876812 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.416958462 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 7.127035133 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.489605563 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.515097408 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.414860124 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 9.879628069 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.502192772 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.655880234 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.594432564 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.66310027 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.661110262 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.487722335 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.008523403 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.477115127 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.410067424 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 9.97497039 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.670879963 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.72193769 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.424254483 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 6.233839396 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.590288398 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.569060995 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.495399984 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.416797884 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 9.803758951 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.660726599 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.880490715 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.428606734 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.431221458 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.810988806 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.502586799 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.548705463 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.455970682 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.131544634 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.43074538 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.744790226 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.108019071 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.090525599 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.717046566 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.802235761 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.655933928 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.318049782 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.67315547 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.961391695 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.555128058 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.412100146 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.632451097 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.653659735 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.598436113 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.440548815 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.497428594 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.521448851 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.777305109 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.663539826 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 3.067789753 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.418514247 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.738974243 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.750818506 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.897298578 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.45517526 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.528595625 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.665430205 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.526553276 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.416358822 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.715462791 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.488249579 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.564810093 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.506613457 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.453176706 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.426394548 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.436657886 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.60724266 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.407298919 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.416332013 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 9.990767022 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.420636761 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 13.981481948 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.768786074 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 11.900127911 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.66451353 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.70764601 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.427218046 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.48687319 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.557561681 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.480087428 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.75733149 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.434297263 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.144844788 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.622674915 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.72670487 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.653478621 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.563933122 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.490080986 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.412063533 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 3.102577876 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.470180262 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.651130649 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.501249035 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.868170376 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 6.842297731 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.417796272 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 7.223126368 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.391288506 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.205695323 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.415031468 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.746297461 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.596904718 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.826875624 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.48796432 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.420742922 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.987538097 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 3.310678483 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.740046721 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.129749276 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.770745126 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.422173957 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.979697372 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.595547524 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.884146474 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.653569845 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.426966582 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 11.11557995 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.406497164 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 10.202680858 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.081600062 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.471558319 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.480566777 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.89309778 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.694068899 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.679167783 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.658302856 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.761990109 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.719973694 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.547283136 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.431329985 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.7816196 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.73895852 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.562082079 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.493995169 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.417224845 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.959709247 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.6598758 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.408086462 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.208918747 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.659912176 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.594235816 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.686433043 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.999188284 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.449578948 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.411081575 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 6.484870746 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.869264584 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.428524455 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.404783489 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.040031177 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.438033027 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.648009745 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.522352916 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.608829352 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.765886222 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.752226579 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.437286317 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.598479245 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.423886792 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.490949283 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.427686631 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.595947594 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.416340785 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 7.262604438 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.774615822 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.473195452 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.54266573 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.403230537 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.914256138 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.438137339 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.503214571 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.653817877 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.493994039 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.399697269 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.453279205 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 3.091680107 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 3.068748941 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.517556342 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.091041099 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.739168666 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.659104809 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.436021895 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.471096936 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.835501498 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.920716843 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.475786148 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.508097378 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.409552407 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.86945787 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.427190987 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.401723651 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.608127465 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.662234127 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.628892745 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.598011389 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.455084012 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.594137431 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.411849485 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 3.085030113 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.415164279 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.509624932 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.429842233 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.433198691 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.426250545 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.611396198 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.736521539 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.593062355 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.748902132 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.645111811 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.741149299 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.423231722 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.711489931 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.782225016 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.493460617 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.483771386 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.683395882 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.750213807 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.485342137 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.409211727 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 9.952649442 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.582716445 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.482591792 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.580080551 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.44933568 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.613705078 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.47483358 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.498101051 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.432331973 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.513011737 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.744389482 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.485814209 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.794908248 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.430081564 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.779171819 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.410959713 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.665004834 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.316885666 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.661775525 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.574068414 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.647012952 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.821053746 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.50681121 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.65491605 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.663466874 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.663695257 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.424751393 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.780908619 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.442536895 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.471567795 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 14.233714679 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 6.707627511 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.66878691 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.597168229 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.675524671 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.686303486 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.765329325 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.630952564 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.746299694 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.504872805 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.415608961 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 9.705597267 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.683535096 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.781038576 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.659190942 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.546042988 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.636912921 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.676758527 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.419019469 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.651032145 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.42162675 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.655217969 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.49361995 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.541560601 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.421765529 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.539045298 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.894625234 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.750634517 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.86875658 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.535184775 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.583645202 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.742445511 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.529068897 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.675657969 seconds)
  done (took 1635.047584967 seconds)
done (took 1637.452496005 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.424673851 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 7.956650043 seconds)
  (3/4) benchmarking "arrays"...
  done (took 7.424651671 seconds)
  (4/4) benchmarking "structs"...
  done (took 7.651557914 seconds)
done (took 32.903024089 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.415060353 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.800823581 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.412016859 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.761693268 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.64587444 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.414578209 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.409798269 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.604766015 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.624966053 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.581886361 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.457756781 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.610948446 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.569761316 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.584453366 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.427036848 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.479211388 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.617982343 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.50137589 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.411072679 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.720393803 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.445455196 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.636265887 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.7290632 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.402160528 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.632088394 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.677118652 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.559531772 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.402211593 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.405593367 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.629342755 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.716334165 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.492670138 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.603076806 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.401895866 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.716027332 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.404716771 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.396206196 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.57022735 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.710920414 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.616798915 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.411230213 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.401726467 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.411907511 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.409640822 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.608479048 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.40856066 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.561411137 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.695622583 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.606657849 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.662336598 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.45052459 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.624001332 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.621432452 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.617103343 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.571456701 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.571383553 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.643859162 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.797972262 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.68604478 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.405312337 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.730809344 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.405106879 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.477978011 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.402695302 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.643598981 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.764061755 seconds)
  done (took 281.198986051 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.52076052 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.433210647 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.524284314 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.696138638 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.492527903 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.455003424 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.455577446 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.465886362 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.456140047 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.464712375 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.436596167 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.465503571 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.406263427 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.456536582 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.509631129 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.442322148 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.64233389 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.121646907 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.452878019 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.532847784 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.743130175 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 3.162796189 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.459221199 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.463678006 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.435792606 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.472340362 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.437115822 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.459147877 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.461927422 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.469366444 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.450782623 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.553465261 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.43741107 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.503802394 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.936967765 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.55882117 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 3.020898704 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.44288044 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.419946255 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.969991883 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.75672935 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 3.194701192 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.97820398 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 3.214193271 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.591608447 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.440055995 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.437513492 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.434860029 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.754040683 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.680694977 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.395610003 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.122520885 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.449514941 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.476558502 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.4497427 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.502618243 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.984744647 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 3.362127629 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.434577783 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.440932472 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.503109481 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.523373148 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.521574396 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.441244426 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.681758584 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.673230042 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.754971588 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 3.21517322 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.462806818 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.461532166 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.461086768 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.45612814 seconds)
  done (took 207.948027348 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.750438636 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.554113569 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.744059616 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.659631295 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.053487257 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.755048079 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.980003559 seconds)
  done (took 21.901375984 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.071663371 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.507541109 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.065284408 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.601949444 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.887120933 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.819423301 seconds)
  done (took 20.383953967 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.472016036 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.402176217 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.291649876 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.516229198 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.458409964 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.352114494 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.510732623 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.499909887 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.452014926 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.519779264 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.628196361 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.405742185 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.468885002 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.732163587 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.693429855 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.438789391 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.28096864 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.299807711 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.592158794 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.749957137 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.454054974 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.405122187 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.759855106 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.462397674 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.506127143 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.599137393 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.454710702 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.469376677 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.627208426 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.731644904 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.442685739 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.412491934 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.462199592 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.450855076 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.638742521 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.46579625 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.663940614 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.463014025 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.465190493 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.699415455 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.467549281 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.85408057 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.401452554 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.405539113 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.462139031 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.610128218 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.530466966 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.461182582 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.301234646 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.456544074 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.744986912 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.471288768 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.701425235 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.401045509 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.742029699 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.570149405 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.460556622 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.450671345 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.45798813 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.47583744 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.454657562 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.455713437 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.70187356 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.590079357 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.495217403 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.405060845 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.444778003 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.463375091 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.462011955 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.539949924 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.449336169 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.462284947 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.587525705 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.478586345 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.40271805 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.141468741 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.591973466 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.696713492 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.455940641 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.459258893 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.448357798 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.389234091 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.462130888 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.572994821 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.449927799 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.45903907 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.745403332 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.706798445 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.699020757 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.456236424 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.160739136 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.44963455 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.486640513 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.629565309 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.478775038 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.400530793 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.450447252 seconds)
  done (took 310.41769291 seconds)
done (took 844.257434075 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 2.521103203 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 7.431422047 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 3.53600211 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 7.446866518 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.407543319 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.417525052 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 9.249457819 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 8.065492165 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 6.731787368 seconds)
  (10/12) benchmarking "nbody"...
  done (took 3.459846212 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 7.418000515 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 3.780379578 seconds)
done (took 76.872159848 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.406925818 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.40710411 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.413795595 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.408845248 seconds)
  done (took 32.03893294 seconds)
  (2/6) benchmarking "26942"...
  done (took 3.667316162 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.563800706 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.85124089 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 3.029159914 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.485925153 seconds)
  done (took 13.739808954 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.453021112 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.458762712 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.453089083 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 2.455393119 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.444225745 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 2.443360216 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.450128721 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.450957392 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.406105307 seconds)
  done (took 29.425168333 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.658801077 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 2.616662295 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.551462558 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.708946278 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.87763025 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.594383137 seconds)
  done (took 18.787183183 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.414661941 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.408099796 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.616657696 seconds)
  done (took 23.852391896 seconds)
done (took 123.915594743 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.41330107 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 2.419266344 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.928897885 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.419102593 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.939449134 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 2.422320898 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.815252571 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.826305155 seconds)
    (9/13) benchmarking "Float16"...
    done (took 7.410849663 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 13.050494036 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.472864024 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 2.581079498 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.585094164 seconds)
  done (took 81.689108336 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 2.417669488 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.414530681 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.417156044 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.423584578 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.417611028 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.424671154 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.417908656 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.415905869 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.420416981 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.41517287 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.418840648 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.41700489 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.427394248 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.407491089 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.419250148 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.420488467 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.453763967 seconds)
  done (took 43.553547185 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 3.02542002 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 3.007916093 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 2.857912138 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 3.216800388 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 3.460132282 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 3.024149507 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.448840415 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 3.013383229 seconds)
  done (took 27.45680619 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.415677274 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.417891543 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.418968726 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.412760805 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.41423289 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.422769288 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.424228086 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.416048372 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.427838726 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.418222086 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.426472417 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.415210524 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.42860209 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.409131275 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.418148101 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.410652032 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.568068996 seconds)
  done (took 43.667746506 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.404244735 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.415396313 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.412913543 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.405988917 seconds)
  done (took 32.042532519 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.425643057 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.429915295 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.427271677 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.430702748 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.414664163 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.436405541 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.446075951 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.434261396 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.450628762 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.441914745 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.443792143 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.431883498 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.438451588 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.433546113 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.455691234 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.432739935 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 3.084883208 seconds)
  done (took 44.45861101 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 2.613993427 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 4.965385816 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.119685847 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.127874445 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.445649136 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.056096753 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.646002568 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.083714127 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.1749434 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.138582759 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.390290097 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.00947907 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.181223084 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.442346012 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.73007836 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.986975864 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.421634765 seconds)
  done (took 82.941415788 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.410266598 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.409710475 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.412712624 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.406186644 seconds)
  done (took 32.039392531 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 2.449033005 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.642104399 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.617083345 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.620584088 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.418506564 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.608971627 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.75729589 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.580667586 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.621390871 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.608963635 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.81251409 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.604180157 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.640011713 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.423469622 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.761448761 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.588050096 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.411141644 seconds)
  done (took 51.57143627 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 2.437281975 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 2.438335274 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 2.434554693 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 2.448243029 seconds)
  done (took 12.169041451 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.416000015 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.412031692 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.414390924 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.409091139 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.410957792 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.427480791 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.413753682 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.411796102 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.414158824 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.410906549 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.412668288 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.416216792 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.423059399 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.415492162 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.422422017 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.414991929 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.453559192 seconds)
  done (took 43.508124423 seconds)
done (took 497.506401966 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.624898653 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.616190563 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.639963192 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.661790926 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.643084293 seconds)
  done (took 15.596093256 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.416053216 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.104561556 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.453920048 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.785790482 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.518297638 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.795119865 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.436929783 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.818972997 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.965858014 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.205682316 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.41838475 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.464709642 seconds)
  done (took 106.801722408 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.882074303 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.762551912 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.440649113 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.409440925 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424239486 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.151187168 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.534173147 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415225823 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40786888 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415579302 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.553987388 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.420098479 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417391441 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.407716007 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.434799306 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411314329 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.904542226 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.419733639 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.441181595 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.451003782 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 4.164437754 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418223869 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.422522136 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.443440176 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.673475037 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.428086276 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.416968333 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.585885577 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.974812202 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.4205515 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.405037492 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418522617 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412717189 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.314610533 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.418409599 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.414127606 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410454573 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.909991135 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.431648054 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416063789 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.910364624 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407303238 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.441765573 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.415431753 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 3.536404244 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.96341917 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413199124 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.658338276 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412079398 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.542381376 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.408059165 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.591041694 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422757084 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.52587675 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.395802934 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.405170249 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406547059 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.458921877 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411114882 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.50860908 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.406470748 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.827577513 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.807316273 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412033903 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417036282 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.075279989 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.582829823 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423885723 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.51090533 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413314488 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405047224 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414766417 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404568047 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410365266 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.442410575 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411858634 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.719933262 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.41788036 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.363692271 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.403830459 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.394933997 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.408197937 seconds)
    (83/608) benchmarking "6d"...
    done (took 7.410629976 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409312528 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.19956742 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.505473552 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.377022884 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.416810571 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412167978 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.42507576 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.41848569 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.405946994 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406660075 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.211350922 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417622619 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407384821 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.4096386 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.850983875 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.709486363 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.4113337 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418506067 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411775653 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405385305 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 3.149080112 seconds)
    (105/608) benchmarking "5d"...
    done (took 5.507672731 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.547710099 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412829985 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.407533759 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.465788757 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411430322 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.41428121 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.401129063 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.407262094 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408745988 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.406346118 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.412360935 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.813322798 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.408223012 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 5.629604946 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.508796276 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.587092869 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.418876423 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.401643652 seconds)
    (124/608) benchmarking "3d"...
    done (took 4.002816181 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414780059 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.403913485 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.411054144 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.467707051 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.433375947 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.399824671 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409028154 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.413432838 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.404853847 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.420272721 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.897258616 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.409612347 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403575905 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.275257789 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416011661 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.813729181 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.820804619 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.4064496 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.444873171 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.411169936 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.408539089 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.80833377 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.341321322 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406796388 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.543808562 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.852908742 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.636375149 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.891593688 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.444623037 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.811663712 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.442306863 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415641052 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.224478976 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.512519701 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.897596283 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.620995848 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.902379988 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.414117608 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.46706648 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.417868253 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.644330242 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.4073237 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409859994 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.410611317 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.439816408 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414430481 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.013524715 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.93233682 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.420505052 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.407304034 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.40340408 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409363893 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.42120937 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.570470307 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.430640603 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.070737034 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.407825584 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.436761481 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.405258318 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.603668351 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412977838 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412342013 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407866924 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.409892957 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40707813 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.412240408 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.626534474 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413645704 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414387036 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.408480052 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.967641423 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.452080398 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.522945488 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408181277 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405642964 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.256285695 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.417136035 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.412324705 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.409028813 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.445739906 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.41164759 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.682492279 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.139327721 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409757014 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.831387625 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.480329249 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412419293 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409934438 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41431172 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403333299 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.44594775 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411436983 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408377232 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411729505 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.711620391 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419240673 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.663748391 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.418452344 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.822008678 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.752934879 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.40634294 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.757831683 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415214625 seconds)
    (228/608) benchmarking "7d"...
    done (took 4.952808001 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420298195 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404342161 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.635547398 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.401039637 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.416294922 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.425906051 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.407722221 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.409861755 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.016099373 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411217414 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41283034 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.419477127 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.851953679 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.884676309 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.510187511 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415107434 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.912911264 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.444757735 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.416489985 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40521787 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.847955789 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.408788661 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.102112694 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.734923066 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.577981617 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.42069435 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.407169543 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413313253 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.412114669 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.810715151 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411483343 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.408695349 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424667311 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.438374763 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.009699123 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.404735242 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.406221002 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418869776 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422634033 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.410234061 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.406432938 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.640508292 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413422233 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.406068112 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414554085 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.451512055 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41275376 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.639319622 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.51819756 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.814028994 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.416194298 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.468550577 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.404402987 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415010647 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.434485159 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415232701 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406838229 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.407554022 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.683670646 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.438504088 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413415894 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413988859 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.446419787 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.411711981 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405893693 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404383067 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.287587142 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.402756252 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.410618098 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412843794 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.423150215 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431830525 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409623492 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415610454 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.191628495 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.408684782 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.860851526 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.65942537 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.419545557 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410325501 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.431935758 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.409934428 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.92362678 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405668454 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408015633 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.345711236 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409435902 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410278922 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.405078308 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.445821981 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.493439338 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414970282 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.409668609 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406642732 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 5.998190119 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424904206 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.414070706 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410267133 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411445971 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.670596038 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404512384 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408909555 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417560228 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.689027722 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.407528409 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.416788341 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.408141828 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413418826 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.768059802 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.825780359 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.103781734 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.253425365 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.599138943 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417198314 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41538454 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.443941263 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.578133941 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.408852812 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411467627 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414677588 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.433975129 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408941846 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411866964 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.408156099 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.409363176 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.888742487 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.598027553 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413542877 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409122285 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417033993 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.408690873 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.443029562 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.933630033 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.402199845 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.932784708 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413245446 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.406867077 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.256743516 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408009712 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417689985 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412022708 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.889588558 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.891969957 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.415309047 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.518041768 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.51739189 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.410671607 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.661652382 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.662780108 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.423216197 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.509112533 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.010533206 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.64071138 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.417075589 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411714229 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40643261 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409934529 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.450857958 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4103482 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.414063394 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413022197 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.753503558 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.436899501 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.193883147 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.398156762 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.569635395 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.542258776 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404778 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.556271303 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.412417957 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406271933 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412607647 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.428018515 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.300009418 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.889712715 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.452905123 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.707569555 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415462595 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.671344178 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.415183112 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.930836587 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.402221734 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403408383 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.864873278 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.808414153 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.406880549 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416415851 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411883743 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407719019 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404058868 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.43301503 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.554435387 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.661309817 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.574251946 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.542177768 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.405018692 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414372694 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413896007 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.411208185 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.442389708 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409905554 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.481103775 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.465939236 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410035069 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.407182323 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.618579822 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.406493126 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425620317 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414559835 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.556397644 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.503335641 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413211854 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409477823 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416144068 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.402606367 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.453976888 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.25048362 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.417750749 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.821748546 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.407821344 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.473552637 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.407181673 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.414860665 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.40391838 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403114191 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410319267 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.411047615 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.814207136 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.416835711 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.637615095 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.136654001 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.518566333 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.989377854 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.409959177 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414939456 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406492491 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.013703855 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409699909 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.427841078 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.404477041 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.009419086 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.513340044 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 7.563830757 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411953014 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.409301729 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.461052966 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.417876557 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.537244226 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.420724626 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.927305371 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.808574779 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.407463887 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.478599653 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.961636788 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.407710349 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415409503 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406333194 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.475611415 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.417588099 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419298729 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410212918 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40766624 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415109764 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.557850461 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.005758146 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.40881198 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.410574559 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.670850652 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408929841 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.190856768 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413544296 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.408346387 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.405734241 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414368775 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 5.623918504 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.417888767 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.405932517 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.283508239 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.410746174 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408865343 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.094263933 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.425606995 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413021119 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.405569318 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411373828 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.406366205 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417161421 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.822813041 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437737514 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.406691233 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408168338 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413588886 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.420544526 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.17525202 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.411843313 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414440591 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.417925623 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413278174 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.787113084 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.41845335 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.407950603 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412970303 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404408919 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.865764777 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.406663133 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.17434211 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405944401 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.404807661 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412526552 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414824354 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412530151 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.410544431 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411372575 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.243555418 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.420523764 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404957941 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.289568859 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409647489 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.403420548 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.336618995 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415181563 seconds)
    (550/608) benchmarking "4d"...
    done (took 4.231550807 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.409637293 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.88386333 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.413549686 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.536651983 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.449632595 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412929859 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.466867306 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.894503832 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.416539009 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.407224962 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411828813 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.406971398 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410730484 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.432462536 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.436622646 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.914001273 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410498695 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.410181235 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.667781147 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.428100113 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409427258 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.409441525 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.799994598 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411343598 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405035544 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41767313 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412442475 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.794479888 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423897999 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414745716 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.578577202 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.44793941 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.427005387 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.416320891 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.448952482 seconds)
    (586/608) benchmarking "2d"...
    done (took 3.672781139 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419766502 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413100735 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.435114582 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40672659 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.448041842 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.405789622 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415867612 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.410562825 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.407409561 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.197867203 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.510991972 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.691905234 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411870311 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.224584659 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 2.548367829 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409123978 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.406629272 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.407942883 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.42110974 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409880924 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420825476 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414320853 seconds)
  done (took 3914.281663774 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 2.929174253 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.05669246 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.34470337 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 2.863733491 seconds)
  done (took 14.596582699 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.420405861 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 2.889726502 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 2.845045245 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.775503157 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.41610338 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 7.408752125 seconds)
  done (took 33.168929166 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 2.544476345 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 3.031145477 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.480674143 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 3.061213659 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 2.570942308 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.55026903 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.42108861 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.411500721 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.07709633 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 3.197951141 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.398818759 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.420662793 seconds)
  done (took 55.579314361 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.619745104 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.494035139 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.50929866 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 2.615210583 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.344375873 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 2.485140018 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.147658382 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.665005796 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.712169931 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 2.587889928 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.498417159 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 2.476139094 seconds)
  done (took 34.559684275 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.315888053 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.82166523 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 3.384977626 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.276277888 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 2.493134467 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 3.301499972 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 3.309771002 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 3.14620571 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.224574535 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 2.517838402 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 2.584515583 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.288493972 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.526847453 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.283265038 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 2.979434073 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 3.349151672 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 2.845888126 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 2.937617127 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.229095105 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 3.645030323 seconds)
  done (took 64.864388906 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.418395546 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.414487467 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 7.406078517 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.412342635 seconds)
  done (took 32.066163859 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.733570976 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.780493206 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.775794862 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.71661869 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.738554844 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.763451343 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.65366405 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.774747522 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.761388447 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.731226296 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.760344449 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.760356016 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.775938839 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.727940963 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 3.099062823 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.774674958 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.762940971 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.652294726 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.757919032 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.753221819 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.719667392 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.658993106 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.648241265 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.099327301 seconds)
  done (took 68.792875271 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.420050922 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 7.41036005 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 4.932095483 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 4.699752388 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 2.8887036 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.593062575 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 4.790481527 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 7.843804446 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.434450946 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 2.458350303 seconds)
    (11/17) benchmarking "4467"...
    done (took 2.589798214 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.544349248 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 7.841057492 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.415306957 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.593568306 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 7.903862231 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 7.420395459 seconds)
  done (took 96.193557 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.579141575 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.4918074 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.566678636 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.607563321 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.434321471 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.444609638 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.526864974 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.508079144 seconds)
  done (took 62.565865064 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.862868934 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.477110147 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.679495603 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.522430444 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.816971697 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.821438191 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.617670448 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.626395331 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.472558344 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.817345634 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.413010135 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.776685088 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.660319655 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 2.6386444 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.44701491 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.80333862 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.638894901 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.658291578 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.769179664 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.746686138 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.448613213 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.641969782 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.660538296 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.045164541 seconds)
  done (took 71.475628027 seconds)
done (took 4572.954491484 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 2.51008421 seconds)
    (2/4) benchmarking "identical"...
    done (took 2.715058257 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.578428232 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.578129135 seconds)
  done (took 12.793082528 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 3.345411502 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.979622804 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 5.140845624 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.441730448 seconds)
  done (took 18.313575217 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 2.475175213 seconds)
    (2/3) benchmarking "equal"...
    done (took 2.723650439 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.456836524 seconds)
  done (took 10.48816414 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.442804911 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 2.613496334 seconds)
    (2/2) benchmarking "Char"...
    done (took 2.533182862 seconds)
  done (took 7.559207094 seconds)
  (6/7) benchmarking "join"...
  done (took 7.453743901 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 6.814305281 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 3.088641523 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.097592722 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 2.671162901 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.393464845 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 5.147893825 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 7.214779517 seconds)
  done (took 33.854100417 seconds)
done (took 96.322708912 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 7.501235525 seconds)
    (2/36) benchmarking "symv"...
    done (took 3.985335938 seconds)
    (3/36) benchmarking "dotu"...
    done (took 3.438050445 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 5.117946626 seconds)
    (5/36) benchmarking "scal!"...
    done (took 3.349926764 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 7.510159977 seconds)
    (7/36) benchmarking "trmv"...
    done (took 4.039397304 seconds)
    (8/36) benchmarking "asum"...
    done (took 3.200133399 seconds)
    (9/36) benchmarking "gemm"...
    done (took 7.465863685 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 4.995103922 seconds)
    (11/36) benchmarking "trsm"...
    done (took 7.458864001 seconds)
    (12/36) benchmarking "ger!"...
    done (took 7.4172292 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.134443149 seconds)
    (14/36) benchmarking "syr!"...
    done (took 7.421250644 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 5.034967103 seconds)
    (16/36) benchmarking "symm"...
    done (took 7.499240933 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.657168333 seconds)
    (18/36) benchmarking "scal"...
    done (took 2.550251045 seconds)
    (19/36) benchmarking "trmm"...
    done (took 7.467264419 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 4.017073188 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 7.44745882 seconds)
    (22/36) benchmarking "dotc"...
    done (took 3.431891974 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 7.459915009 seconds)
    (24/36) benchmarking "syrk"...
    done (took 7.446813148 seconds)
    (25/36) benchmarking "gemv"...
    done (took 5.683995209 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.632099757 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 3.281533712 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 5.145673593 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 4.109921806 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 3.619959654 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 7.450910868 seconds)
    (32/36) benchmarking "her!"...
    done (took 7.416485931 seconds)
    (33/36) benchmarking "herk"...
    done (took 7.617415968 seconds)
    (34/36) benchmarking "dot"...
    done (took 3.448163131 seconds)
    (35/36) benchmarking "herk!"...
    done (took 7.580811981 seconds)
    (36/36) benchmarking "symv!"...
    done (took 3.936898098 seconds)
  done (took 200.391992693 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.465845233 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.415834802 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.488320754 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.418004653 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.411326342 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.751416001 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.410142772 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.418861516 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.42386342 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.415188088 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.418817639 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.44371776 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.412093599 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.472266032 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.41500065 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.409939074 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.420224971 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.587853634 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.423911805 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.936053967 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.413500469 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.41520453 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.496134116 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 23.934521344 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.422170366 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.418058445 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.509527197 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.415013171 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.414817104 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.417412551 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.278746217 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.424258912 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.422390444 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.415659666 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.416061576 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.470022675 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.800276974 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.537044137 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.65730394 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.412081608 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.500324348 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.470009082 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.411561551 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.415217709 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.126410982 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.419368297 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.156823851 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.476205487 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.417773386 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.419237299 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.116606552 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.410945479 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 23.803558724 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.173863619 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.437915801 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.414919654 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.413092581 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.415315648 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.476303521 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.413849664 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.412249477 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.41515514 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.424420662 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.448456354 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.441394918 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.414599654 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 23.008096424 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.481162034 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.491519892 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.476570848 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.414826787 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.412797761 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.420754324 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.413982732 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.415212758 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.415071449 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.412078878 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.412390955 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.419279456 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.622328781 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.412272192 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.416871911 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.414343223 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.48567527 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.420498147 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.632525545 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.497695596 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.11995261 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.476934153 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.411895077 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.431326744 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.170808443 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.414961491 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.792093348 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.351482747 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.412836544 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.413317756 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.412086942 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.142352574 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.420787437 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.409787134 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.41044865 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.406389819 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.495665705 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.427241253 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.487258818 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.430002597 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.1463796 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.445623025 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.412677736 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.412688437 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.416737158 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.408849752 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.798362745 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.413442296 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.415075798 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.539521101 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 23.774812855 seconds)
  done (took 484.428298171 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.518410897 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.460148029 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.529830436 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.497177966 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.773717095 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.430690767 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.493159057 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.418096747 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.443125519 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.302434362 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.435478817 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.414433892 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.115642484 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.488512071 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.537224192 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.455896355 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.51485943 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.432188502 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.79397196 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.547839699 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.443069563 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.509209586 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.496140148 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.417653593 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.42587537 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 9.089976029 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.128510716 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.37885628 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.426437733 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.414566723 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.449777067 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.57705072 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.495591121 seconds)
  done (took 220.74722461 seconds)
done (took 910.5057887 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.422257118 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.428830916 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.424447327 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.443408876 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.424986278 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.418830628 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.424522234 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.425173779 seconds)
  done (took 21.830589141 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.447356979 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.864608849 seconds)
  done (took 7.725797573 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.407374982 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 2.416111442 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.419839615 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 2.418622865 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.475267343 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.419142604 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.428966001 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.424678518 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 2.424657038 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.422364926 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.427997501 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.431097072 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.42100395 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 2.423754603 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.432429486 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 2.4357622 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.420040804 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 2.45396619 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 2.422958907 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.432689073 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.420783626 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.423697638 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.427891574 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.431363794 seconds)
  done (took 60.680921968 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.450040789 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.420839629 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.444449973 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.468243024 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.428959586 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.438923454 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.425539561 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.423150996 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.43542106 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.427138296 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.43340892 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.424897705 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.44170489 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.435213261 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.437067783 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.428463308 seconds)
  done (took 41.37886269 seconds)
done (took 134.032734199 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.601761612 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.557155069 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.83657755 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.060692131 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.614836166 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.592474215 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.543299957 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.583579106 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.690469374 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.537069687 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.566579454 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.590765755 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.905876958 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.367225886 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.570822156 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.547088486 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.545086648 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.825117842 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.103172378 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.962673317 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.357607664 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.618221536 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.4235033 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.175892244 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.94803531 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.550597972 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.959708081 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.686897515 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.626425056 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.54540433 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.868066596 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.616874663 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.052450345 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.975089486 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.394940972 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.579457857 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.548537816 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.546938023 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.528858053 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.647813811 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.618595821 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.656894203 seconds)
  done (took 122.939550363 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.461974123 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.532401787 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.492644082 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.458585729 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.466110575 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.496779774 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.496142524 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.561760997 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.519712805 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.542363748 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.946687114 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.533672657 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.528735957 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.500466915 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.961699669 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.488489784 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.50439677 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.938135257 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.478470973 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.530042402 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.459238248 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.528445761 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.526954758 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.954814998 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.457221873 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.54651007 seconds)
  done (took 69.326668539 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.749721661 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.939656411 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.803922544 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.469998419 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.60053506 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.064408686 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 2.683549419 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.48083233 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.654003866 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.578806151 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.697713645 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.481321537 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.480303041 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.536642973 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.597203219 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.995474084 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.923932687 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.619980851 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.726718256 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.510895139 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.548362404 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.40455467 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.638507406 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.58903812 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.773446647 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.897444321 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.318719973 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.791222985 seconds)
  done (took 83.967113654 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.466567543 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.564498185 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.362345159 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.51495703 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.902156131 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.516853789 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.700164945 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.724972736 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 3.15864575 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.032317743 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.646770574 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.488122237 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.455476697 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.594931656 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.530851151 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.249830038 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.20077402 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.764411928 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.571862319 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.352995804 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.726572521 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.55690408 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 2.573347926 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.709773744 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.523721081 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.772169285 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.81760213 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 3.256773889 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.094667703 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.530037383 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.45664392 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.604397483 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.066992711 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.750448378 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.371381911 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.651231735 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.480542687 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.553020796 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.557937102 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.512057415 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.631256682 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.517538504 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.815738789 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.393295422 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.894268119 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.608670769 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.660553269 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.252724372 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.725194734 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.522769817 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.489416374 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.430140269 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.579260865 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.525245073 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.711046095 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.580222802 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.656725349 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.579587879 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.604363038 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.610338156 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.943104371 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.208782824 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.869543696 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.671140453 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.412397905 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.115721536 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.60669173 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.273621817 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.108754943 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.516100451 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.505582453 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.682253998 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.708964948 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.471032521 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.636628258 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.209970963 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.478368246 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.569990288 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.061720364 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.355275374 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.716864862 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.943532018 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.257327676 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.990299566 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.584791751 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.938730994 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.607300774 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.587754629 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.526962458 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.669929779 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.766671702 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.564216089 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.911316763 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.521838657 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.525982153 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.555933244 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.516700861 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.565019964 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.70861763 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.509209959 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.60225846 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.308825886 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.003718505 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.707310069 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.912729551 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.485304074 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.491136659 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.500275741 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.675560787 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.731901374 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.674938128 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.745802621 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.947791759 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.692994419 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.450570372 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.815767382 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.354702313 seconds)
  done (took 346.056950646 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.473750742 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.874790049 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.792380277 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.487630583 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.492416697 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.441336546 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.622363705 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.487628317 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.539797589 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.479314316 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.716875098 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.762190278 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.932534338 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.561945162 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.541142448 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.564879618 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.681792834 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.674620324 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 2.451703093 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.477048587 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.619882232 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.539192558 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.447271591 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.70631791 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.600601136 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.741361274 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.448929892 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.494171124 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.463839245 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.482520848 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.825386219 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.56389457 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.803806821 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.841905895 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.504549187 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.553677107 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.708565468 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.50072337 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.537726808 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.911856584 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.45886256 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.463788782 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.913235686 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.482945246 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.57457396 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.459879268 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.266757577 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.549383043 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.657850787 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.648952252 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.484436778 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.611768834 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.485949337 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.660555765 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.464094337 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.950474052 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.638098935 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.785747867 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.47976467 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.549339004 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.618169421 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.413787377 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.980178093 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.719983603 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.663129403 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 2.482698607 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.474086834 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.474079656 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.549456948 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.457639443 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.633620657 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.446911944 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.126947388 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.975204245 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.878978332 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.816453168 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.713425674 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.784974417 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.479865793 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.801700972 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.46067281 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.87299337 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.211685498 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.829074537 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.895801322 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.650348258 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.510784793 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.083605573 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.53493337 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.71634217 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.440710464 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.659518215 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.445746871 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.471868818 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.441714566 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.637290609 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.542232086 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.849441296 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.614855584 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.473740593 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.514045629 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.744944903 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.524687994 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.801778716 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.745768507 seconds)
  done (took 288.512071279 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.410118176 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.634668076 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.423385843 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.396197998 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 4.116355331 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.404447721 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.410418514 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.417549172 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.239046023 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.510504951 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.414421303 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.560597755 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.412531583 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.41364824 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.409112893 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.411178372 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.410018318 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.414723322 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.409209431 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.415135821 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.412193332 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.420188119 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.557566844 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.409618505 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.068063393 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.775283421 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.421336789 seconds)
  done (took 183.705792115 seconds)
done (took 1096.918957752 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 34.365542877 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.097925535 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 34.054774529 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.1680742 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.51164421 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 33.489076713 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 33.512837334 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.5371209 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 33.695014355 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.685009689 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.281615095 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.467713498 seconds)
  done (took 428.274854085 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 34.990650566 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.391263829 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 36.54993259 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.402774734 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.079695574 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.688554522 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 36.607717084 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 38.395921155 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 36.488833704 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 37.062934409 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.749095207 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.573594411 seconds)
  done (took 445.638894686 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.36007018 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.652803013 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 39.669698268 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.618767027 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.042009246 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.905705364 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 39.00717627 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.378514461 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 39.246239901 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.712710472 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.432962559 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.760159228 seconds)
  done (took 457.178380172 seconds)
done (took 1333.501528267 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 10.371657064 seconds)
done (took 15.784635332 seconds)
SAVING RESULT...
DONE!
