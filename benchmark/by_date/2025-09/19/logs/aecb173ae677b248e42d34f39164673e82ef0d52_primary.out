cset: moving following pidspec: 2035355
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "find"... done (took 2.526865311 seconds)
loading group "problem"... done (took 1.541699194 seconds)
loading group "io"... done (took 1.473263041 seconds)
loading group "simd"... done (took 1.092503082 seconds)
loading group "sparse"... done (took 0.538501739 seconds)
loading group "micro"... done (took 0.04529468 seconds)
loading group "parallel"... done (took 0.019272899 seconds)
loading group "dates"... done (took 0.181704805 seconds)
loading group "scalar"... done (took 1.137295046 seconds)
loading group "misc"... done (took 0.399298606 seconds)
loading group "union"... done (took 2.788614508 seconds)
loading group "alloc"... done (took 0.016727203 seconds)
loading group "random"... done (took 2.081803556 seconds)
loading group "shootout"... done (took 0.61622079 seconds)
loading group "broadcast"... done (took 0.651487684 seconds)
loading group "sort"... done (took 0.310879748 seconds)
loading group "array"... done (took 2.47649321 seconds)
loading group "string"... done (took 0.19828158 seconds)
loading group "linalg"... done (took 2.479699856 seconds)
loading group "tuple"... done (took 0.569992993 seconds)
loading group "collection"... done (took 5.561645402 seconds)
loading group "inference"... done (took 2.613784104 seconds)
loading group "frontend"... done (took 0.003614069 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.089989009 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.036959903 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039733692 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6212e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039736402 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.053273789 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040238571 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.05272314 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039708087 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 1.8752e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039044076 seconds)
  done (took 1.140179652 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.085354457 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.1047e-5 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.085300133 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.050163722 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 0.018872044 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.2931e-5 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.083828111 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.3952e-5 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081319415 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.085398333 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.0855333 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.081551446 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.088579919 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 1.9059e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081433332 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.5811e-5 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4309e-5 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 9.585e-6 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.0800232 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.4503e-5 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079839357 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.5319e-5 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 8.016e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.4074e-5 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.1841e-5 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 8.528e-6 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.079660805 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.2695e-5 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.3293e-5 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.4305e-5 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.1117e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 9.001e-6 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080400263 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.6434e-5 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1952e-5 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1309e-5 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.0375e-5 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08108393 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.1667e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 7.029e-6 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 9.516e-6 seconds)
  done (took 1.904965325 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030624788 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.026728684 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040103024 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.529e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040017041 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.050628991 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039810909 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.049863584 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039676096 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.2018e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039696265 seconds)
  done (took 1.04318166 seconds)
done (took 4.83398736 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.25141318 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.203659751 seconds)
  done (took 1.132370966 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.263622373 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.220626997 seconds)
  done (took 1.169061966 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.250011154 seconds)
  done (took 0.940844862 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.089040574 seconds)
  done (took 1.78097295 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.320954921 seconds)
  done (took 1.006724613 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.341523419 seconds)
  done (took 2.040711548 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.69157437 seconds)
  done (took 1.392513734 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.667551279 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.120583593 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 0.149505827 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 1.123801935 seconds)
  done (took 3.767094536 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.713793784 seconds)
  done (took 5.428952126 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.417045876 seconds)
  done (took 1.126634679 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.966359767 seconds)
  done (took 1.674517712 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.0496106 seconds)
  done (took 0.757388862 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.983663817 seconds)
  done (took 1.694733573 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.51919412 seconds)
  done (took 2.233959358 seconds)
done (took 26.827874746 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.831861321 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.889705871 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.737957528 seconds)
  done (took 4.172498375 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 0.033915222 seconds)
    (2/2) benchmarking "readstring"...
    done (took 0.02211069 seconds)
  done (took 0.8010188 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.868106883 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.132833608 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.020769961 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.037952806 seconds)
  done (took 1.777470196 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 0.236051104 seconds)
done (took 7.718968624 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.192063984 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.088710248 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.04298624 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.080170689 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.045964564 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.104247351 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.063451429 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.09394836 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.07374597 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023910774 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.051508584 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031452137 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.081582776 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.05448318 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.083899345 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.078576953 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.061880662 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031683385 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.057449664 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.050172319 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.063531766 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.06022724 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.062836764 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.023733316 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.050480751 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.060031382 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.126e-5 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.070595155 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.078533536 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.070238554 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.0694722 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.060682565 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.039895688 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.056134068 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032715598 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030556806 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.070978175 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.071545918 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.079915578 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027689568 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 3.2954e-5 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.056924788 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.062035666 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.045435117 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.066222761 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057040388 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.075707147 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.046240623 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 3.2209e-5 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.056176292 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.072182905 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.08027513 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.9469e-5 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.8874e-5 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.058354699 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.049599354 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 3.3003e-5 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.065240085 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 3.1667e-5 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.04834677 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.074288982 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.054522163 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.07300408 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.067493457 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031439111 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.069374979 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 3.2011e-5 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.066732474 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.3312e-5 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.040426883 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.473e-5 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.054858933 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038853121 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.4921e-5 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.066644029 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.070025172 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.065706418 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.07278637 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.02782124 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.078946137 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.040526554 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 5.496e-5 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.2036e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.068978432 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.3512e-5 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.031322064 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.053900392 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.06132687 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.1205e-5 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 3.5528e-5 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.058119102 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.055507587 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.057061733 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.063785399 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.074309639 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.0416e-5 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.034540447 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.7351e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.073680661 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031470924 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.061909025 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.04806356 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.070295028 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.071099098 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.029393606 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.031472761 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.7792e-5 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.045291642 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.039912763 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 3.6837e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.059785006 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.066244021 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.04666633 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.039203417 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.6243e-5 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 3.1104e-5 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.8889e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.0877e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.071399853 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.066183089 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.03213849 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 4.1056e-5 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.057550872 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.5989e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.1851e-5 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.067902603 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.062175238 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.3028e-5 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.047042606 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.028016892 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.9879e-5 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.028766264 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040322083 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.076489262 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.076124639 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.9316e-5 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.049486993 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.2516e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.3255e-5 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.04877758 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.4269e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.042e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6539e-5 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.069123337 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.039062682 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.045517579 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058681914 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.064396792 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.7474e-5 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.047238915 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 3.2207e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.063389714 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.067143625 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.5443e-5 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.4022e-5 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.493e-5 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.049890819 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.2813e-5 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.066441505 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.063048285 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.6161e-5 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.8145e-5 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.07338273 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.075341931 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 6.3546e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.063103351 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.7581e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.053947537 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.047915267 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.057685039 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 9.8915e-5 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.966e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.1496e-5 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.8819e-5 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9539e-5 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.062028247 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.194e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.071698065 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.8302e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.0913e-5 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028159436 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.4313e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.063701641 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032501658 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 3.8105e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.066987826 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.031665115 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 3.3767e-5 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.641e-5 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.0507e-5 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.3575e-5 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056853309 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.029541736 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.9585e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.1341e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 3.4229e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.9099e-5 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.1552e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.071305402 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.0527e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.3551e-5 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.3823e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.8676e-5 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036400606 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.3715e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.5676e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.045909837 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.079025749 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.063250562 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.3788e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.7802e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5113e-5 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.0152e-5 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.03995304 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 4.6843e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.031190852 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 3.7755e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.8397e-5 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.054755492 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.048788855 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.966e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.588e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4438e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.2285e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.3226e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.080371835 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.039228952 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.127070343 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.1555e-5 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.9022e-5 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.0296e-5 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.4438e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.9373e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.6937e-5 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.635e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.9104e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.035792407 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.05904305 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.2849e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.4529e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.1502e-5 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3489e-5 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.5173e-5 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.061199634 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049420249 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.2163e-5 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.043e-5 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.9297e-5 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 4.7001e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.069544904 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 7.8563e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.6013e-5 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.1129e-5 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.05760357 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.066800223 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.4992e-5 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.4693e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6549e-5 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.8208e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.066718741 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.7409e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8444e-5 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.035217165 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.7006e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.064366289 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.095e-5 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.6626e-5 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.063442159 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 4.0503e-5 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6635e-5 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.6772e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.329e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.8132e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1316e-5 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9861e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.8901e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.1175e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.9188e-5 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.07370595 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 8.0904e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.071073977 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 3.7417e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.0953e-5 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.011062586 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.5774e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4317e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.1783e-5 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.054379352 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.8016e-5 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.055680176 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.072384936 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.6688e-5 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.1059e-5 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4841e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.060485933 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.6326e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.9965e-5 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.057230767 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 3.1583e-5 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.6186e-5 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.4141e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.064092829 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.6934e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.4809e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.7956e-5 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028315413 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.2885e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2154e-5 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.0838e-5 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 3.2495e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.8028e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 3.3499e-5 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.1298e-5 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.6347e-5 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.4483e-5 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.031273247 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 3.9902e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.059996349 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1727e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.039699953 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.049675238 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.9064e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.9446e-5 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.0928e-5 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.6211e-5 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.6039e-5 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.071264381 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 3.3805e-5 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.2855e-5 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.9282e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 3.6463e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.050584622 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 3.4136e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.5127e-5 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.0752e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 3.6786e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.8645e-5 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.8911e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.8105e-5 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.6791e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.5825e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.2716e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.4277e-5 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.7788e-5 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.3728e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.2535e-5 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.4e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.3465e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.0917e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.051e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.7442e-5 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011033308 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.9939e-5 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 3.1945e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.9659e-5 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.2736e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.0776e-5 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.514e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.8681e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.2868e-5 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.9243e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.0619e-5 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4009e-5 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.7016e-5 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.3848e-5 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 4.835e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3886e-5 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.0808e-5 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.0236e-5 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.8066e-5 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031258251 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.02858716 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 3.1159e-5 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.6928e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.4261e-5 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.8841e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.062840517 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 3.0182e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.9306e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.0186e-5 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.9507e-5 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.8849e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.6844e-5 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.0652e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.8574e-5 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3432e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.4734e-5 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 9.206e-6 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.5495e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.8825e-5 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.391e-5 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.2157e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.8946e-5 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.6372e-5 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.3156e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.2932e-5 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.9693e-5 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.7479e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.137e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.163e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.7581e-5 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.2158e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.3513e-5 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.8259e-5 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4368e-5 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.1511e-5 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.036832189 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.2336e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.8178e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.5913e-5 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.6949e-5 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.7767e-5 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.0676e-5 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.653e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.744e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.8034e-5 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.5809e-5 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.3909e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.2997e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.2811e-5 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.8864e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.7255e-5 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.2713e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.077331836 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4179e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.2585e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.35e-5 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.8315e-5 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.3452e-5 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.7195e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.4087e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.5332e-5 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028019435 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 3.9877e-5 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.6548e-5 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.4888e-5 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.3183e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.7425e-5 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.8457e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.9977e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035798255 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.8589e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 3.3312e-5 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.265e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.7653e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.8603e-5 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.5722e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.6783e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.060617542 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 3.1892e-5 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.3281e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6104e-5 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.3507e-5 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.4488e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.117e-5 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.9839e-5 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.0223e-5 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7153e-5 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.3385e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.067404301 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.713e-5 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.9541e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.1589e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.9956e-5 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.9898e-5 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.8065e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.6509e-5 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.7576e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.8789e-5 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.2207e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.9968e-5 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.4091e-5 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.6588e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.0937e-5 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.1823e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.4354e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.3305e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.4196e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.3798e-5 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.6959e-5 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.4068e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.3095e-5 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.6467e-5 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.010980868 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 3.1365e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6393e-5 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.9742e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.9745e-5 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.2101e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.6541e-5 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.5179e-5 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.8131e-5 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.3113e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.6655e-5 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.9019e-5 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.2971e-5 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.9212e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.3563e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.2556e-5 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.7528e-5 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.0445e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.4016e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.5561e-5 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.3963e-5 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.3284e-5 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.1377e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.9245e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.4511e-5 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.68e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.8128e-5 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.2792e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.7398e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.4085e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.263e-5 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.6979e-5 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.9809e-5 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.356e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.5202e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.5075e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.4753e-5 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.4222e-5 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029477488 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.871e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.3284e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.14e-5 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.8562e-5 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.3544e-5 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.8774e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.9603e-5 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.0498e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.1978e-5 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.3112e-5 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.8129e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.2418e-5 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.8322e-5 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.8013e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.9379e-5 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.9648e-5 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.5391e-5 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.7559e-5 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.3866e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.3509e-5 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.9912e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.051324708 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.84e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.9986e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.9063e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.0224e-5 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.8151e-5 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.4869e-5 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.1605e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.6559e-5 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.2415e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5025e-5 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.747e-5 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.7809e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.2047e-5 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011316321 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 3.0105e-5 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.1375e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.1675e-5 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.8252e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.6049e-5 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.2689e-5 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.6487e-5 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.7942e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.765e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.6986e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.2115e-5 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.0881e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2394e-5 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.7559e-5 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.0548e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.0925e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 3.8275e-5 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.1144e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.6105e-5 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.248e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.9912e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 3.2272e-5 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.444e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.7131e-5 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.5781e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.657e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.101e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.1049e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.3943e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.0219e-5 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.9616e-5 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.4015e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.1115e-5 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.0779e-5 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.3362e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.2891e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.1839e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1034e-5 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.8333e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.2918e-5 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.9285e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.3263e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.6548e-5 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6104e-5 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0113e-5 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.3815e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.6477e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.7508e-5 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031920583 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.4578e-5 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.1607e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.7143e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.3203e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.9198e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.9506e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.1949e-5 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.6251e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.1271e-5 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 3.7311e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.0269e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.56e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.0691e-5 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.9801e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.347e-5 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.1666e-5 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.000166567 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.2429e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.5549e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.7106e-5 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.5261e-5 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.9504e-5 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.2923e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.6631e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.4693e-5 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.5141e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.1321e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.8286e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.5011e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.4849e-5 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.7436e-5 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.5139e-5 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 4.0672e-5 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.2947e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.9248e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.9759e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.4416e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.2233e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3495e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.844e-5 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.88e-5 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.6455e-5 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.8587e-5 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.8197e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.6872e-5 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 9.685e-6 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.2314e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.7533e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.6573e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 3.3375e-5 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.6776e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.5666e-5 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.6426e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.3291e-5 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5846e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.8084e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 3.1049e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.9875e-5 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 9.239e-6 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.7294e-5 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.637e-5 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.4322e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.4985e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.275e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.2572e-5 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.4583e-5 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 9.178e-6 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.1727e-5 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.182e-5 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.9338e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.6815e-5 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9258e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.3547e-5 seconds)
done (took 11.407721624 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.538245453 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.470140103 seconds)
  done (took 1.753070632 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.391551883 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.097317508 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.409486404 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074848647 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071530012 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.163355919 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000150163 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.082965745 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001358382 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.1389315 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078653937 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.138874525 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07699061 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.02857383 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.033692906 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076702069 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000823941 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.6315e-5 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000135533 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.033925419 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034218317 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002876605 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.030935505 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.04264823 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004913624 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.055e-5 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000198228 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001625081 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.1447e-5 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084000686 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.8048e-5 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000142785 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003512358 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027054003 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.8768e-5 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002181568 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.029994705 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075411389 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001556221 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.035370615 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000112905 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.029320284 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000126176 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.034256508 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.0249e-5 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000122497 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00014711 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000203995 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.5102e-5 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000126259 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.4497e-5 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9909e-5 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003224515 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.001743099 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.00267386 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029782574 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000234312 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007336164 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002609558 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000845354 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003488305 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000240923 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001378706 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035013337 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001480379 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000217767 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035983658 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003114517 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008445294 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000109679 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002009381 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.9469e-5 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004713134 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.004187841 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.0357e-5 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00711951 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002828911 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.7508e-5 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001721571 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.00015169 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000201387 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000993584 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000113435 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003598212 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.002452466 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.8736e-5 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012794865 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000128596 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000187313 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001479681 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.012026548 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.816e-5 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.001365947 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001424078 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002416587 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030547111 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000142382 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.9753e-5 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000101395 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000103 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002334804 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000126905 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001301496 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.7718e-5 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.909e-5 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000204744 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001824825 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.5884e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000236109 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000123011 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001609679 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002319326 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011644958 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00025616 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 7.2025e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001724982 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000353705 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.3683e-5 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001474961 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002206511 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002824969 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000114821 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.00048843 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.2254e-5 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000111449 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.0351e-5 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.3362e-5 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000152726 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000168867 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000237254 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002123729 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.008564757 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.00023389 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001914985 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.00279199 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000102046 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013148729 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004071805 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.000109104 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007993085 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000185692 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000170639 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.3375e-5 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 9.6453e-5 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000664052 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009613648 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005256091 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001798931 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001809622 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 9.9602e-5 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004709267 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000263604 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002071067 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001421698 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.8658e-5 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.020761612 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.001844429 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9555e-5 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004307991 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013504523 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.8173e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000176141 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000110774 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000120577 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001755517 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.1171e-5 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.0302e-5 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005255365 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002052335 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008577227 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000164205 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001527513 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.1204e-5 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000467208 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000114406 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3486e-5 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.002887934 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000115793 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000720254 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001552451 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000126485 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.8151e-5 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 8.2239e-5 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000126025 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.0765e-5 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005294722 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.006830302 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002081573 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000381924 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008119521 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002192485 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004165121 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.017316299 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.00351971 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.002391063 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000770121 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000156566 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001363425 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002385967 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001783174 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.011943474 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 8.4797e-5 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000176853 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000230832 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000129581 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.2426e-5 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000196531 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.9899e-5 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012602659 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000207475 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.727e-5 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001319356 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.4728e-5 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.00913275 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000135353 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.7776e-5 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002945012 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000153903 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000209201 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014569379 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004864966 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000153826 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000116828 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009850507 seconds)
  done (took 3.620977186 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.239020454 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.024978096 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.312199924 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.020961786 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000172562 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000190529 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.12844088 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.280179049 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000211929 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 9.5724e-5 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000196442 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.064797994 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.272607727 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000162819 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.711632868 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.084659563 seconds)
  done (took 3.893708692 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 0.228162299 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.127506401 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.0923e-5 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.5863e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.5705e-5 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 0.058457029 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 0.154428125 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.112673057 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111804297 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.4444e-5 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 4.2624e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 9.647e-6 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 8.183e-6 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 1.5945e-5 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 1.5599e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.0742e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.029e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.2954e-5 seconds)
  done (took 1.601572267 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.221106287 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.099514453 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.057693211 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.2006e-5 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.106009373 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.044393166 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000722152 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.067805612 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000692901 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.2575e-5 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.058908995 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.034436892 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.052727172 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081257465 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 0.029444098 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.049735827 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.054357191 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.108380371 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.1248e-5 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002587432 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.0353e-5 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.051611301 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.086465234 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 3.1233e-5 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 6.5744e-5 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000943269 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 4.0729e-5 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037653839 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001709594 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 9.3515e-5 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.5115e-5 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 1.3559e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.06693971 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.7405e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000705521 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 5.4398e-5 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 8.927e-6 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001083151 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000757484 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.1764e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.7887e-5 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.278e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.5188e-5 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000726764 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000131041 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.7268e-5 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.0327e-5 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.3334e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 8.239e-6 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001059687 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.8345e-5 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.7484e-5 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.379e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.2782e-5 seconds)
  done (took 2.117973204 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.059147151 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.210002945 seconds)
  done (took 1.035788063 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 2.618287993 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.224320474 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.409905681 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 0.224158603 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.109160763 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.375463499 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.099533476 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105556634 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.103748089 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.122541684 seconds)
  done (took 5.168598522 seconds)
done (took 19.947461857 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 0.098803578 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 0.12442953 seconds)
  (3/8) benchmarking "fib"...
  done (took 0.023911324 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.677624966 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.058894592 seconds)
  (6/8) benchmarking "parseint"...
  done (took 0.037609881 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 0.038052809 seconds)
  (8/8) benchmarking "printfd"...
  done (took 0.165392479 seconds)
done (took 2.000927911 seconds)
(7/23) benchmarking "parallel"...
done (took 0.789989841 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 0.512168513 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.025102365 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.135519464 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.318675766 seconds)
    (5/9) benchmarking "Date"...
    done (took 0.020998975 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.147800239 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.025172915 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024866159 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 0.020622465 seconds)
  done (took 2.043091958 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024576688 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.02278357 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021706686 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021931022 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024822862 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 0.019947292 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022212824 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020166897 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022297409 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.020736548 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019771803 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026067572 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029829136 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020862957 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.030870457 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.020957836 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019887396 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.020711351 seconds)
  done (took 1.20460265 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.034305451 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028784 seconds)
  done (took 0.852617733 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 0.020005681 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018687721 seconds)
    (3/7) benchmarking "second"...
    done (took 0.020659817 seconds)
    (4/7) benchmarking "day"...
    done (took 0.018598659 seconds)
    (5/7) benchmarking "year"...
    done (took 0.01857146 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020612172 seconds)
    (7/7) benchmarking "hour"...
    done (took 0.020486356 seconds)
  done (took 0.926648573 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.124430146 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019207997 seconds)
  done (took 0.930855418 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 0.020894067 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 0.0190933 seconds)
  done (took 0.83540843 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020762155 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 0.036098449 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 0.020075409 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 0.03279594 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 0.03306507 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.01987999 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 0.02031847 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 0.030281034 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020209082 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020288641 seconds)
  done (took 1.042308643 seconds)
done (took 8.616645591 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.02346473 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.0737e-5 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.021985828 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018796016 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.01838202 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.01834946 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 9.906e-6 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023152197 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.020520007 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018657733 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020280469 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.3197e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 6.559e-6 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.755e-6 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.0263e-5 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 8.254e-6 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 5.961e-6 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.021948249 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4421e-5 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 5.639e-6 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 8.413e-6 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 8.547e-6 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 7.199e-6 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.005e-6 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 6.817e-6 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020162939 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.3047e-5 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 9.909e-6 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.0198e-5 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 7.639e-6 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 6.496e-6 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 6.694e-6 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.691e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 6.002e-6 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 6.025e-6 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 7.252e-6 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 6.388e-6 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 7.803e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.955e-6 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 5.48e-6 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 7.18e-6 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 7.996e-6 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.3482e-5 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.882e-6 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 6.525e-6 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.674e-6 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 6.165e-6 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 5.515e-6 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.651e-6 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020390794 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.2469e-5 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.0615e-5 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 7.765e-6 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 8.069e-6 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 6.778e-6 seconds)
  done (took 1.035446486 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.05472913 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041877149 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.042725948 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.03669243 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026410066 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.040453069 seconds)
  done (took 1.037637656 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.019104235 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020417115 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.4415e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 6.164e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.1254e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.065e-6 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.46e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 4.989e-6 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 4.866e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.384e-6 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1241e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.568e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.014e-6 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.038e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.248e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.005e-6 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.011e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.187e-6 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.505e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 5.331e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.107e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.767e-6 seconds)
  done (took 0.837081709 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.01891965 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0183e-5 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.5763e-5 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 6.829e-6 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018806697 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.0031e-5 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.492e-6 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 6.072e-6 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.578e-6 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 1.0334e-5 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.0742e-5 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 8.781e-6 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.005e-6 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.633e-6 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.431e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.783e-6 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.69e-6 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.564e-6 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.413e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.992e-6 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.297e-6 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.274e-6 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.737e-6 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.734e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.851e-6 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.324e-6 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 5.679e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.782e-6 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.956e-6 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.57e-6 seconds)
  done (took 0.830642799 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.036651287 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.025621434 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.010227622 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.4264e-5 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.2064e-5 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 9.644e-6 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 7.005e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.665e-6 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.596e-6 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 6.707e-6 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 1.9542e-5 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.3272e-5 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.73e-6 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.826e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.139e-6 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.156e-6 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 6.063e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.239e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.645e-6 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.978e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.169e-6 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.453e-6 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.011054665 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 3.9114e-5 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.0057e-5 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.0933e-5 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 6.45e-6 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.986e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.845e-6 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.29e-6 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.039e-6 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.896e-6 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.174e-6 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.3147e-5 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.711e-6 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.036e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.886e-6 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.253e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.019e-6 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.88e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.082e-6 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 8.228e-6 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.5874e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 7.285e-6 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.117e-6 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 5.855e-6 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 5.479e-6 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.526e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.964e-6 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.176e-6 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.697e-6 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.806e-6 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 6.179e-6 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 5.608e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 5.809e-6 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.879e-6 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.834e-6 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.983e-6 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.825e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.293e-6 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 8.09e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 5.828e-6 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.706e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.524e-6 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.585e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.29e-6 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 1.0992e-5 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 5.997e-6 seconds)
  done (took 0.963796891 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015784081 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 0.019968799 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015262309 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 0.018862579 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019608355 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 0.018764644 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.01940063 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019663784 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 0.018725056 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 0.019381055 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015182955 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019496808 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015708461 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028711538 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022593946 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.019918728 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015446215 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.018928369 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 0.018922499 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019208284 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 0.018709173 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019511832 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.018723826 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020406251 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018925002 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015338635 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 0.01881071 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019477157 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015237625 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 0.020518829 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020263803 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015320214 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023874954 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018641355 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018908229 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 0.015157435 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015334074 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.018985893 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01518651 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 0.018795455 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015407555 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019701062 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019824972 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.02024871 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019377198 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01542418 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.018930384 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 0.019359206 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 0.018548622 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 0.018729959 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015313022 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 0.015401812 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015255586 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 0.020184606 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021058206 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 0.022660672 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018689863 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015168488 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.018837746 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020116016 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019751935 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 0.018966195 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015329708 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018867392 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019793573 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015109821 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019059688 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019484492 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 0.020269544 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015246561 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015391515 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018837599 seconds)
  done (took 2.125957533 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0177902 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018263274 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01850266 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.000145801 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017118876 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.587e-5 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.2759e-5 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017058071 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.993e-6 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.225e-6 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.914e-6 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.01689286 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.9487e-5 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 9.898e-6 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.08e-6 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 1.0278e-5 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.887e-6 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.1993e-5 seconds)
  done (took 0.905452662 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018949063 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 9.731e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 6.465e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.191e-6 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.398e-6 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.378e-6 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.297e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.276e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.51e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.483e-6 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 7.699e-6 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.221e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.35e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.93e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.225e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.18e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.911e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.107e-6 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.726e-6 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.027e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.497e-6 seconds)
  done (took 0.815841679 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018715156 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0531e-5 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018492408 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.563e-6 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.68e-6 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 9.863e-6 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 8.311e-6 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.029e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.108e-6 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.028e-6 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 8.952e-6 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.059e-6 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.277e-6 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.414e-6 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.615e-6 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 4.937e-6 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.243e-6 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 8.784e-6 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 5.703e-6 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 5.611e-6 seconds)
  done (took 0.833981462 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.051238339 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.0507e-5 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.429e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.528e-6 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.185e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.183e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.52e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.006e-6 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.116e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.084e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 7.958e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.211e-6 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.19e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.222e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.882e-6 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.367e-6 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.322e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.975e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.227e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.158e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.44e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.17e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.138e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.272e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.055e-6 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.335e-6 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.461e-6 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
  done (took 0.849346903 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018946812 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.1354e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 7.165e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018538843 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 9.881e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.805e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.127e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.388e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.189e-6 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.571e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.0012e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.838e-6 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.3059e-5 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.431e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.589e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.359e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.34e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.304e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.762e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.276e-6 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.622e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.593e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.199e-6 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.254e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.846e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.546e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.287e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.224e-6 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.15e-6 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.204e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.176e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.38e-6 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.35e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.195e-6 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.775e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.429e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.291e-6 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.703e-6 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.431e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.294e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.326e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 9.578e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0911e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.38e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.186e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.036e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.454e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.359e-6 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.381e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.925e-6 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.087e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.134e-6 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.19e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.215e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.864e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.399e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 4.923e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.19e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.567e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.223e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.232e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.081e-6 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.943e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.827e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.915e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.334e-6 seconds)
  done (took 0.834578461 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.01884489 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 0.018364361 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.01721831 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.1331e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 9.771e-6 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.295e-6 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.5635e-5 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.096e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.379e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.961e-6 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 6.3635e-5 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.995e-6 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.432e-6 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 5.619e-6 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.795e-6 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.709e-6 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 1.023e-5 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.695e-6 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 6.177e-6 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.535e-6 seconds)
  done (took 0.852499136 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021737565 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 0.019476709 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 0.018522162 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019971383 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025166768 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025319032 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 0.019135104 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 0.019542887 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 0.020876869 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020454686 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.01995806 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 0.020234476 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.019933614 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.019703422 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.019915973 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 0.019630927 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021149138 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 0.018912531 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.026183944 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.019939151 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 0.018658742 seconds)
    (22/49) benchmarking "13786"...
    done (took 0.034174955 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.031948737 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 0.019722658 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.020942746 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 0.018734195 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.025281691 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 0.018820024 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 0.018637053 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.01941271 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 0.019998166 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 0.020040474 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020408688 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 0.018626403 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 0.02069829 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.045518402 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.019818101 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 0.018471339 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.019767231 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 0.018880574 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019822307 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 0.018936984 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 0.019060747 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021047608 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 0.019673349 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 0.02037041 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 0.018586503 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020291467 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 0.019026214 seconds)
  done (took 1.842320009 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020602075 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018516136 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.0857e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.0063e-5 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.1733e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.803e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.366e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.725e-6 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.977e-6 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.719e-6 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.038e-5 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.936e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 7.143e-6 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.152e-6 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.806e-6 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.888e-6 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.72e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.891e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.06e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.7e-6 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 6.043e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 6.186e-6 seconds)
  done (took 0.841188286 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01864675 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020518514 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 9.979e-6 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.1406e-5 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.069e-6 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.496e-6 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 8.525e-6 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.324e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.437e-6 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.473e-6 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 9.076e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.009e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.33e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.129e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.166e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.365e-6 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.906e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 4.822e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 5.533e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.338e-6 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 4.816e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.096e-6 seconds)
  done (took 0.838689129 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018634295 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 8.699e-6 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018411935 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 9.565e-6 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.0323e-5 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 9.963e-6 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 6.511e-6 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.729e-6 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.068e-6 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.853e-6 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 9.079e-6 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.598e-6 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 5.22e-6 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.974e-6 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.109e-6 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.358e-6 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.17e-6 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 5.726e-6 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.001e-6 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.343e-6 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.418e-6 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.759e-6 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 5.174e-6 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 4.947e-6 seconds)
  done (took 0.838108358 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 0.019670501 seconds)
    (2/2) benchmarking "indexed"...
    done (took 0.019579358 seconds)
  done (took 0.839113294 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.018535948 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.4878e-5 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018587314 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.0374e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.987e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 9.646e-6 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 1.1206e-5 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 6.14e-6 seconds)
  done (took 0.838504298 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020642996 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020786352 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.3904e-5 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 1.1184e-5 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 7.728e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.176e-6 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.52e-6 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.322e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.302e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.742e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.0187e-5 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 6.452e-6 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.225e-6 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.749e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.968e-6 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 6.114e-6 seconds)
  done (took 0.841366871 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018565876 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0885e-5 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018653599 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 9.445e-6 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.942e-6 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.93e-6 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.282e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 9.69e-6 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 1.0022e-5 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.874e-6 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.0226e-5 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.604e-6 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 5.281e-6 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.085e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.714e-6 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.846e-6 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.697e-6 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.102e-6 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.476e-6 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.176e-6 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.194e-6 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.811e-6 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.059e-6 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.33e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.945e-6 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 5.768e-6 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.425e-6 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.26e-6 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 5.109e-6 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 5.309e-6 seconds)
  done (took 0.837064525 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018928516 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.0092e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.861e-6 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018188935 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.2528e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.69e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.555e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.645e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.067e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.093e-6 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0907e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.492e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.976e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.067e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.949e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.679e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.345e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.849e-6 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.077e-6 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2001e-5 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.72e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.095e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.36e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.022e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.028e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.625e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.272e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.307e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.713e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.616e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.289e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.131e-6 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.503e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.786e-6 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.192e-6 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.651e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.475e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.049e-6 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.049e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.379e-6 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.219e-6 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.19e-6 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.5605e-5 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.347e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.334e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.099e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.237e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.582e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.184e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.38e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.147e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.214e-6 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.433e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.086e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.317e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.38e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.922e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.697e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.998e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.173e-6 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.348e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.29e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.763e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.995e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.269e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.295e-6 seconds)
  done (took 0.837735098 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.019045062 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 9.85e-6 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018388402 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.4393e-5 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 7.156e-6 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.2e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 6.404e-6 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 1.1847e-5 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.291e-6 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 7.005e-6 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.0592e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.641e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 5.764e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.128e-6 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.589e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.032e-6 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 6.135e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.293e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.648e-6 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.76e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.816e-6 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.77e-6 seconds)
  done (took 0.839382549 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019452262 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019080567 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.233e-5 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.315e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.59e-6 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 5.848e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.608e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.499e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.375e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.629e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 7.847e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 4.985e-6 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 6.128e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.358e-6 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.297e-6 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.666e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.088e-6 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.814e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.088e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.842e-6 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.252e-6 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.055e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.116e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.525e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.204e-6 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.573e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.367e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.154e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.349e-6 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.502e-6 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.432e-6 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.472e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.355e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 6.559e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 4.99e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.19e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.338e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.047e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.297e-6 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.595e-6 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.187e-6 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.281e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.5681e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.275e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.225e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.744e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.529e-6 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.225e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.474e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.395e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.537e-6 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.178e-6 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.138e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.34e-6 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.254e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.172e-6 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.388e-6 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.278e-6 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.468e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.995e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.04e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.914e-6 seconds)
  done (took 0.839059367 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017320604 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018155905 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.018527805 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.8673e-5 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 7.148e-6 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.68e-6 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.133e-6 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.6291e-5 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 6.074e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.856e-6 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.0559e-5 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.094e-6 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.562e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.687e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 6.877e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.031e-6 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.598e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.000152599 seconds)
  done (took 0.854485194 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022732033 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027222741 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022162716 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020775569 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020418953 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02203291 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022235774 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.02025958 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019720026 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028903662 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.018761273 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.022629825 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020800352 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021886636 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020565125 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019541931 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020311867 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026436257 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019993333 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020089937 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.01827905 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.021048726 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021490779 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019443961 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020863852 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.01959051 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023405624 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023340532 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020008723 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020841941 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020725952 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020580231 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.027166206 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022092745 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018694061 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021345133 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022002207 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.01992039 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020209014 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020456348 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022262873 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020640533 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.019948659 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022559005 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020684533 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019508726 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020668345 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019104804 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020267835 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021764717 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.01859567 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020194005 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020397253 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021376921 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021649588 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.02222394 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022086444 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021435264 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022381258 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020680959 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019643646 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019818515 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.02164676 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021173009 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021775799 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.02003283 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020765851 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020576806 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021459817 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023473027 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022005862 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.008512535 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.030530723 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019344855 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.02115249 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019338851 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020063073 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.019980213 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026385292 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020196726 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020167863 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020183972 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020663835 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020888886 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025976405 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019880315 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01883142 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019663032 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019910917 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021855925 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020635728 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026354568 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026245188 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020309523 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021469371 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026608419 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020055345 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021528334 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.019584292 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022799508 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.018895997 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021454234 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.018649323 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020744601 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.020552413 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020689308 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02148573 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.01921056 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018901344 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022050303 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021194721 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018310564 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019124518 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.020552583 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021412671 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019796716 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020661438 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020667123 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018508635 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.019986721 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021523453 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022437563 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023416287 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021502823 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026144281 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0202867 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022707277 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.021055656 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.018913175 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019536299 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022184398 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023128056 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02172445 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008513021 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.018959958 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020403714 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.021631396 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020492222 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021059714 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022004771 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021196113 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003112305 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018906574 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.02678892 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020192689 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022767566 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018591278 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022734693 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020104073 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026359422 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020876048 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023371567 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020146382 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.020955869 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021443929 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019822731 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020288206 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01961298 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.020856718 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020398315 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020619177 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.018618682 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019708756 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022268375 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020249641 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019144311 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018632911 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020330954 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020509641 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021363779 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025773016 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018957407 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018747782 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019492165 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019807836 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.022003626 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023365452 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022378398 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020611697 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019302655 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.02196788 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022516906 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.019993377 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02015453 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022711963 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018381261 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019683605 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.019713745 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02711036 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026671209 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.02070069 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019672183 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.025665391 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.02017271 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020836501 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019382238 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020743085 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021478382 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.018648409 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026423614 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022794166 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022364067 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022268243 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020028297 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.019718157 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019761564 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026737502 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.02567228 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.021438013 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021126862 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022064973 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.023075662 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.00317746 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020443768 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.019620205 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.0207379 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021748766 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020184129 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020367388 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020565514 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022191538 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020214669 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020202615 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.0201537 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020463054 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021622569 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019273027 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022764356 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02217313 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021517442 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019560409 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019094654 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019644126 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021617253 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021515882 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02156708 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.021906142 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.021189565 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.0031206 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020240957 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019672135 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019320394 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020601475 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018748829 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020733068 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01929015 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020281332 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.020903978 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020396518 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023367492 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021672797 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019854202 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.01908123 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020634965 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.018696964 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.020845898 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021652908 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.020755319 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003525935 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020891539 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.020834515 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022606281 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021320784 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020207706 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021556605 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019899469 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020237064 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020307467 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026945338 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.02569955 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.022345215 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019908841 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021393845 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019119226 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022381003 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.020880182 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.021741172 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020764422 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020305362 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020127503 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019778546 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019034911 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019119137 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019789903 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019074599 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020029752 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019677604 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020251533 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021464817 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019762763 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.020906075 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.024763615 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022007978 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.018830652 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.021869474 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022529377 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019976492 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020273387 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021609839 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02051772 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.018907574 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021104482 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.020941523 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021923126 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.020912826 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.020664443 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.019730748 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020253813 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021851623 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020480817 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021836364 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.020717703 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02104135 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018674217 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.018990244 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02126069 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019532069 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020005902 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019852025 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025871624 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019473052 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020546207 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021547119 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021293746 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022495854 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026995601 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021306374 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019778242 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019641684 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019813748 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019333481 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021038233 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020068918 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019748842 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021309017 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019906969 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019981717 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02626129 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.019922707 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020151873 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020626807 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018543879 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.021336946 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02109649 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019873065 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021023538 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.022918128 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019519588 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01927344 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020774354 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.019852369 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018564718 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021406789 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019532982 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022304931 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.019822797 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.019447451 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019926402 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025653483 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021383447 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025952767 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022021648 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022110161 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.024913529 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025391991 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.00314785 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.018620013 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.020346141 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021206499 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020128606 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019381863 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021482466 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021663039 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020422429 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019509396 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020277834 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020531992 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020117024 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020504977 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018510478 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019834427 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.020873043 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025968533 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.019332648 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02112182 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021465753 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008929581 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019711613 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019283865 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019274691 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.02080683 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025471354 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.0200541 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019578459 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.020935886 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021143025 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.018773656 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020585378 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019312885 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01872306 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021008033 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025759058 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019678425 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019430916 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019655965 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022534676 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021331469 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019636671 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021148177 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022260084 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019065181 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021210042 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019397208 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020314357 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021118208 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019062608 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020831472 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.020731786 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020200371 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019618965 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.022997154 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019516457 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019790472 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020835165 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004031032 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019420501 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018909965 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021322155 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020264809 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.020701669 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.021900885 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.018739262 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025531216 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.019941785 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019690962 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020402476 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.020998013 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021547738 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.021494958 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019429451 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020165052 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021526209 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01861563 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.019914053 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.021634435 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020169167 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.020170697 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022042862 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019618016 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020091758 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02000164 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020626713 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020319031 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021368372 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020201703 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021476923 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019204557 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.020541216 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.022876022 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003039336 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021119292 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021398237 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.02363531 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.004011007 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021112154 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019659225 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.02268182 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.019403524 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.021563781 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.020683772 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.004438359 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01958452 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019539585 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.021078488 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021984103 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.018909775 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019087162 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019265649 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.018560141 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.018561306 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019527359 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.019631899 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.020863397 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025444652 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020410283 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020047358 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.021882797 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.01982685 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.020638212 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.020740708 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021118925 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.019510429 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018363118 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018677686 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019576721 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019751138 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019413843 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020084941 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019214725 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020363141 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019412434 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.019877334 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.020823072 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019878673 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025696353 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025074256 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020478107 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018384382 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004121256 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019589626 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022418583 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.019548405 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020342564 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021423177 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019145641 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023049435 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.020683302 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.022619499 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019485457 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.01886969 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019390493 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.018993488 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025429705 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.019978594 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.020912069 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.019952885 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.01940992 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.021795213 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022195044 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019098003 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.01917869 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019452321 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024829989 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020358468 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019006713 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019512239 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.025671819 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020016353 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.021373984 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019529145 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.020477076 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021335632 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.024706153 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020035919 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.018627986 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020205366 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019475252 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018124458 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019526553 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.018359926 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019696942 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.021961455 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02041123 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.02094453 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.020819706 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.021341615 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.01946329 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022256502 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021466377 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019772383 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019259412 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019891908 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019862074 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019449111 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003633609 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.020849108 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.018518279 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019921901 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.01945647 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.018745333 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025046277 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.018530009 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019246897 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020345852 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01925041 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026999588 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020678354 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020311838 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.021738174 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018798061 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.020779712 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.021893386 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.019287142 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.020867721 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019680577 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.019247433 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.020926704 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.020835552 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024895466 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003358505 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.021933453 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022098838 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.019196006 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021055894 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020510468 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.019907521 seconds)
  done (took 13.03936268 seconds)
done (took 36.841479955 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 0.022284477 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021563683 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.02182773 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 0.021388383 seconds)
  done (took 0.924066451 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.206912578 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.129060696 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 5.8747e-5 seconds)
  done (took 0.981624268 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033346602 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034499297 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.038031942 seconds)
  done (took 0.946936056 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.058975366 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053021591 seconds)
  done (took 0.951082516 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 0.058931081 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 0.06208939 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.052954786 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.02241685 seconds)
    (4/4) benchmarking "Float64"...
    done (took 0.026720244 seconds)
  done (took 1.00953498 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.038231731 seconds)
  done (took 0.882500949 seconds)
  (9/15) benchmarking "18129"...
  done (took 0.168078756 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.261689501 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.138083726 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.079219948 seconds)
  done (took 1.323850293 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.090560514 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.035813792 seconds)
  done (took 0.977635405 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.065221079 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.063216883 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.056406982 seconds)
  done (took 1.036138773 seconds)
  (13/15) benchmarking "20517"...
  done (took 0.059303151 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.079712749 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.14602378 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.035733416 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.3932e-5 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 0.080713048 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 1.0536e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.8913e-5 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.086539687 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.106293372 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.4985e-5 seconds)
  done (took 1.389889621 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 0.030379416 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.04386588 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 0.018976032 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 0.019602851 seconds)
  done (took 0.97153516 seconds)
done (took 12.74269551 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.117924815 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.037378943 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.230048379 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.033204362 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026643377 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.055851932 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.113324813 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.177615923 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.069214424 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.108949639 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.036790484 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.02901354 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029171403 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.11392228 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.053168781 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024714542 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.034653428 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.112318025 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.071406728 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.036040464 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.03222612 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028325735 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.028625993 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028415355 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.028941543 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029381946 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028765823 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.185435232 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.27004535 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.031712996 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.038463918 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 7.3186e-5 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.036047558 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.197357845 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036544317 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.115527212 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.092195539 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.023916951 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.059956439 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.032498114 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.106337303 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025719225 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.170452825 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.108488849 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.036819039 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.031669718 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.095908238 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034782448 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.029089963 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030521464 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.044072069 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.174564326 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.142061459 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.029242449 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.040108433 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.033873687 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.245574017 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.02900761 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.104794436 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.050103507 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024210008 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029222695 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029501686 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.153023646 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.9641e-5 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.160935219 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.032044062 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.0300707 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.068249796 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.110575507 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 6.4545e-5 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027620652 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.028973046 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.130347413 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.107305689 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.028752203 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.087153148 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.108403198 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.108270408 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.030636861 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.4445e-5 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.095427455 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066148951 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.028618456 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.00099426 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.043646933 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.062513081 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028629071 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.026977409 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.110196882 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029099691 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.028622702 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028380694 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.001047353 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.034565551 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 6.5542e-5 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.035520524 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027114513 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.8733e-5 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.02789924 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.131259534 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.087245433 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.664e-5 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028440069 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.028759704 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.110675369 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.029303835 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.084544021 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.028537337 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.173773826 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.1304399 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.035357149 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.3168e-5 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024386957 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.128874231 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.12083761 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025181716 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.028000159 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028375655 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.030033213 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 7.6305e-5 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000784883 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.084338702 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.039504383 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.087967387 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.147065013 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.028930605 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.212115415 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.135750489 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.2507e-5 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 9.8544e-5 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025371118 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.045494162 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033371479 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.036362986 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.3004e-5 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.239146133 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.032689871 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.02503394 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.084669861 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000777561 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.086903124 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036265357 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027114677 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.114934902 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031771758 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.038846313 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.117442631 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027525393 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.6537e-5 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001635681 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.17792177 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026642904 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029760208 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 6.6707e-5 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029115602 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.134477258 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.330068216 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.992411081 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034581283 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.032234798 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.028764128 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.029521931 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042522871 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002113762 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047927237 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 7.8344e-5 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.035331152 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 3.7336e-5 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.028128195 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.032962849 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031127453 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.224008705 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044878657 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.5168e-5 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.053508553 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025964555 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027462499 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.094269811 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.032901834 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.02924446 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.032803692 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.030328001 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.033421671 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.042889904 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000117265 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029149639 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.034568183 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 7.9274e-5 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.019353314 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.893800013 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.195417847 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 7.6135e-5 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.9525e-5 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.032583868 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.090763281 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 4.4041e-5 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.1365e-5 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 9.8279e-5 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.2004e-5 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.032905874 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.482821362 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.040725292 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.137451057 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.151342624 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.092903674 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.02791141 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031085124 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.2792e-5 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001518435 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027899651 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.086446512 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033528981 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 4.6767e-5 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031884309 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029546148 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.4104e-5 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.435e-5 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.03212289 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044011097 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033226604 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072196744 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.178006482 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.00185811 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.169149133 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.099460593 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.03570556 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000237494 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.8905e-5 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.1763e-5 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034011547 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.037626715 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043482668 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.22780011 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.036050087 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 9.4837e-5 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.030137083 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.184166848 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.112047257 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.001778853 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.8647e-5 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061783978 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.02990934 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 4.2029e-5 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.001471624 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000108329 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002679152 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031028307 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.133118874 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.027419073 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.5508e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.035748799 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027888255 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.028314093 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.7205e-5 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027957875 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.07343897 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 8.5094e-5 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.035459035 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.919542286 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 9.2261e-5 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001675577 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.10800902 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 6.0828e-5 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.135859516 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027525765 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.00291326 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.030631395 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001209031 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.034923062 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.032767589 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 3.543e-5 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.7127e-5 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000118996 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 8.223e-5 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 6.7104e-5 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 6.386e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.041541078 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.5142e-5 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.6312e-5 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.028604006 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000105421 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.03531245 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.4219e-5 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025686999 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000230375 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.03110498 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.03188418 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044529317 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.8465e-5 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.028618157 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.8209e-5 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027717674 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.030450296 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026385906 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.001978385 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.149986664 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.03598362 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029301017 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.132385331 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.9282e-5 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02840676 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 8.1126e-5 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.107724789 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029180762 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.042985313 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.034148248 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.027970144 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 6.5652e-5 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.6367e-5 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029401601 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.8122e-5 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.4483e-5 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002226927 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028576201 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000108446 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023600242 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033182964 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001761741 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.064341305 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.036691978 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.0968e-5 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.7775e-5 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.086257286 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001693152 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.035912135 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.1832e-5 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.032987708 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.0916e-5 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.247505412 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.03332818 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 6.9627e-5 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.088834562 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.4008e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.00118273 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.03069148 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.7796e-5 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.168751507 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001685977 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.8681e-5 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029921217 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.3116027 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027073211 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 7.3232e-5 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 7.1135e-5 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.6756e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032698344 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.010581883 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001752907 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028738636 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.040076746 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 3.7747e-5 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.9139e-5 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.04465217 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.7522e-5 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 7.0771e-5 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.034919787 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.036163483 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034476391 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.5736e-5 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.037204966 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.029084392 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 9.1245e-5 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000104509 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.025377195 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.887e-5 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.037155177 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038362968 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 4.7844e-5 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002101318 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.029405057 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 7.8814e-5 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.1996e-5 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.034218882 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.6826e-5 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 8.8985e-5 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.0653e-5 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.3496e-5 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.3551e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.1443e-5 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 9.624e-5 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.066046034 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000104839 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.9441e-5 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 9.1399e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039964941 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 8.1021e-5 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000913815 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.029162485 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.102e-5 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026958583 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029596079 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 3.2499e-5 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.029291141 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029189155 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.027518965 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.0543e-5 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.470298105 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.6765e-5 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038315486 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002036878 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.1377e-5 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.03056566 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 6.0533e-5 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000100274 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.2434e-5 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.7212e-5 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.9313e-5 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.035675626 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.067869072 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.031481529 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.8547e-5 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 8.7382e-5 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.030706978 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.028982458 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.6069e-5 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.8194e-5 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 8.4617e-5 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.6992e-5 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 7.0935e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.026761106 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 7.788e-5 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.4319e-5 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031758072 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.6836e-5 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.6195e-5 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000123659 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.034494528 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000116439 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 4.8844e-5 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.1652e-5 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.036824465 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.9038e-5 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.109842946 seconds)
  done (took 23.690956791 seconds)
done (took 24.541280425 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.097440796 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 0.031064685 seconds)
  (3/4) benchmarking "arrays"...
  done (took 0.053577368 seconds)
  (4/4) benchmarking "structs"...
  done (took 0.060830363 seconds)
done (took 1.206523169 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.035432436 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.06345379 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037540143 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040399331 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.041428058 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.039440513 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.048727207 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.044528844 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.042522076 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.035371591 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.025392801 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.038833678 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035675933 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.3677e-5 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.047894393 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026741574 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.043413877 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.035387921 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.041703234 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.052699997 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.0024669 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.5911e-5 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.025008243 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001090338 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.2307e-5 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.3533e-5 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.031518393 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03489648 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.025832538 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.3448e-5 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.3634e-5 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.2043e-5 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0435e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 9.717e-6 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.028956854 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.041325527 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.7098e-5 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.040328118 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.038849281 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.029425442 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.040888462 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.1004e-5 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.035520313 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001099229 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.030009598 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002596456 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.035221899 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.0473e-5 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.7407e-5 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 9.598e-6 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.13e-6 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 5.663e-5 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.037524621 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.8427e-5 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.030508366 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.384e-5 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.043011749 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.7356e-5 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.023930411 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.7292e-5 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 7.6573e-5 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.001093828 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 9.236e-6 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 9.122e-6 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 8.591e-6 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 5.879e-6 seconds)
  done (took 2.296270185 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.03821598 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020721795 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.033498804 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035522844 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.031263206 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.02200577 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.0057e-5 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023708364 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.9595e-5 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 7.98e-6 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.020906035 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025285196 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.024113132 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.02363304 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.3432e-5 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.02082701 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.034785623 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.036722997 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023752775 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.4397e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0516428 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.021957083 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.5466e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 7.353e-6 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021184062 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023722226 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.020337957 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.3371e-5 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.6322e-5 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.0672e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.1183e-5 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.992e-6 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 6.683e-6 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.0538e-5 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024446481 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.8212e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.1191e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.020491605 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.1616e-5 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.6501e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.226e-6 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.023816363 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 4.2794e-5 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 9.553e-6 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.046e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.020208913 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020861577 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.3408e-5 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.1108e-5 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.2062e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.2871e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0313e-5 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023540936 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024844216 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022362377 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.3834e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.9439e-5 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 6.176e-6 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.037e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 9.857e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 9.942e-6 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.242e-6 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 5.75e-6 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021292682 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.392e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.1432e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 6.397e-6 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.076e-5 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 9.819e-6 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 5.022e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 9.196e-6 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.023875613 seconds)
  done (took 1.729575919 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.041812599 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.070021386 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.034150512 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020034578 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021234723 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.031930535 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.021327663 seconds)
  done (took 1.188086931 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.03863056 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.028820109 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024270342 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019570891 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023818442 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023793561 seconds)
  done (took 1.107371117 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02051939 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.023844565 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021468082 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.050014071 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023375023 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.021647112 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.027874274 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024039505 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020440655 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031371172 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.02181749 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.054080531 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.031786728 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.039346018 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.033825865 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020263055 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.052758155 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06417998 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02378773 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.033832794 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021376471 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.04405593 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029967798 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023119027 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023754646 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.01946763 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021223912 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.02052551 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.036298361 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029009583 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02494013 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.022929686 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023928086 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020942928 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021429414 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021942037 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029551017 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.03484742 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024010773 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033577297 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021818485 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039534406 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.027315723 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021055747 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021965526 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032045204 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.020802932 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023708236 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021623113 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.021136618 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019487752 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020900537 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.032896753 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.029893786 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.02976673 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030814336 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021111877 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021237275 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021096941 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020540729 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021592841 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034929262 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.033624155 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032881026 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.023971499 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028635724 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021225999 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.022954194 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.050113568 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021371007 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024698851 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.023610454 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020737104 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020683792 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.020853919 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.021834982 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021085351 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032947858 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023502207 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021783828 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.02357781 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.029996889 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018464646 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024551161 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022381767 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023337197 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.033643534 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024692104 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033255943 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022602303 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021634254 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022166271 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024845781 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021235248 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.024534998 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022893067 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021801335 seconds)
  done (took 3.554419763 seconds)
done (took 10.817533773 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 0.121051703 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 0.512811627 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 0.074061655 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 0.102152038 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065585105 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.093448266 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 2.819879493 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 0.12587374 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 0.41075294 seconds)
  (10/12) benchmarking "nbody"...
  done (took 0.076709026 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 0.054829589 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 0.11909734 seconds)
done (took 5.53850344 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.095900346 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.235897215 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.068562042 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.115938584 seconds)
  done (took 1.469340897 seconds)
  (2/6) benchmarking "26942"...
  done (took 0.058666227 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.294283731 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.119107258 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 0.167806259 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.158493196 seconds)
  done (took 1.714366616 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.037146156 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.036186955 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.020215229 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 0.025579225 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.028998735 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 0.024937163 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.02901476 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.020617748 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.08692223 seconds)
  done (took 1.321192058 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.060900384 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 0.047086728 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.036406884 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 1.5108e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.071e-6 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.032700116 seconds)
  done (took 1.150520066 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.269862879 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181668732 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.275096942 seconds)
  done (took 1.702321003 seconds)
done (took 8.380651824 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040449669 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 0.049816172 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.206092304 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.035389475 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.267761238 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 0.030656824 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.225061271 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.407063346 seconds)
    (9/13) benchmarking "Float16"...
    done (took 0.997578272 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 8.644771791 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.00060234 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 0.032797688 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.940977421 seconds)
  done (took 21.848795798 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 0.030968218 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.028288201 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.277544824 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.0645e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.099382215 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.017588592 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.129083813 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026490587 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.035354028 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.030152915 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.02400045 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.6995e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.6382e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025069385 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.114104435 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.5358e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.571716917 seconds)
  done (took 9.437020706 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 0.055935421 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 0.028752108 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 0.034420689 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 0.060783062 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 0.030428794 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 0.031987813 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.029812144 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.025167941 seconds)
  done (took 1.351518549 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.7541e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 8.765e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.908e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.44e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.993e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5449e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.932e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.266e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 7.358e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 6.328e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.2097e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.895e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.253e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.752e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.0795e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.716e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.011542136 seconds)
  done (took 1.043874972 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.157398294 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.15409668 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.056669519 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.128095912 seconds)
  done (took 1.530963547 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.7378e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 1.6151e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.9909e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.831e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.844e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.8839e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.0696e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.3714e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 1.5069e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 1.1242e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7524e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.269e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.092e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.557e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.0827e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.965e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.000414194 seconds)
  done (took 1.038761029 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 7.126e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.000550231 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.00036754 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000348357 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.2119e-5 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000349824 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.000948985 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.00052186 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.000575853 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.000585846 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000996344 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000331132 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000362903 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1722e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.000881482 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000315559 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.016226271 seconds)
  done (took 1.060505368 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.207677644 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.199686368 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.057822782 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.074024296 seconds)
  done (took 1.573567443 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 3.7149e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.2722e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.314e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.5967e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.125e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.69e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.3196e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.2592e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.7149e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.2203e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.7796e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.4698e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.0782e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.497e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.1307e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.154e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.001806299 seconds)
  done (took 1.042487026 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.069995709 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.084156471 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.050776398 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.065400311 seconds)
  done (took 1.306126294 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.6451e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.223e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 9.404e-6 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.455e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.919e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.2995e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 7.601e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.227e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 6.462e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.304e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.357e-6 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.174e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.57e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 3.988e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 7.642e-6 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.879e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.7524e-5 seconds)
  done (took 1.040717556 seconds)
done (took 43.25232118 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.157301451 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.020876651 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.016278005 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.043607753 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.014694013 seconds)
  done (took 1.283276042 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.610903752 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.938653131 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.042868626 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.812667169 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170147081 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.646358751 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005530037 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142217958 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.534174477 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.325871835 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009316986 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.10038 seconds)
  done (took 27.374413246 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.091279292 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.098723642 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.26909973 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100762829 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.213213234 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.21268967 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.305827759 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.176790047 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.314352865 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.515070966 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.039184527 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055388695 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02275884 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.203829849 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064764112 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086881507 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.344991571 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.037210705 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061303678 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.140762148 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000367892 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020571921 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171998095 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067163452 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.087004543 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110674328 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.215767226 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042865835 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000122095 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037630007 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043204272 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040744499 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072911938 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064162387 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086063839 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042569566 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023688136 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000121126 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034111547 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031428593 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040301717 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051711742 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019522284 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.048245745 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 0.048381212 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030271609 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092112404 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012793625 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043582319 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.032546442 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060330388 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029934851 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.233639556 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135317247 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03990763 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034378659 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037310715 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078234172 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081394943 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.037296779 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016037193 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000105572 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.00030106 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02842391 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037346665 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.320308672 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.1324e-5 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024410971 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014770341 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086708213 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023816372 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051775415 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051876053 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022049108 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.1348e-5 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031620896 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040347248 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0418407 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063857695 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040734276 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052499476 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083188947 seconds)
    (83/608) benchmarking "6d"...
    done (took 0.261500436 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025574558 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.6417e-5 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.041788512 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000216422 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110461854 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074950543 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057888386 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03825186 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039992086 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062656313 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.039605487 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159500975 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025122977 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035805461 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022089651 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.791e-5 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022521277 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041552335 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083682656 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060681475 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 0.067930176 seconds)
    (105/608) benchmarking "5d"...
    done (took 0.137110911 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011882627 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055282691 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.04131652 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045958402 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025172763 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032504132 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041501933 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037268315 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047563074 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048396227 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.022622709 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.023080066 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078396258 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.038631921 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054569223 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4791e-5 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040697526 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027530956 seconds)
    (124/608) benchmarking "3d"...
    done (took 0.064333182 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038302482 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040435269 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044161129 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.051088562 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066612596 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063721026 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062780554 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027471162 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029179177 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020021734 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028677457 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057400333 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090690501 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000166165 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053574549 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026453734 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000322403 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.068322619 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033588958 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023784897 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.05058461 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.018664529 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055377845 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078559154 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.00020268 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081102323 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 7.1177e-5 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.8064e-5 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028630259 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000101582 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.5819e-5 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038227436 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029743468 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.9301e-5 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.075056097 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047214827 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027977822 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032812823 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044342564 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.022735886 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.020747246 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03688648 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053368386 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053908115 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058168218 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03365272 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017317482 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013239084 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015469487 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024129659 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03901978 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071407816 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057179966 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.3305e-5 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063373327 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027904636 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068007194 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053629055 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.032593319 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000438825 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043542171 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045517215 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040586925 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085469262 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048446809 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048434115 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057406827 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020396738 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.345804019 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022941825 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.2198e-5 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059227705 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2175e-5 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057301893 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082076501 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02205011 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033070374 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.016495436 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.018876077 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.016730692 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041478137 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9589e-5 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000550984 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024503361 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.037078054 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034228464 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042753052 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021670035 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058501249 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064441496 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.1663e-5 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059139714 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047497085 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062093332 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041447204 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053289335 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025789125 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040201455 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000305693 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000534824 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035287446 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024012231 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064301391 seconds)
    (228/608) benchmarking "7d"...
    done (took 0.26348944 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050360249 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026203667 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.012902575 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041098765 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.040344234 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050464087 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018028777 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.079740326 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.01773659 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054761925 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04112219 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.016105089 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020642837 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021734182 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059239406 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060811883 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4456e-5 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039494716 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018404961 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063863772 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.016692216 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.019628362 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060754404 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.7756e-5 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021098447 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026519965 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018389905 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025948442 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.031536977 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.00011108 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070540102 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053840711 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022314816 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.0432e-5 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01083366 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051931444 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057554239 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051361962 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03506601 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.028369279 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043230843 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.01380836 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01834735 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0431363 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079139223 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051101642 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077651164 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062562155 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.3931e-5 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000297244 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06386445 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046017998 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038262234 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047148075 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048371262 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03305361 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079372715 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044422423 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 8.5735e-5 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024656923 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054177066 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054573952 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025863615 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.070303751 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059405084 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026183827 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02132071 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059523657 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016836844 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027826643 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051638335 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041805484 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056995598 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057220835 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044121407 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.057058052 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016760606 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018210385 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041494628 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04654593 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086041559 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039300726 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036781413 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039517447 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077906603 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045183582 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042212328 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026893658 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.045501486 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000155831 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019711973 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015896805 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048181703 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057682598 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014386248 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033345426 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018625858 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02904034 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043084345 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9309e-5 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064489162 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052713279 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055261651 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027664246 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043766308 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014798256 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048049292 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060998351 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.039146094 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000488877 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000349061 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035200954 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.057014598 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06468043 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024011576 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045991739 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1238e-5 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087858124 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069042034 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046978925 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067565137 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050430636 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070236734 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017169425 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10789521 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000119109 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3143e-5 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017953821 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059509591 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025051371 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.028694433 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2189e-5 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030934403 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023157185 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016290042 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067189692 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03277191 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000167428 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076772725 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061820552 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060760423 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017352236 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000121224 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045097804 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.1313e-5 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01521326 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033510271 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.014102755 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033349537 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050658644 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048234809 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011225923 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015973578 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05652 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014970889 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044276984 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.206821849 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.4061e-5 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02828774 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023014404 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024936074 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000484414 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042121014 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039398455 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026276015 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039708235 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010652565 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064658779 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010105284 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016022629 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08778131 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047337015 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053623294 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021573738 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.2871e-5 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086545516 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063872697 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022137904 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.864e-5 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022005584 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013069167 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028917091 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043558482 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028046453 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044063195 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061558885 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076611307 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024360697 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081511957 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054509777 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050579383 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.3181e-5 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.9281e-5 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.4928e-5 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011611799 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023907449 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096617052 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055054867 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012372914 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016721907 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07857084 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.054267795 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057974948 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027683199 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03413127 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018051203 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018685763 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036491525 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046108589 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.3228e-5 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01447623 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025373131 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16237452 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015694562 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062094389 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075993153 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000159915 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.035984392 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032204971 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02413057 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034360753 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03911246 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015462549 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.257611151 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04609344 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062622119 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054653173 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039319972 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.021042611 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.3659e-5 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.4063e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029260683 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.021649406 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031351396 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061732699 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019930748 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011942886 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06294768 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05380257 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022425591 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012387418 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.013688418 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 0.294963079 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061515091 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045300059 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068191247 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036786489 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.5539e-5 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015942442 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000329193 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000302012 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048242437 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.2726e-5 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022198054 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044537387 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034292903 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016511124 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.3377e-5 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047068163 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060930489 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016672184 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078276772 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027596654 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.2355e-5 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026737445 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018534166 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033087831 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6949e-5 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050145602 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.000378448 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070090454 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.369385004 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.030295234 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02626388 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015771703 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.022350533 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041805371 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.723e-5 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045449888 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014973665 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054579646 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037810798 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030195159 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023716494 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061910183 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043820511 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067971019 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054090461 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086602944 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018646304 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024645467 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062266992 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.022301599 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022324689 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055806831 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01489737 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046540994 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053567179 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.6842e-5 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158945797 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.019863573 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023196476 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04625803 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.026431954 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.057673722 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.053641426 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026331505 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06251337 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0198249 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0615215 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044405968 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015393187 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061325777 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032009907 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.034828753 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019043196 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.7221e-5 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025873235 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032914234 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058218898 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053077048 seconds)
    (550/608) benchmarking "4d"...
    done (took 0.091432643 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074217671 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.00010952 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.017816019 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032364457 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069751151 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01441156 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060189932 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000120971 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028460986 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04449856 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062969301 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026455771 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045730406 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053242638 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.038476779 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.02718916 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016004793 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011437624 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057426895 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.029376194 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014879495 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029788996 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040369475 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019242493 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01469378 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049739604 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097907423 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014072335 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058364908 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072012842 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.4939e-5 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 1.8098e-5 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044094414 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053808416 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070508488 seconds)
    (586/608) benchmarking "2d"...
    done (took 0.052128808 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078003621 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059531979 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024121404 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056713646 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011326165 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046184534 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034055073 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029977136 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.058328205 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.4591e-5 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.244435489 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.5446e-5 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02767002 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.2627e-5 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.4223e-5 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044736798 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055608789 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04146438 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019482477 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053134423 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018095335 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087906109 seconds)
  done (took 29.265225533 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 0.134946278 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.122898571 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.095908169 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 0.032034328 seconds)
  done (took 1.535356726 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056690224 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024930693 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 0.024386348 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024865904 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044870668 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 0.034432103 seconds)
  done (took 1.350237475 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 0.050043846 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 0.038079487 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.095025952 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045040345 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028083219 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026540795 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.04336359 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.088596872 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037326334 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 0.030854019 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.027669741 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.035793564 seconds)
  done (took 1.687531692 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.03858188 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.4349e-5 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.7263e-5 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 0.043400661 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 2.6067e-5 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 0.031503477 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 0.042409251 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.6032e-5 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.1379e-5 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 7.245e-6 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.0816e-5 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 6.882e-6 seconds)
  done (took 1.300322585 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.056702503 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063097734 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058280229 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.056244242 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 0.20991588 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 0.040484485 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 0.038717607 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 0.039806697 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.050939725 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 0.21909222 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 0.034466393 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.039863576 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.025004877 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.059514957 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05203601 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 0.033586181 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 0.085542431 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 0.072447325 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.050737837 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 0.051540115 seconds)
  done (took 2.481399775 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.0469041 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052630094 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 0.04935121 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052768737 seconds)
  done (took 1.351259865 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045699375 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039856577 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038480292 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027513361 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.04651881 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.041718822 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022600482 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038539872 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.035082998 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045555525 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.04059091 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.033941731 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038017444 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.045086836 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 0.027009537 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040285474 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040813884 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022180169 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033532921 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033697602 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026167629 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023105466 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022469832 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.028898329 seconds)
  done (took 1.98636839 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.033289737 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 0.082826529 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 1.2249e-5 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 0.049511492 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 0.190629737 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.05143175 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 0.03278313 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 0.073751804 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002530484 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 0.531154097 seconds)
    (11/17) benchmarking "4467"...
    done (took 0.028518024 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.3649e-5 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 0.004658152 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.004072864 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.272e-5 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 0.002482483 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 0.00334514 seconds)
  done (took 2.237762199 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.263179638 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.133888351 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.316568068 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.495398298 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.113118863 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.201939489 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.300823294 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.190463277 seconds)
  done (took 3.172311525 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039972877 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.052535521 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.052149782 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.063723028 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039565415 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045989894 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.055626099 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.044777687 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031782721 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.036043506 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.044075212 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.040468245 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031277337 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 0.030470183 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024732038 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.042976679 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.050153274 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030679922 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.050919788 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034789699 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019951185 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.046196151 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.050560399 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.04717423 seconds)
  done (took 2.155385864 seconds)
done (took 78.215713954 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 0.040886317 seconds)
    (2/4) benchmarking "identical"...
    done (took 0.021163718 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.1514e-5 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.5158e-5 seconds)
  done (took 1.206702831 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 0.021310239 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024657905 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 0.036665991 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021106677 seconds)
  done (took 1.255423889 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 0.022915705 seconds)
    (2/3) benchmarking "equal"...
    done (took 8.818e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.622e-6 seconds)
  done (took 1.172943763 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020313598 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 0.023197603 seconds)
    (2/2) benchmarking "Char"...
    done (took 0.022985299 seconds)
  done (took 1.197698966 seconds)
  (6/7) benchmarking "join"...
  done (took 0.247476781 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 0.136592333 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 8.368e-6 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.669e-6 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 8.486e-6 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000203236 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 0.000580543 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 0.000963845 seconds)
  done (took 1.303654259 seconds)
done (took 7.555169404 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 0.149352579 seconds)
    (2/36) benchmarking "symv"...
    done (took 0.042237569 seconds)
    (3/36) benchmarking "dotu"...
    done (took 0.024975785 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 0.041105581 seconds)
    (5/36) benchmarking "scal!"...
    done (took 0.031331623 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 0.121406732 seconds)
    (7/36) benchmarking "trmv"...
    done (took 0.041628305 seconds)
    (8/36) benchmarking "asum"...
    done (took 0.02306288 seconds)
    (9/36) benchmarking "gemm"...
    done (took 0.119144472 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 0.039581771 seconds)
    (11/36) benchmarking "trsm"...
    done (took 0.107156205 seconds)
    (12/36) benchmarking "ger!"...
    done (took 0.042139387 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.041743796 seconds)
    (14/36) benchmarking "syr!"...
    done (took 0.044545334 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 0.025486271 seconds)
    (16/36) benchmarking "symm"...
    done (took 0.11818372 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029324617 seconds)
    (18/36) benchmarking "scal"...
    done (took 0.028914231 seconds)
    (19/36) benchmarking "trmm"...
    done (took 0.08006192 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 0.028484833 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 0.082518963 seconds)
    (22/36) benchmarking "dotc"...
    done (took 0.023177083 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 0.090958332 seconds)
    (24/36) benchmarking "syrk"...
    done (took 0.089107369 seconds)
    (25/36) benchmarking "gemv"...
    done (took 0.02488475 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.024153051 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 0.022151865 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 0.024941757 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 0.027601418 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 0.037223801 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 0.088144667 seconds)
    (32/36) benchmarking "her!"...
    done (took 0.048134764 seconds)
    (33/36) benchmarking "herk"...
    done (took 0.246431329 seconds)
    (34/36) benchmarking "dot"...
    done (took 0.022195572 seconds)
    (35/36) benchmarking "herk!"...
    done (took 0.230043905 seconds)
    (36/36) benchmarking "symv!"...
    done (took 0.028592644 seconds)
  done (took 3.443799842 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.170356713 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.145410928 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.29160571 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020351178 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.083008066 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.507736007 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.228995866 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073325432 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020265623 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.050427653 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.051389848 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.032854267 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.06180762 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.023449119 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.111091497 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076480433 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019529299 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091743997 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 7.9193e-5 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.049781982 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.086834486 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.03453817 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.125184499 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 2.423134215 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.000141846 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.125272845 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.16184648 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02574108 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.107906643 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.426482828 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 3.941568224 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 3.403e-5 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020851239 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.000112888 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.8574e-5 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.042629434 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007528614 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.184709476 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.438651883 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.044468108 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.126050446 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.085208578 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021041315 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.1497e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082318728 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.11065191 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102665179 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001504785 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068922012 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.6645e-5 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.014137746 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.086011266 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.085477972 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118821647 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000811544 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.9362e-5 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.118146861 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.5114e-5 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001262847 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.064128962 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020839409 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 3.9185e-5 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019894635 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.142573297 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.05179241 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.1361e-5 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.722839374 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114205498 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001264608 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.021451232 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021312349 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 5.2312e-5 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.035327585 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.058923126 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000112656 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025766066 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.1119e-5 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5016e-5 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.000139082 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.004177502 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.3844e-5 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.9144e-5 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.2415e-5 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001499784 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.000112895 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.137676246 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001715115 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.172348372 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090554617 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.1983e-5 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000668527 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.208468558 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.2443e-5 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.00747824 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.038671033 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.3098e-5 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.0831e-5 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.8094e-5 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054299757 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.7477e-5 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 3.1028e-5 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067759882 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.6871e-5 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001719145 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000679784 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001703376 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.9406e-5 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.352257549 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.039887208 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.13e-5 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.1799e-5 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.18498004 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.383e-5 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007543577 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.0699e-5 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.7768e-5 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.002463566 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.927457448 seconds)
  done (took 20.100309116 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.623176186 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.070812467 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.301880026 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.262543607 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.566473194 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.045938762 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.155929223 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.290565416 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.032343453 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022459132 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.037202942 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003985007 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.357481688 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.164720773 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.426361331 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.789855769 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022241818 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.14946632 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.24445298 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.321680802 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.032878383 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 3.3594e-5 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.01188177 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.001446674 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008248169 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.616040783 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000599089 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000250593 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003817183 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003727764 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.046469672 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.000156611 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.089179387 seconds)
  done (took 13.272044045 seconds)
done (took 38.605875528 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.239813888 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.13810143 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.142201987 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.308449954 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037479219 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.021815812 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.080937065 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.02222682 seconds)
  done (took 4.172754518 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021032017 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044336911 seconds)
  done (took 1.25153964 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021880533 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 0.022667539 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023162495 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021772608 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022429862 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.024553895 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021960464 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023285749 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 0.01967371 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022033548 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.020998839 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023049701 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026266305 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021786459 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021583188 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 0.022339063 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022339727 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 0.022251933 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021289353 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019646942 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021487768 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.022869959 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026397861 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024020075 seconds)
  done (took 1.727451824 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.072558463 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022059006 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020795263 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022712926 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022291412 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022889769 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021477844 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021087432 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020879446 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020176683 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02055093 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020305596 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021673808 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020518391 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020616586 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021811556 seconds)
  done (took 1.620161338 seconds)
done (took 9.952403549 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021591661 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021828583 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038493538 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.021857431 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065489788 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 3.2292e-5 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028312881 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026369171 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003358209 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.026510136 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011412048 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.035793231 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.038993498 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.024735971 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029848409 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.0129813 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023748408 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028572704 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.03525915 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003339564 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.027106233 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.02897488 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.038282355 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005996358 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.007802088 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008520919 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.004904037 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.013266968 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.2496e-5 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005570688 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.0266397 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020247289 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.004975848 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023978594 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.004996966 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.01142031 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030180241 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011711666 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011624661 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005499658 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.2181e-5 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012906044 seconds)
  done (took 1.984235274 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028152257 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028021252 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.029323949 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023654976 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029702813 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029442564 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022122185 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026835664 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026612398 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024915344 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022475418 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.025767602 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028321602 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028013973 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026402041 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.02776947 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023615008 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021862583 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.030471971 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027816007 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.02594057 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027861336 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027774552 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027712502 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024135939 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026097855 seconds)
  done (took 1.892114256 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038045942 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.049394087 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.065570766 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.032262627 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.036718128 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.040956948 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 0.04488358 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032033448 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.031701581 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043430836 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.045773128 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.031804964 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032721116 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.050772881 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037305958 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051985026 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.055117896 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040476192 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.039939052 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.048800708 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.035298976 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.04237079 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.037603598 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.03546372 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037534809 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03405075 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034611604 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036302469 seconds)
  done (took 2.34386616 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019521816 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.057977968 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.102889373 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053463623 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031062015 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022534669 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026303618 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027131745 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.058777565 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.098292735 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.032281701 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.060075284 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.020059372 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.056137703 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070639399 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032956535 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026266165 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020625582 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020293433 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020007442 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026850472 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.027699941 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 0.02000091 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.019691974 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.04600773 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.020815478 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019721177 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.020872424 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025494013 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04468388 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025614818 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033122147 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026659915 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026687086 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.065426707 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.029948613 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.018836405 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.02000519 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031489845 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022452627 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.2509e-5 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025610465 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037061394 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034584813 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.030772646 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.057783672 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 4.0716e-5 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.080390328 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027121424 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.029140515 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.025645667 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.127111601 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020351465 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018983383 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028139829 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041120532 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031609127 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026966968 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049207561 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035805282 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.136825687 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019549849 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029097558 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.024787701 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.038766172 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035705704 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029671136 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035774822 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057995336 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.3271e-5 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.040912622 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.028782722 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.03500635 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.2154e-5 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.03110177 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.02557174 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.7363e-5 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034236265 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.025676742 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027028503 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020861623 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040681697 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032384831 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029162546 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024583417 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.038839353 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.031918903 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.026790425 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025142478 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038281458 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.043967465 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037554181 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027636531 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.030490121 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019084211 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043393661 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.029471275 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.02021003 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024922606 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029256756 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036359455 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.020061397 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029567687 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024082672 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.044927534 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.9336e-5 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02053324 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.018867937 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052978341 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 3.2327e-5 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021796407 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025357992 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.039228716 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024729672 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.4422e-5 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.034415949 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020758114 seconds)
  done (took 5.039406301 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029568797 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.033771556 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024725255 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027032378 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.02809223 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.01877451 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020809979 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.04120685 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.020110157 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029949114 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.031657014 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.04025903 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.025599655 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026291769 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.02055389 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.020876962 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022791892 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022657722 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018600155 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 3.4327e-5 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024430403 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.4634e-5 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020274264 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024124436 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023332154 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.9223e-5 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021420504 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034877194 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02820651 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026633226 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.038433201 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.5879e-5 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.02812888 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.032025963 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026629049 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.036942626 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021060046 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.034316287 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020322238 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.1424e-5 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018613396 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02665753 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.031114124 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.03794746 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02721378 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021193879 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.02338949 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020981456 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.7492e-5 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.035339418 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.029964896 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.6272e-5 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.1983e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.020497281 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024843326 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.040214897 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02166261 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037657779 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.020979124 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.3811e-5 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.021429865 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036901798 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.031453572 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.7821e-5 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.7923e-5 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025332656 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.9129e-5 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02566393 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.7918e-5 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.3657e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.019821191 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020031122 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.036575164 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.036474847 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.03174692 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 4.2168e-5 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.030695669 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.02048372 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026636271 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.028676072 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019830315 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 4.2944e-5 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.020421995 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.2657e-5 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.4311e-5 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.4046e-5 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.7469e-5 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.022820431 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.027296709 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 3.8535e-5 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018970982 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 3.7859e-5 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024461702 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 3.2701e-5 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021177552 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.021794708 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.6491e-5 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.5405e-5 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.9108e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025670207 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.8935e-5 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.021988458 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022674733 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 8.5889e-5 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000134194 seconds)
  done (took 3.234131626 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.050835559 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.030740754 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.127978666 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.089619881 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043212946 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.087754758 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.081726228 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.091409325 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.05292828 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.087770899 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.058724353 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.088661979 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.060868039 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.025114334 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022136677 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.044681694 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.044412675 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.095211666 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022525447 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069659333 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.041512007 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.034863287 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.023229063 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.024225688 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021853708 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.026723898 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.069571705 seconds)
  done (took 2.726178264 seconds)
done (took 18.40827457 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 16.382590728 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.600505472 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.406704466 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.416936326 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.304817368 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.950965476 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.086762174 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.608873003 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.114580636 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.389881914 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 10.303682551 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.298164995 seconds)
  done (took 42.069035583 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 2.164816326 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.921028897 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.107105179 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.059529675 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.155384091 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.107389809 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.046899662 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.376502254 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.041558022 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.150170722 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 2.009097056 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.39650009 seconds)
  done (took 10.384710607 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 0.103178741 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.623908416 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.25207413 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.396903956 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.289127883 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.829078057 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.079202851 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.574414635 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.103543065 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.375763934 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.361772093 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.487395096 seconds)
  done (took 24.528323173 seconds)
done (took 78.196886952 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.028548305 seconds)
done (took 2.51150352 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.705228407 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 2.93148343 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.627034774 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.514907405 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.63973473 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.544181684 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.54590465 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.629278455 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.634385176 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.534793944 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.544456372 seconds)
  done (took 31.217704132 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.406886911 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.408216875 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.424385547 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.466204955 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 5.071559804 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.424208103 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.424126215 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.423886729 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.587500186 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.493380389 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.426313552 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.466362129 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.531686721 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 4.133814318 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.489311519 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.484595249 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.52629168 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.409882502 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.468272048 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.489030484 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.472825057 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.493073376 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.436725052 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.530147943 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.483110358 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.505236031 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.503058415 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.416689953 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.481712451 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.547544081 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.54446454 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.426078444 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.485512671 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.494454795 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 2.810837857 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.746081266 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.503205909 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.476283792 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.46910358 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.441187502 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.435052113 seconds)
  done (took 108.631477914 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.65062009 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 3.293417996 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.632548472 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.604150743 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.638854552 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.562443785 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.556726163 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.648475141 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.634456315 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.665576248 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.553609326 seconds)
  done (took 33.830221093 seconds)
done (took 176.124246901 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.377460326 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.376756512 seconds)
  done (took 17.132220733 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.442680722 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.416336138 seconds)
  done (took 17.238807249 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.398959652 seconds)
  done (took 9.77946738 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.733154324 seconds)
  done (took 10.107614694 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.469058386 seconds)
  done (took 9.847583186 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.722103657 seconds)
  done (took 10.09759171 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.580521677 seconds)
  done (took 9.956604335 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.392783797 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.396397748 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 7.383301375 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 7.419331448 seconds)
  done (took 31.965013395 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.330341112 seconds)
  done (took 11.711012755 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.3753267 seconds)
  done (took 9.753475015 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.643564101 seconds)
  done (took 10.028290381 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.373947564 seconds)
  done (took 9.752825359 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.150707752 seconds)
  done (took 10.524147557 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.705682674 seconds)
  done (took 10.08429065 seconds)
done (took 180.357951885 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.930082984 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 8.074895549 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 8.04301373 seconds)
  done (took 26.421954966 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 2.925143024 seconds)
    (2/2) benchmarking "readstring"...
    done (took 2.866061031 seconds)
  done (took 8.197131522 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.383721566 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.811448848 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.809780078 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.380138913 seconds)
  done (took 27.769333943 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 7.477435189 seconds)
done (took 72.237063985 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.427719032 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.390472346 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.378484011 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.431659768 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.392288905 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.400497346 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.390566746 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.39241061 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.40554469 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.430248779 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.442887032 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.603207079 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.622533411 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.576356706 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.395342501 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.402745602 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.401725753 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.39572621 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.396882158 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.386408217 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.402928092 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.416810817 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.478543477 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.386260161 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.393893865 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.390408571 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.401077835 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.39345989 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.404128694 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.389080655 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.399984527 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.393225435 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.386924132 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.394718688 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.397214552 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.390902072 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.395120424 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.418737423 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.422897919 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.378951603 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.393208 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.402896922 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.396151819 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.401848776 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.398783379 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.398063482 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.398804425 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.400826122 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.406957536 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.400854949 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.404380714 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.45363482 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.39175147 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.404867821 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.394506216 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.391081183 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.39760722 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.39612728 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.404750411 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.395337464 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.405188017 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.583253395 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.44929266 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.421572649 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.401103387 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.419110358 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.429655066 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.398281252 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.420906644 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.512641032 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.448831014 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.408814324 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.40210738 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.418923555 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.411256433 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.409389285 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.415756134 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.443867089 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.398521129 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.414651412 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.427053949 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.434226993 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.531624061 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.420680213 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.399714983 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.406898409 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.455731916 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.419116174 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.407852466 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.422768409 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.615423738 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.509164723 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.418892055 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.436554052 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.436086251 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.390720221 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.40492249 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.387237987 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.427856741 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.399967399 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.417258533 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.393891889 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.417976578 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.388265311 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.387500311 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.391554981 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.396017199 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.394332428 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.506487905 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.405673071 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.406799251 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.399469417 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.39079849 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.396240479 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.394544318 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.406318725 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.399298401 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.40069625 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.410418199 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.406612507 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.396932643 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.41993916 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.407327399 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.412407751 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.406036409 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.400333457 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.406606384 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.421477661 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.394485497 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.384171636 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.396174053 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.397128264 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.550466539 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.407753409 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.418320428 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.393993605 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.398192114 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.411700342 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.416489981 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.423096404 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.406478259 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.454631433 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.396702423 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.424526901 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.446057968 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.404283878 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.548201762 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.424030595 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.41478421 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.397957713 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.400270855 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.420158657 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.408503892 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.411746051 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.405444789 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.397956475 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.392649215 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.409309725 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.393239096 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.390784954 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.387634966 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.387080616 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.424306955 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.407247619 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.549528175 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.397555144 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.422447351 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.416226758 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.403500653 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.394750939 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.428043286 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.393923568 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.409407107 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.422141931 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.398541458 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.393422212 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.401263667 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.419332762 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.400377968 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.40529325 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.39031755 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.393238239 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.395776185 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.401190447 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.404268081 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.395797699 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.388539211 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.406513265 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.421442146 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.399878234 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.392607239 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.621304819 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.391914951 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.401623559 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.412713424 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.413154592 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.407675643 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.385953904 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.413246188 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.398470951 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.41204047 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.426610646 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.39627514 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.390957466 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.399127837 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.433814957 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.434592348 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.439791964 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.414206157 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.404842931 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.492899327 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.398389445 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.396855935 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.404945929 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.429588229 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.405501384 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.407718691 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.398934918 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.397019073 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.402152446 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.401135486 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.419847632 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.402785432 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.423309044 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.402050484 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.435960345 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.405519014 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.424819014 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.397829222 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.406724287 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.421115205 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.396101285 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.406316637 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.409206843 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.408454566 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.402581117 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.400285304 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.437206308 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.398658417 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.398295747 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.42276893 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.412355395 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.401359016 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.402167257 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.413644723 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.425069508 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.406569794 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.416316541 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.440738402 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.408358415 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.611679984 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.399886282 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.401831781 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.558022098 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.419690958 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.426275564 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.436443934 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.39921675 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.391566364 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.423651977 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.407540384 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.412990723 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.394582452 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.399048087 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.401231472 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.393889144 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.392205899 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.396237452 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.440845915 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.434710958 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.396415915 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.413043573 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.39798276 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.392467188 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.404023692 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.406743497 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.432049311 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.39826842 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.438000545 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.624112612 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.418395258 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.426529266 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.405655762 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.401226386 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.406439045 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.392365717 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.405926207 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.500925946 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.414493389 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.54026145 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.424392761 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.403923772 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.388932885 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.3907815 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.406121912 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.401072015 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.403318455 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.395227247 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.40707105 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.422589415 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.399794494 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.391287365 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.450337395 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.412044206 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.402310788 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.38689395 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.430133625 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.400415188 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.386231652 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.4204064 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.443451692 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.430123703 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.400516926 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.39823192 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.391864525 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.395677486 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.402099876 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.408379638 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.414358172 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.400993404 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.396235126 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.403554298 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.404876581 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.401832551 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.395064178 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.432686484 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.413857896 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.435586987 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.421382827 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.396625951 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.405704727 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.405355933 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.404178459 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.401569734 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.387044416 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.443756522 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.40400985 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.449365665 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.406394616 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.40363042 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.406820226 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.393082096 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.39255586 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.411171915 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.397704389 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.419620341 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.401447893 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.399908821 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.415863766 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.390416771 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.403760223 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.394208357 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.437696002 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.394299233 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.444992926 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.400038686 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.412838209 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.392067157 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.403891115 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.409747835 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.39792722 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.399555488 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.428612721 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.401912224 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.405363756 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.565461074 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.393784699 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.394749797 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.413007426 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.419774084 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.385540713 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.400973028 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.396164651 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.413568208 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.425278729 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.40006175 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.422142727 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.419834918 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.40402511 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.398951161 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.414069053 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.415318087 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.407873559 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.392000502 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.423606189 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.391649136 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.408508092 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.388099504 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.406619011 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.412971934 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.391906463 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.398984992 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.40791166 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.454176928 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.3974173 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.408607568 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.417001416 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.416108617 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.421114622 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.421473028 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.394836222 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.394394248 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.399286797 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.409186063 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.397665106 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.395851496 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.39624938 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.404177408 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.398590308 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.410956372 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.398433838 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.400690398 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.405167119 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.403168439 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.422564259 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.396667301 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.401509987 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.426606229 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.400518033 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.433241008 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.402448483 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.407776632 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.402898092 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.419241441 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.406763413 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.407407777 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.420722554 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.440501399 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.425197684 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.407286279 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.420007626 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.397296928 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.389667082 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.416305293 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.407415822 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.39493609 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.42366517 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.400334559 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.406369929 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.406281335 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.401105631 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.419399869 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.412110974 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.410903153 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.400849714 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.405443199 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.424161346 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.406967048 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.414914004 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.413594205 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.425523247 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.406864269 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.403852227 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.395058641 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.414212132 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.425402976 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.413021266 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.406770257 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.396520979 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.398427333 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.42753213 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.403817689 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.410888106 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.402540606 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.405423777 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.402860422 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.407475429 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.401163339 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.414653364 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.393567385 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.408199093 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.408046665 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.413918762 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.421167844 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.402096443 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.438211264 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.405303212 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.406808877 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.480580384 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.405124342 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.401708066 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.394282899 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.407128567 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.397177331 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.421528532 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.398196364 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.394812014 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.402909681 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.410943469 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.397974074 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.399317784 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.404038388 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.400412889 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.400512942 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.410313092 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.394078805 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.396586796 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.401738546 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.386249345 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.412785885 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.409066416 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.404571492 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.415623847 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.410403004 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.411069583 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.511787 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.41163697 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.403667467 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.396860246 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.426073609 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.396595464 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.408880788 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.421043825 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.396386957 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.402163063 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.407686003 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.395261248 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.416473303 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.408784185 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.420925101 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.401296933 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.389592742 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.417805995 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.413238372 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.413085486 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.408829204 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.398100399 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.411044897 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.448762484 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.412952349 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.426981109 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.392019078 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.400126609 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.403118826 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.407924254 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.41118944 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.416529003 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.409688994 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.602747483 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.415744224 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.397114352 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.407589941 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.430267017 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.421177493 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.404107534 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.411659884 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.4224629 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.40303609 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.407466983 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.483241984 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.397223185 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.408216098 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.400328393 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.399154346 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.421081344 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.400168335 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.447140703 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.403682834 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.430016501 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.408860943 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.427125328 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.399386532 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.411643097 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.390439568 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.422614792 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.406106823 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.416857939 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.407211334 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.424078834 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.414839243 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.428017675 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.407563169 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.407038808 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.420062269 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.429367027 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.417002809 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.418963583 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.402184567 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.412778183 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.411919444 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.40520459 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.428023288 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.405586396 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.418133352 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.427805698 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.429549405 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.44152913 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.408782347 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.427278086 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.419508951 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.435166332 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.405315097 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.412947155 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.413339349 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.453708462 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.500877755 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.413700385 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.418691394 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.417133911 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.408982233 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.422570614 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.407016873 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.40708883 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.421713621 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.428384128 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.408365134 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.429984231 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.40930994 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.401788827 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.447473905 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.43208261 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.407206456 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.554892461 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.421877928 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.410298482 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.391702362 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.506024911 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.428576166 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.40131317 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.42446009 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.413867747 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.457346065 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.395013032 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.422806017 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.419714692 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.418480287 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.430973878 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.408675688 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.411084944 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.407341294 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.411286867 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.411934249 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.410502475 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.418456887 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.413193727 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.418817672 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.411300418 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.401093609 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.409049755 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.521836837 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.401597315 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.427019242 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.427030731 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.429403886 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.404645669 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.418995069 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.418997125 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.427303216 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.409076194 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.433315636 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.413167814 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.408538476 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.393164406 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.407327845 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.41439586 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.409336865 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.431512357 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.412017253 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.444180998 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.406498533 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.451642317 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.40200058 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.436535706 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.407891159 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.403956814 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.391822136 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.40991689 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.409044366 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.403287674 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.415220273 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.412880792 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.438528449 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.41732008 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.398505273 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.443929191 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.409563584 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.452272006 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.431771989 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.409820996 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.408275597 seconds)
done (took 1644.716683693 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.601702618 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.559567935 seconds)
  done (took 17.551444793 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.988862432 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.39101434 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.051894404 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.481198583 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.437391349 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.581838171 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.042345449 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.411586094 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.39612078 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.953041401 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.400401285 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.656375492 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.442798735 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.397897495 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.608600381 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.499643244 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.394419558 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 3.0349211 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.028767438 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.866525041 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.402384075 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.391811291 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.388808774 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.411946657 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.391990639 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.830808048 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.111754318 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.403196098 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.627140494 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.406601872 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.629959848 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.960724 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.413438988 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.606063973 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.701629542 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.398212985 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.392281331 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.426662067 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.393333953 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.1833298 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.934242722 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.397279787 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.792374051 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.949080702 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.723439163 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.896800796 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.164630461 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.219143607 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.949980072 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.957424289 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.8481525 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.849785287 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.398053413 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.387142498 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.383881421 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.384952317 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.236384003 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.398363798 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.409106106 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.01254144 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.401059835 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.330487278 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.409484185 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.765389122 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.407327372 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.355317106 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.792164956 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.420702724 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.418802343 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.680068655 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.400935424 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.91023409 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.39392099 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.39355922 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.732816922 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.423932924 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.391546963 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.183171981 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.42073177 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.781654511 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.194090868 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.893324411 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.827226848 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.40353963 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.392448317 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.935614472 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.41321344 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.830010667 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.09311763 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.391367471 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.398324274 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.696978846 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.083739836 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.144817292 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.39144755 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.388929307 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.923592745 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.969616265 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.867933581 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.858434134 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.404295147 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.963369714 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.389759328 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.906828806 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.574509533 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.224294737 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.399066143 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.8971537 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.395767857 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.948790195 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.392382437 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.39268515 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.401204588 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.382696705 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.962198164 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.388491895 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.313714742 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.828323205 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.395959298 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.384617141 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.385212421 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.883608075 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.166844117 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.611744404 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.860760502 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.878045894 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.583418374 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.794909204 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.112792925 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.380277674 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.388748094 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.38684886 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.164787924 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.395826209 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.391541545 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.744520647 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.421698894 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.401469545 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.82329563 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.419368433 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.029457965 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.092161335 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.86263294 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.818850971 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.655094163 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.398450753 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.397519402 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.386247029 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.385841912 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.659344167 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.402441409 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.361044298 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.398364299 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.38884128 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.895376735 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.402784657 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.390512897 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.763409334 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.399677636 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.394454708 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.894531519 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.109733948 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.868226403 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.919835997 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.394567607 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.982174653 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.895115804 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.395235395 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.384176809 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.399868652 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.972283744 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.401665764 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.888887069 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.788001762 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.89751193 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.893336486 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.392742117 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.906669572 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.704645909 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.388953656 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.903893513 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.865588265 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.730425903 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.895811496 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.623687333 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.406998642 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.401189828 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.391137928 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.478849299 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.39153192 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.393871518 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.38850012 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.409946771 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.389398642 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.376879987 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.972392598 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.882652704 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.397868276 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.398651779 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.38996273 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.401028634 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.953083541 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.905326235 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.338124544 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.75815991 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.694616681 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.184018017 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.995691087 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.406827695 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.157113726 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.639758453 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.399094354 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.815388818 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.399885201 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.925378374 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.890132487 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.399020423 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.806108942 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.498584414 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.398157666 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.395931274 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.93321142 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.892120211 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.399057961 seconds)
  done (took 1136.116988601 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.71155376 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.666997755 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.559101891 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 8.23509574 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.976773312 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.273057667 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.464629644 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.585931181 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.185638426 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.806282807 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.223846097 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.42574069 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.602373432 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.906117719 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.633428005 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.445146609 seconds)
  done (took 88.086631023 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 2.785268914 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.551353128 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.377996867 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.883251137 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.637195021 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 2.704783011 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.830490937 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.497722748 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.297184325 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.969386083 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 2.772733272 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 2.992026566 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.66563066 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 2.962082268 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 2.945526428 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.616708815 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.901388872 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.953279066 seconds)
  done (took 61.735816718 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.56290292 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.327880222 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.585458067 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.480668266 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.934597204 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.606349816 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.206121712 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.277348833 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.095354049 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.038377604 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.70107508 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.007824096 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.181736436 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.463907636 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 2.48438812 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.403353991 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.453984109 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.003716285 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.14729815 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.495248526 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.547185481 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.954793331 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.463224881 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.569364885 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.782236287 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.373068464 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 2.79786322 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.370447111 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.39148569 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.702685446 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.59552657 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 4.075322646 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.117859574 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.534492263 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.130373414 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.799584177 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.044870736 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.394164065 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.387815758 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.493637843 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.752297047 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.631278813 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.658482236 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.139799765 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 2.870273775 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.296269638 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.590280156 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.535781063 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.001846667 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.463743144 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.223322372 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.613630338 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.157005747 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.621195959 seconds)
  done (took 233.9406853 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.858670202 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.501322209 seconds)
  done (took 12.776947332 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.47764236 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.467924963 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.455760492 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 7.433384753 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.426436051 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.435812505 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.453701281 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.456830297 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.470281412 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.460777367 seconds)
  done (took 76.931141927 seconds)
done (took 1629.527672021 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 3.815064196 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 7.454927569 seconds)
  (3/8) benchmarking "fib"...
  done (took 2.799660248 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.39743452 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.422807148 seconds)
  (6/8) benchmarking "parseint"...
  done (took 3.376413346 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 5.466211741 seconds)
  (8/8) benchmarking "printfd"...
  done (took 7.38970937 seconds)
done (took 47.520004342 seconds)
(7/23) benchmarking "parallel"...
done (took 2.438964834 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 2.427245729 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.030667454 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.847062215 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.190787839 seconds)
    (5/9) benchmarking "Date"...
    done (took 2.86895823 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.446475499 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.206979815 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.138438945 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 3.096031248 seconds)
  done (took 28.645126214 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.556408856 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.454651042 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.437913084 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 2.58677299 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.63090413 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 2.432100169 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.454991981 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 2.521944496 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.586208454 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.436400934 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.569897534 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.63209818 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.60838355 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.592174056 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.641895025 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.447117787 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.564700827 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.608219058 seconds)
  done (took 48.158655505 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.411736596 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.410439384 seconds)
  done (took 7.21509071 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 2.433819605 seconds)
    (2/7) benchmarking "month"...
    done (took 2.531975792 seconds)
    (3/7) benchmarking "second"...
    done (took 2.440722205 seconds)
    (4/7) benchmarking "day"...
    done (took 2.552343979 seconds)
    (5/7) benchmarking "year"...
    done (took 2.516309502 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.441031385 seconds)
    (7/7) benchmarking "hour"...
    done (took 2.444562361 seconds)
  done (took 19.752742351 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.451389883 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.610321537 seconds)
  done (took 9.457276838 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 2.433622079 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 2.429909086 seconds)
  done (took 7.339412253 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 2.423075384 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 2.925834001 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 2.426466002 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 2.743376963 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 2.854685139 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.426993467 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 2.43267894 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 2.689346549 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.429135759 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.432093471 seconds)
  done (took 28.179101538 seconds)
done (took 151.141468235 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.794521371 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.437200206 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.430888826 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.456929105 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.44413635 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.440711437 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.461253552 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.443557162 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.434947313 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.454323234 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.429105187 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.455048287 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.455098126 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.914963134 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.431632236 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.467289835 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.4648583 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.43672959 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.465486476 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.43965786 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.430260655 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.454137019 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.908837329 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.435683761 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.473158144 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.430844213 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.438178432 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.45375826 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.466169379 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.432498032 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.462252675 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.42848215 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.801123465 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.435248498 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.4284469 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.440359185 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.428456507 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.430463819 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.462567667 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.4428403 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.430061625 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.453979106 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.438423001 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.460050419 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.80448771 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.441731206 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.452635145 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.458915584 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.798783094 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.425988892 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.454563644 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.440332475 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.453615568 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.442456954 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.429444398 seconds)
  done (took 139.22214861 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.413464818 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.435124485 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.448128422 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.402156488 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.558230544 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.640110859 seconds)
  done (took 17.2958971 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.522645436 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.859700061 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.913784555 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.451001786 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.461597596 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.440715713 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.501287704 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.436530321 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.449395426 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.505753247 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.495442808 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.918505195 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.511922244 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.458970393 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.49411099 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.45107552 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.461325262 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.436474608 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.860821055 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.453615599 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.459412789 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.460058485 seconds)
  done (took 58.645555342 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.465006357 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.448581163 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.481683414 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.467181746 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.443811821 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.518906864 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.518613561 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.510965796 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.52237913 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 2.4482351 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.443445967 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.448654172 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.446243587 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.451044049 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.474743724 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.474755319 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.465864409 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.51008908 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.472199847 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.442423908 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.475245634 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.436529104 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.442010035 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.523445532 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.495950496 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.480459771 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 2.462526179 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.481533597 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.54270733 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.538944482 seconds)
  done (took 76.727819712 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.459532517 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.446104213 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.452900439 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.611537352 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.472292222 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.468551688 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.546201159 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.4894934 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.604985308 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.549288926 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.504280366 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.453435572 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.464811291 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.589404561 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.459734076 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.479919234 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.448561016 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.44497201 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.50917787 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.572821918 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.459146927 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.451179503 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.453610359 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.582058203 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.460208431 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.453144615 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.517272632 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.447911375 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.586438855 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.456642771 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.452565348 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.458063811 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.451291812 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.447419723 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.444347974 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.450106093 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.447008292 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.453497199 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.454385958 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.45949628 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.575360372 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.451407762 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.452618905 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.519398155 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.453249593 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.443992321 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.52111594 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.461518023 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.52654488 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.453674148 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.442304389 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.44592957 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.44509279 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.458371354 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.457216528 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.459279286 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.454933635 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.444347687 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.452454278 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.526206688 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.54085324 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.592165373 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.465632766 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.577251847 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.516912346 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.46617913 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 2.493489013 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.451219865 seconds)
  done (took 171.361446466 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 2.410765593 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 2.440852544 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.414385298 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 2.430823101 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.428447881 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 2.430114311 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.425310162 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.428543829 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 2.430106702 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 2.442941906 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 2.413463533 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.424599437 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.413202091 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.591399188 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.518466474 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.431416479 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.419969555 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.430327745 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 2.425940576 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.427851985 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 2.426143861 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.429751267 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 2.431489447 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.431523281 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 2.427504486 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.420376625 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 2.432092586 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.429969194 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 2.41450099 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 2.432454097 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.475254616 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.413799313 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.496180595 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 2.422916047 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.428094187 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 2.414869509 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.413513741 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.423747174 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 2.41407531 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 2.427983215 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.411853539 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.431000339 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 2.438439196 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.432822115 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.429431455 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.417754904 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.430441939 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 2.428111233 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 2.427805031 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 2.430221688 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.413361995 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 2.416652262 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.416029077 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 2.456519247 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.479325158 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 2.515192975 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 2.42807584 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.415824475 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.42854646 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 2.459243179 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.431211887 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 2.426039564 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.41308791 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 2.430598126 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.431482921 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 2.414975874 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.428833541 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.430385474 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 2.432539585 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.41800961 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 2.415471372 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 2.423900714 seconds)
  done (took 177.588219486 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.292217941 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.448510273 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.45458706 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.285749145 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.426325609 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.451263586 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.274598801 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.342884189 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.452442366 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.45262128 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.453771544 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.268271125 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.268083922 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.447913127 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.451093344 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 2.449544008 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.454388015 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.264898967 seconds)
  done (took 53.334389823 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.449862053 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.456522802 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.476727748 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.46005255 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.459208754 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.45515578 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.456927087 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.459308163 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.487170708 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.451525965 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.456414062 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.465849849 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.455673427 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.476095614 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.484432097 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.659114079 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.45986813 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.451659633 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.516076161 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.510898915 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.653912869 seconds)
  done (took 54.601773897 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.449906676 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.369295834 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.613379387 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.549198178 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.547076965 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 2.445672269 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.516058078 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.547660158 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.61853339 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.532784571 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.535484798 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.518546275 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.547575571 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.516617149 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.360618973 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.444998839 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.511872306 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.449269747 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 2.520584309 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 2.537458609 seconds)
  done (took 56.53288526 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.47911432 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.482049696 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.481987493 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.480901909 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.48069018 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.45753247 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.456742295 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.45198405 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.482889101 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.459404431 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.454449349 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.459544577 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.460377667 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.462219958 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.457646805 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.643911342 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.457968895 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.457376593 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.451693436 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.452575219 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.459012478 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.461837684 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.461293417 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.455858695 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.461191729 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.481781147 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.642395462 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.481376031 seconds)
  done (took 71.775507402 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.669296589 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.469996118 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.4684342 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.484432122 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.534996008 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.486448906 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.480699639 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.48147011 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.48110195 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.537717818 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.691327011 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.481677111 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.455502813 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.479589121 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.480020109 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.47050485 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.487716461 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.534763074 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.487842204 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.685253498 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.457339751 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.48612531 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.488167077 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.464806107 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.484557562 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.535745946 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.695248981 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.481907298 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.539045376 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.683191277 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.54567789 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.479339561 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.466721001 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.473231065 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.465062913 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.482517417 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.538242771 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.683835181 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.684038709 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.485492554 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.53953662 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485986213 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.485312131 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.488606655 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.48324454 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.479812278 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.478097584 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.501041328 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.541606636 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.487338235 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.461942846 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.486209827 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.539407219 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.535137855 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.501167378 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.677077125 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.541325884 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.483327357 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.487610519 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.469482434 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.481991401 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.534542687 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.48412653 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.483955956 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.48154085 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.553920457 seconds)
  done (took 168.542394344 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.454147433 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.450264773 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.312911801 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.454173227 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.452860699 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.450353107 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.474373592 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.514766318 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.468498947 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.450836782 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.401035634 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.457973276 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.496448922 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.452655603 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.451690614 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.453079943 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 2.45123831 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.45776713 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.47167559 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.497406012 seconds)
  done (took 53.481452767 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.439775415 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 4.002776012 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 2.424241031 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 3.188509134 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.338899374 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.148834091 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 2.501759947 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 2.924335369 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 3.240707197 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.42579519 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.428901394 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 3.423195447 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.448658918 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.430329637 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.428884486 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 2.433326988 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.352147151 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 4.005805879 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.466812026 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.428568426 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 2.426342528 seconds)
    (22/49) benchmarking "13786"...
    done (took 2.431682025 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.97512953 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 2.443724009 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.443792113 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 2.434158204 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.481233537 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 2.42492711 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 2.429875526 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.152006564 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 3.242850908 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 2.921130401 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.498172517 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 2.429460867 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 3.271531079 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.893385971 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.449063623 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 2.429695358 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.435914497 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 2.431301632 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 2.780546315 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 2.500076037 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 2.432679237 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.302276927 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 2.911677854 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 3.257393748 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 2.4242101 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.434298499 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 2.434555123 seconds)
  done (took 143.002123141 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.443722485 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.446965924 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.494937502 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.44328941 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.449691308 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.482882055 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.496574383 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.452389664 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.495318245 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.495858457 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.450479749 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.485000355 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.499541323 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.500171388 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.502059001 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.499533509 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.45674424 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.443536261 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.447240917 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.443433079 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 2.444178904 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.447380589 seconds)
  done (took 56.719725556 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.846827727 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.998260018 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.498015326 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.479753198 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.493486675 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.498614465 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.462276913 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.495119046 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.000504441 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.484475225 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.452862969 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.509395459 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.509118418 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.458791539 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.844518325 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.496558177 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.522723853 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.454499946 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.454913946 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.480601013 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.537875435 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.476253207 seconds)
  done (took 58.852144303 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.262592937 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.440996134 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.779891505 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.459898663 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.471791006 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.444497234 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.461719038 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.779232666 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.461873992 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.405938816 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.459465087 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.46303384 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.458598457 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.461363479 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.261251985 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.398907389 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.398710777 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 2.45730114 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.460452774 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.456544117 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.459785158 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.398382701 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 2.455955628 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 2.456880238 seconds)
  done (took 71.410228243 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 2.426234672 seconds)
    (2/2) benchmarking "indexed"...
    done (took 2.428859851 seconds)
  done (took 7.250098507 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.570837273 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.501222606 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.505801435 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.577509385 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.624358163 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.555170096 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 2.44692905 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 2.44241799 seconds)
  done (took 22.616419053 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.255143742 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.262313591 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.52725275 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 2.469807268 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.544209939 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.531979448 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.255074929 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.532262549 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.25168329 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.541109754 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.573421748 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 2.4643571 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.572015187 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.533741585 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.463218571 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 2.462002181 seconds)
  done (took 45.637877718 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.455082595 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.934138236 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.394348448 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.446431338 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.442662893 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.466088796 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.44861457 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.464859253 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 2.483312303 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.444630783 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.463413951 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.440440861 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.462061767 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.449030094 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.392475911 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.470118252 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.466378141 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.485515076 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.445716978 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.46623838 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.463406686 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.468299819 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.463114381 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.46682368 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.934574303 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 2.463748637 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.468753211 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.442530071 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 2.46342452 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 2.467339147 seconds)
  done (took 93.019242188 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.682628365 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.478290089 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.475326836 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.448845923 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.53155958 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.496073548 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.465438251 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.461865876 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.46920406 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.464352788 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.465667835 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.464978935 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.462845329 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.46379217 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.479146486 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.480332739 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.476753121 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.687755115 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.457854326 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.446072696 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.466445031 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.473611093 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.471337563 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.473223448 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.473428021 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.478723717 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.671962058 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.466755628 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.473375401 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.445531152 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.534587583 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.485040472 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.677996246 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.46838881 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.679075852 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.457171364 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.532705112 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.531433796 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.527834313 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.467995 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.46573538 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.533343972 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.672761609 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.670493778 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.477531719 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.466375735 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.473286349 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.528779753 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.475988717 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.496001779 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.464713698 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.529842582 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.452011602 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.459498748 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.475315301 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.463109843 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.464342074 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.466115892 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.476778616 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.467465306 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.680698484 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.463356588 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.466639277 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.467183117 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.466548354 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.47745376 seconds)
  done (took 167.514013846 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.536392402 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.629533978 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.449291328 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.447407045 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.570360889 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.624273415 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.534443444 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 2.444266149 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.509447004 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.578615321 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.507349918 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.447387175 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.477368794 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.514477438 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.632766041 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.510666056 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.573490867 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.446457738 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.449485292 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.627177445 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.474920935 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.582574744 seconds)
  done (took 57.963703169 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.581804483 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.499560909 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.588394717 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.523634954 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.527771779 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.496549454 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.52346663 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.4952918 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.522518087 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.584665634 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.51989314 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.526121498 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.729290441 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.527253919 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.482791551 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.585408379 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.525899694 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.578952147 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.541437858 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.518253792 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.496119756 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.480496401 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.529555082 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.524512595 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.52760335 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.524372112 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.49190738 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.529912264 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.525476845 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.736773383 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.529062389 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.581304532 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.525684616 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.524423779 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.495910836 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.52493629 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.521776985 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.524440039 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.527355025 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.730224476 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.526128998 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.497454492 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.527392919 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.581596707 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.491756786 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.521942688 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.587180508 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.626400272 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.66441081 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.7492035 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.786724698 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.723068804 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.589960423 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.52483141 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.542101315 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.577548028 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.524523052 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.500247231 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.735833469 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.709477573 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.585415408 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.527361934 seconds)
  done (took 161.225609902 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.297884891 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.451809752 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.446076798 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.464243645 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.442810257 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.448171756 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.443077148 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.473935004 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.512496222 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.449167095 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.450443892 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.442113461 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.45149691 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.452970325 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.44907018 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.455764452 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.498638818 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.297038891 seconds)
  done (took 48.325260985 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.642130136 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.458295554 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.249774856 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.517404228 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.429587193 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.2981627 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 4.027769744 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.425523493 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.434775543 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.899659364 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.489940353 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.030352332 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.89098368 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.859963932 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.467727458 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.433730315 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.433995761 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.264357026 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.441647442 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.431609931 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.428246454 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.349014023 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.594347587 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 3.960335768 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.385968703 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.435458266 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.328947576 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.762642816 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.437868669 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.427544155 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.435290669 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.42950547 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.52540872 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.322702297 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 4.02443291 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.758997872 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.234395939 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.980768416 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 3.256358597 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.436629684 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.580256119 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.425376579 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.430848697 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.172295335 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.120523832 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.959715937 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 3.242433254 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.478845906 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.442333209 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.99824022 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 3.253945671 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.44893252 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.432946572 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.815420396 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.3451217 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.538523259 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.49874728 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.327500222 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.395398212 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.796910493 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.50239439 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.445531343 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.126611225 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.497378239 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.292052339 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.717365692 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.970742982 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.505441201 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.722119703 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.002325459 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.736440235 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.12614475 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.515867105 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.551765436 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.434085 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.477390423 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.428374802 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.432342211 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.352686537 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.884599697 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.502369275 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.912043938 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.391672005 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.147120737 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.512560965 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.960680371 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 3.256308938 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.189831085 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.497014069 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.104606797 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.573043779 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.919902973 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.367333339 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.455100535 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.367499298 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.416243283 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.386855646 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.628776031 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 3.95719136 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.527493561 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 3.964532692 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.113076816 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 3.245046992 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.083285757 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.188895812 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.683884485 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.351332447 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.490830636 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.425489379 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.075084658 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.447259589 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.481015132 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.423526481 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.789208334 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.254783901 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.571488516 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.05905103 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.806670937 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.495335828 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.741568304 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.624334855 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.605390739 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.352568074 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.559519271 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.947980733 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.954186428 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.828978184 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.574905849 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.430335325 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.1392416 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.763268491 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.97546233 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.559885004 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.540711478 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.424347345 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.914297288 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.080620805 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.453643274 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.798419483 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.689919247 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.170364776 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.499812513 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.427341888 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.101868397 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.604620036 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.822682756 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.553911958 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.31120756 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 4.732794018 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.355579207 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.109168491 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.335722653 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.917756725 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.930711119 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.71135656 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.962464517 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.503190128 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.437456068 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.439586406 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.478592061 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.314451673 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.57024933 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.430256996 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.555413183 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 4.444528289 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.742482533 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.248352509 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.440512593 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.437349596 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.856420655 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 3.988062927 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.693870047 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.426871569 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.425655581 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.433114614 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.880424386 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.776267007 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.107849237 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 4.896578078 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 3.245646924 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.124901997 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 3.271801002 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.432209089 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.752739677 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.662857894 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.428794603 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.433875315 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.43400166 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.345596167 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.321669821 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.553011064 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.428280927 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.384559564 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.434720739 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.42016031 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.491243685 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.926315211 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.629489703 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 3.957348275 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.338405327 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.886192811 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.85296627 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.440757679 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.865137846 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.495282339 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.428422555 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.727681073 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.777260034 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.913605631 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.702851231 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.149335532 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.532934866 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.576660651 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.87421339 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.57331486 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.431421266 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.827516043 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.668998089 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.754142094 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.328015333 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.503840018 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.762129121 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.503483873 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.435514547 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.431434281 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.488823501 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.435768922 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.805738133 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.664719566 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.802218557 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 3.962175994 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.423879058 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.429082556 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.818286274 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.335748928 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.941181349 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.948339763 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.436998542 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.113741833 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 3.260334243 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.433898724 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.427827614 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.616104302 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.620172086 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.153957502 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.572935076 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.443437004 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.075973337 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.635532787 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.843211857 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.760084109 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.572654941 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.42969482 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.458233762 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.43761522 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.68364608 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.272895389 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.599750197 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.413474671 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.190657066 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.677350063 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.794767872 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.234182593 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.56934159 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.817157217 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.667650421 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.433056669 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.748671177 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.829479792 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.354012444 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.809084631 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.691968639 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.110511091 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 3.246562805 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.720538974 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.71551033 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.351357158 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.581672147 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 4.014021457 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.435917517 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.432732339 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.423939194 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.430994807 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.430066468 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.467596775 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.741868979 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.486620199 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.285839179 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.172661863 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.559481053 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.679888026 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.584217361 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.95537336 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.666337944 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.906423913 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.044513123 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.588325845 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.356236777 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.53818183 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.631242407 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.42616362 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.02747354 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.876331557 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.69951624 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.880306265 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.628671373 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 3.952614885 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.431528727 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.777104129 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.688279114 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.875896799 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.403658919 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.66041152 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.5574752 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.430565352 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.103631792 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.574396366 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.406890994 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.800179379 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.952812979 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.750163912 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.152232955 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.52383576 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.327058729 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.273283225 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.903838927 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.466322334 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.462961327 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.438448435 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.432404896 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.429775745 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.319647487 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.592070655 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.501105619 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.627071218 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.016957768 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.497854996 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.961840018 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.744102707 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.431025774 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.48773596 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.560124116 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.575264423 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.620898048 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.433871189 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.437135399 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.655178449 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.57870721 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.43614404 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.555066253 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.960090425 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.425174098 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.110828919 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.574802768 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.843107052 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.532214237 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.431331234 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.427494014 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.670613424 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.677973564 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.7199984 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.099664294 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.172553255 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.814066732 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.533470381 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.550587452 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.426663727 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.457390106 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.651242984 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.532058878 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.430996476 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.499142905 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.506668527 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.574131857 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.431910169 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.452209277 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.260810671 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.471566929 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.192004554 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.469061629 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.074282398 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.331361074 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.830815275 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.53677517 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.111565279 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.98431737 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.678588822 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.430437078 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.430019801 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.426054385 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.287859078 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.321056267 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 4.475988952 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.492068118 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.519010262 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.877045103 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.663498922 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.428819857 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.429578558 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.429145261 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.564523692 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.705209169 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.653796482 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.427724081 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.429749547 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.681115652 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.767492646 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.566209052 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.84681467 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.768850535 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.5362391 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.120397762 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.567792039 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.459333797 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.093185975 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.620258088 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.473172631 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.549331619 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.958335685 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.43255692 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.651160812 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.584062803 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.437581132 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.780245952 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.604863042 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.430022332 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.428930488 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.475307046 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.407487441 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.596074646 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 4.652020361 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 3.245257269 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.295339976 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 3.840044596 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.430958719 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.364755262 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.10520506 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.285612111 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.239470945 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.249922532 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.141988497 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.823660804 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.564359601 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.53305864 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.844152328 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.550876143 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.28433532 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.478912989 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.780611602 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.906781644 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.346760084 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.333990229 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.142862678 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.781033999 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.046046784 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.354632638 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 4.650287943 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.425318825 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.880787037 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.603992551 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.638576009 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.433566005 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.022206667 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.738625608 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.748771817 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.490007064 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.897764117 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.552481643 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.929824035 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.836692785 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.601695937 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.436168595 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.429216285 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.504031741 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.587272257 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.42892763 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.462742711 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.135491329 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 3.238305238 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.438244358 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.098753861 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.495107927 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.797288331 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.905020341 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.725689492 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.11394016 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.795787011 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.700205733 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.504634682 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 4.856356147 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.7120848 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.556265597 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.427695127 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.432090249 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.42748732 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.780403543 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.202967559 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 3.245367127 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.153736473 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.473249446 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.626752302 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.390115926 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.875343275 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 3.254408189 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.418833409 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.466918066 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.857037684 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.488082397 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.480194876 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.433316666 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.848007536 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.589573556 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.582927484 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.121330817 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.569873154 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.531717785 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.083773096 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.759032007 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.501076386 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.487534613 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.431578848 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.430429945 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.430189051 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.882411734 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.608401412 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.76087844 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.75179827 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.970553296 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.192514803 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.589682678 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.431721194 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.43414355 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.940715507 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.739501312 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.913871123 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.249658618 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.709113377 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.66056984 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.219760739 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.573333165 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.198759342 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.850767736 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.655699253 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.634779752 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.429036815 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.43586427 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.432065414 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.430381383 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.435099526 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.450900852 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.439950151 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.020378782 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.337931583 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.353310431 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.573356569 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.445867487 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.697853803 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.903753074 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.373207813 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.553615265 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.435949695 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.43842919 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.398502236 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.446289519 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.542632097 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.594995065 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.552511916 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.767677049 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.51857628 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.449893986 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.563612194 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.585912664 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.440668335 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.449909221 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.433592187 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.83818153 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.910219728 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.710508408 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.898217769 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.693955372 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.510649443 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.865387593 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.25508854 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.328231436 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.560673185 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.439695454 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.787281304 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.340525412 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.036139638 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.757255634 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.870213049 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.997674284 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.537836531 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.305764023 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.250300272 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.854612548 seconds)
  done (took 1940.757620154 seconds)
done (took 3975.798346249 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 2.429617734 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.437226234 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.439670637 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 2.434790718 seconds)
  done (took 12.139902353 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.98695978 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 3.333277369 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.682271896 seconds)
  done (took 8.484941016 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.46155748 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.009463163 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.051208712 seconds)
  done (took 10.927137721 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.257309309 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.245570782 seconds)
  done (took 8.900631875 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 2.639014892 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 2.863730953 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.570751509 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 4.123514652 seconds)
    (4/4) benchmarking "Float64"...
    done (took 3.837299167 seconds)
  done (took 16.79244048 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.567899834 seconds)
  done (took 4.9796657 seconds)
  (9/15) benchmarking "18129"...
  done (took 7.620144914 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.583339073 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.924306211 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.755281884 seconds)
  done (took 10.69373439 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.015894232 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.178663028 seconds)
  done (took 8.59960521 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.406209394 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.410092725 seconds)
    (3/3) benchmarking "Float64"...
    done (took 7.413624614 seconds)
  done (took 24.649283014 seconds)
  (13/15) benchmarking "20517"...
  done (took 2.935623819 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.711046244 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.685683015 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.863998178 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.86862899 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 2.539764364 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 2.779919998 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.627535307 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.241908446 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.97882051 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.881474902 seconds)
  done (took 30.579881151 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 7.397454294 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.466825883 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 2.785926538 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 4.431695347 seconds)
  done (took 24.504405234 seconds)
done (took 179.892586412 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.604501878 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.622556649 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.400330533 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.74997508 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.497969838 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.672719785 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.598289859 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.877214662 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.407570279 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 9.369069571 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.608308005 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.641276194 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.65070396 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.585799385 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.813587797 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.454445616 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.53112225 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.481289943 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.489393557 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.605859257 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.459135184 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.399032048 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 9.658010629 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.416978984 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 13.779893078 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 3.057587055 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.415654671 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.634179101 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.40382132 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.773398126 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.404243139 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 3.063075957 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.736395741 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.935829285 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.639410282 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.575938179 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.638713741 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.449929365 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.909335852 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.910415277 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.594736032 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.477354207 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.826785574 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.675078503 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.644043824 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.941824754 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.509956206 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.292237267 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.648018012 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.561931339 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.703474757 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.646876998 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.085958224 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.482999267 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.4561831 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.411942956 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.054223789 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.650545679 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.480388611 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 3.008654764 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.465330088 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.64766838 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.48245868 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.640298884 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.637540568 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.964879273 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.616321019 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.414078114 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 10.69458263 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.510338505 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.608754342 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.601686031 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.826379533 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.657924632 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.593449503 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.65296205 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.633466498 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.588953995 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.669981586 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.660078934 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.708274101 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.134509338 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.460804519 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.717132263 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.406795673 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 3.077084314 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.432846527 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.417323612 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.523165429 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.584882294 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.417299428 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.638512794 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.427193363 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.397405871 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.625841666 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.604465571 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.864888517 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.500510516 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.468981184 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.410640197 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.793925399 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.506831494 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.592206376 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.418022968 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.484427748 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.603963841 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.490986895 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.593203306 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.43594507 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.406255495 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 7.705413553 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.304088853 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.487390303 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.489030383 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.404796168 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 7.789799646 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.49132507 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.421205985 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.419304202 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.405513463 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.655146434 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.833927152 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.608707326 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.875276692 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.436168867 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.631811001 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.397906149 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.121616493 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.752931817 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.642893205 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.316160188 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.514997025 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.256775042 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.520424057 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 3.101593955 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.485089261 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.401910917 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.470230887 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.481852345 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.494393268 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.813183028 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.486503559 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.734647472 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.494683741 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.641901746 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.546258088 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.410180783 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 7.17308643 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.479158456 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.499754006 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.403490068 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 9.803409874 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.483626484 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.642857289 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.584162754 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.642720198 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.64364125 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.482953178 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.000673078 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.470946423 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.401770021 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 9.815428654 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.658105375 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.716551188 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.405165101 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 6.27501968 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.573653989 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.555936739 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.48281655 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.40220662 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 9.655516541 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.65126997 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.909613571 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.418212299 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.4195286 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.801750865 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.495973695 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.532778771 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.407715083 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.125908735 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.41792635 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.742139089 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.077602677 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.062735268 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.708276769 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.784829679 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.645030037 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.307880138 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.657471283 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.952765132 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.555442206 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.408643536 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.627381815 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.624642244 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.60270926 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.432449451 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.485042516 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.498451711 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.773029221 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.646446843 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 3.060343506 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.391505349 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.743062856 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.748852379 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.883284736 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.435926987 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.519052023 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.649983477 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.512615766 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.414259364 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.6902949 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.491532793 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.589683014 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.502010309 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.451181789 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.418883635 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.434590597 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.606147673 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.45506428 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 12.154456865 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 3.54380298 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.402991357 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 14.268458723 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.764498814 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 12.021846489 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.650713167 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.706200886 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.41115557 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.471608639 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.560663543 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.471815944 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.753498967 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.428012124 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.127792575 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.626672016 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.731806101 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.652884976 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.571984645 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.483322083 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.410015803 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 3.084604566 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.464767867 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.643891296 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.489905774 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.753119008 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 6.800983394 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.408138328 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 7.402991968 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.387128684 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.182429404 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.411624958 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.737507087 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.591547784 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.785608807 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.492461535 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.4146113 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.151755473 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 3.294555805 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.740105719 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.128887253 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.764336331 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.409164424 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.973990439 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.589903258 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.880476247 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.651233673 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.420014549 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 11.137395826 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.409342035 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 9.971835727 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.100499119 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.46744602 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.478992538 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.883461263 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.6958218 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.657026641 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.657698183 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.76761374 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.714682558 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.550118986 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.425517 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.764273999 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.74553634 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.556483452 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.492631852 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.403284527 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.998205222 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.650168127 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.404875844 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.194192576 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.656510861 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.585977218 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.680460519 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.990496358 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.455809721 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.404354339 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 6.560029904 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.871109407 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.429920076 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.402089603 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.030759029 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.432629619 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.643552364 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.508308899 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.594621 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.761727146 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.745705449 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.425476438 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.593896612 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.419966672 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.486951631 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.425708715 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.593227389 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.407446276 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 7.400482586 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.779805617 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.467351861 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.541595315 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.404777225 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.908101962 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.417258563 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.500196527 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.641483534 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.48918528 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.403560955 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.582718524 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 3.090422563 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 3.021632748 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.521930636 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.06524004 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.744675117 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.653792059 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.431848091 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.465796929 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.689527806 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.924094548 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.470725884 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.506402708 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.404238973 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.866739669 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.425864257 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.404736176 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.604955814 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.662783359 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.628969387 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.594497484 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.451835535 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.593837257 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.409872909 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 3.080384791 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.406985918 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.513265453 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.426310327 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.425579354 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.426118373 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.615069424 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.749134413 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.591421223 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.737778097 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.645365251 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.737914838 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.420643923 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.708544099 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.817763127 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.581363648 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.694545378 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.978865059 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.811024373 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.494300866 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.408764222 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 9.784693922 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.635219129 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.478719434 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.582161001 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.449729754 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.613634599 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.473421471 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.505207531 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.427507648 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.511179258 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.747901854 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.49501205 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.784296115 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.42225718 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.78433353 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.408007878 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.662415604 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.402994643 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.636113134 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.426756487 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.431843163 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.644948255 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.505364079 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.651864661 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.655865665 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.657642193 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.43137795 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.771027229 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.422219229 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.407906574 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 14.157040599 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 6.902936231 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.657653234 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.595561007 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.671261387 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.685505276 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.74897689 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.622472855 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.75466326 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.500695791 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.416451695 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 9.944625251 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.67943478 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.796670672 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.662554693 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.552110161 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.645194506 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.66784982 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.416787964 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.65270764 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.456578607 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.660779144 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.504016732 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.549681124 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.46251911 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.554787639 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.911842995 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.753805943 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.885025139 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.535682292 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.587950377 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.760942879 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.525945086 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.678053641 seconds)
  done (took 1631.583500469 seconds)
done (took 1633.993112315 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.43937778 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 7.945740232 seconds)
  (3/4) benchmarking "arrays"...
  done (took 7.416518196 seconds)
  (4/4) benchmarking "structs"...
  done (took 7.673432089 seconds)
done (took 32.886069916 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.403303727 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.794481658 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.401509747 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.879597656 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.645958348 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.414690495 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.406239739 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.592581569 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.597388532 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.579470087 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.44509239 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.608358687 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.565309416 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.570394225 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.397987557 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.464974308 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.613583199 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.50222248 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.401622238 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.707857031 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.401612481 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.631071258 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.718006355 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.400093049 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.626634428 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.677120443 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.399535898 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.397187683 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.401872165 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.622500647 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.708408538 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.489214515 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.594964552 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.399782618 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.715531125 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.399669603 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.401222711 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.586053133 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.733648686 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.61684586 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.39918045 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.401574451 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.405335322 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.400367519 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.601448638 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.401657774 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.571414307 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.685909874 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.608836369 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.669296234 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.45402251 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.631684827 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.631177971 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.623967654 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.574926107 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.567540495 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.642928063 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.790732408 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.679108197 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.401331754 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.728607875 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.398875753 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.465725781 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.399425691 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.636702619 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.776524442 seconds)
  done (took 280.866933728 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.515660834 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.44418438 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.51749038 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.670797557 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.491548714 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.461857237 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.459819273 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.460616705 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.456183895 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.465856162 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.438497192 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.468931276 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.40028583 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.464634614 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.506175759 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.437753897 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.64883603 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.130327394 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.449145439 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.530773065 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.713553017 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 3.163293592 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.460038997 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.458459652 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.439516107 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.47179533 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.438939485 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.460218193 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.463978261 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.468940169 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.449240958 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.541532034 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.43954822 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.503210038 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.917440346 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.561011178 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 3.023617252 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.441679476 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.382908666 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.988340263 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.764119492 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 3.191219604 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.949429639 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 3.215081438 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.574895442 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.440879571 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.437191028 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.43600002 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.71015152 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.643946075 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.421422162 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.204684545 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.45671786 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.469144732 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.449128924 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.5037101 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.947683288 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 3.355144218 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.44022468 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.437369758 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.500255404 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.518094265 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.520134294 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.440654575 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.638216801 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.660687012 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.729547577 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 3.215143983 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.460218174 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.459434108 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.458816198 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.450206299 seconds)
  done (took 207.712512685 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.741202311 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.555398342 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.742482335 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.664089128 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.056368711 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.758537871 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.990238193 seconds)
  done (took 21.911804972 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.060852925 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.510486235 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.056194732 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.603815424 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.885206539 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.808538692 seconds)
  done (took 20.364376488 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.463535678 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.400671436 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.295090485 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.513300546 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.464343748 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.343365657 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.507910631 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.490058971 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.452294315 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.518084658 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.627130343 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.402657257 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.473118005 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.729225515 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.698355246 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.444692717 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.279953504 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.30643677 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.587663696 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.743392603 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.444020509 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.397957566 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.755458969 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.465073064 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.505650228 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.601773196 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.446856585 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.484404699 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.630602827 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.731105906 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.442635658 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.412290513 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.45891922 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.445109453 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.635872035 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.463774484 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.66446797 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.455410584 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.463839126 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.702161508 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.465941988 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.842638692 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.409268313 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.402728793 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.460155744 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.604008522 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.533344865 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.462994242 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.29216005 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.444065316 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.734353977 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.470965347 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.695902797 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.401180675 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.738500643 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.568653861 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.444051461 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.450644633 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.44263252 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.476334758 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.454014236 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.455267737 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.695497131 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.591821799 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.492829031 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.398833257 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.450084619 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.465968197 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.45440309 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.53036929 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.442276563 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.457645189 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.607874751 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.472271616 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.400591141 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.122396114 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.58640602 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.692029445 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.460944111 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.467803149 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.456889082 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.401097474 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.468857699 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.57302643 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.452485226 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.457360254 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.74270239 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.717680994 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.694953027 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.463057317 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.151692782 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.450111057 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.478672278 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.626580922 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.482301816 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.4014198 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.447393889 seconds)
  done (took 310.26145901 seconds)
done (took 843.522528683 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 2.514984319 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 7.43779716 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 3.540565446 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 7.446365294 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.409193825 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.434508471 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 9.066843742 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 8.03082748 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 6.288206229 seconds)
  (10/12) benchmarking "nbody"...
  done (took 3.451490771 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 7.405757239 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 3.800258156 seconds)
done (took 76.231972192 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.409240377 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.407586891 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.401597414 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.400949425 seconds)
  done (took 32.041421476 seconds)
  (2/6) benchmarking "26942"...
  done (took 3.857003406 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.527354988 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.797010653 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 2.798004937 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.477300201 seconds)
  done (took 13.431097159 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.441250913 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.448813372 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.437133282 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 2.439311402 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.440652557 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 2.435325844 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.441620344 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.442904269 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.400987807 seconds)
  done (took 29.333959815 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.65493788 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 2.602187685 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.529014529 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.703432172 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.884311711 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.588703599 seconds)
  done (took 18.7984213 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.401617104 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.401611078 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.234522425 seconds)
  done (took 23.441019615 seconds)
done (took 123.303579852 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.407571146 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 2.421496592 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.880112679 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.42365199 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.939369258 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 2.424949571 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.829691913 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.830018341 seconds)
    (9/13) benchmarking "Float16"...
    done (took 7.414130802 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 13.079907083 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.517563862 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 2.582972383 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.628023528 seconds)
  done (took 81.782712846 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 2.422810455 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.419029259 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.426315764 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.423810801 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.417225169 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.427324105 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.420732875 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.420224209 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.423512875 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.419313701 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.421651442 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.425347458 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.427391779 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.414271674 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.419077865 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.421638774 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.458458953 seconds)
  done (took 43.655695443 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 3.038431102 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 3.015425825 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 2.85638226 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 3.231701779 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 3.457839755 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 3.030786272 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.454884824 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 3.017088188 seconds)
  done (took 27.516566869 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.416537137 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.423074013 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.420960592 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.423395538 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.411481349 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.432107098 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.427027946 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.415083196 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.426982902 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.425784205 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.427459208 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.419224451 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.428850258 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.423675539 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.427406828 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.427850505 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.570118978 seconds)
  done (took 43.759804291 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.412238743 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.412933369 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.410834658 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.418424479 seconds)
  done (took 32.063792687 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.416749986 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.442035416 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.430553199 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.432092577 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.41760564 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.437889133 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.451953541 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.437218366 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.449841719 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.444614849 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.450338691 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.427756975 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.440810028 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.418165022 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.467547162 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.433230006 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 3.079856618 seconds)
  done (took 44.488093753 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 2.62623739 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 4.959555739 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.151033445 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.122304319 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.443182429 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.068840966 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.614641889 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.027006437 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.151024321 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.105980211 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.389200259 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.023361365 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.194543216 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.450159016 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.720158317 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.965912848 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.428090364 seconds)
  done (took 82.85106717 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.410846726 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.411957114 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.41246422 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.414856976 seconds)
  done (took 32.058027025 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 2.44307657 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.642041499 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.620658349 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.626059742 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.419604688 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.615290888 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.758212847 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.580049276 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.619022183 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.614509143 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.813821495 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.608698208 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.64777624 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.426040239 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.766293792 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.598564842 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.413235975 seconds)
  done (took 51.627923551 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 2.441083937 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 2.445060438 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 2.435631372 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 2.455370281 seconds)
  done (took 12.191000338 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.415931623 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.416410042 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.417337138 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.41667582 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.416356905 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.426512534 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.418948576 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.416926538 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.417400542 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.430972594 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.445873532 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.443339774 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.516641534 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.659976361 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.699739017 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.542500403 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.448833345 seconds)
  done (took 44.360558402 seconds)
done (took 498.755775185 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.612720004 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.618746212 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.642053075 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.643372002 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.640349007 seconds)
  done (took 15.56888483 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.413493038 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.205119995 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.451438073 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.777041569 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.517313239 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.796732622 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.41437128 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.596858361 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.043539546 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.131786196 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.414132526 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.469812695 seconds)
  done (took 106.641130739 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.948880944 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.756988397 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.41010016 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.414707665 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412217639 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.15885575 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.523815897 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413406714 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417696107 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413975272 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.56920928 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.438400187 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410129539 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.41027605 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.425158203 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411656615 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.902745007 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.413189685 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410478112 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.447773617 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 4.155377239 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410862073 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421093064 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412203349 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.630883565 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.449510043 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415840742 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.571240311 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.954462142 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415107548 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.408213855 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410872706 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409547382 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.31235964 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.413017278 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.408029187 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411518836 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.909878493 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.414268326 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406923851 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.908017848 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411066942 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.44699961 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.415046966 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 3.534851547 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.973859462 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.405953065 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.656914696 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408884846 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.542779992 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41117356 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.588085552 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.410853865 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.529419548 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412385252 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.425567772 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412451121 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.447045671 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409280234 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.510957763 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412182048 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.830233787 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.808928536 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411785283 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41066528 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.06859233 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.572399683 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413035207 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.51529074 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413004311 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40783955 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410855809 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412134948 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408459205 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.449989779 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412744862 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.717683061 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411730845 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.31858347 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.421547073 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.418786409 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410108626 seconds)
    (83/608) benchmarking "6d"...
    done (took 7.40724303 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415413858 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.207822373 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.504302146 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.38350043 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417151996 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.409594623 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.423122288 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.406528769 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413881296 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411557514 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.214458332 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.419163514 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409608739 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410558084 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.849039054 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.708184269 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409881659 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40984073 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411191433 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412707571 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 3.151112657 seconds)
    (105/608) benchmarking "5d"...
    done (took 5.52002606 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.548685231 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413484863 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.410086214 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.466147479 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411780056 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4152434 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409166771 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411789298 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410255328 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410730285 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.410094627 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.812413797 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411329594 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 5.634777251 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.569403554 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.591626493 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.415956658 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.4131386 seconds)
    (124/608) benchmarking "3d"...
    done (took 3.999314398 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413093153 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.414272694 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.417673532 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.471626872 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.438680075 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411826376 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.408998149 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.410479059 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.413056874 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.408104401 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.902787508 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.411631308 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409648899 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.277836001 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416926747 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.813604232 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.826690339 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.41264138 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.443162461 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.411723709 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.409775437 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.815137941 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.349583212 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408322118 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.463684554 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.843558711 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.635182297 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.838004441 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.448835776 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.813167789 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.443921623 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411570866 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.235604612 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.519816562 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.907614002 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.650792627 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.904919873 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.408581263 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.409155794 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.473156066 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.647992302 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.412815852 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410115827 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412263795 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.437494246 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416087762 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.007894271 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.94361612 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.409600689 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415128842 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411609843 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.41687153 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.427317412 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.562159877 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.433283229 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.955685692 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410733717 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.430674973 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.685794591 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.607026012 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406789992 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410040035 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410951953 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.419502133 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410261069 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411834809 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.632173435 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414714036 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.412468062 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409686357 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.989326196 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.447245036 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517983417 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40855565 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41240098 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.235716886 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415297587 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.410134094 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.410786504 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.446113168 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.412981754 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.678322921 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.140262066 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412748112 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.959976249 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.487021082 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410532162 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411430428 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.44329475 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419413676 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.44956819 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414328701 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412097697 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.421195117 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.716374289 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.410885255 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.669883494 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.409527754 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.82882908 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.753833228 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.407240689 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.756776379 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405603858 seconds)
    (228/608) benchmarking "7d"...
    done (took 4.954580566 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411213141 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.408994275 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.640967735 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.408510945 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.416724758 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.417556452 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413201821 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.412578547 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.015484771 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415053112 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410061024 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.414567215 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.843198328 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.903260056 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.463587412 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418151785 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.847357238 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.446965793 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.932294915 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412346359 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.218968596 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.409782914 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.086550096 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.75385554 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.582395095 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413749839 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.421152206 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.411232385 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.410830151 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.814708105 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409481717 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.420386243 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421119866 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.463487544 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.07605105 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.70042477 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.413065203 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.543852011 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.421728738 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.417152025 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410513081 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.645442059 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410350645 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.411197511 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413147906 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.467349928 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411589964 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413768027 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.52040448 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.808871921 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.415268357 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411870547 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.40960529 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410094837 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.440546263 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.41259157 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.406556129 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410588313 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.682612262 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.443700083 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410829797 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40916573 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419442391 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.414942652 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415758799 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.418469179 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.250212763 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414854875 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415528707 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.426274423 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415065145 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411055698 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415083714 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413707856 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.190391881 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.41393028 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.910188616 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.668560722 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.406156639 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417698952 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.414054027 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.419763705 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.917325232 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41225455 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413070191 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.352400891 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412659668 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409355891 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.407807735 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.300702519 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.503011394 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414781495 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.409847182 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412707708 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.002348175 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.435656931 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.414625462 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412117475 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413102315 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.674617087 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411734689 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414351384 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.433701458 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.718659589 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412022415 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.41499855 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413180661 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409535063 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.769909946 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.821087862 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.098494671 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.253635883 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.596796677 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411644834 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414395945 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409580876 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.583222792 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413969205 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416795993 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411575133 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.430921822 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410934545 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412220005 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.41559726 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.420139307 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.894587665 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.596386699 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41667356 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415723533 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415265063 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.414677599 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.439589467 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.932895972 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.409674143 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.933586637 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413927225 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.410788214 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.246964541 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414689637 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41775437 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409828329 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.889376559 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.900058339 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.414123039 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.519492591 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.517469245 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.411653984 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.668683887 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.699114365 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.423880756 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.433303952 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.069156154 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.645204743 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409650435 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412352187 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409429252 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.414045686 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.442517009 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412551096 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412065234 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410711382 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.755057792 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.460186126 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.184061612 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.395372528 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.566734667 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.545865685 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416767507 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.548735535 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.419825848 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410585111 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411945073 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.436200918 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.301227967 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.922800178 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.458471832 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.718407499 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410430951 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.680708103 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.41392182 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.937712237 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408867207 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412098093 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.870891946 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.819996749 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.412042239 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411294221 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41540715 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410566452 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414592951 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.430837063 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.560822596 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.660001327 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.582578795 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.55157296 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413763627 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410010484 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.4120694 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.409368555 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.449668833 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415118574 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.466972069 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.467542644 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412363585 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414872466 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.625511332 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.409189185 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428203891 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410256019 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.556093083 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.506993024 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.41411454 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411380346 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412238038 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411134104 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.444791958 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.249822961 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.412226554 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.832438188 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411401556 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.473592473 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.417816571 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.413370629 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413299006 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419374192 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415448523 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.41127054 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.80743842 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.415538811 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.634301043 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.143004479 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.517261925 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.876984512 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.410295826 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411361773 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411566449 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.021931267 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413782248 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.424161442 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412418258 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.005066291 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.509483184 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 7.56970116 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410835043 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.451238074 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.40876648 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416655396 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.538449722 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.417288426 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.928141925 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.81563103 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414109064 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.484905813 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.975438896 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.412760455 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413393888 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410912364 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.482385043 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.413260826 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417733181 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411810677 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415818114 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412819204 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.557342559 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.016900598 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.411685254 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.413015885 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.676216017 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415509838 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.183420482 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414911641 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.41356612 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413566456 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412677622 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 5.622397 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.414383264 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.41317091 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.288251916 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.411752494 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40977768 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.071056431 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.437487705 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412380037 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411287851 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413903464 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.413958923 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.423378417 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.819838147 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.444611386 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.411433069 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414814246 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413677957 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.411718817 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.186497777 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.414622532 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.421343542 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.405629813 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412206348 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.779141778 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.429195435 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415497569 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.415856067 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413151547 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.861912749 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.416378556 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.19169197 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422510354 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.415645894 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.414080135 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411175413 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412677776 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.51083045 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.592867074 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.248681431 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.422663991 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.421197415 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.275941379 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.46184256 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41574441 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.336607192 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420476064 seconds)
    (550/608) benchmarking "4d"...
    done (took 4.234349841 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.419195378 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.885671303 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.413773019 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.425661934 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411366748 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414093474 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.409386955 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.897947126 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.414435771 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.416519997 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41122703 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417838724 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.442807861 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.433530983 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.432463449 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.927919881 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421717305 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.412699228 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.692995277 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.433032325 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.434146579 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.423403002 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.800127405 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416023846 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415736608 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41515239 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.412619013 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.80144537 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.413355376 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.416988044 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.581831034 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.443127345 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412041583 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.420437574 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.433088647 seconds)
    (586/608) benchmarking "2d"...
    done (took 3.685057229 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41547818 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412073134 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.433858272 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409835784 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.441572503 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409710123 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415706967 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.414117979 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.41384148 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.214065706 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.509135571 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.698889234 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415768197 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.226674478 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 2.546187237 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.428419349 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413796165 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41157868 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412452529 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41404738 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.411361131 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41249542 seconds)
  done (took 3916.422772004 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 2.926170535 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.049453103 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.33947944 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 2.863714609 seconds)
  done (took 14.591572008 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.415622681 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 2.885290561 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 2.84215793 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.784641994 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.419308369 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 7.410023149 seconds)
  done (took 33.169791465 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 2.546648556 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 3.028870372 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.47856906 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 3.065399847 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 2.571383664 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.55019416 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.413274341 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.412343664 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.07748759 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 3.194555649 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.395837742 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.416285784 seconds)
  done (took 55.560454019 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.612595264 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.501725819 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.513165415 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 2.612153855 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.35450484 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 2.48520301 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.143804565 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.668682689 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.707284185 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 2.59429074 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.50504638 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 2.481936943 seconds)
  done (took 34.590747065 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.32775984 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.841467293 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 3.384546434 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.27630304 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 2.496643105 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 3.294387893 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 3.315521131 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 3.140743763 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.232027575 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 2.516916996 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 2.588698132 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.301559588 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.512780248 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.286086447 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 2.973787247 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 3.33536445 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 2.845302641 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 2.938047856 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.226383639 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 3.641780001 seconds)
  done (took 64.892347246 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.416409821 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.416747008 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 7.414122304 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.420940449 seconds)
  done (took 32.082881885 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.731683549 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.779284195 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.775734072 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.709811872 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.739038815 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.75836749 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.649231397 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.780463795 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.759250867 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.73309542 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.762465691 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.756880155 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.774432711 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.732467751 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 3.093283445 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.76227285 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.765917162 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.65687414 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.759621109 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.761403954 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.71044104 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.657530203 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.650472991 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.092170469 seconds)
  done (took 68.768329419 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.408870351 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 7.411196617 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 4.571578324 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 4.558732525 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 2.887071094 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.581383609 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 4.752685733 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 7.847316215 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.414077938 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 2.460632577 seconds)
    (11/17) benchmarking "4467"...
    done (took 2.609065826 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.560788136 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 7.842551463 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.412995178 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.61584077 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 7.911947706 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 7.414952772 seconds)
  done (took 95.676855599 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.507897907 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.636773278 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.55788474 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.600554376 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.421397243 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.448810898 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.511050682 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.488458651 seconds)
  done (took 62.588508772 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.866840866 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.480084255 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.680135401 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.534883035 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.824974215 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.818643281 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.616998463 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.629556789 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.476437312 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.821691695 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.42021999 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.774038794 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.659399297 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 2.631685815 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.450662059 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.80567634 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.644126922 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.660876152 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.770333047 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.741998154 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.450491237 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.63058229 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.658972555 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.047101869 seconds)
  done (took 71.507991443 seconds)
done (took 4574.47409652 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 2.50599315 seconds)
    (2/4) benchmarking "identical"...
    done (took 2.711512982 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.58439776 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.58054683 seconds)
  done (took 12.797438528 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 3.469633178 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 3.00097243 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 4.961024961 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.269573698 seconds)
  done (took 18.116141241 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 2.474178304 seconds)
    (2/3) benchmarking "equal"...
    done (took 2.722589344 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.45127804 seconds)
  done (took 10.48945604 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.442333402 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 2.616582434 seconds)
    (2/2) benchmarking "Char"...
    done (took 2.53829327 seconds)
  done (took 7.564562718 seconds)
  (6/7) benchmarking "join"...
  done (took 7.457476549 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 6.841887641 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 3.075772943 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.070876781 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 2.666223309 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.396276128 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 5.255020942 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 7.19350865 seconds)
  done (took 33.915754993 seconds)
done (took 96.197057001 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 7.490496756 seconds)
    (2/36) benchmarking "symv"...
    done (took 3.87288643 seconds)
    (3/36) benchmarking "dotu"...
    done (took 3.428207205 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 4.669699574 seconds)
    (5/36) benchmarking "scal!"...
    done (took 3.346172688 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 7.497595918 seconds)
    (7/36) benchmarking "trmv"...
    done (took 3.810355432 seconds)
    (8/36) benchmarking "asum"...
    done (took 3.193052118 seconds)
    (9/36) benchmarking "gemm"...
    done (took 7.500643036 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 4.725203796 seconds)
    (11/36) benchmarking "trsm"...
    done (took 7.444800672 seconds)
    (12/36) benchmarking "ger!"...
    done (took 7.410385284 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.942181921 seconds)
    (14/36) benchmarking "syr!"...
    done (took 7.406950534 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 4.792190326 seconds)
    (16/36) benchmarking "symm"...
    done (took 7.485444533 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.150169783 seconds)
    (18/36) benchmarking "scal"...
    done (took 2.533241345 seconds)
    (19/36) benchmarking "trmm"...
    done (took 7.446609325 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 3.792725566 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 7.45736004 seconds)
    (22/36) benchmarking "dotc"...
    done (took 3.439817017 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 7.472801697 seconds)
    (24/36) benchmarking "syrk"...
    done (took 7.471728509 seconds)
    (25/36) benchmarking "gemv"...
    done (took 5.195636685 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.644362352 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 3.272977943 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 4.706140647 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 3.940568831 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 3.623316294 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 7.456272801 seconds)
    (32/36) benchmarking "her!"...
    done (took 7.41374583 seconds)
    (33/36) benchmarking "herk"...
    done (took 7.523104289 seconds)
    (34/36) benchmarking "dot"...
    done (took 3.440238027 seconds)
    (35/36) benchmarking "herk!"...
    done (took 7.542257765 seconds)
    (36/36) benchmarking "symv!"...
    done (took 3.820236715 seconds)
  done (took 196.774262912 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.487458735 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.413277671 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.47631242 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.411664084 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.406733951 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.220958839 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.418186465 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.413053766 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.414816334 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.412497388 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.412848557 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.441656934 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.407520002 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.466344544 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.412115368 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.416572758 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.410268151 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.58943283 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.420556581 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.962884004 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.408268998 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.410695319 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.494831577 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 23.768072012 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.415375153 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.41444287 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.491586065 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.411115063 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.40978535 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.410372019 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.35154218 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.418608173 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.412378024 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.411572359 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.409373983 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.466277054 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.792858742 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.53207099 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.656968761 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.411659601 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.492510911 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.468287839 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.408246794 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.40529545 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.129445382 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.411319282 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.192026773 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.472568653 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.407568038 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.407689583 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.108247012 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.406316497 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 23.397693012 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.176135962 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.42785991 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.406915213 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.414610672 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.410989005 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.478914027 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.410138009 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.410143248 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.410568196 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.416549639 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.435086538 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.424038922 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.405164547 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 23.076700007 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.471035922 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.472517218 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.47067438 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.408104527 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.409471947 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.411251376 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.412871425 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.414555019 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.41407368 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.40592143 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.408719484 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.414257906 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.612370716 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.416237352 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.409624873 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.409519588 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.484724837 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.418755162 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.631393133 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.493401247 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.202890354 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.519176836 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.405295383 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.428107757 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.19973658 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.410091653 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.793697553 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.340980463 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.408748042 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.409417024 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.411237244 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.160772418 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.416450386 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.409583659 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.412491777 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.409152028 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.48675521 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.428389446 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.486803545 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.419202254 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.388490512 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.443408247 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.410112586 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.410164518 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.416445166 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.410367164 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.785050579 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.413273624 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.411811236 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.529936514 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 23.439766019 seconds)
  done (took 483.150541983 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.523753091 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.455123741 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.291153708 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.497568407 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 8.825824604 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.427090007 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.54733292 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.645443868 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.435680617 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.311059999 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.430896352 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.414318996 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.61453386 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.514397872 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.587127687 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.467255483 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.467310022 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.423908388 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.53804733 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.265113541 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.4308463 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.447342198 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.434058556 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.411912129 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.421846432 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 9.24067061 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.1283971 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.38062538 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.427674023 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.415935358 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.435455479 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.577628368 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.48376555 seconds)
  done (took 219.807449546 seconds)
done (took 904.67351995 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.436312304 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.426613601 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.431297758 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.451911454 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.458283348 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.429976277 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.440627491 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.421926645 seconds)
  done (took 21.908899909 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.500996124 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.876802612 seconds)
  done (took 7.802862498 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.417902359 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 2.424925089 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.430088181 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 2.422739079 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.426321666 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.439804078 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.425744246 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.424432564 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 2.439770393 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.439019762 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.423789455 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.419955021 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.418240846 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 2.424389101 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.421534606 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 2.418512938 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.416396114 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 2.424480732 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 2.419358441 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.417646031 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.42021133 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.416440409 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.422028906 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.42737443 seconds)
  done (took 60.627494579 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.422265423 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.420508599 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.425025284 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.419393629 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.451190797 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.566950666 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.423869729 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.415871612 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.419969428 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.426666718 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.431053391 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.421983606 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.421804919 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.421574268 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.417088892 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.421279517 seconds)
  done (took 41.336922239 seconds)
done (took 134.093497226 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.607674406 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.55602571 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.840844972 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.058368391 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.612026715 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.593804766 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.551833113 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.586276538 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.69974461 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.543502704 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.561620664 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.59879538 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.905020911 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.381724959 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.562194499 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.550521419 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.536364638 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.80951669 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.969468189 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.961080302 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.376755461 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.612952379 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.389112191 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.206986801 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.93580539 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.551128169 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.961119007 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.69539433 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.620887718 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.536792365 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.895217187 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.621487047 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.04840625 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.957469974 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.400488896 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.581346879 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.552890222 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.55317679 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.538695223 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.672254073 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.626579869 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.657069765 seconds)
  done (took 122.893372784 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.456350622 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.532732935 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.501647971 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.454013081 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.468517779 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.494651058 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.503225958 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.554057231 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.519986952 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.540045001 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.951323881 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.537096356 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.533902228 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.48868472 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.947615066 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.485061097 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.506938298 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.928404173 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.479468741 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.528452302 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.468003503 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.530796624 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.535409761 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.954549521 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.454257438 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.550834574 seconds)
  done (took 69.324180954 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.726516642 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.950716595 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.005770675 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.396350258 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.605124151 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.120169117 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 2.67882968 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.493108673 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.652858516 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.576653632 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.711593862 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.492984376 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.485597342 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.544067337 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.585963299 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.992304493 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.940087044 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.622814852 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.733827916 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.528839028 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.56928841 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.512443247 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.652843951 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.623921061 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.748088561 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.937436133 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.334056054 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.79750531 seconds)
  done (took 84.431456887 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.474609774 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.582368367 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.373288148 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.484938599 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.913918103 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.523451389 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.70119507 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.716360484 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 3.164851341 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.012729957 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.65768208 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.493796135 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.455764401 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.595436554 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.535793562 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.247301099 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.202542853 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.769526952 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.577683795 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.356773178 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.713200408 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.56502353 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 2.57469268 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.709780956 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.54073289 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.745477928 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.89077767 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 3.27387374 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.010128876 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.534639597 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.457562682 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.603160425 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.0577433 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.736563469 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.333168179 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.668388284 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.475705657 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.546658682 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.567135954 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.519074969 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.639625087 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.523021034 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.800158494 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.36370804 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.897237332 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.615804066 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.676102621 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.283247021 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.708669848 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.535070997 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.522698877 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.43121386 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.584585279 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.523616897 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.700062441 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.47354588 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.670386441 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.585735462 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.607483496 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.614761602 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.950123775 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.194155414 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.885649288 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.669293288 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.411941727 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.131610293 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.6151473 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.277372855 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.102972428 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.525693293 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.458406246 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.694691339 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.713185027 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.476405748 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.647003738 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.191901967 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.478675738 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.574107533 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.061538195 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.336839331 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.703176654 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.890989514 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.215575838 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.994024002 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.597682032 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.946012315 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.613243057 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.593076061 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.531736527 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.607762553 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.760716495 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.573336308 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.923302427 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.54963515 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.529251181 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.558992115 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.539625967 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.575523095 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.710336108 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.514813513 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.628938238 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.321732886 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.022003114 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.775805845 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.930538065 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.492527027 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.563012802 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.508118782 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.654476675 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.740142688 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.685312918 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.740639064 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.958246784 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.694252426 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.462069561 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.819728045 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.434753459 seconds)
  done (took 346.316798701 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.477631246 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.882214851 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.792270385 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.495583913 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.495489989 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.445685115 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.628562561 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.492151044 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.550738654 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.484285122 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.734976731 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.759578439 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.937715569 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.571104044 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.537366792 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.566627792 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.686391023 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.685557534 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 2.452468214 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.485611268 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.623555266 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.544656543 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.447787366 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.726365009 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.6129945 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.748643514 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.453250161 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.498775427 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.47665145 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.494363361 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.837291849 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.562783116 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.800236247 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.847515292 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.515086474 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.551786828 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.709836855 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.510667484 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.5381278 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.915960458 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.458072011 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.471046715 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.9138741 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.486279773 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.573298223 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.460033268 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.275374583 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.548293914 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.664352006 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.652953476 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.486894884 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.616911141 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.489768609 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.663861063 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.468770419 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.949655736 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.638237875 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.806938526 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.482496529 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.554727252 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.616663157 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.416265851 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.99005494 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.731009619 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.666352287 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 2.493411625 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.486332611 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.483670104 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.557534122 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.461314005 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.640176855 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.456831629 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.132378076 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.019606169 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.888918409 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.819665927 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.738360002 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.793448599 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.48765875 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.799930141 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.473399742 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.877100899 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.240300511 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.830771853 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.905214992 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.659514109 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.519030535 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.094499794 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.543993724 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.756492664 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.454017836 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.658602926 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.457877986 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.488962346 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.449899408 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.645213278 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.542180601 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.857084229 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.634945056 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.493417302 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.543552299 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.767192685 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.533541614 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.80601612 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.753853652 seconds)
  done (took 289.326250043 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.417146527 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.645964449 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.427876149 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.42113581 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 4.126546138 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.419009423 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.415452573 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.41980086 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.369792167 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.513230878 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.42915297 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.571069588 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.419813841 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.41866119 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.421315562 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.420748885 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.420768259 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.416644951 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.423833189 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.421410423 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.414320865 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.43017097 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.575030114 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.41933993 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.086508173 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.875225099 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.424860134 seconds)
  done (took 184.184670533 seconds)
done (took 1098.886277032 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 34.515555851 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.080961143 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 34.393189136 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.399217111 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.745092974 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 33.681437593 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 33.73799943 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 33.455679309 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 33.906937698 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 36.028172621 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.97603177 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.844414453 seconds)
  done (took 428.183986531 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 34.837350355 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.344060776 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 36.908524278 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.617531816 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 37.277596551 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.890811776 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 36.787829864 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 38.33983476 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 36.58591982 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 37.12405386 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.997399074 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.730388176 seconds)
  done (took 447.11964746 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.399544635 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 39.617621872 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 39.856855924 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.818836295 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.264455047 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 37.005994139 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 39.124617931 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.544401478 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 39.359723213 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.758721845 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.478694298 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.906424414 seconds)
  done (took 458.564794076 seconds)
done (took 1336.285891496 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 10.381510046 seconds)
done (took 15.811959172 seconds)
SAVING RESULT...
DONE!
