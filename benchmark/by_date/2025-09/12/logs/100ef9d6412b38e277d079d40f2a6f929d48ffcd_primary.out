cset: moving following pidspec: 3678542
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "find"... done (took 2.540908968 seconds)
loading group "problem"... done (took 1.567822658 seconds)
loading group "io"... done (took 1.468202433 seconds)
loading group "simd"... done (took 1.16134136 seconds)
loading group "sparse"... done (took 0.54111612 seconds)
loading group "micro"... done (took 0.045154451 seconds)
loading group "parallel"... done (took 0.019378415 seconds)
loading group "dates"... done (took 0.180724595 seconds)
loading group "scalar"... done (took 1.138959241 seconds)
loading group "misc"... done (took 0.419645717 seconds)
loading group "union"... done (took 2.801173453 seconds)
loading group "alloc"... done (took 0.016616596 seconds)
loading group "random"... done (took 2.094605364 seconds)
loading group "shootout"... done (took 0.628110992 seconds)
loading group "broadcast"... done (took 0.661895894 seconds)
loading group "sort"... done (took 0.307834864 seconds)
loading group "array"... done (took 2.494488903 seconds)
loading group "string"... done (took 0.198972564 seconds)
loading group "linalg"... done (took 2.466172132 seconds)
loading group "tuple"... done (took 0.587411633 seconds)
loading group "collection"... done (took 5.694829154 seconds)
loading group "inference"... done (took 2.647511587 seconds)
loading group "frontend"... done (took 0.003646373 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.091601831 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.037886116 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040857718 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7373e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040745191 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05468334 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041585511 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053962246 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0409867 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.0265e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040292724 seconds)
  done (took 1.158011919 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.086665978 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.5073e-5 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.086237487 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.04997635 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019052227 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.3995e-5 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.084042815 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.3047e-5 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081978707 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.085912302 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.085334449 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.081703329 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.089704554 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 1.9971e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081214629 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.655e-5 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.3701e-5 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 9.05e-6 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08101088 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.5307e-5 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079782797 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.6062e-5 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 7.646e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.3662e-5 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.0895e-5 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 8.461e-6 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080469621 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.3501e-5 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.286e-5 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.4138e-5 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.1256e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 8.934e-6 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080938506 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.504e-5 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1607e-5 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1132e-5 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.1175e-5 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080499584 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.1875e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 8.058e-6 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.0606e-5 seconds)
  done (took 1.916710046 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030716698 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027523169 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040591171 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.9444e-5 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040531846 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051629951 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041000046 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050972095 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040727782 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.5055e-5 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040796313 seconds)
  done (took 1.053833161 seconds)
done (took 4.884049878 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.256313078 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.203806379 seconds)
  done (took 1.143856291 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.271037684 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.224452578 seconds)
  done (took 1.186378964 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.254101519 seconds)
  done (took 0.94777833 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.086805814 seconds)
  done (took 1.779723589 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.323574408 seconds)
  done (took 1.010211056 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.353606842 seconds)
  done (took 2.047079634 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.682692625 seconds)
  done (took 1.387998076 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.674582984 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.133517269 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 0.177432944 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 1.083644439 seconds)
  done (took 3.778070274 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.719432427 seconds)
  done (took 5.421176411 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.42133907 seconds)
  done (took 1.131057307 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.961130234 seconds)
  done (took 1.674369636 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051388109 seconds)
  done (took 0.764143907 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.980329136 seconds)
  done (took 1.700015923 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.526450967 seconds)
  done (took 2.243454391 seconds)
done (took 26.903728281 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.828807691 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.890770737 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.737975614 seconds)
  done (took 4.174105745 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 0.033993973 seconds)
    (2/2) benchmarking "readstring"...
    done (took 0.022491311 seconds)
  done (took 0.804148237 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.867151095 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.130981981 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021020248 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.034709977 seconds)
  done (took 1.778299212 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 0.234619849 seconds)
done (took 7.725427999 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.184746002 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.08779008 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.042817 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.078025479 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.04595279 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.091957756 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.063236427 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.093446506 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.074305663 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.023889837 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.051399999 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031324906 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.081197652 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.054727495 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.083645268 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.077292199 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.062323651 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031349559 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.05806052 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.050989431 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.064565249 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.057016882 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.059656186 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.023889221 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.050549896 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.060041371 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.0653e-5 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.067746802 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.074481471 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.075600134 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.066769811 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.059903832 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.038919208 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.056029847 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032981231 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030593275 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.072190965 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.07212499 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.077862211 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027787651 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 3.18e-5 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.057319251 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.062638825 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.045294179 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.066215521 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.057039317 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.075282534 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.047034698 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.6495e-5 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.055339663 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.072461388 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.077930242 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.1843e-5 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.9421e-5 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.058141661 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.049473407 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 3.3597e-5 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.065567289 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 3.0344e-5 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.048017614 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.075087431 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.054463296 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.070201481 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.066609709 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03121467 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.067670147 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.881e-5 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.062933623 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.1349e-5 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.040524461 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 4.3113e-5 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.055391753 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038456641 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.4745e-5 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.066754815 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.069655498 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.063334969 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.070082778 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.027911243 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.077963437 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.040399125 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.7007e-5 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.3467e-5 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.066098049 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.7915e-5 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.031715926 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.054904956 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.061040853 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.1646e-5 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 3.9964e-5 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.05846594 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.055261649 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.058011444 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.065400963 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.07034649 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.1232e-5 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035150062 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.8124e-5 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.070020721 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0315798 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.061507603 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.047788146 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.07062726 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.069323806 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.029430783 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.031488237 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.8862e-5 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.045284555 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.039529808 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 3.5117e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.059610142 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.063874645 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.046455344 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.039430594 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 3.3709e-5 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 3.8276e-5 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.2107e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.2078e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.069514336 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.069877597 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031958255 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 4.1839e-5 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.057588715 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.4323e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.9623e-5 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.068190467 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.06262102 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.0033e-5 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.046861556 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.027830702 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.8731e-5 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.02881838 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040305236 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.073667922 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.073937619 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.984e-5 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.049438473 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.5005e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.2482e-5 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.048680686 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.5373e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.1072e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6458e-5 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.068727289 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.038738825 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.045925009 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.058872489 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.064193379 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.6632e-5 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.047565548 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 3.4537e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.059617889 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.065020489 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.5856e-5 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.872e-5 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.6287e-5 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.05004344 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.5184e-5 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.067287099 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.060362884 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.6792e-5 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.8048e-5 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.073117513 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.072365203 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 5.8175e-5 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.060205413 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.9485e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.054079874 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.048033244 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.057390194 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.000110758 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.687e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.1672e-5 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.8791e-5 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9885e-5 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.062408592 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.1754e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.068376898 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.6158e-5 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 3.1405e-5 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.028122384 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.7208e-5 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.060312934 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032019324 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 3.8695e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.067063814 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.031495375 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.8511e-5 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 3.8851e-5 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.0296e-5 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.3126e-5 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.057079963 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.029361951 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 3.2471e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.1576e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.3934e-5 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.8655e-5 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.2139e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.069333011 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.3883e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.6072e-5 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.4428e-5 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.9973e-5 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036780444 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.3371e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.8082e-5 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.045694175 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.078061057 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.063422599 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 3.056e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.7723e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.2543e-5 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.9928e-5 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039594925 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 4.7725e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.030973567 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 3.7603e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.8819e-5 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.054695067 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.048331435 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.1787e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.4266e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4575e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.0342e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.4976e-5 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.077420888 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.039275198 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.064927403 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.1793e-5 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.0499e-5 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.9418e-5 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.4412e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.8926e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.6117e-5 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.7397e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5933e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.036017078 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.059303664 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.4252e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.6903e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.2357e-5 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.3109e-5 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.6456e-5 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.060365764 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.049380461 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 3.3466e-5 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.1579e-5 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.0211e-5 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.1233e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.068288934 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 7.4145e-5 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.0917e-5 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.1876e-5 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057526581 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.063507496 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.7825e-5 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.4185e-5 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6605e-5 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.3224e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.063588867 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.8311e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.7962e-5 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.03461102 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.6782e-5 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.063164678 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.2001e-5 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.5818e-5 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.06326824 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 4.0122e-5 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.8193e-5 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.5773e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.9769e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.9035e-5 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.1518e-5 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.9963e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.6259e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.0235e-5 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.8386e-5 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.069455838 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.5263e-5 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.068362268 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 3.7579e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.9494e-5 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.01096132 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.8902e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.5848e-5 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.8803e-5 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.054185975 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.6991e-5 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.054761181 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.071137768 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.5076e-5 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.1216e-5 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.4424e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.057213692 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.4397e-5 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.9553e-5 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.054135862 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.6447e-5 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.616e-5 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.3092e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.060172625 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.76e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.0978e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.8782e-5 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028145336 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.2216e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2873e-5 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.1293e-5 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.9169e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 3.2203e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.516e-5 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.8284e-5 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.5663e-5 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.8715e-5 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.031336045 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.821e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.060033131 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.1751e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.039160096 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.050350567 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.8256e-5 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.0708e-5 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.2018e-5 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.5842e-5 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.4851e-5 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.068087275 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 3.6571e-5 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.3534e-5 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.1839e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.727e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.050706448 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.661e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.8434e-5 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.8381e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 3.7992e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.8295e-5 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.3445e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.9172e-5 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.8101e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.7778e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.4289e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.503e-5 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.1771e-5 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.846e-5 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.704e-5 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.4294e-5 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.5818e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.9991e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.0273e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.3519e-5 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011092232 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 3.2035e-5 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 3.2156e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.7113e-5 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.5945e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.0708e-5 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.8315e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.1947e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.0108e-5 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.8442e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.0731e-5 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6099e-5 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.6489e-5 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.4488e-5 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 4.9638e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4178e-5 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.1378e-5 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.0674e-5 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.9562e-5 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031235747 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.028418004 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.4967e-5 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 3.001e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.3913e-5 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.0484e-5 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.063194433 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.9007e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.2856e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.888e-5 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.7997e-5 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.8844e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.8395e-5 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.8322e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.9179e-5 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3003e-5 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.8504e-5 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.4252e-5 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.8533e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.9771e-5 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.1298e-5 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.1609e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.3658e-5 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.841e-5 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.3515e-5 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.4488e-5 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.9674e-5 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.6554e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2705e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.0898e-5 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.503e-5 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.1798e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.0376e-5 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.7799e-5 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4237e-5 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.1589e-5 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.036562149 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.22e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.712e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.4571e-5 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.4831e-5 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.824e-5 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.3305e-5 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.6768e-5 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.3164e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.3832e-5 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6772e-5 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.4049e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.478e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.3116e-5 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.9588e-5 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.168e-5 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.2657e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.075692097 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.4187e-5 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.2154e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.3105e-5 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.9307e-5 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.4291e-5 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.6984e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.2118e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.4377e-5 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.027759183 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 4.0723e-5 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.8618e-5 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.5734e-5 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.5079e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.0025e-5 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.8824e-5 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.0558e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.035461342 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.9846e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 3.2758e-5 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.1278e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.9007e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.8979e-5 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.382e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.6862e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.057370179 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.2228e-5 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.4054e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.2268e-5 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.4111e-5 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.812e-5 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.1588e-5 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.8731e-5 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8471e-5 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7993e-5 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.6398e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.06480463 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.6607e-5 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.7183e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.2048e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.2277e-5 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.1238e-5 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.9179e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 3.3722e-5 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.7556e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.251e-5 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.2108e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.1569e-5 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.8095e-5 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.6908e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.9751e-5 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.3732e-5 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.487e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.4272e-5 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.3171e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.3577e-5 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.7058e-5 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 4.9217e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.5687e-5 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.7313e-5 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.012486745 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.9689e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.7603e-5 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.9167e-5 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.4144e-5 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.743e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.9227e-5 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.7653e-5 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.828e-5 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.8424e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.4824e-5 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.8095e-5 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.2854e-5 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.8332e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.7225e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 9.652e-6 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.784e-5 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.7375e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.4955e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.4818e-5 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.018e-5 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.3423e-5 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.1999e-5 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.7807e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.7016e-5 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.6613e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.9114e-5 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.3121e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.9569e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.1593e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.8687e-5 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.6046e-5 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.9696e-5 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.0494e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.0052e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.1463e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.0755e-5 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.709e-5 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.02964565 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.8571e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.2126e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.3844e-5 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.8724e-5 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.6253e-5 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.7648e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.2901e-5 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.7711e-5 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.1734e-5 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.1481e-5 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.0295e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.2813e-5 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.7758e-5 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.2276e-5 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.9112e-5 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.9927e-5 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.6148e-5 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.77e-5 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.2595e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.5478e-5 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.1488e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.051524865 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.7219e-5 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.0221e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.3362e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.1484e-5 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.7434e-5 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.4863e-5 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.6918e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.8204e-5 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.3121e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5826e-5 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.7153e-5 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.4891e-5 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.2388e-5 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.011646662 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 3.1726e-5 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 3.5139e-5 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.589e-5 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.3315e-5 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.5584e-5 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.7879e-5 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.7557e-5 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.0012e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.7852e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.7607e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.2106e-5 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.0292e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.4132e-5 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.6487e-5 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.9222e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.9261e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.3445e-5 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.723e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.6532e-5 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.1749e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.8904e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.2937e-5 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.5475e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.8515e-5 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.1885e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.8643e-5 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.1649e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.359e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.3706e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.6368e-5 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.845e-5 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.5023e-5 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.4296e-5 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.6923e-5 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.4759e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.9469e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.2503e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.1437e-5 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.7405e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.1023e-5 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.8344e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.8933e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.2594e-5 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.6306e-5 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.7875e-5 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.4597e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.6493e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.8024e-5 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032015116 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.3346e-5 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.2183e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.6763e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.4524e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.8295e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 5.0139e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.1272e-5 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.0213e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.196e-5 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 4.1324e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.13e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.5624e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.5821e-5 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.8793e-5 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.3748e-5 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.0712e-5 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.000168763 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.3083e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.6136e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.6921e-5 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.5734e-5 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.8918e-5 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.3157e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7018e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.0511e-5 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.5694e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.9542e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.8911e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.516e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.4986e-5 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.7057e-5 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.4705e-5 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.8073e-5 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.3232e-5 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.9843e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.9973e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.7985e-5 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.3382e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.4256e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.013e-5 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.9779e-5 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 3.0673e-5 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.0856e-5 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.8004e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.5847e-5 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.5086e-5 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.2929e-5 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.0173e-5 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.7924e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.1819e-5 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.6012e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.4843e-5 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.6529e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.3813e-5 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.4353e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.8571e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.514e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.6413e-5 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.2632e-5 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.6624e-5 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.2865e-5 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.4628e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.4515e-5 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.2396e-5 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.2469e-5 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.5004e-5 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.0041e-5 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.1719e-5 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.2084e-5 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.1209e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.6655e-5 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.4663e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.2869e-5 seconds)
done (took 11.268910961 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.539920174 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.472197691 seconds)
  done (took 1.760373818 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.394116084 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.097341643 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.410375922 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074871821 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071902248 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.167638578 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000143642 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.083994337 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001326696 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.140347955 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079648476 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.139803247 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.07865877 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.028987351 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.034094441 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077225153 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.00083581 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.6727e-5 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000153182 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.034124881 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034505735 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002900913 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.030845473 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.042756371 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.004849626 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.9984e-5 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000212097 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001608846 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.047e-5 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084584919 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.9514e-5 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00012944 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003548791 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.026877514 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 9.169e-5 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.0021978 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.029926981 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076476265 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.00157851 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.035258395 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000115101 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.029355865 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000111418 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0344349 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.2534e-5 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000127659 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000147897 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000203932 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.5833e-5 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000128651 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 5.5323e-5 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9237e-5 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003233308 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.00175379 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002638259 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029773327 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000231742 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.007372121 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002599832 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000838468 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003488 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000237102 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001343024 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035186911 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001466265 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000224942 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.036126043 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003067941 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.00959496 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000106004 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002159531 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.779e-5 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004719411 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.004192756 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.1747e-5 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.007090134 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002790009 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.6252e-5 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.00170005 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000139118 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000206041 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.001047612 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000106652 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003593891 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.002458271 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 7.0838e-5 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.01182473 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000125876 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000182954 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001484564 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.012173693 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 5.7207e-5 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.00135873 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001431506 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002427516 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030486267 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00013929 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 4.6486e-5 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 9.848e-5 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000104799 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002552828 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000121769 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001306061 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 3.8917e-5 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.3394e-5 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000216034 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001791215 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.455e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000252869 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000127071 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001613938 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002312751 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.012028696 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000236634 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.315e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001709049 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000361772 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9504e-5 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001527533 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002188839 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002849317 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000117281 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000494176 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.7436e-5 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000102052 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.0855e-5 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.2581e-5 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000145774 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000170802 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00024648 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002110251 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.008539257 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000231181 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001913771 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002789123 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.8329e-5 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013188681 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004055894 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 9.6127e-5 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008051162 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000177812 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000173661 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.4004e-5 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 9.097e-5 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000616173 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.009513878 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005285635 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001791826 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.001721448 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 7.3874e-5 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004720289 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000259454 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002078283 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001437326 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.0879e-5 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.021613194 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.001875325 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.9738e-5 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004290354 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013452766 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 7.0188e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.00018495 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000104936 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000129281 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001733842 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 9.2434e-5 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.9933e-5 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005442016 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002038841 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0088203 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000155663 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001623403 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.1546e-5 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.00047265 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000125416 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.8736e-5 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.002954099 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00011174 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000704978 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001527456 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000125157 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.2388e-5 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.9869e-5 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000113564 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.3817e-5 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00519175 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.006832539 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002090711 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000381535 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008160374 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002196191 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.004155773 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.019665379 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003492878 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.000369411 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000770558 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000157593 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001343573 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.002368583 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001790145 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.012003602 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 8.5484e-5 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000174476 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000252912 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000131656 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 8.6459e-5 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000214122 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.848e-5 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012500095 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000207912 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.0189e-5 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001309126 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.4728e-5 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.009402553 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000128721 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.8386e-5 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002924811 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000146701 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000225243 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.016150365 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002750515 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000157964 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000124591 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009844268 seconds)
  done (took 3.651887729 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.240069021 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025191636 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.315555152 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.036341389 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000177287 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000195707 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.123380617 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.270715089 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000196846 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 9.8809e-5 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000215637 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.055958667 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.547744525 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000161339 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.471311152 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.094730378 seconds)
  done (took 3.942684118 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 0.228968473 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.128803685 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.293e-5 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.8735e-5 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.3884e-5 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 0.058905991 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 0.157056467 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.111974034 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.112379583 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.4509e-5 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 4.0739e-5 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 9.177e-6 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.663e-6 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 1.1953e-5 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 2.2398e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.0788e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 3.1507e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.3201e-5 seconds)
  done (took 1.613167881 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.225429013 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.099815447 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.058372761 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.2517e-5 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.106563343 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.044517689 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000734862 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.066940427 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000693773 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.275e-5 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.059034404 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.034754398 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053150886 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082448559 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 0.029638338 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.049918068 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.055024046 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.109850408 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.2826e-5 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002655905 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.0377e-5 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.05201904 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.087006826 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 3.7947e-5 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 6.736e-5 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000933403 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 4.5035e-5 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.037628218 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001721451 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 9.5123e-5 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.2089e-5 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 1.825e-5 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.066563822 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.8243e-5 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000713439 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 4.7971e-5 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 8.387e-6 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001074028 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000695024 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.1298e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 4.7054e-5 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.2962e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.4912e-5 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000714877 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000156953 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.809e-5 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.1465e-5 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.8914e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 9.004e-6 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001013463 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.4873e-5 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.6886e-5 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.3522e-5 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.1698e-5 seconds)
  done (took 2.131751163 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.060914534 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.1886904 seconds)
  done (took 1.019052654 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 2.646990085 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.223696242 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.416128165 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 0.224516639 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.10896844 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.372583356 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.099537963 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105208791 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.103422403 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.12149659 seconds)
  done (took 5.197604451 seconds)
done (took 20.076916812 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 0.099590485 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 0.124582295 seconds)
  (3/8) benchmarking "fib"...
  done (took 0.023900803 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.690865398 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.058991528 seconds)
  (6/8) benchmarking "parseint"...
  done (took 0.037748489 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 0.038524127 seconds)
  (8/8) benchmarking "printfd"...
  done (took 0.1654015 seconds)
done (took 2.02111601 seconds)
(7/23) benchmarking "parallel"...
done (took 0.797451695 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 0.527082223 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.024866353 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.135356427 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.330201095 seconds)
    (5/9) benchmarking "Date"...
    done (took 0.021038593 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.152151482 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.025104822 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025073107 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 0.020954298 seconds)
  done (took 2.080277473 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024687644 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.02290539 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021366928 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021880066 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025844668 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020809489 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022669341 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020730838 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023013169 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021432259 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020579487 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026438563 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031013636 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021670929 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.031461675 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021889797 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.0207028 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021416626 seconds)
  done (took 1.217986787 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.035628803 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029956442 seconds)
  done (took 0.862811115 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 0.020522816 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018830438 seconds)
    (3/7) benchmarking "second"...
    done (took 0.020721374 seconds)
    (4/7) benchmarking "day"...
    done (took 0.018563043 seconds)
    (5/7) benchmarking "year"...
    done (took 0.019368784 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.021490598 seconds)
    (7/7) benchmarking "hour"...
    done (took 0.021295743 seconds)
  done (took 0.93728338 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.125374837 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019506197 seconds)
  done (took 0.940828283 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 0.020906534 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 0.019173557 seconds)
  done (took 0.836834405 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 0.021492657 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 0.036347153 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 0.020009469 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 0.032725029 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 0.033026019 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020022872 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 0.020311591 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 0.030017953 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020334481 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.02042224 seconds)
  done (took 1.050234397 seconds)
done (took 8.718987538 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.023881011 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 9.86e-6 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022557866 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019433721 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.019200374 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.01903792 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.4019e-5 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.023882758 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.021323392 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019180659 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021058407 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.8272e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 9.129e-6 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.1436e-5 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.0437e-5 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 9.41e-6 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 7.382e-6 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022385889 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.8192e-5 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 8.919e-6 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.1257e-5 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.0952e-5 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 8.576e-6 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 9.686e-6 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 8.404e-6 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.021007585 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.8623e-5 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.2883e-5 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.0727e-5 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 9.258e-6 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 7.055e-6 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 8.212e-6 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.812e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 6.6e-6 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 6.421e-6 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 7.923e-6 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 7.457e-6 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 7.7e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 6.215e-6 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 6.258e-6 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 7.22e-6 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 8.005e-6 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.1676e-5 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.769e-6 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 6.664e-6 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 6.36e-6 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 6.129e-6 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 6.169e-6 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.946e-6 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.020908693 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.6802e-5 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.0651e-5 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.916e-6 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 7.779e-6 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 7.844e-6 seconds)
  done (took 1.046869624 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.055027122 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042191223 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043086431 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.036459202 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026336519 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.040453457 seconds)
  done (took 1.046096581 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.018828605 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020325338 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2115e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 6.276e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.0852e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.938e-6 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.863e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.725e-6 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.392e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.006e-6 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1897e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.329e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.916e-6 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.215e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.317e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.59e-6 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 4.948e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.202e-6 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.331e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 5.645e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.609e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 4.988e-6 seconds)
  done (took 0.839501344 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.018543384 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 8.822e-6 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.509e-6 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.336e-6 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018760229 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.977e-5 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 6.456e-6 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.713e-6 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.761e-6 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 9.932e-6 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 9.377e-6 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 8.225e-6 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.447e-6 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 5.784e-6 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.866e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.374e-6 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.368e-6 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.453e-6 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.395e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.495e-6 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.937e-6 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.381e-6 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.854e-6 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.217e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.313e-6 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.73e-6 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 6.155e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 6.284e-6 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.379e-6 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.761e-6 seconds)
  done (took 0.834460783 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.03536224 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.026350713 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.008942342 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 3.6658e-5 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.4539e-5 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 9.846e-6 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 7.716e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 7.64e-6 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 6.608e-6 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 7.73e-6 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.1338e-5 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.5995e-5 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 8.161e-6 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 6.458e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.172e-6 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 5.874e-6 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 6.422e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.892e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.468e-6 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.708e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.777e-6 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.715e-6 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.009257088 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 3.9173e-5 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.1255e-5 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.1289e-5 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 7.353e-6 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 7.257e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.708e-6 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 7.083e-6 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.839e-6 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.154e-6 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.405e-6 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.5475e-5 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.697e-6 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.033e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 7.276e-6 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.29e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.021e-6 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.709e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.74e-6 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 9.226e-6 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.7876e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 8.056e-6 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 7.456e-6 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.478e-6 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.096e-6 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.78e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 5.802e-6 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.07e-6 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.745e-6 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.298e-6 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.798e-6 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 6.087e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 6.102e-6 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.632e-6 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 5.825e-6 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 5.734e-6 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 5.871e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 5.824e-6 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 8.797e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 6.487e-6 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.599e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.784e-6 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 5.769e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.598e-6 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 1.1575e-5 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 6.567e-6 seconds)
  done (took 0.969726226 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015766421 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 0.019769319 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015629798 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 0.019586028 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020477798 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 0.019136981 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019988792 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020409628 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 0.019543809 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 0.01994465 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015784328 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020310932 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015859071 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.029383375 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.02274145 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020936634 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.017410969 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020310032 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019741166 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020065106 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019516946 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020531821 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 0.019505068 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021254734 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019575975 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015986274 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 0.019416939 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.02014222 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015643228 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 0.020951054 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021353484 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015880478 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024735706 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019397161 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019737557 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 0.015640346 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.01589382 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019706784 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015743747 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 0.019330461 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015763961 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020469369 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 0.02043588 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020599606 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.020097668 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015697072 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019561335 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 0.019912388 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 0.019149035 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 0.019284402 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015716302 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 0.015816584 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01580577 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 0.020754795 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021757206 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023447743 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019429745 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015939433 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019528905 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020610365 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020158706 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 0.019430605 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015747879 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019428851 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020372923 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015689099 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019759871 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020387446 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 0.021110081 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015824932 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015835848 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019369798 seconds)
  done (took 2.174795158 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017778817 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018375872 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019170312 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.000175006 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017426113 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.9411e-5 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 8.0147e-5 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017638056 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.4712e-5 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 8.328e-6 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.2165e-5 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017555924 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 8.7654e-5 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.2109e-5 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 8.302e-6 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 1.0724e-5 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.523e-6 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.3671e-5 seconds)
  done (took 0.910900998 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.019469616 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 9.563e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 7.527e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 6.25e-6 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.202e-6 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 6.363e-6 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.007e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.8252e-5 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 6.762e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.116e-6 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 8.918e-6 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.552e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.96e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.611e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.783e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.205e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.529e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.871e-6 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.971e-6 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.926e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.961e-6 seconds)
  done (took 0.820810983 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01885081 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0415e-5 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018966499 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.3482e-5 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 8.687e-6 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 1.1399e-5 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0198e-5 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.298e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.647e-6 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.015e-6 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.766e-6 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.141e-6 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.679e-6 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.683e-6 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.671e-6 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 6.109e-6 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.2109e-5 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.717e-6 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 6.7e-6 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 6.359e-6 seconds)
  done (took 0.838910279 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.052095934 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.0679e-5 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.753e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.711e-6 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.342e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.935e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.07e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.949e-6 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.262e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.995e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 7.955e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 7.338e-6 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.473e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.053e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.317e-6 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.199e-6 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.128e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.733e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.445e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.862e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.064e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.263e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.603e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 4.963e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.181e-6 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.176e-6 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.564e-6 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.018e-6 seconds)
  done (took 0.853072428 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.018936572 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.127e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.949e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.018914493 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.3587e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 7.47e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 7.104e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.908e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.648e-6 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.875e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 9.712e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.061e-6 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.514e-5 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.569e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.28e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.056e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.54e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.195e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.698e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.662e-6 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.172e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.828e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.323e-6 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.155e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.03e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.29e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.171e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.138e-6 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.732e-6 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.367e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.044e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 4.996e-6 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.573e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.32e-6 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 4.961e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.572e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.422e-6 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.315e-6 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.167e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.102e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.479e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.973e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.9557e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.387e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.099e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.237e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.187e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.612e-6 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.243e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.07e-6 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.184e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.273e-6 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.164e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.452e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.433e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 6.279e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.268e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.528e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.961e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.499e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.845e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.646e-6 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.955e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.023e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.184e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.247e-6 seconds)
  done (took 0.845476649 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019091954 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 0.018552224 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017543448 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.4498e-5 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.2036e-5 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.999e-6 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.7784e-5 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 7.553e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 7.288e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.345e-6 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 8.2894e-5 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 8.25e-6 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 6.898e-6 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.385e-6 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.274e-6 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.795e-6 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 1.103e-5 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.06e-6 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 6.745e-6 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.575e-6 seconds)
  done (took 0.855582273 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022296252 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020041409 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 0.01896771 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020717277 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.026270397 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.026551281 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 0.019446358 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 0.020228311 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 0.019714057 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020048347 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020712865 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 0.020626062 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020501667 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020195135 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020539156 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 0.01999658 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021720943 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 0.019378896 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.026930137 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020478419 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 0.019766279 seconds)
    (22/49) benchmarking "13786"...
    done (took 0.03561948 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.032549253 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020210496 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021684233 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 0.019480332 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026161501 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 0.019508646 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 0.019328119 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020233928 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020692459 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 0.020606099 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.02119653 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 0.019212024 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 0.021528784 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.047207958 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020534909 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 0.019215463 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020473943 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 0.019278689 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020722785 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 0.019710123 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 0.019346202 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021903289 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 0.020335229 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020994846 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 0.019147792 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020868814 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 0.019913185 seconds)
  done (took 1.874799116 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020452196 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01845551 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.1353e-5 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 7.596e-6 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.0635e-5 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.972e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.866e-6 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.383e-6 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.0e-6 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.498e-6 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.0e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.23e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.383e-6 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.307e-6 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.783e-6 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.421e-6 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.042e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.084e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.184e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 4.733e-6 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 5.447e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.175e-6 seconds)
  done (took 0.844282617 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0185611 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020309237 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.4457e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.0149e-5 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.881e-6 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.222e-6 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 8.673e-6 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.134e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.509e-6 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.355e-6 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 9.245e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.518e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.75e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.249e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.136e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.122e-6 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 4.997e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 4.874e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 5.572e-6 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.286e-6 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.14e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.251e-6 seconds)
  done (took 0.844271533 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018679953 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 9.404e-6 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018657177 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.4963e-5 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.04e-5 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 9.134e-6 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 7.573e-6 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.48e-6 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.392e-6 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 6.519e-6 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.0707e-5 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.137e-6 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 6.054e-6 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.784e-6 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.287e-6 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.226e-6 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 6.107e-6 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 6.252e-6 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.679e-6 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.378e-6 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.24e-6 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.397e-6 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 5.418e-6 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 5.085e-6 seconds)
  done (took 0.84309794 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 0.020124416 seconds)
    (2/2) benchmarking "indexed"...
    done (took 0.020462088 seconds)
  done (took 0.846647231 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.019530284 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.4347e-5 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019149498 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.4702e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 8.273e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.1036e-5 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 1.2397e-5 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 6.543e-6 seconds)
  done (took 0.842209784 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020873696 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02101257 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.905e-5 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 1.3007e-5 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.019e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 7.178e-6 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.011e-6 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.167e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.799e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.114e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.066e-5 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 6.931e-6 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.408e-6 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.935e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.985e-6 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 6.063e-6 seconds)
  done (took 0.846012792 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.019263723 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.4364e-5 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019042341 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.4837e-5 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 8.207e-6 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 7.325e-6 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.337e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.0377e-5 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 1.0487e-5 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 6.55e-6 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.1442e-5 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 6.162e-6 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.7365e-5 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.2649e-5 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.031e-6 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.374e-6 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 4.979e-6 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.599e-6 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.575e-6 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.998e-6 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.232e-6 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.634e-6 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.254e-6 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 5.44e-6 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.029e-6 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 6.866e-6 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.409e-6 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 4.991e-6 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 4.944e-6 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 4.788e-6 seconds)
  done (took 0.841451088 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019358033 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 9.351e-6 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.64e-6 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.018739885 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.5515e-5 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 8.238e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 8.899e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.911e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.626e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.406e-6 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.1483e-5 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.775e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.59e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.787e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.624e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.091e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.393e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 6.228e-6 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.54e-6 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.496e-5 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.59e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.064e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.186e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.417e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.515e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.483e-6 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.073e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.529e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.681e-6 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.377e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.051e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.992e-6 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.618e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.293e-6 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.79e-6 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.111e-6 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.804e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.354e-6 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.323e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.042e-6 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.404e-6 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.226e-6 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.7058e-5 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.896e-6 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.59e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.265e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.162e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.402e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.225e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.346e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.557e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.634e-6 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 5.57e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.341e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.535e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.911e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.321e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.699e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.07e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.2e-6 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.524e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.763e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.483e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.817e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.278e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.783e-6 seconds)
  done (took 0.842520177 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.019182684 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.1019e-5 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018683602 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.7126e-5 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 9.223e-6 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 7.202e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 6.999e-6 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 1.0675e-5 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.88e-6 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 7.879e-6 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.0658e-5 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.606e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 5.554e-6 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.953e-6 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.61e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.581e-6 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.576e-6 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.405e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 6.113e-6 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.702e-6 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.519e-6 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.115e-6 seconds)
  done (took 0.845451676 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.019790248 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019613503 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.836e-5 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 8.614e-6 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 7.009e-6 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 7.714e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 7.619e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 7.476e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 7.968e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 6.267e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 9.68e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 6.06e-6 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.693e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.7e-6 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.508e-6 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.447e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.839e-6 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.141e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.401e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.63e-6 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.273e-6 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.024e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.281e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.449e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.098e-6 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.244e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.231e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.834e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 4.962e-6 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.262e-6 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.227e-6 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.965e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.144e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 7.076e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.186e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.288e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.369e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.19e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.422e-6 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.447e-6 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.282e-6 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 4.85e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.9173e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.399e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.517e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.644e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.021e-6 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.179e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.249e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.091e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.283e-6 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.197e-6 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.22e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.539e-6 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.38e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 4.99e-6 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.746e-6 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 4.893e-6 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.296e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.199e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.121e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.079e-6 seconds)
  done (took 0.844388038 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.017789212 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.018307746 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.01896836 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.4013e-5 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 8.614e-6 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 9.04e-6 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.048e-6 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 7.751e-6 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.167e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.439e-6 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.1374e-5 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 6.431e-6 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.15e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.216e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 7.257e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.416e-6 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 6.288e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.000157654 seconds)
  done (took 0.860108834 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022874427 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027731642 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022878279 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021602321 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021573799 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.023295142 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022914929 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020937931 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020510372 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.029567171 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019428257 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.023512827 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021721531 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.02263971 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020895011 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020010506 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021157792 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027345991 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.020861215 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020717748 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018968106 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.021740516 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022138152 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020003221 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021504531 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020380489 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024292943 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.024240771 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020304621 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.021665798 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.021435047 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021079539 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.028278734 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023086326 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019415143 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022050688 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022971937 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020918266 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020936968 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.021267305 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02281921 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021161723 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020757767 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023570549 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021346531 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020083369 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021451171 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020007616 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.021022263 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.022700465 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019460569 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.021261235 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.021046506 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022278463 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022314417 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022802696 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.022846843 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.022420394 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.023327022 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021442676 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020686991 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020619784 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.022311413 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.022086146 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022622465 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020743899 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021511995 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.02147962 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.022014214 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02459188 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022948052 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.008883744 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.031613271 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020215388 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022034367 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020010069 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.021013142 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020870481 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027046029 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020863276 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021272238 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020972242 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021066685 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02188579 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026608697 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020723307 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01948268 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020318979 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020472884 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.022635144 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02147594 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027481553 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02756669 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021005416 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022711904 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.027891023 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020753232 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.022206561 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020061559 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02368278 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019991028 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02242151 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.01927002 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021408116 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.02149936 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024246276 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.0227421 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.020040778 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019587134 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023013114 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.02208713 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019013206 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019523801 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021518931 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022265861 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020402347 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021290599 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021566156 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019594329 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020724291 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022298041 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022986837 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024409908 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.022050783 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027379456 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020880001 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.023461253 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.022126749 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019629107 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020284606 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.02286923 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.024143888 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022536341 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008805788 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019553951 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021013496 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022563877 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021109686 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021800042 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022969098 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021856594 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003209427 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019513161 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.028018503 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.021065006 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023546598 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019539156 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023811734 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020999996 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027230587 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.021434663 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024197328 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020843096 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021647413 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022357379 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020467543 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020744203 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020524809 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021536461 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021611777 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021142369 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01925787 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020607727 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022853187 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021210736 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019936811 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019378255 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.02107945 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.021476805 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.022239562 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027104675 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019440973 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019465585 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020031957 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020844555 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.023011605 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024321205 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.023016938 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021040934 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0201567 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022789101 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023520145 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020804694 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020908314 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023662203 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019171989 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020206335 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020370118 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027952725 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02756881 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021511405 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.02013353 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.02682896 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020818553 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021552925 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020117069 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02184273 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022297269 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019442615 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027200019 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023567113 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.02289801 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023125275 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020644684 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020578181 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020598897 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02778933 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026759387 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.02211982 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021798614 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022892045 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020996937 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003115558 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020741944 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020107056 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021089834 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022790561 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021360794 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020929533 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021222398 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022847188 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021059049 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020773583 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020842242 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021075467 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.022385316 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019909329 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.023579 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022885441 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022239667 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020169369 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019887616 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020397743 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022396813 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022182621 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02242201 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022641854 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02173898 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003405423 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021123298 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020558635 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020226929 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021497159 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019439858 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021278343 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020097849 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020696831 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021713712 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021052323 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.023946265 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022189306 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020800187 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019382355 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021335615 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019504025 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021778436 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022078755 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021789667 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003683472 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021498436 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021511539 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.023580125 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.022064278 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020879652 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022214765 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020605872 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020944032 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020564691 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028008294 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026608215 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.023037981 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020618642 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021767414 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019636381 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023093816 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021506018 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022235921 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021227532 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020934956 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021218316 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020411352 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019133964 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019744069 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.020104465 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01975824 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020613198 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020306859 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.02091194 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022189875 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020475519 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021862432 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.026027191 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022850985 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019711808 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022701815 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023010901 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020379328 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021148024 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022344076 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021440555 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019340404 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022186791 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021608303 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022803623 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021755858 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021471432 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020334434 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0208419 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022567558 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021496189 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022696168 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021615892 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021361172 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.0193409 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019698693 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021887758 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.019962881 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020593363 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020622815 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026485032 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020548895 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021283572 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022708239 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022289883 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023448364 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028088333 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021677342 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020666481 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020276789 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020584425 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020265512 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021901844 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020692839 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020865902 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.022179035 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020204857 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020986154 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026728849 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020888088 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020636726 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021741716 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019391642 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022173479 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022188824 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.021172916 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021397676 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023755924 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020288195 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020118037 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021497958 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020787941 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018996158 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021979679 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020393982 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.023116633 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020808403 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020364313 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020747123 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026549536 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022417911 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026629613 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022683461 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.023044386 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.026017353 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.026514256 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003314275 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019363029 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021043685 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022274088 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020948427 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019950354 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022231458 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022434078 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021404633 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020071612 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021126464 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021186911 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020783482 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021273506 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019250462 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020929181 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021958204 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026979398 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020039505 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021913082 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022027472 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009052552 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.02047191 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020195513 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019968394 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021702368 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026650585 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020527011 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020326011 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021874776 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021874355 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019296139 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021100341 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019997616 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019086291 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021495794 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026458917 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020697823 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020056078 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020245436 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022959067 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021844683 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020253549 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021862239 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022804207 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.019792549 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022154792 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020001008 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020891028 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02179723 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019571563 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021626048 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.0213498 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020868838 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020190715 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023555463 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020187446 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020681617 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021434376 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004119596 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019879457 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019229252 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022031536 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021028219 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021568388 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022685228 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019427149 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026536049 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020500554 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020180827 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021200963 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021528802 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022472251 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022048576 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019920315 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020961695 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022166073 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019051322 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.02072259 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022172266 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020527589 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.020768687 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.02310829 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020501387 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020622159 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020609446 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021047175 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020867161 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021997187 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.0209778 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022113511 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019874011 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.021262746 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023413513 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003286294 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021672195 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022216364 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022185911 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.00384593 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021335753 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020087851 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023070329 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020179498 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02204725 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021151488 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.004616182 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020425049 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020004064 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.021712174 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022972345 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019718106 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020065015 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020130609 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019359207 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019596157 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020175082 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020424507 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.02151097 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026413758 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021366628 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020791798 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023012292 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020573254 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021586385 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021772661 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021835389 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020092401 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01910167 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019176745 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020080234 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020238631 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019867792 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020533769 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019781807 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021190736 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020202949 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020736453 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021510327 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020734857 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026496149 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025823496 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020941082 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01898831 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004271444 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.019925069 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023203299 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020218519 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020937087 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022274574 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.019995215 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023726667 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021362946 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023630852 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020490066 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019271753 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020115644 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019502092 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026477328 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020838102 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021635734 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020681745 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020396162 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022412758 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022948468 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019834285 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020020233 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020095253 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025548795 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021114181 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019744064 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020163479 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.02675692 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020579484 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022254405 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.02030157 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021317361 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.022214761 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025691599 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020583297 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019114689 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020974908 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020289109 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018660657 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020107948 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019295806 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020161891 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022967943 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021173872 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021484085 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021382919 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02205189 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.02014114 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022944769 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021966899 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.019980904 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019951953 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020627533 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020698259 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019937793 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003923617 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021703337 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019125005 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020488777 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020028698 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019180975 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025660029 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019399389 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.02003134 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020810306 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020075387 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027783852 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021093039 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021004362 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.022825782 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019523689 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021513484 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022580268 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.019802568 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021801839 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020178277 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020146012 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021678518 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021635261 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0253854 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003622962 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024950765 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023618032 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.02021493 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021663778 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021218756 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020542067 seconds)
  done (took 13.481157725 seconds)
done (took 37.490751032 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 0.021748253 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021555178 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021630801 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 0.021439878 seconds)
  done (took 0.922119627 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.21655199 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.130598512 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 6.968e-5 seconds)
  done (took 0.986555711 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033439266 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03497606 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039666698 seconds)
  done (took 0.954422335 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.060002046 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.053325359 seconds)
  done (took 0.959879756 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 0.059072252 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 0.063201494 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.054880355 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.023334075 seconds)
    (4/4) benchmarking "Float64"...
    done (took 0.027924098 seconds)
  done (took 1.018947998 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03849908 seconds)
  done (took 0.886159412 seconds)
  (9/15) benchmarking "18129"...
  done (took 0.169851826 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.269914645 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.142073564 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082431685 seconds)
  done (took 1.342464553 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.093447707 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037384277 seconds)
  done (took 0.986978632 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.064490998 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.063977924 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.058095681 seconds)
  done (took 1.039042388 seconds)
  (13/15) benchmarking "20517"...
  done (took 0.061550438 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.079844355 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.14971722 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.036899637 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.9598e-5 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 0.083426622 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 1.4678e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.6766e-5 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.089351981 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.110081527 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.2397e-5 seconds)
  done (took 1.407231739 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 0.030558271 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.043790873 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 0.019787122 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 0.020335247 seconds)
  done (took 0.974135424 seconds)
done (took 12.841959134 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.119599381 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.037583591 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.230450899 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.034410312 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.028065548 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.057577359 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.116989008 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.191491186 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.069252077 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.110298917 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037642065 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.0299355 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030199452 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.117610715 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.054126698 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.025349786 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.035315562 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.115722412 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.07304109 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.037213561 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.033225941 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029323595 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.029120725 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.02957751 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.029903772 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030312745 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029583766 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.190375029 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.275862867 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.03263289 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.039433689 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.1494e-5 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.037729125 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.202260947 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.037550374 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.119646948 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.095217094 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024632472 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.062377468 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.03371784 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.109786798 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026338914 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.172592412 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.108314204 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.036845955 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032300408 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.09706671 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.035670507 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.030078008 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031483911 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045799991 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.178294677 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.14632687 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030361319 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.040960247 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.035227445 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.251164681 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030027435 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.108066533 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.051526513 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024554929 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.029912932 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02997858 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.155149253 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 6.6516e-5 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.165927979 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.033353171 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.031149972 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.070050184 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.113818227 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.9391e-5 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027851366 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.029623592 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.133303418 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.109695166 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.02971644 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.089115216 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.110670304 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.11130298 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.03144314 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.000117226 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.097705786 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.0676878 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.029619655 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.001018508 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.04468218 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.053986262 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029140436 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027762571 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.11288701 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029602019 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.029455125 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.029229251 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.00107806 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.035260002 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 7.1153e-5 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.03631568 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027690379 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.3043e-5 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.028627692 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.134676358 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.089050217 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 7.1465e-5 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028942055 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029704759 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.11317391 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.030312488 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.085901524 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029220447 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.177816412 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.132129331 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.035817548 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.6952e-5 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.025158152 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.132523863 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.12271345 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025959852 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029023624 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029046532 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.030651527 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 8.3683e-5 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.00081639 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.085852933 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.04088438 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.089724939 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.147726971 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.029308618 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.211995864 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.139072719 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.8372e-5 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.000127069 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.026114042 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046087103 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033989322 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035591849 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.8596e-5 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.242178444 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.032584039 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025262782 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.086096571 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000756232 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.087251098 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.036637524 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027636034 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.118187637 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.030708083 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.038671865 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.11744562 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027427906 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.8204e-5 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001604792 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.177487242 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.026536376 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029630772 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 6.841e-5 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029159429 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.135021702 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.332375886 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 1.006606753 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035462342 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.03338529 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.029972544 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030632165 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043707125 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002402904 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.049542091 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 8.5931e-5 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036055495 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 4.3576e-5 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.029013854 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.033969204 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032025515 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.230066524 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046467498 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 4.263e-5 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.054943922 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026518712 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.028558581 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.096267723 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.033751468 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029686648 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033487101 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031066362 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.03409882 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.044709222 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.000129275 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029838232 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.03539651 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 9.8689e-5 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020012416 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.909354247 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.200734755 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 8.8408e-5 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.41e-5 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.033749777 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.093231352 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 4.892e-5 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.0963e-5 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.000104288 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.3953e-5 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.03390934 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.491025731 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.042021975 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.141214637 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.154698672 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.095134783 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.028638883 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.031758252 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.7426e-5 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001487051 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028576167 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089612751 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034256532 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.692e-5 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.033013152 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030274992 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 4.0456e-5 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.5297e-5 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.033161728 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.04553713 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033721535 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.074138081 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.17978738 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002233646 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.24804402 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.028360763 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.035824185 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.000219823 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 3.0727e-5 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.7937e-5 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034064264 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.037248097 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.044603999 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.231763167 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.037219299 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.000116575 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.03158858 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.188419794 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.114879657 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.001821582 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.8959e-5 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064152165 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.031237484 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.1083e-5 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.001804785 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000125164 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.003265596 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032749747 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.137625628 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.028680265 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.2864e-5 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.036896378 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028677606 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.02918577 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.9975e-5 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028967533 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076472219 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 9.5146e-5 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037054097 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.93293032 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.00011246 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001784157 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.111012052 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 8.9235e-5 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.140390505 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028071899 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.003089991 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031594999 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001236453 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.035977968 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.033263625 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 4.1532e-5 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 3.4445e-5 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000140056 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 9.2898e-5 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 8.4371e-5 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 7.3194e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043217174 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.000111315 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 7.402e-5 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.02939018 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000131923 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.036685188 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 6.4021e-5 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026473154 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000250824 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031871766 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.032563526 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.045640532 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 4.4449e-5 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.029568044 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.2629e-5 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.028430525 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.031966188 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027291358 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002230545 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.152989942 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036800197 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029889454 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.136350387 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 7.7057e-5 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.029252951 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 9.838e-5 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.109961441 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.029796016 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044111067 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.034095094 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.028073548 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 7.1257e-5 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.0981e-5 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029938447 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.3836e-5 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.884e-5 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002498563 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.029445414 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.00011781 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024153405 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033729298 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001729893 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066520378 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.037782133 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.9638e-5 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.6485e-5 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.089424658 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001720997 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.03639058 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.7626e-5 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.033627148 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 5.4375e-5 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.25110722 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.034170188 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 8.8179e-5 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.09104552 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.1321e-5 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.001378078 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.031413353 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 3.4713e-5 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.171633007 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001743611 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.1106e-5 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030721567 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.319196083 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.028496054 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 8.3129e-5 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 8.0691e-5 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 6.2601e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.03383712 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.035545913 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001720941 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.029928358 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.041173884 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.8204e-5 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.4643e-5 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.046720028 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.2925e-5 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 7.8014e-5 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.036063687 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.037683459 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.035857339 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 7.2359e-5 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.038843753 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.030297404 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.000114773 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000116355 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.026371275 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.5765e-5 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038483918 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039991147 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.1625e-5 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.002291996 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030396635 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.000101566 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 3.8715e-5 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.035406892 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.8622e-5 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 9.6474e-5 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 3.3733e-5 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.7081e-5 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.4706e-5 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 4.8516e-5 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000101299 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068507001 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000114696 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.4745e-5 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000101923 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.041368965 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.000104169 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000937347 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030689305 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.9276e-5 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.02795055 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030897955 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.3497e-5 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.03066742 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030362727 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.028715966 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.9294e-5 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.480107048 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.9535e-5 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.038947537 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002394958 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.8154e-5 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032065985 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 8.4508e-5 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000110985 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 8.661e-5 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.00010992 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 6.878e-5 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.037420131 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070312419 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.032474274 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 3.5547e-5 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000114183 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031781951 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029873098 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 8.9958e-5 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.0413e-5 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.0001125 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.1339e-5 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 7.891e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.027563468 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.000107508 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.5974e-5 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.032094541 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 3.5067e-5 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 6.0298e-5 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000158133 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.035687794 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000134076 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.5916e-5 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.2876e-5 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037757856 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.2576e-5 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.119238947 seconds)
  done (took 24.214677539 seconds)
done (took 25.073032624 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.094376785 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 0.03105332 seconds)
  (3/4) benchmarking "arrays"...
  done (took 0.054789232 seconds)
  (4/4) benchmarking "structs"...
  done (took 0.063238377 seconds)
done (took 1.215680037 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.035754897 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.063791469 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038692243 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041854649 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.043133333 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.040644146 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.050003946 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.046831189 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.044244829 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.037071966 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.026747621 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.040416211 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.036888651 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.9369e-5 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.050099255 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.028004613 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.044889807 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.036290367 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.043144301 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.054340806 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.002527624 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.0998e-5 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.026468831 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001109568 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.3273e-5 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 6.6481e-5 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.032812557 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035974067 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.02664236 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.9463e-5 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.2934e-5 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.2259e-5 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.033e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.0548e-5 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.030398092 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.042805569 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.5687e-5 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.041731942 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.040253127 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.030643958 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.042422262 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.0561e-5 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.036904758 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001096941 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.03150604 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.00246268 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.036767783 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.4272e-5 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.9998e-5 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.07e-5 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.79e-6 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 5.8006e-5 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.038854247 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.1602e-5 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.032100446 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.9118e-5 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.044345004 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 3.3333e-5 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.024872293 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.5531e-5 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 7.7168e-5 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.001079943 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 9.498e-6 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.1048e-5 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 9.657e-6 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 7.126e-6 seconds)
  done (took 2.356110138 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.037857841 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021508867 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.035103333 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.035780656 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.032937411 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.02288634 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.4656e-5 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02508055 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.3851e-5 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.0722e-5 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021572018 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026377792 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025080635 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.024833723 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.8484e-5 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.021522384 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.035992649 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.037865296 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.024805112 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.8973e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.053650154 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.022795239 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.7812e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.0576e-5 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.021662872 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024938105 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.021004055 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.9403e-5 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.8716e-5 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.192e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.1694e-5 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 7.832e-6 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 9.709e-6 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.2598e-5 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.025315785 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.2324e-5 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.3501e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021185496 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.572e-5 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.6809e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.55e-6 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.024591494 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 5.1293e-5 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.4227e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.2498e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.021069345 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.021470656 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.8957e-5 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.251e-5 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.4377e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.5153e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.2075e-5 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.024586603 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.02602999 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02318099 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.0801e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.1059e-5 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 9.844e-6 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.2248e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.1281e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.1493e-5 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 6.787e-6 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 7.551e-6 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021820356 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.7911e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.5662e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 8.785e-6 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.1768e-5 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.1708e-5 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 7.159e-6 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.0761e-5 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.024952789 seconds)
  done (took 1.763506773 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.04211088 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.071683032 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.035582128 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020914806 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021874436 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.033109701 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.021994312 seconds)
  done (took 1.202650702 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.038769935 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.028857664 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.025445602 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.020453192 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.024652264 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.024500841 seconds)
  done (took 1.1181193 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020338972 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.023732463 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021479476 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.051793915 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024534213 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022353519 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.028835052 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025039286 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021321691 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032682155 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022586997 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.055609037 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.032935631 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.040834077 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.035019288 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021033509 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.05489675 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066631121 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024937924 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.035180304 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022308436 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.045614181 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030799251 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023878677 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.025035345 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019953587 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022211982 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021084515 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.037213945 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030511096 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025621047 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023723016 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024828996 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021625403 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022122453 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022914601 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.030840857 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.036555405 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024799199 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.035310565 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022520706 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.040896884 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.028240953 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.021855327 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022753413 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.033263122 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021701575 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024805647 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.022552179 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022130823 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.0202625 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021409441 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.034520823 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.03077037 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.030748291 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.032019182 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022239716 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022016605 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022326243 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021380652 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022176325 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.036275166 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.035004941 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034178731 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.025295681 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029502748 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022212669 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023740987 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.051575706 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.022210974 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025377248 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024740773 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021478494 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021440833 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.021536996 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022532337 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021900229 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034600938 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024408053 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022382284 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024258328 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.031310488 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019345905 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.025422688 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022945668 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.024524379 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03537646 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025227859 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034817715 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023435118 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.022732895 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022741115 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025634894 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.022414737 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025923699 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023885557 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022860575 seconds)
  done (took 3.659942265 seconds)
done (took 11.050018251 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 0.121851882 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 0.526084367 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 0.076474928 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 0.105484148 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.067504782 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.094007896 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 2.780173035 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 0.125467683 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 0.412775091 seconds)
  (10/12) benchmarking "nbody"...
  done (took 0.075857647 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 0.056577965 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 0.122025559 seconds)
done (took 5.532245471 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.09591107 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.24167889 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.069596565 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.121597114 seconds)
  done (took 1.494878583 seconds)
  (2/6) benchmarking "26942"...
  done (took 0.061695574 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.293476941 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.120848742 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 0.167629634 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.16456271 seconds)
  done (took 1.727554852 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.037415866 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.038253618 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.021205575 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 0.026438651 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.030713199 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 0.024868513 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029239797 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021128486 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100525557 seconds)
  done (took 1.345499535 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 0.061231755 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 0.046505196 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.036445952 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 1.3579e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 6.991e-6 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.03235137 seconds)
  done (took 1.160179689 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.273716112 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.182886433 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.282103172 seconds)
  done (took 1.721140055 seconds)
done (took 8.490142333 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.040215117 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 0.051553011 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.21402985 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.03644042 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.279062635 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 0.031715371 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.233190596 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.419497355 seconds)
    (9/13) benchmarking "Float16"...
    done (took 1.018750959 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 8.632997441 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.047148162 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 0.032924747 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.907052164 seconds)
  done (took 21.928377163 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 0.030805581 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.028040224 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.421036771 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.1862e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.092929628 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.025081012 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.131075943 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026421719 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.034654307 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.030005127 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.02388905 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.4681e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.6154e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024928275 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.11480986 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.492e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.573829115 seconds)
  done (took 9.594620635 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 0.05599856 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 0.029620554 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 0.035958922 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 0.064179195 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 0.031542014 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 0.033335578 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.030961497 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.026183971 seconds)
  done (took 1.368553529 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.7095e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 9.381e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.8797e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.397e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.147e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5655e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.688e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 6.999e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 6.779e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 6.785e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.2608e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.783e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.641e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.591e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.0786e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.874e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.011313727 seconds)
  done (took 1.048234216 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.159699612 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.153243255 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.05701729 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.130129208 seconds)
  done (took 1.536228034 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 3.0018e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 1.4743e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.1811e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.668e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.345e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.7331e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 1.865e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.3784e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 1.308e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 1.1231e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 1.6449e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.514e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.627e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.926e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.0057e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.854e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.000418725 seconds)
  done (took 1.041154291 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 7.3061e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 0.000557029 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000363286 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000345721 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.3326e-5 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000357055 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 0.000941957 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000536251 seconds)
    (9/17) benchmarking "descending"...
    done (took 0.000570305 seconds)
    (10/17) benchmarking "ascending"...
    done (took 0.000551398 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001033049 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000343345 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000369807 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.2378e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.000883045 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000316151 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.016579468 seconds)
  done (took 1.062965368 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.211275296 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.206202538 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.059618456 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.076379324 seconds)
  done (took 1.587028671 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 3.7624e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.3462e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.4447e-5 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.5145e-5 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.45e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.5307e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 9.2372e-5 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.5064e-5 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.6465e-5 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.4508e-5 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 8.9046e-5 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.369e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.1407e-5 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.748e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.1154e-5 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.0346e-5 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 0.001791484 seconds)
  done (took 1.049424238 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 0.072578863 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 0.085706248 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 0.051054444 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 0.066135197 seconds)
  done (took 1.313928753 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.8405e-5 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 6.518e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 9.079e-6 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.191e-6 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 6.054e-6 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4361e-5 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.841e-6 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.379e-6 seconds)
    (9/17) benchmarking "descending"...
    done (took 4.533e-6 seconds)
    (10/17) benchmarking "ascending"...
    done (took 4.802e-6 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.24e-6 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.049e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.327e-6 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 3.668e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.837e-6 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.071e-6 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.9077e-5 seconds)
  done (took 1.047034378 seconds)
done (took 43.569351852 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.156539454 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.020893127 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 0.016329738 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.044419308 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.015070486 seconds)
  done (took 1.293399482 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.608490891 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.933930319 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.041939557 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.811300532 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170187002 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.645351842 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005601748 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142183423 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.505692666 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.290452011 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.00931464 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.100434968 seconds)
  done (took 27.3122484 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.090532134 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.099857389 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.272898969 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10053019 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.214444006 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.213322646 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.308749964 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.17791513 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.315617928 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.505600877 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.039991584 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056844222 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023108318 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.204602264 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065219977 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088204158 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.344618921 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.037586693 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063189104 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.141439447 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000370413 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020672348 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146128142 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068189319 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.087472688 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111035745 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.231276841 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042617732 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000123842 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03790267 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043792849 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041543519 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073936913 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064642869 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085197129 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042901659 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.023702966 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.00012013 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034722333 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03200493 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040830612 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053248684 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020107568 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.048578639 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 0.048439049 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031006377 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093080087 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012815118 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043771818 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.033567343 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060470488 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030413306 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.235848121 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136265009 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039607891 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034577677 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037720758 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079312378 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077187429 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03746046 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016155125 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000105394 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000301145 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028358075 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037605414 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.321885532 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.2835e-5 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024538071 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014732679 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087960715 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023823352 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.053315686 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052001289 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022148701 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.3992e-5 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031625001 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040356679 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042171049 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064055467 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.041001784 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052965064 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083469739 seconds)
    (83/608) benchmarking "6d"...
    done (took 0.266749302 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026018372 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.4124e-5 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.042119068 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000219586 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111912817 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076231028 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058413189 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038193945 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.040696026 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063464292 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.040082049 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132684145 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024959312 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036561907 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022188499 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4648e-5 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0228224 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041362273 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084184322 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061013667 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 0.06970546 seconds)
    (105/608) benchmarking "5d"...
    done (took 0.141092511 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.012575725 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058252045 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.042446762 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048069375 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026742969 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034106873 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044087306 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.03934016 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04999917 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051284857 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.023943949 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.022411012 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078125033 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.025147272 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.070990327 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7757e-5 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040970382 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027655975 seconds)
    (124/608) benchmarking "3d"...
    done (took 0.065108502 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039029639 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040716126 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044363423 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036641624 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082857762 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064393306 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063923644 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027589981 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.029661038 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020119806 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028589314 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.058259422 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09098116 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000161884 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054103815 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026883579 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000313707 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.068674082 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034149167 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023876387 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.051384966 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.019041236 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057867287 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079424597 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000198069 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081870898 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.6895e-5 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.7713e-5 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029040351 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.9458e-5 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.5813e-5 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038384352 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030573161 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.0719e-5 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.060082523 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0641889 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02841845 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032908839 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045568814 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.022851733 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.020992262 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037051358 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053791938 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054709475 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058295574 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034074351 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.01758548 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013459139 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015536465 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02430475 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038474654 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070431528 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057688346 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.5462e-5 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064648859 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028668363 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068804712 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053676673 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.032836058 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000427286 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043814558 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046088098 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025439835 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100643456 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048384596 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049396273 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057803903 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020588686 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.352382879 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022465214 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.3486e-5 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044155423 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2144e-5 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072688824 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082712501 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022606416 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033807325 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.016600808 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.019101444 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.017018055 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.042074431 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.9667e-5 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000551303 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024618708 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.037247297 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034111253 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042258018 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022083834 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059651993 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064762106 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.0031e-5 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059533742 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048457246 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062405627 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041727116 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052759951 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.025867994 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040180767 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000309527 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000530521 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035273225 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024405971 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06547087 seconds)
    (228/608) benchmarking "7d"...
    done (took 0.263409657 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057669193 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026232661 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.01303438 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041970522 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.040729852 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050603082 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018021944 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.080021523 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.017732986 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054797522 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041805155 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.016162695 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.021339579 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022162073 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059531678 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060906936 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2672e-5 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039797379 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018411221 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063985645 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.016787629 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.019750625 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060548844 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.0834e-5 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.021314601 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026816741 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.018489908 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02582214 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.031597302 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000114516 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071411252 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054079966 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022551967 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.1716e-5 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.010954247 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051797083 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057594287 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051960038 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03548399 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.02845512 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042982753 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013951239 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01888575 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043144846 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07632891 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051959992 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078740609 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064411445 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.6208e-5 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000297673 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065168081 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045605912 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038221664 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046511495 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048647065 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033459969 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080189359 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044726349 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.3874e-5 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024515786 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062229582 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054854137 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026314885 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.070492123 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059360827 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026465213 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021659219 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059954048 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.016884734 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028201267 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051877382 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041903903 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057064357 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05738947 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044101141 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.057899122 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016654448 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018547703 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041565998 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046982345 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086617848 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039772932 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036979924 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039680414 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078417346 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045372059 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042348628 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.027318146 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.046711747 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.00015831 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020040161 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015950056 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048591814 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058948131 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014485478 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033378197 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01872654 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029273255 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.043026661 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0001e-5 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064884854 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053297169 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055469241 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027595653 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044078166 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014758099 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048267604 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062537097 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.03944072 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000490558 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000348435 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035710317 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.057719265 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065679884 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023952624 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04626696 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9273e-5 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087843492 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069842415 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047745691 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068105864 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050794372 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070737014 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.01708627 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109274709 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000116999 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3791e-5 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018219491 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06005491 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025279554 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.02906013 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.0727e-5 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031589863 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023507611 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016624758 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069370708 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033031093 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.00016885 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077471879 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062093464 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060905552 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017453382 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000120427 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045529612 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.3994e-5 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015263699 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033915249 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.014164019 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033641155 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051350238 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046044219 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011213343 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.016123052 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056260884 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01500386 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044220021 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.225170789 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.5545e-5 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028307286 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023138323 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024976297 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.00048466 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042445711 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039615384 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026513642 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040248453 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010728734 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065344488 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010235661 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.016010041 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089658998 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047959314 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053634061 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021510031 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.2367e-5 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086251787 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063381985 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022289463 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 7.0252e-5 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022083116 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01317068 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028872878 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044439548 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028673692 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045074064 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062983125 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075759055 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024862694 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082827753 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054946183 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050183679 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.3655e-5 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.8797e-5 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.4898e-5 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011705895 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023815532 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097240965 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055068167 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012410206 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016562743 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079801865 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.054508304 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065339184 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027849869 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034435148 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.018509396 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01895718 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.036756557 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046681223 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.3638e-5 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014462027 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02565268 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135158609 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015873455 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06212105 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07521547 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000158107 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.036313712 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.032464419 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024296503 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03500956 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039523472 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015442592 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149314897 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04681498 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062874945 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055056409 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040203561 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.020582784 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.2391e-5 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.3632e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029435156 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036619989 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017006803 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062525832 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020322512 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.012064426 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063923813 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054467333 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022548603 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012550778 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014083793 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 0.299060958 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064140126 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047683706 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070358983 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038706106 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6834e-5 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.016790831 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000342677 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000307136 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050753751 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 3.6502e-5 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.023356647 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047218303 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036012073 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017572903 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 3.2263e-5 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049034952 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063730317 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017114998 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079945001 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028183883 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.2083e-5 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026995426 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.018280492 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033202003 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8201e-5 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051023132 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00037267 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070400463 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.373696079 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031068772 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026593896 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015957925 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020374302 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042232689 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.7425e-5 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045966669 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.01505843 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054683375 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038254892 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030925538 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02406385 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061357156 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044805311 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072043597 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.054572445 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07308468 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032379894 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024871229 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062925756 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.022308214 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.022664439 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055427457 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01492172 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046870052 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054076245 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.3455e-5 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132099307 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020083591 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023634351 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047710913 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.026433035 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.058255224 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055890374 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026221105 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.063011231 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.01988064 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062175782 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045247913 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015510418 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062545479 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032138238 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.021961439 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032436531 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.5167e-5 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026150183 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032744824 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058446142 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053454013 seconds)
    (550/608) benchmarking "4d"...
    done (took 0.092918634 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076316318 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000110361 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.018166806 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032200112 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070272237 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01467221 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.060544246 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000126598 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028777926 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045118567 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063373577 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.013506172 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060816904 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053739105 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.038309732 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.027391898 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016391636 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011449764 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057937493 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014918675 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028792169 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030182234 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040819713 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019207779 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014711867 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050799596 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098935673 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014270351 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059109544 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.072211248 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3795e-5 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.1497e-5 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044824701 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053998996 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071652785 seconds)
    (586/608) benchmarking "2d"...
    done (took 0.052326177 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063416244 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074504938 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024321591 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057434906 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011424324 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046629135 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034497408 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.030284297 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.058756158 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.5531e-5 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134899164 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.2721e-5 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027655471 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.656e-5 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 1.4573e-5 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04548531 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042566407 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055610954 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019645904 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053596725 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018058659 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089828325 seconds)
  done (took 29.251222694 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 0.136452374 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.123996015 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.096550938 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 0.032172191 seconds)
  done (took 1.536214033 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056948711 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024822796 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 0.024362785 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024974071 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044675589 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 0.034636977 seconds)
  done (took 1.358096587 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 0.049837873 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 0.038636306 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.095469458 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045173437 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 0.028264138 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026753593 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.044003516 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.090475119 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037089197 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 0.031230687 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.027838145 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.035898643 seconds)
  done (took 1.692574443 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038776443 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.2172e-5 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5951e-5 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 0.043842655 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.336e-5 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 0.032401755 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 0.043930972 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 3.4451e-5 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.6799e-5 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 8.143e-6 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.4662e-5 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 6.989e-6 seconds)
  done (took 1.307180945 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.057918653 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065804565 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 0.060374371 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.058427877 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 0.217301719 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 0.041868853 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 0.040647776 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 0.041169569 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.053252956 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 0.22789501 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 0.03588457 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.041547375 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.026015169 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.062563024 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053797971 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 0.035183729 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 0.089695653 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 0.075343143 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.053307519 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 0.053479362 seconds)
  done (took 2.531981762 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.047562562 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.052838528 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 0.049776844 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052893757 seconds)
  done (took 1.353043657 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.045786643 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040025353 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.03943554 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028819402 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.048418015 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.043490412 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023573229 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.039653447 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.036647086 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.047134202 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.041741856 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.035194568 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.039345321 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.046604565 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 0.028079289 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.04155257 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.042236129 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023097036 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.034938706 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.034881527 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027108777 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024119224 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.023183162 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.029957081 seconds)
  done (took 2.016118724 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.033475849 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 0.083678606 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 1.5085e-5 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 0.04955061 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 0.191726777 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.053001216 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 0.033961898 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 0.07654822 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.002783377 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 0.505681836 seconds)
    (11/17) benchmarking "4467"...
    done (took 0.028602781 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.3627e-5 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 0.004658176 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 0.004069628 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.0826e-5 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 0.002458301 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 0.003328297 seconds)
  done (took 2.222965015 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.263181409 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.138418675 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.31934946 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.496999196 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.113000144 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.204257311 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.303090905 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.191822045 seconds)
  done (took 3.189669403 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.040063909 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.053503422 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.053564674 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.065452784 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.041109681 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.047995583 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.057512324 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.046391755 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032725718 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037590377 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.04550147 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.041737206 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032621311 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 0.031607517 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025628843 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.044120616 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.051365731 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031746861 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.052776015 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.035989499 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020725572 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.04799092 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.052331268 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.049055228 seconds)
  done (took 2.197471233 seconds)
done (took 78.305234689 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 0.040793111 seconds)
    (2/4) benchmarking "identical"...
    done (took 0.02189668 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.3779e-5 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.6934e-5 seconds)
  done (took 1.201987494 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 0.021086205 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024556762 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 0.037889986 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021635703 seconds)
  done (took 1.256541378 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 0.023061573 seconds)
    (2/3) benchmarking "equal"...
    done (took 8.5e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 6.038e-6 seconds)
  done (took 1.178287161 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020611633 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 0.023281717 seconds)
    (2/2) benchmarking "Char"...
    done (took 0.023143257 seconds)
  done (took 1.202084359 seconds)
  (6/7) benchmarking "join"...
  done (took 0.271844794 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 0.135386017 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 8.928e-6 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.975e-6 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 7.718e-6 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000203977 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 0.000565145 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 0.000942392 seconds)
  done (took 1.312130262 seconds)
done (took 7.591682231 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 0.146986618 seconds)
    (2/36) benchmarking "symv"...
    done (took 0.042816211 seconds)
    (3/36) benchmarking "dotu"...
    done (took 0.026320508 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 0.042232765 seconds)
    (5/36) benchmarking "scal!"...
    done (took 0.032662337 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 0.123873019 seconds)
    (7/36) benchmarking "trmv"...
    done (took 0.041844873 seconds)
    (8/36) benchmarking "asum"...
    done (took 0.024113471 seconds)
    (9/36) benchmarking "gemm"...
    done (took 0.12251523 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 0.04113768 seconds)
    (11/36) benchmarking "trsm"...
    done (took 0.108614102 seconds)
    (12/36) benchmarking "ger!"...
    done (took 0.043457511 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.041413148 seconds)
    (14/36) benchmarking "syr!"...
    done (took 0.045129036 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 0.026780151 seconds)
    (16/36) benchmarking "symm"...
    done (took 0.119439452 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.030292268 seconds)
    (18/36) benchmarking "scal"...
    done (took 0.029921949 seconds)
    (19/36) benchmarking "trmm"...
    done (took 0.081504947 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 0.030132584 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 0.083202839 seconds)
    (22/36) benchmarking "dotc"...
    done (took 0.02417433 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 0.09479966 seconds)
    (24/36) benchmarking "syrk"...
    done (took 0.093508575 seconds)
    (25/36) benchmarking "gemv"...
    done (took 0.025335466 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.025502325 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 0.022785868 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 0.025568763 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 0.028805671 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 0.038280572 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 0.090450293 seconds)
    (32/36) benchmarking "her!"...
    done (took 0.048709421 seconds)
    (33/36) benchmarking "herk"...
    done (took 0.251348475 seconds)
    (34/36) benchmarking "dot"...
    done (took 0.023203833 seconds)
    (35/36) benchmarking "herk!"...
    done (took 0.234121591 seconds)
    (36/36) benchmarking "symv!"...
    done (took 0.029683084 seconds)
  done (took 3.493457084 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.170634934 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.144538261 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.290002556 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021425516 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.085142594 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.504704226 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.229355596 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073043082 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020394012 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.050966879 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.05319941 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.033827417 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.064763976 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.024520511 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.115696105 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.080063243 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.02031265 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092584564 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 8.7698e-5 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.050113328 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087557487 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033555541 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.124208363 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 2.443431762 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.000125136 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.125762631 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.16307802 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025710005 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.106878846 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.420880014 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 3.950019998 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 4.2051e-5 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022188295 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.000126201 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.1759e-5 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.043809375 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007755833 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.184962104 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.339151471 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.045955275 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.131043177 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.08429272 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.020707633 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.3382e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084065343 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.109438788 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104408624 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.0015571 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066198035 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.6485e-5 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.014019728 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.085647338 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.089551851 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.118195704 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000830752 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.6103e-5 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.11344442 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 3.71e-5 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001371439 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.064325714 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020750211 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 4.0252e-5 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020075299 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.145555407 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051286144 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.1203e-5 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.802282193 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110358637 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.001370331 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.020434746 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020032822 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.4549e-5 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033410197 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.057853417 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000112677 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025643435 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.2417e-5 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.6828e-5 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.000142545 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.004162029 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 4.9197e-5 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.6575e-5 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.3088e-5 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.00151549 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.000115362 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.141590383 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001707016 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.172169262 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.089761272 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.3419e-5 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000634582 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.211531565 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.7366e-5 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.007532988 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.038587527 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 4.6036e-5 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 4.2412e-5 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.9751e-5 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054702536 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.7805e-5 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.8027e-5 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.064342099 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.2293e-5 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001592748 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000603648 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.001620172 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.3202e-5 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.352762762 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.039928608 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.7288e-5 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.0252e-5 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.184155439 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 4.844e-5 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.007457899 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.0094e-5 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.6136e-5 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.002477988 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.931561725 seconds)
  done (took 20.11921116 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.616524994 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.070612518 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.324859888 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.25537239 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.576893399 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.046197599 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.155777598 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.293694393 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.032527728 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022811304 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.03769924 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003958214 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.351679847 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.173583921 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.423578826 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.786964723 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022506187 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.1513645 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.246252157 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.320650307 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.033047364 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 3.953e-5 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.011868711 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.001481196 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.008413046 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.601541277 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.00057919 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000221854 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.00365796 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003575447 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.046543791 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.000157179 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.089390026 seconds)
  done (took 13.294941319 seconds)
done (took 38.684188465 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.246780206 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.13885925 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.143211426 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.309719919 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038021682 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.021846832 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.078842153 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022182811 seconds)
  done (took 4.176980368 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021108214 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044876722 seconds)
  done (took 1.263623619 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021900584 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 0.022759364 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024220434 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022339647 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023496617 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025729481 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.02281636 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023806739 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020590188 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022936899 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02176899 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024076567 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027320451 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 0.0227868 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023330611 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 0.026056364 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.023638963 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 0.023130077 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 0.022142134 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020719792 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.022437627 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023664304 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.0270166 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024865917 seconds)
  done (took 1.756592856 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.072088178 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022338323 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.021194688 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.023524073 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02326278 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02359458 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.022452668 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.02152032 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021543248 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021133987 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021334433 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021076767 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.022328523 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02119264 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021488939 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.022729624 seconds)
  done (took 1.63286546 seconds)
done (took 10.016281499 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.021641287 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021770876 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.039434354 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022868155 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.0669151 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.6441e-5 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.02934495 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026976039 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003475138 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02738827 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011749183 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.037576359 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.04054462 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.025369064 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.031094683 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.013513946 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024851516 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.029524495 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.036513609 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.00355376 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.028104899 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.029911331 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.039881119 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005987879 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.007921735 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008670979 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.005068503 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.013736013 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 3.8908e-5 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005642613 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027274433 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020964009 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.005159078 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024967412 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.005142459 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.01181547 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031444665 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012195145 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.012002272 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005642094 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 3.1243e-5 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.013341348 seconds)
  done (took 2.014333534 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028091312 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.028606617 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.030220499 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024318072 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.030890235 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030479975 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022801952 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028006682 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.02761848 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025349392 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023256022 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026801317 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029103682 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029345682 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027194533 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028619769 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024671728 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022413459 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031980647 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028934478 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026904472 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028728752 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028822753 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028663461 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024807606 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.026686918 seconds)
  done (took 1.910218672 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.038127397 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.048877079 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.065385448 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03185848 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.036318891 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.041020165 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044947294 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.03201467 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032375027 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.045166935 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.047257986 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032953059 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.033991822 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.052617736 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.038440901 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053521723 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.056903376 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042008082 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.041379805 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.049831464 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.036721676 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.044010351 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.03931002 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.036647898 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.038643623 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.035860651 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.036002492 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037555451 seconds)
  done (took 2.365846425 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019715919 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.058665383 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.104188588 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05543732 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031780497 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023311542 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027294501 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027535138 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.060999952 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10058231 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033894858 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.062535084 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.020816827 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.058005849 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.072807445 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.034205657 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026941741 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021630233 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.021296079 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020762066 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.02744146 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028716415 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020792091 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020566449 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047282034 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021484959 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020313102 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.02156601 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026171389 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04677532 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026497612 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034104271 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027432012 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02799953 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.06767908 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.030518798 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.019612879 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.02077198 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032581946 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023288313 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 3.6784e-5 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026266462 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03807935 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.035937839 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031768382 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.06055636 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 4.1907e-5 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.081165967 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027274263 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.029105369 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.025430734 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.12659006 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.019911268 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019009104 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028636998 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041709813 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031782574 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.026884866 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049187586 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036165904 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.137376215 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020243501 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02995256 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025706485 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039676862 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035934924 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029477925 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035820474 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.058116677 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.8404e-5 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.040601219 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029135111 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034195007 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.9786e-5 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031023978 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.025493094 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.6428e-5 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033993641 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.025861119 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.026827601 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021307196 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041331486 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.03333302 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029610784 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.025532025 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.040262496 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.032838969 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027989187 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026402006 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039825819 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.045959464 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038692052 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.02842638 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.031256456 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019674826 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.044679641 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030844371 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020782557 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025550342 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029780158 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.037696024 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022073007 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030750296 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024905251 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.046410813 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.5487e-5 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021547922 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.019457921 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054683487 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.7711e-5 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022237048 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.026240952 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.041070148 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026114653 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 6.8594e-5 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.0358285 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021525342 seconds)
  done (took 5.132756247 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029770283 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.034073942 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024693346 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026667101 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028057938 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018926771 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021646293 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041532057 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.020228794 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.029796694 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.03193409 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040416201 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.026163564 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026525628 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.020529685 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.021047447 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022771352 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023072139 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019149614 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.2327e-5 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025159486 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.1056e-5 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021168267 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024885067 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024468923 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.4816e-5 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022013025 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.035591199 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.029310089 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027560633 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.039776233 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.8873e-5 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.029181229 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.032989882 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027578012 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038229794 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.022212288 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.03570794 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021240209 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.9987e-5 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019231269 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.027767322 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.03204792 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038929287 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.027877095 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022031809 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.02437972 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.022060088 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 3.3283e-5 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036747492 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030829088 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.9937e-5 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.9132e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.02125555 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02580944 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.041430007 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.022586749 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.039071993 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021742562 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.5492e-5 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.022349055 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038140112 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.033155297 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 3.5946e-5 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.0283e-5 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025969341 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.3391e-5 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.026307057 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 4.5541e-5 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.8991e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.020608074 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020555972 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037383084 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.038000758 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.032487973 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 3.9616e-5 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.031513818 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.021173285 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027192669 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.029532741 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020218052 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.9946e-5 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.021023504 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.7757e-5 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.5904e-5 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.955e-5 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.2785e-5 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.023591327 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.02815085 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.8504e-5 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019561838 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.9679e-5 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025482736 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.3289e-5 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022109564 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.022604727 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.5796e-5 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 1.7829e-5 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.1855e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026621522 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.3081e-5 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.022898251 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.023392149 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.7964e-5 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000143788 seconds)
  done (took 3.29288554 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.05104981 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.031326947 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.131539613 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.090351724 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043213081 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.088579078 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.082404042 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.092269088 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.052068378 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.088135412 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.057339525 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.088667224 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.061366199 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.025043468 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022058223 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.045334418 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.044381192 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.096957448 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022961366 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071751374 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.042025422 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.035571482 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.023114691 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.024382685 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021828579 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.026739088 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.073408298 seconds)
  done (took 2.741357872 seconds)
done (took 18.650526459 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 14.905412661 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.242547778 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.259051949 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.413988838 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.43401825 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.831917032 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.086040844 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.611940669 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.212839799 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.388167471 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 10.007868283 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.570937811 seconds)
  done (took 40.17749748 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 2.131369862 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.712906076 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.103790517 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.057842928 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.156446244 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.101454183 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.04594421 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.386010184 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.040936894 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.145499343 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.94948617 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.395236612 seconds)
  done (took 10.033907958 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 0.10126283 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.235304959 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 0.251454514 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.399846719 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.293568416 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.847440133 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 0.078162125 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 0.589529652 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 0.103929309 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 0.370341228 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.093214427 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.573853449 seconds)
  done (took 23.966512341 seconds)
done (took 75.399742749 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027973879 seconds)
done (took 2.494821611 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.615649088 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 2.878561212 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.589375561 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.455213032 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.583001088 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.486053031 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.492550828 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.585206734 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.584220904 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.470227674 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.488970402 seconds)
  done (took 30.539287861 seconds)
  (2/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.346157882 seconds)
    (2/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.349335501 seconds)
    (3/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.358945517 seconds)
    (4/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.442761446 seconds)
    (5/41) benchmarking ("BitVector", "10-90")...
    done (took 5.036856972 seconds)
    (6/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.35827093 seconds)
    (7/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.364707177 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.370137138 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.52701921 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.434251735 seconds)
    (11/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.363369589 seconds)
    (12/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.408643743 seconds)
    (13/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.471865937 seconds)
    (14/41) benchmarking ("BitVector", "50-50")...
    done (took 4.085208679 seconds)
    (15/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.435394017 seconds)
    (16/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.427908074 seconds)
    (17/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.46248982 seconds)
    (18/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.350193627 seconds)
    (19/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.4102716 seconds)
    (20/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.434768754 seconds)
    (21/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.412148527 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.436027382 seconds)
    (23/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.375894659 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.47330354 seconds)
    (25/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.425029729 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.442138183 seconds)
    (27/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.437436259 seconds)
    (28/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.357085934 seconds)
    (29/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.419966541 seconds)
    (30/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.485377725 seconds)
    (31/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.484917816 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.366765489 seconds)
    (33/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.420420501 seconds)
    (34/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.436030207 seconds)
    (35/41) benchmarking ("BitVector", "90-10")...
    done (took 2.752937209 seconds)
    (36/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.709628783 seconds)
    (37/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.443796853 seconds)
    (38/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.414878036 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.39937863 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.380203772 seconds)
    (41/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.372464557 seconds)
  done (took 106.197888673 seconds)
  (3/3) benchmarking "findprev"...
    (1/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.058826782 seconds)
    (2/11) benchmarking ("BitVector", "10-90")...
    done (took 3.23699471 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.580376354 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.528416463 seconds)
    (5/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.589245997 seconds)
    (6/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.52493768 seconds)
    (7/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.49188852 seconds)
    (8/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.585582747 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.597290442 seconds)
    (10/11) benchmarking ("BitVector", "90-10")...
    done (took 2.610921288 seconds)
    (11/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.494980313 seconds)
  done (took 31.625601777 seconds)
done (took 170.753642323 seconds)
(2/23) benchmarking "problem"...
  (1/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.320541858 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.314452812 seconds)
  done (took 16.949281436 seconds)
  (2/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.376830664 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.349593701 seconds)
  done (took 17.046572028 seconds)
  (3/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.334679985 seconds)
  done (took 9.651756648 seconds)
  (4/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.616333166 seconds)
  done (took 9.932060608 seconds)
  (5/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.432339866 seconds)
  done (took 9.748623921 seconds)
  (6/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.698854151 seconds)
  done (took 10.013265647 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.600491723 seconds)
  done (took 9.917661339 seconds)
  (8/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.350927763 seconds)
    (2/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.329046807 seconds)
    (3/4) benchmarking "laplace_iter_devec"...
    done (took 7.330212832 seconds)
    (4/4) benchmarking "laplace_iter_sub"...
    done (took 7.360572895 seconds)
  done (took 31.691636155 seconds)
  (9/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.218114676 seconds)
  done (took 11.535997254 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.315028816 seconds)
  done (took 9.633051884 seconds)
  (11/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.596279354 seconds)
  done (took 9.925976277 seconds)
  (12/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.31867437 seconds)
  done (took 9.637432152 seconds)
  (13/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.72516891 seconds)
  done (took 10.044203142 seconds)
  (14/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.643361405 seconds)
  done (took 9.960433241 seconds)
done (took 178.00090813 seconds)
(3/23) benchmarking "io"...
  (1/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.886306956 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 8.012777075 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.979807422 seconds)
  done (took 26.196425005 seconds)
  (2/4) benchmarking "read"...
    (1/2) benchmarking "read"...
    done (took 2.864772617 seconds)
    (2/2) benchmarking "readstring"...
    done (took 2.810153545 seconds)
  done (took 8.019650361 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.324350299 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.810077849 seconds)
    (3/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.730696441 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.321849196 seconds)
  done (took 27.508124972 seconds)
  (4/4) benchmarking "skipchars"...
  done (took 7.462945737 seconds)
done (took 71.505432313 seconds)
(4/23) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.367362858 seconds)
  (2/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.341581304 seconds)
  (3/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.327576759 seconds)
  (4/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.380831253 seconds)
  (5/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.344479538 seconds)
  (6/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.34712668 seconds)
  (7/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.339901935 seconds)
  (8/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.335655871 seconds)
  (9/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.339226888 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.331293284 seconds)
  (11/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.349049188 seconds)
  (12/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.338582767 seconds)
  (13/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.356289148 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.341929767 seconds)
  (15/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.356061872 seconds)
  (16/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.384219984 seconds)
  (17/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.542768703 seconds)
  (18/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.58823331 seconds)
  (19/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.523259806 seconds)
  (20/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.332387967 seconds)
  (21/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.348284933 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.386637312 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.440131314 seconds)
  (24/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.333688352 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.332596309 seconds)
  (26/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.334786445 seconds)
  (27/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.33571272 seconds)
  (28/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.33994419 seconds)
  (29/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.347012353 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.332324406 seconds)
  (31/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.338017823 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.343113231 seconds)
  (33/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.371810128 seconds)
  (34/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.336335857 seconds)
  (35/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.343217153 seconds)
  (36/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.329423075 seconds)
  (37/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.334832835 seconds)
  (38/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.359067928 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.362451882 seconds)
  (40/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.319668969 seconds)
  (41/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.335537398 seconds)
  (42/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.339315122 seconds)
  (43/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.33322881 seconds)
  (44/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.336013296 seconds)
  (45/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.334690887 seconds)
  (46/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.334204983 seconds)
  (47/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.336390165 seconds)
  (48/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.340930308 seconds)
  (49/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.348674676 seconds)
  (50/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.339463367 seconds)
  (51/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.343627689 seconds)
  (52/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.390873422 seconds)
  (53/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.330038295 seconds)
  (54/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.355290781 seconds)
  (55/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.329165423 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.331397908 seconds)
  (57/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.334344873 seconds)
  (58/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.332106562 seconds)
  (59/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.340558042 seconds)
  (60/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.334036888 seconds)
  (61/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.338786435 seconds)
  (62/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.467785189 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.383867715 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.362399058 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.332926963 seconds)
  (66/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.351806083 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.350694186 seconds)
  (68/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.337620715 seconds)
  (69/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.342842972 seconds)
  (70/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.453261806 seconds)
  (71/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.376960217 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.343386977 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.34089009 seconds)
  (74/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.344277 seconds)
  (75/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.337303425 seconds)
  (76/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.344822376 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.339575218 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.368032086 seconds)
  (79/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.329344931 seconds)
  (80/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.340914357 seconds)
  (81/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.348060344 seconds)
  (82/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.369522518 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.452385331 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.344234075 seconds)
  (85/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.333619163 seconds)
  (86/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.32599414 seconds)
  (87/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3576775 seconds)
  (88/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.352624234 seconds)
  (89/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.337705783 seconds)
  (90/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.361816238 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.563610327 seconds)
  (92/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.442548706 seconds)
  (93/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.352288238 seconds)
  (94/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.358914097 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.370966663 seconds)
  (96/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.319996663 seconds)
  (97/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.329733437 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.330733073 seconds)
  (99/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.369421954 seconds)
  (100/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.330602713 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.352062451 seconds)
  (102/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.339104013 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.362462486 seconds)
  (104/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.328632165 seconds)
  (105/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.326911596 seconds)
  (106/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.325891453 seconds)
  (107/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.348793685 seconds)
  (108/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.332922234 seconds)
  (109/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.458056439 seconds)
  (110/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.345388203 seconds)
  (111/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.359471094 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.341584258 seconds)
  (113/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.351382465 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.339165452 seconds)
  (115/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.3331506 seconds)
  (116/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.367577354 seconds)
  (117/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.347283024 seconds)
  (118/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.354032342 seconds)
  (119/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.34531143 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.367896843 seconds)
  (121/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.3410899 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.37401932 seconds)
  (123/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.346106635 seconds)
  (124/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.369092174 seconds)
  (125/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.346611022 seconds)
  (126/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.342637623 seconds)
  (127/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.345388976 seconds)
  (128/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.379644785 seconds)
  (129/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.349369246 seconds)
  (130/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.336623552 seconds)
  (131/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.35272926 seconds)
  (132/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.340579467 seconds)
  (133/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.363439871 seconds)
  (134/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.365403271 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.362555988 seconds)
  (136/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.344612872 seconds)
  (137/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.376887064 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.357634662 seconds)
  (139/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.36386717 seconds)
  (140/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.362271283 seconds)
  (141/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.35063765 seconds)
  (142/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.419889791 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.480848653 seconds)
  (144/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.36200709 seconds)
  (145/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.380992945 seconds)
  (146/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.346359388 seconds)
  (147/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.499045892 seconds)
  (148/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.366723638 seconds)
  (149/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.350571743 seconds)
  (150/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.347908042 seconds)
  (151/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.343238409 seconds)
  (152/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.363516518 seconds)
  (153/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.341438669 seconds)
  (154/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.351581304 seconds)
  (155/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.350069552 seconds)
  (156/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.337375718 seconds)
  (157/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.335058863 seconds)
  (158/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.35046461 seconds)
  (159/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.3317046 seconds)
  (160/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.333619021 seconds)
  (161/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.326139457 seconds)
  (162/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.331600506 seconds)
  (163/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.366683341 seconds)
  (164/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.344891114 seconds)
  (165/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.492234332 seconds)
  (166/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.337902566 seconds)
  (167/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.364625652 seconds)
  (168/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.363234818 seconds)
  (169/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.349696657 seconds)
  (170/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.333429362 seconds)
  (171/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.373018681 seconds)
  (172/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.33975876 seconds)
  (173/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.349660859 seconds)
  (174/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.359826371 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.345314786 seconds)
  (176/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.340327852 seconds)
  (177/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.3421205 seconds)
  (178/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.360013544 seconds)
  (179/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.344579297 seconds)
  (180/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.351201412 seconds)
  (181/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.332748527 seconds)
  (182/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.335850138 seconds)
  (183/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.337623954 seconds)
  (184/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.337651487 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.350308343 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.331548553 seconds)
  (187/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.330742879 seconds)
  (188/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.343251913 seconds)
  (189/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.359914176 seconds)
  (190/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.334722602 seconds)
  (191/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.334700262 seconds)
  (192/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.556101847 seconds)
  (193/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.333316225 seconds)
  (194/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.345138342 seconds)
  (195/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.355442942 seconds)
  (196/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.364623934 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.343651042 seconds)
  (198/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.328908742 seconds)
  (199/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.355488937 seconds)
  (200/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.34156817 seconds)
  (201/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.356755686 seconds)
  (202/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.371582366 seconds)
  (203/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.340250366 seconds)
  (204/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.331735979 seconds)
  (205/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.343430446 seconds)
  (206/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.375003875 seconds)
  (207/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.374420949 seconds)
  (208/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.383199322 seconds)
  (209/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.35346351 seconds)
  (210/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.347255254 seconds)
  (211/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.437537218 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.340446489 seconds)
  (213/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.334564688 seconds)
  (214/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.348372849 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.376646986 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.347814899 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.346561651 seconds)
  (218/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.343653748 seconds)
  (219/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.336742123 seconds)
  (220/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.341895422 seconds)
  (221/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.336279435 seconds)
  (222/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.357495698 seconds)
  (223/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.341978763 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.379023326 seconds)
  (225/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.341699661 seconds)
  (226/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.375788742 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.344946235 seconds)
  (228/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.363697036 seconds)
  (229/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.340024131 seconds)
  (230/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.344532306 seconds)
  (231/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.361306069 seconds)
  (232/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.333624742 seconds)
  (233/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.344692798 seconds)
  (234/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.346072869 seconds)
  (235/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.348526339 seconds)
  (236/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.338878294 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.338824774 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.373608657 seconds)
  (239/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.336062372 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.335195745 seconds)
  (241/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.358659199 seconds)
  (242/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.35184387 seconds)
  (243/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.339274137 seconds)
  (244/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.339881239 seconds)
  (245/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.346222754 seconds)
  (246/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.361314313 seconds)
  (247/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.346686937 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.360791058 seconds)
  (249/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.379825155 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.351859047 seconds)
  (251/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.556878527 seconds)
  (252/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.342682391 seconds)
  (253/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.342140719 seconds)
  (254/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.496254917 seconds)
  (255/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.364177213 seconds)
  (256/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.368421335 seconds)
  (257/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.369734563 seconds)
  (258/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.336856391 seconds)
  (259/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.330231601 seconds)
  (260/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.356487249 seconds)
  (261/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.342787035 seconds)
  (262/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.348814423 seconds)
  (263/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.332740886 seconds)
  (264/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.340472805 seconds)
  (265/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.342827832 seconds)
  (266/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.328299607 seconds)
  (267/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.328890137 seconds)
  (268/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.335330252 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.378273213 seconds)
  (270/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.388389165 seconds)
  (271/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.335968936 seconds)
  (272/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.353351819 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.33839931 seconds)
  (274/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.335534672 seconds)
  (275/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.343567254 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.350705525 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.373575448 seconds)
  (278/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.342226933 seconds)
  (279/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.376640321 seconds)
  (280/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.561291165 seconds)
  (281/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.358807671 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.376721857 seconds)
  (283/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.348465758 seconds)
  (284/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.340379545 seconds)
  (285/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.345186396 seconds)
  (286/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.333573633 seconds)
  (287/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.346581486 seconds)
  (288/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.444858761 seconds)
  (289/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.355696474 seconds)
  (290/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.478870035 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.370021329 seconds)
  (292/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.342879243 seconds)
  (293/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.330680307 seconds)
  (294/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.327856727 seconds)
  (295/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.348106473 seconds)
  (296/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.341312063 seconds)
  (297/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.340645106 seconds)
  (298/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.333161686 seconds)
  (299/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.347970687 seconds)
  (300/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.360630079 seconds)
  (301/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.338661046 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.337675399 seconds)
  (303/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.395180294 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.34927246 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.34507307 seconds)
  (306/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.329102759 seconds)
  (307/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.369214797 seconds)
  (308/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.348245632 seconds)
  (309/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.329055847 seconds)
  (310/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.362094322 seconds)
  (311/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.385098054 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.370146785 seconds)
  (313/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.342416617 seconds)
  (314/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.340768874 seconds)
  (315/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.328116957 seconds)
  (316/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.335997631 seconds)
  (317/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.334972904 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.350412583 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.35318046 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.340985727 seconds)
  (321/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.336443263 seconds)
  (322/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.342884973 seconds)
  (323/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.346306361 seconds)
  (324/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.342146338 seconds)
  (325/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.332958677 seconds)
  (326/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.373338356 seconds)
  (327/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.353332744 seconds)
  (328/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.379040668 seconds)
  (329/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.360065109 seconds)
  (330/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.333713174 seconds)
  (331/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.341714895 seconds)
  (332/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.343145956 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.343639918 seconds)
  (334/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.336706519 seconds)
  (335/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.325793558 seconds)
  (336/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.378497694 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.345947147 seconds)
  (338/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.388498603 seconds)
  (339/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.343977116 seconds)
  (340/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.341014244 seconds)
  (341/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.347613603 seconds)
  (342/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.332304255 seconds)
  (343/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.3308319 seconds)
  (344/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.351254564 seconds)
  (345/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.334279353 seconds)
  (346/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.356373093 seconds)
  (347/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.338014558 seconds)
  (348/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.338334284 seconds)
  (349/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.35336896 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.329788476 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.341945466 seconds)
  (352/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.329039193 seconds)
  (353/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.374842627 seconds)
  (354/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.337774932 seconds)
  (355/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.380604264 seconds)
  (356/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.337309678 seconds)
  (357/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.35406016 seconds)
  (358/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.328246878 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.346163484 seconds)
  (360/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.351281943 seconds)
  (361/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.333632813 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.346393478 seconds)
  (363/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.370526687 seconds)
  (364/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.341848274 seconds)
  (365/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.341106787 seconds)
  (366/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.494994461 seconds)
  (367/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.332866907 seconds)
  (368/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.331228244 seconds)
  (369/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.348986869 seconds)
  (370/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.358908479 seconds)
  (371/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.328134172 seconds)
  (372/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.343831494 seconds)
  (373/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.335146717 seconds)
  (374/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.350469442 seconds)
  (375/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.35969707 seconds)
  (376/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.341435005 seconds)
  (377/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.356469346 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.356516145 seconds)
  (379/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.342078859 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.335011565 seconds)
  (381/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.345931657 seconds)
  (382/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.352847804 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.341149043 seconds)
  (384/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.332012061 seconds)
  (385/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.346143221 seconds)
  (386/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.332441361 seconds)
  (387/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.345686813 seconds)
  (388/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.327832932 seconds)
  (389/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.349778612 seconds)
  (390/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.349861322 seconds)
  (391/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.331873083 seconds)
  (392/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.332788502 seconds)
  (393/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.347684603 seconds)
  (394/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.389356734 seconds)
  (395/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.338174486 seconds)
  (396/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.335476916 seconds)
  (397/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.360450286 seconds)
  (398/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.350536155 seconds)
  (399/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.355574612 seconds)
  (400/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.361203111 seconds)
  (401/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.338067118 seconds)
  (402/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.339418522 seconds)
  (403/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.338318747 seconds)
  (404/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.353258559 seconds)
  (405/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.337842741 seconds)
  (406/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.337304138 seconds)
  (407/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.33868044 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.345700093 seconds)
  (409/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.337192012 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.351917077 seconds)
  (411/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.342021765 seconds)
  (412/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.345549905 seconds)
  (413/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.346282564 seconds)
  (414/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.346176819 seconds)
  (415/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.368724493 seconds)
  (416/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.340210711 seconds)
  (417/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.348060125 seconds)
  (418/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.365844982 seconds)
  (419/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.339375495 seconds)
  (420/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.377079796 seconds)
  (421/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.343303687 seconds)
  (422/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.348514031 seconds)
  (423/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.344847733 seconds)
  (424/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.358452621 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.347969373 seconds)
  (426/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.345989023 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.357184648 seconds)
  (428/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.384057728 seconds)
  (429/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.364511725 seconds)
  (430/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.345579241 seconds)
  (431/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.364305303 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.342334505 seconds)
  (433/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.328646223 seconds)
  (434/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.358743794 seconds)
  (435/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.347961813 seconds)
  (436/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.332416994 seconds)
  (437/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.366708806 seconds)
  (438/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.345760283 seconds)
  (439/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.348653028 seconds)
  (440/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.349549293 seconds)
  (441/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.350329364 seconds)
  (442/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.359008402 seconds)
  (443/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.350775027 seconds)
  (444/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.348809214 seconds)
  (445/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.341769215 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.344761829 seconds)
  (447/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.362742084 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.343579443 seconds)
  (449/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.354842074 seconds)
  (450/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.349767095 seconds)
  (451/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.361796354 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.34174436 seconds)
  (453/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.341687259 seconds)
  (454/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.339150865 seconds)
  (455/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.351861235 seconds)
  (456/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.363292994 seconds)
  (457/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.347186299 seconds)
  (458/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.342755906 seconds)
  (459/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.335283288 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.335047422 seconds)
  (461/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.360575945 seconds)
  (462/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.34115149 seconds)
  (463/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.346342898 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.339440706 seconds)
  (465/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.350388905 seconds)
  (466/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.341466345 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.347387371 seconds)
  (468/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.336167814 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.349906701 seconds)
  (470/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.329559433 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.35560596 seconds)
  (472/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.338260266 seconds)
  (473/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.351093315 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.355475398 seconds)
  (475/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.338299031 seconds)
  (476/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.370480123 seconds)
  (477/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.340005125 seconds)
  (478/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.340415568 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.417800267 seconds)
  (480/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.341751595 seconds)
  (481/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.340674765 seconds)
  (482/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.334952391 seconds)
  (483/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.343923521 seconds)
  (484/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.33328243 seconds)
  (485/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.352917803 seconds)
  (486/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.336699075 seconds)
  (487/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.330627663 seconds)
  (488/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.337708823 seconds)
  (489/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.343031759 seconds)
  (490/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.33649699 seconds)
  (491/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.333517264 seconds)
  (492/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.340217075 seconds)
  (493/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.334323001 seconds)
  (494/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.335438863 seconds)
  (495/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.346484311 seconds)
  (496/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.334192462 seconds)
  (497/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.329025747 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.337613187 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.325144953 seconds)
  (500/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.35087965 seconds)
  (501/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.349822723 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.348762936 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.352791683 seconds)
  (504/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.350591874 seconds)
  (505/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.335062097 seconds)
  (506/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.444678545 seconds)
  (507/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.349506524 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.340983462 seconds)
  (509/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.337512255 seconds)
  (510/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.351496102 seconds)
  (511/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.336789519 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.350643786 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.361857565 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.335965346 seconds)
  (515/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.342002635 seconds)
  (516/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.344653735 seconds)
  (517/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.334354736 seconds)
  (518/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.350795603 seconds)
  (519/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.339628579 seconds)
  (520/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.357637913 seconds)
  (521/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.339059169 seconds)
  (522/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.329050823 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.353278465 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.355997571 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.366058788 seconds)
  (526/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.348911648 seconds)
  (527/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.335302662 seconds)
  (528/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.345744244 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.396935652 seconds)
  (530/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.346885534 seconds)
  (531/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.369494485 seconds)
  (532/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.327080811 seconds)
  (533/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.339201302 seconds)
  (534/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.339798882 seconds)
  (535/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.343870435 seconds)
  (536/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.348381824 seconds)
  (537/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.362148675 seconds)
  (538/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.34449021 seconds)
  (539/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.501588841 seconds)
  (540/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.359073746 seconds)
  (541/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.338766136 seconds)
  (542/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.354096739 seconds)
  (543/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.375127608 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.368086711 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.348219362 seconds)
  (546/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.356162992 seconds)
  (547/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.371886794 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.349208528 seconds)
  (549/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.350699187 seconds)
  (550/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.42983067 seconds)
  (551/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.337196418 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.357568999 seconds)
  (553/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.342945941 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.341269757 seconds)
  (555/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.352701369 seconds)
  (556/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.34487897 seconds)
  (557/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.387603934 seconds)
  (558/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.351011022 seconds)
  (559/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.362538104 seconds)
  (560/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.350177266 seconds)
  (561/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.369465441 seconds)
  (562/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.344377615 seconds)
  (563/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.356051626 seconds)
  (564/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.338833392 seconds)
  (565/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.363657379 seconds)
  (566/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.350858777 seconds)
  (567/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.357848651 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.350851858 seconds)
  (569/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.372245003 seconds)
  (570/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.364166621 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.371767208 seconds)
  (572/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.35008062 seconds)
  (573/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.351386511 seconds)
  (574/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.351612198 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.377960159 seconds)
  (576/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.360842402 seconds)
  (577/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.365382959 seconds)
  (578/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.345267403 seconds)
  (579/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.356250117 seconds)
  (580/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.346521102 seconds)
  (581/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.351077068 seconds)
  (582/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.375918291 seconds)
  (583/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.346230697 seconds)
  (584/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.359443922 seconds)
  (585/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.373032017 seconds)
  (586/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.375841847 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.395491824 seconds)
  (588/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.352738523 seconds)
  (589/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.3704058 seconds)
  (590/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.365957795 seconds)
  (591/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.378344509 seconds)
  (592/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.35072965 seconds)
  (593/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.356373476 seconds)
  (594/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.357651518 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.396743027 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.442913053 seconds)
  (597/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.350950393 seconds)
  (598/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.365434717 seconds)
  (599/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.357176551 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.354100771 seconds)
  (601/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.364097424 seconds)
  (602/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.353761991 seconds)
  (603/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.351615729 seconds)
  (604/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.359065594 seconds)
  (605/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.370888688 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.351766558 seconds)
  (607/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.373106941 seconds)
  (608/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.348385274 seconds)
  (609/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.345700327 seconds)
  (610/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.382648502 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.375571286 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.350720583 seconds)
  (613/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.519319932 seconds)
  (614/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.354790412 seconds)
  (615/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.346595374 seconds)
  (616/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.328788659 seconds)
  (617/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.438823103 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.360384031 seconds)
  (619/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.3376906 seconds)
  (620/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.35511124 seconds)
  (621/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.349267281 seconds)
  (622/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.393493202 seconds)
  (623/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.330125804 seconds)
  (624/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.355034986 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.351410406 seconds)
  (626/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.349869476 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.361645687 seconds)
  (628/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.339643369 seconds)
  (629/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.345504402 seconds)
  (630/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.335310835 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.339489681 seconds)
  (632/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.344801675 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.344930188 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.346944534 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.341663435 seconds)
  (636/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.348292189 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.342254999 seconds)
  (638/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.331394811 seconds)
  (639/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.34513115 seconds)
  (640/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.45736 seconds)
  (641/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.332354662 seconds)
  (642/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.355673588 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.359660768 seconds)
  (644/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.347539977 seconds)
  (645/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.334510266 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.347786831 seconds)
  (647/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.348440379 seconds)
  (648/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.366014773 seconds)
  (649/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.342601666 seconds)
  (650/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.366915966 seconds)
  (651/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.346420288 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.351516673 seconds)
  (653/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.331099127 seconds)
  (654/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.350911857 seconds)
  (655/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.350988654 seconds)
  (656/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.34145916 seconds)
  (657/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.372351604 seconds)
  (658/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.343908139 seconds)
  (659/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.385756003 seconds)
  (660/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.339477301 seconds)
  (661/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.385594615 seconds)
  (662/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.333497888 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.371015008 seconds)
  (664/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.340105337 seconds)
  (665/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.339259554 seconds)
  (666/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.324732625 seconds)
  (667/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.344197369 seconds)
  (668/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.342329595 seconds)
  (669/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.336664707 seconds)
  (670/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.347599942 seconds)
  (671/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.343659052 seconds)
  (672/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.369244647 seconds)
  (673/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.348522036 seconds)
  (674/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.331584101 seconds)
  (675/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.37313319 seconds)
  (676/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.337463641 seconds)
  (677/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.379813675 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.368121046 seconds)
  (679/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.341110049 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.334537979 seconds)
done (took 1603.552873301 seconds)
(5/23) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.537050047 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.517421628 seconds)
  done (took 17.373219325 seconds)
  (2/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.987684896 seconds)
    (2/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.331577821 seconds)
    (3/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.022403712 seconds)
    (4/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.455354038 seconds)
    (5/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.458388522 seconds)
    (6/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.541597498 seconds)
    (7/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.998432775 seconds)
    (8/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.353551413 seconds)
    (9/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.33323855 seconds)
    (10/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.91428013 seconds)
    (11/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.338465688 seconds)
    (12/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.613567905 seconds)
    (13/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.39987509 seconds)
    (14/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.346142464 seconds)
    (15/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.551847673 seconds)
    (16/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.469011313 seconds)
    (17/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.326278746 seconds)
    (18/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 3.00544155 seconds)
    (19/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.964216405 seconds)
    (20/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.817254999 seconds)
    (21/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.348222311 seconds)
    (22/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.319259455 seconds)
    (23/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.319551638 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.344135017 seconds)
    (25/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.319815327 seconds)
    (26/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.762276982 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.086980743 seconds)
    (28/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.339739109 seconds)
    (29/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.55613373 seconds)
    (30/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.33676634 seconds)
    (31/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.57088343 seconds)
    (32/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.888270968 seconds)
    (33/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.327406117 seconds)
    (34/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.328175075 seconds)
    (35/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.633390495 seconds)
    (36/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.337841956 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.328764975 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.329598904 seconds)
    (39/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.318260705 seconds)
    (40/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.120909857 seconds)
    (41/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.867290691 seconds)
    (42/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.338744416 seconds)
    (43/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.889336615 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 3.1276486 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.819833964 seconds)
    (46/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.827234027 seconds)
    (47/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.082290551 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.240672642 seconds)
    (49/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 3.058890546 seconds)
    (50/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.881859863 seconds)
    (51/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.761047872 seconds)
    (52/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.79790235 seconds)
    (53/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.345921415 seconds)
    (54/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.316973446 seconds)
    (55/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.335295466 seconds)
    (56/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.318563601 seconds)
    (57/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.21320129 seconds)
    (58/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.350238633 seconds)
    (59/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.345712354 seconds)
    (60/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.991328361 seconds)
    (61/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.319899336 seconds)
    (62/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.299996319 seconds)
    (63/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.32721562 seconds)
    (64/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.695542478 seconds)
    (65/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.328600736 seconds)
    (66/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.330476985 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.727865573 seconds)
    (68/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.368492867 seconds)
    (69/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.338724321 seconds)
    (70/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.605749162 seconds)
    (71/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.323455382 seconds)
    (72/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.886425724 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.319528456 seconds)
    (74/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.319385794 seconds)
    (75/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.65550733 seconds)
    (76/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.357980099 seconds)
    (77/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.33087007 seconds)
    (78/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.120253093 seconds)
    (79/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.365777237 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.717211192 seconds)
    (81/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.182791367 seconds)
    (82/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 6.001170236 seconds)
    (83/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.769590158 seconds)
    (84/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.338646135 seconds)
    (85/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.335789964 seconds)
    (86/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.913156701 seconds)
    (87/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.344930184 seconds)
    (88/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.778361959 seconds)
    (89/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.089149341 seconds)
    (90/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.343433297 seconds)
    (91/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.338676294 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.617116471 seconds)
    (93/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.039048489 seconds)
    (94/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.103197527 seconds)
    (95/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.318630903 seconds)
    (96/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.331066947 seconds)
    (97/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.90534226 seconds)
    (98/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.942322838 seconds)
    (99/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.848328984 seconds)
    (100/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.790193913 seconds)
    (101/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.33259646 seconds)
    (102/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.931300624 seconds)
    (103/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.343648817 seconds)
    (104/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.886182957 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.52225429 seconds)
    (106/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.197714175 seconds)
    (107/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.341196883 seconds)
    (108/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.861727796 seconds)
    (109/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.446575112 seconds)
    (110/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.922465183 seconds)
    (111/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.341022412 seconds)
    (112/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.325567966 seconds)
    (113/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.321919436 seconds)
    (114/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.386073532 seconds)
    (115/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.923166109 seconds)
    (116/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.339237153 seconds)
    (117/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.293610845 seconds)
    (118/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.788065977 seconds)
    (119/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.342885636 seconds)
    (120/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.317241515 seconds)
    (121/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.320053492 seconds)
    (122/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.84737967 seconds)
    (123/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.154314059 seconds)
    (124/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.561114405 seconds)
    (125/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.839412471 seconds)
    (126/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.84589763 seconds)
    (127/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.515377036 seconds)
    (128/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.717067409 seconds)
    (129/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.080225359 seconds)
    (130/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.380522128 seconds)
    (131/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.333313585 seconds)
    (132/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.327303331 seconds)
    (133/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.163213433 seconds)
    (134/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.338329419 seconds)
    (135/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.332063368 seconds)
    (136/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.683488917 seconds)
    (137/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.358619547 seconds)
    (138/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.321890825 seconds)
    (139/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.789734325 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.348077328 seconds)
    (141/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.02032509 seconds)
    (142/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.074811114 seconds)
    (143/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.844472219 seconds)
    (144/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.800980779 seconds)
    (145/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.665543601 seconds)
    (146/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.334248973 seconds)
    (147/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.347100385 seconds)
    (148/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.319373516 seconds)
    (149/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.325838602 seconds)
    (150/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.585013646 seconds)
    (151/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.333097589 seconds)
    (152/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.343509021 seconds)
    (153/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.331531434 seconds)
    (154/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.32388416 seconds)
    (155/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.858445516 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.348325686 seconds)
    (157/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.330164425 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.707920476 seconds)
    (159/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.342042905 seconds)
    (160/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.349980305 seconds)
    (161/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.891789977 seconds)
    (162/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.100086235 seconds)
    (163/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.86789327 seconds)
    (164/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.903105804 seconds)
    (165/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.347346783 seconds)
    (166/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.968397489 seconds)
    (167/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.845881006 seconds)
    (168/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.341744586 seconds)
    (169/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.337281147 seconds)
    (170/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.324054253 seconds)
    (171/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.945922037 seconds)
    (172/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.329785243 seconds)
    (173/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.856561365 seconds)
    (174/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.785296029 seconds)
    (175/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.86945186 seconds)
    (176/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.874471409 seconds)
    (177/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.321924143 seconds)
    (178/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.883488187 seconds)
    (179/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.657567194 seconds)
    (180/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.319775755 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.855579187 seconds)
    (182/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.840244008 seconds)
    (183/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.656621283 seconds)
    (184/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.868842034 seconds)
    (185/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.570349465 seconds)
    (186/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.357505124 seconds)
    (187/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.324384938 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.332565303 seconds)
    (189/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.456523276 seconds)
    (190/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.33632607 seconds)
    (191/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.31792365 seconds)
    (192/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.321072605 seconds)
    (193/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.326952923 seconds)
    (194/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.333124936 seconds)
    (195/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.351407674 seconds)
    (196/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.934289369 seconds)
    (197/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.827642378 seconds)
    (198/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.342310697 seconds)
    (199/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.332456854 seconds)
    (200/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.320092557 seconds)
    (201/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.339339772 seconds)
    (202/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.93066469 seconds)
    (203/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.844624714 seconds)
    (204/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.331110584 seconds)
    (205/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.692669366 seconds)
    (206/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.629239833 seconds)
    (207/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.234817796 seconds)
    (208/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.968090087 seconds)
    (209/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.342750132 seconds)
    (210/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.147709778 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.571948164 seconds)
    (212/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.332312326 seconds)
    (213/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.786195686 seconds)
    (214/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.328021964 seconds)
    (215/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.86979896 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.843064904 seconds)
    (217/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.326221447 seconds)
    (218/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.743166196 seconds)
    (219/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.457056336 seconds)
    (220/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.336257968 seconds)
    (221/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.322197739 seconds)
    (222/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.905445751 seconds)
    (223/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.849971785 seconds)
    (224/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.342404342 seconds)
  done (took 1125.73033278 seconds)
  (3/7) benchmarking "transpose"...
    (1/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.685143482 seconds)
    (2/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.604852646 seconds)
    (3/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.521262623 seconds)
    (4/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.9329337 seconds)
    (5/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.923194269 seconds)
    (6/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.234669352 seconds)
    (7/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.398980116 seconds)
    (8/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.438279891 seconds)
    (9/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.141492128 seconds)
    (10/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.737884833 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.158506755 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.359738359 seconds)
    (13/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.573292817 seconds)
    (14/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.851875073 seconds)
    (15/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.609119057 seconds)
    (16/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.392089871 seconds)
  done (took 86.889055207 seconds)
  (4/7) benchmarking "constructors"...
    (1/18) benchmarking ("IV", 100)...
    done (took 2.715787045 seconds)
    (2/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.495789451 seconds)
    (3/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.324573147 seconds)
    (4/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.820784343 seconds)
    (5/18) benchmarking ("IV", 1000)...
    done (took 2.564584018 seconds)
    (6/18) benchmarking ("IJV", 1000)...
    done (took 2.626501094 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.723217628 seconds)
    (8/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.387010152 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.248250896 seconds)
    (10/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.912268227 seconds)
    (11/18) benchmarking ("Diagonal", 1000)...
    done (took 2.733096043 seconds)
    (12/18) benchmarking ("IJV", 10)...
    done (took 2.94009539 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.599118495 seconds)
    (14/18) benchmarking ("IV", 10)...
    done (took 2.907668935 seconds)
    (15/18) benchmarking ("IJV", 100)...
    done (took 2.866493746 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.551672342 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.847010719 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.888965712 seconds)
  done (took 60.480122038 seconds)
  (5/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.495472859 seconds)
    (2/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.261307318 seconds)
    (3/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.516198359 seconds)
    (4/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.40961905 seconds)
    (5/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.875275416 seconds)
    (6/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.553932331 seconds)
    (7/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.195156601 seconds)
    (8/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.239170834 seconds)
    (9/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.04465685 seconds)
    (10/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.015915227 seconds)
    (11/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.635553269 seconds)
    (12/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.949737755 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.186568124 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.402263704 seconds)
    (15/54) benchmarking ("spmat", "array", 10)...
    done (took 2.423770123 seconds)
    (16/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.337829502 seconds)
    (17/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.387009496 seconds)
    (18/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.960286715 seconds)
    (19/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.083038791 seconds)
    (20/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.430804386 seconds)
    (21/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.500666703 seconds)
    (22/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.890210335 seconds)
    (23/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.407637085 seconds)
    (24/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.508025253 seconds)
    (25/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.66102438 seconds)
    (26/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.301233404 seconds)
    (27/54) benchmarking ("spmat", "range", 100)...
    done (took 2.741127211 seconds)
    (28/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.322732631 seconds)
    (29/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.333826007 seconds)
    (30/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.653482464 seconds)
    (31/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.537292011 seconds)
    (32/54) benchmarking ("spmat", "range", 10)...
    done (took 3.986103279 seconds)
    (33/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.096622683 seconds)
    (34/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.544666579 seconds)
    (35/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.07107255 seconds)
    (36/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.755093968 seconds)
    (37/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.973446665 seconds)
    (38/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.338096215 seconds)
    (39/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.331484027 seconds)
    (40/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.43458054 seconds)
    (41/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.695291417 seconds)
    (42/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.622565611 seconds)
    (43/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.613481179 seconds)
    (44/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.109697629 seconds)
    (45/54) benchmarking ("spmat", "array", 100)...
    done (took 2.80484604 seconds)
    (46/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.241567761 seconds)
    (47/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.536414623 seconds)
    (48/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.459677512 seconds)
    (49/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.933950343 seconds)
    (50/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.397305873 seconds)
    (51/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.192283406 seconds)
    (52/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.555838663 seconds)
    (53/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.100105291 seconds)
    (54/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.509122739 seconds)
  done (took 230.89806785 seconds)
  (6/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.813373507 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.460986327 seconds)
  done (took 12.638948399 seconds)
  (7/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.379361307 seconds)
    (2/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.380648738 seconds)
    (3/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.41172696 seconds)
    (4/10) benchmarking "square system (default), vector rhs"...
    done (took 7.416824246 seconds)
    (5/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.378428082 seconds)
    (6/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.374920065 seconds)
    (7/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.409221971 seconds)
    (8/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.384065213 seconds)
    (9/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.384487705 seconds)
    (10/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.404347384 seconds)
  done (took 76.259062037 seconds)
done (took 1612.587290024 seconds)
(6/23) benchmarking "micro"...
  (1/8) benchmarking "mandel"...
  done (took 3.742407018 seconds)
  (2/8) benchmarking "randmatmul"...
  done (took 7.420213158 seconds)
  (3/8) benchmarking "fib"...
  done (took 2.720294082 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.336009697 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.351311753 seconds)
  (6/8) benchmarking "parseint"...
  done (took 3.32688709 seconds)
  (7/8) benchmarking "quicksort"...
  done (took 5.40525881 seconds)
  (8/8) benchmarking "printfd"...
  done (took 7.324935678 seconds)
done (took 46.949521479 seconds)
(7/23) benchmarking "parallel"...
done (took 2.362222577 seconds)
(8/23) benchmarking "dates"...
  (1/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "DateFormat")...
    done (took 2.355949679 seconds)
    (2/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.957027606 seconds)
    (3/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.76740941 seconds)
    (4/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.126248662 seconds)
    (5/9) benchmarking "Date"...
    done (took 2.779007125 seconds)
    (6/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.379490011 seconds)
    (7/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.130479677 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.066684939 seconds)
    (9/9) benchmarking "DateTime"...
    done (took 2.968512032 seconds)
  done (took 27.856001005 seconds)
  (2/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.493741625 seconds)
    (2/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.386035923 seconds)
    (3/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.366895192 seconds)
    (4/18) benchmarking ("dayofyear", "Date")...
    done (took 2.519183563 seconds)
    (5/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.563163261 seconds)
    (6/18) benchmarking ("dayofweek", "Date")...
    done (took 2.364727148 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.387172261 seconds)
    (8/18) benchmarking ("isleapyear", "Date")...
    done (took 2.451211924 seconds)
    (9/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.521724684 seconds)
    (10/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.373294759 seconds)
    (11/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.499199123 seconds)
    (12/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.567080789 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.542041944 seconds)
    (14/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.525610506 seconds)
    (15/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.579734196 seconds)
    (16/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.384047936 seconds)
    (17/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.502936995 seconds)
    (18/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.535709746 seconds)
  done (took 46.888443416 seconds)
  (3/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.348928512 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.343224364 seconds)
  done (took 7.01693246 seconds)
  (4/7) benchmarking "accessor"...
    (1/7) benchmarking "millisecond"...
    done (took 2.363970087 seconds)
    (2/7) benchmarking "month"...
    done (took 2.461724766 seconds)
    (3/7) benchmarking "second"...
    done (took 2.37394097 seconds)
    (4/7) benchmarking "day"...
    done (took 2.484286247 seconds)
    (5/7) benchmarking "year"...
    done (took 2.446458039 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.373511404 seconds)
    (7/7) benchmarking "hour"...
    done (took 2.376376425 seconds)
  done (took 19.209490238 seconds)
  (5/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.40104062 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.570657335 seconds)
  done (took 9.301729903 seconds)
  (6/7) benchmarking "conversion"...
    (1/2) benchmarking "DateTime -> Date"...
    done (took 2.363530962 seconds)
    (2/2) benchmarking "Date -> DateTime"...
    done (took 2.359159862 seconds)
  done (took 7.129426896 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Hour")...
    done (took 2.361124396 seconds)
    (2/10) benchmarking ("DateTime", "Month")...
    done (took 2.887327903 seconds)
    (3/10) benchmarking ("Date", "Day")...
    done (took 2.361908557 seconds)
    (4/10) benchmarking ("Date", "Month")...
    done (took 2.678839623 seconds)
    (5/10) benchmarking ("DateTime", "Year")...
    done (took 2.781743311 seconds)
    (6/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.362182457 seconds)
    (7/10) benchmarking ("DateTime", "Second")...
    done (took 2.360064357 seconds)
    (8/10) benchmarking ("Date", "Year")...
    done (took 2.616660502 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.360997542 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.360398892 seconds)
  done (took 27.462409155 seconds)
done (took 147.186968227 seconds)
(9/23) benchmarking "scalar"...
  (1/25) benchmarking "floatexp"...
    (1/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.726408592 seconds)
    (2/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.36776108 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.368742961 seconds)
    (4/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.391844369 seconds)
    (5/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.372466442 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.372693419 seconds)
    (7/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.39999819 seconds)
    (8/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.368397235 seconds)
    (9/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.365648007 seconds)
    (10/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.393176077 seconds)
    (11/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.363088885 seconds)
    (12/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.391968619 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.39146517 seconds)
    (14/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.845809543 seconds)
    (15/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.367758165 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.397761559 seconds)
    (17/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.406583907 seconds)
    (18/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.367553124 seconds)
    (19/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.398075278 seconds)
    (20/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.375765163 seconds)
    (21/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.364954358 seconds)
    (22/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.393430811 seconds)
    (23/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.844995564 seconds)
    (24/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.362787447 seconds)
    (25/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.400102578 seconds)
    (26/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.362990163 seconds)
    (27/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.370146386 seconds)
    (28/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.390537513 seconds)
    (29/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.395744717 seconds)
    (30/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.362450479 seconds)
    (31/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.397833103 seconds)
    (32/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.363603025 seconds)
    (33/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.735553837 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.363488054 seconds)
    (35/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.361540447 seconds)
    (36/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.37896549 seconds)
    (37/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.361655876 seconds)
    (38/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.363626687 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.398551866 seconds)
    (40/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.366157333 seconds)
    (41/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.365268762 seconds)
    (42/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.391415981 seconds)
    (43/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.375985397 seconds)
    (44/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.391246223 seconds)
    (45/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.740719279 seconds)
    (46/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.371067441 seconds)
    (47/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.392149347 seconds)
    (48/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.392569869 seconds)
    (49/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.736832341 seconds)
    (50/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.361629559 seconds)
    (51/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.392142686 seconds)
    (52/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.374584519 seconds)
    (53/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.392307671 seconds)
    (54/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.375074865 seconds)
    (55/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.361273626 seconds)
  done (took 135.512496487 seconds)
  (2/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.345317866 seconds)
    (2/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.343566975 seconds)
    (3/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.332364372 seconds)
    (4/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.334165393 seconds)
    (5/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.332048576 seconds)
    (6/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.349274567 seconds)
  done (took 16.362783811 seconds)
  (3/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.397941403 seconds)
    (2/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.793563877 seconds)
    (3/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.853452904 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.384045859 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.396181158 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.371951402 seconds)
    (7/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.436684973 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.373178012 seconds)
    (9/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.385445197 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.437838469 seconds)
    (11/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.432954655 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.851607595 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.372743155 seconds)
    (14/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.385961839 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.434883222 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.383813775 seconds)
    (17/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.397181433 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.372795017 seconds)
    (19/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.794954855 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.388015072 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.397696684 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.395594385 seconds)
  done (took 56.777938616 seconds)
  (4/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.403256762 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.381117056 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.412827475 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.403616294 seconds)
    (5/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.394329969 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.51491126 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.657260532 seconds)
    (8/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.700159564 seconds)
    (9/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.626301197 seconds)
    (10/30) benchmarking ("zero", "Float64")...
    done (took 2.379807572 seconds)
    (11/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.378700968 seconds)
    (12/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.386326545 seconds)
    (13/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.378591123 seconds)
    (14/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.50664659 seconds)
    (15/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.412795541 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.410031126 seconds)
    (17/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.400209716 seconds)
    (18/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.446242181 seconds)
    (19/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.408948008 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.378732616 seconds)
    (21/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.41283064 seconds)
    (22/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.379005798 seconds)
    (23/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.378692637 seconds)
    (24/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.46800559 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.382231706 seconds)
    (26/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.414988227 seconds)
    (27/30) benchmarking ("zero", "Float32")...
    done (took 2.382505839 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.400507713 seconds)
    (29/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.459251664 seconds)
    (30/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.454353152 seconds)
  done (took 75.440103979 seconds)
  (5/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.398676154 seconds)
    (2/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.425217678 seconds)
    (3/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.381982794 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.517006492 seconds)
    (5/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.387253405 seconds)
    (6/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.386166842 seconds)
    (7/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.448170736 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.390767259 seconds)
    (9/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.515075205 seconds)
    (10/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.460728301 seconds)
    (11/68) benchmarking ("x one", "Float64")...
    done (took 2.465028012 seconds)
    (12/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.38419013 seconds)
    (13/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.387237294 seconds)
    (14/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.517460158 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.38808428 seconds)
    (16/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.38814981 seconds)
    (17/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.379756662 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.38760971 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.448167666 seconds)
    (20/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.512492997 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.394001707 seconds)
    (22/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.407837818 seconds)
    (23/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.388614862 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.516750642 seconds)
    (25/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.39015291 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.387914746 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.448444298 seconds)
    (28/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.382825076 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.519932413 seconds)
    (30/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.391714948 seconds)
    (31/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.394111168 seconds)
    (32/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.395455172 seconds)
    (33/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.39310759 seconds)
    (34/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.378170339 seconds)
    (35/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.377397155 seconds)
    (36/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.394765109 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.384281497 seconds)
    (38/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.386633771 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.391560302 seconds)
    (40/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.398253943 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.510195967 seconds)
    (42/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.394342178 seconds)
    (43/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.392682686 seconds)
    (44/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.453477799 seconds)
    (45/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.388173943 seconds)
    (46/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.377471477 seconds)
    (47/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.452358191 seconds)
    (48/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.39338887 seconds)
    (49/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.457377065 seconds)
    (50/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.388660822 seconds)
    (51/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.384424796 seconds)
    (52/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.394606089 seconds)
    (53/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.375872406 seconds)
    (54/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.395989419 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.391991871 seconds)
    (56/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.409176329 seconds)
    (57/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.385481411 seconds)
    (58/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.401631079 seconds)
    (59/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.416427455 seconds)
    (60/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.473024311 seconds)
    (61/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.393167424 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.47049441 seconds)
    (63/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.400227976 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.536835203 seconds)
    (65/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.463843394 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.387936834 seconds)
    (67/68) benchmarking ("x one", "Float32")...
    done (took 2.436341327 seconds)
    (68/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.393241243 seconds)
  done (took 166.739228608 seconds)
  (6/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "UInt64")...
    done (took 2.384543806 seconds)
    (2/72) benchmarking ("isodd", "BigInt")...
    done (took 2.389513888 seconds)
    (3/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.363923973 seconds)
    (4/72) benchmarking ("isless", "Int64")...
    done (took 2.365319881 seconds)
    (5/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.372286716 seconds)
    (6/72) benchmarking ("isnan", "Float32")...
    done (took 2.376147776 seconds)
    (7/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.377642473 seconds)
    (8/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.370292466 seconds)
    (9/72) benchmarking ("isequal", "Int64")...
    done (took 2.373628504 seconds)
    (10/72) benchmarking ("isequal", "Float32")...
    done (took 2.373770951 seconds)
    (11/72) benchmarking ("isnan", "UInt64")...
    done (took 2.376443098 seconds)
    (12/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.374687686 seconds)
    (13/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.351440717 seconds)
    (14/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.531550028 seconds)
    (15/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.44984652 seconds)
    (16/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.362892855 seconds)
    (17/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.349259757 seconds)
    (18/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.36691243 seconds)
    (19/72) benchmarking ("isequal", "UInt64")...
    done (took 2.361239082 seconds)
    (20/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.36334161 seconds)
    (21/72) benchmarking ("isinteger", "Float32")...
    done (took 2.363868473 seconds)
    (22/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.364010492 seconds)
    (23/72) benchmarking ("isodd", "Int64")...
    done (took 2.364167973 seconds)
    (24/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.36756292 seconds)
    (25/72) benchmarking ("isinteger", "Float64")...
    done (took 2.361920264 seconds)
    (26/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.352531801 seconds)
    (27/72) benchmarking ("isless", "UInt64")...
    done (took 2.364318662 seconds)
    (28/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.367485404 seconds)
    (29/72) benchmarking ("isfinite", "Int64")...
    done (took 2.369009611 seconds)
    (30/72) benchmarking ("isless", "Float32")...
    done (took 2.514969494 seconds)
    (31/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.41098993 seconds)
    (32/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.351930549 seconds)
    (33/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.429372907 seconds)
    (34/72) benchmarking ("isfinite", "Float32")...
    done (took 2.371706713 seconds)
    (35/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.362418298 seconds)
    (36/72) benchmarking ("isnan", "Int64")...
    done (took 2.350139565 seconds)
    (37/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.349200749 seconds)
    (38/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.364022401 seconds)
    (39/72) benchmarking ("isnan", "BigInt")...
    done (took 2.350203521 seconds)
    (40/72) benchmarking ("isinf", "Float32")...
    done (took 2.362459313 seconds)
    (41/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.348934091 seconds)
    (42/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.368256165 seconds)
    (43/72) benchmarking ("iseven", "BigInt")...
    done (took 2.390374668 seconds)
    (44/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.365537434 seconds)
    (45/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.369537493 seconds)
    (46/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.350685622 seconds)
    (47/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.362194797 seconds)
    (48/72) benchmarking ("isequal", "Float64")...
    done (took 2.36965153 seconds)
    (49/72) benchmarking ("isnan", "Float64")...
    done (took 2.361908877 seconds)
    (50/72) benchmarking ("isinf", "Float64")...
    done (took 2.363255752 seconds)
    (51/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.347587242 seconds)
    (52/72) benchmarking ("isinf", "Int64")...
    done (took 2.349562333 seconds)
    (53/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.350788366 seconds)
    (54/72) benchmarking ("isless", "BigInt")...
    done (took 2.393602634 seconds)
    (55/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.41227072 seconds)
    (56/72) benchmarking ("isless", "BigFloat")...
    done (took 2.452855913 seconds)
    (57/72) benchmarking ("isfinite", "Float64")...
    done (took 2.362734754 seconds)
    (58/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.34832661 seconds)
    (59/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.360488064 seconds)
    (60/72) benchmarking ("isequal", "BigInt")...
    done (took 2.392528177 seconds)
    (61/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.363820657 seconds)
    (62/72) benchmarking ("iseven", "Int64")...
    done (took 2.364501072 seconds)
    (63/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.348193127 seconds)
    (64/72) benchmarking ("iseven", "UInt64")...
    done (took 2.360153722 seconds)
    (65/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.365346994 seconds)
    (66/72) benchmarking ("isinteger", "Int64")...
    done (took 2.348956874 seconds)
    (67/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.362452218 seconds)
    (68/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.366822144 seconds)
    (69/72) benchmarking ("isless", "Float64")...
    done (took 2.366587286 seconds)
    (70/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.348327018 seconds)
    (71/72) benchmarking ("isinf", "BigInt")...
    done (took 2.34926764 seconds)
    (72/72) benchmarking ("isodd", "UInt64")...
    done (took 2.366313374 seconds)
  done (took 173.201778735 seconds)
  (7/25) benchmarking "tan"...
    (1/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.199913825 seconds)
    (2/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.386605735 seconds)
    (3/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.389552241 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.18816529 seconds)
    (5/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.276952846 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.388492116 seconds)
    (7/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.185173692 seconds)
    (8/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.207748671 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.392295767 seconds)
    (10/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.388709353 seconds)
    (11/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.390873629 seconds)
    (12/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.23151013 seconds)
    (13/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.210352123 seconds)
    (14/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.384636125 seconds)
    (15/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.385654096 seconds)
    (16/18) benchmarking ("zero", "Float32")...
    done (took 2.383931998 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.382946656 seconds)
    (18/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.223346691 seconds)
  done (took 51.926758268 seconds)
  (8/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.384878984 seconds)
    (2/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.389343774 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.418802614 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.389611997 seconds)
    (5/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.388158082 seconds)
    (6/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.383587426 seconds)
    (7/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.383448085 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.389767205 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.417119972 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.38276954 seconds)
    (11/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.384496186 seconds)
    (12/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.389933696 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.385681856 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.405733641 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.414452066 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.592907037 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.389652206 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.384256082 seconds)
    (19/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.48109452 seconds)
    (20/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.452135704 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.588201301 seconds)
  done (took 53.129463826 seconds)
  (9/25) benchmarking "cbrt"...
    (1/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.381161485 seconds)
    (2/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.295225785 seconds)
    (3/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.54412163 seconds)
    (4/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.479120042 seconds)
    (5/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.478527843 seconds)
    (6/20) benchmarking ("zero", "Float64")...
    done (took 2.37878333 seconds)
    (7/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.448289604 seconds)
    (8/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.479843188 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.546354872 seconds)
    (10/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.46846863 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.469144177 seconds)
    (12/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.449865401 seconds)
    (13/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.479157751 seconds)
    (14/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.448017148 seconds)
    (15/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.293592653 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.375573213 seconds)
    (17/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.449063614 seconds)
    (18/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.383151759 seconds)
    (19/20) benchmarking ("one", "Float32")...
    done (took 2.453369899 seconds)
    (20/20) benchmarking ("one", "Float64")...
    done (took 2.467727465 seconds)
  done (took 55.100806074 seconds)
  (10/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.413328453 seconds)
    (2/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.415529332 seconds)
    (3/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.414299449 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.415837178 seconds)
    (5/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.411877689 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.389955111 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.385305802 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.384361692 seconds)
    (9/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.41289304 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.384939564 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.384246525 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.384106081 seconds)
    (13/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.386394398 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.387317972 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.386844842 seconds)
    (16/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.575395227 seconds)
    (17/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.393629216 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.390105363 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.393440366 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.384552138 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.389697855 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.390161234 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.385492803 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.382989064 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.386999084 seconds)
    (26/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.416382717 seconds)
    (27/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.580110287 seconds)
    (28/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.415739427 seconds)
  done (took 69.775721666 seconds)
  (11/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.607059789 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.402728403 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.400166392 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.409755674 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.536643785 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.415096265 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.420891773 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.412470166 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.418693276 seconds)
    (10/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.530901619 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.623011691 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.42033462 seconds)
    (13/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.38958015 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.412248476 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.413013628 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.403439353 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.416708771 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.517606938 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.414350778 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.615062041 seconds)
    (21/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.39031512 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.410346981 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.409314513 seconds)
    (24/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.393654519 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.415529198 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.524683145 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.621811958 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.413808667 seconds)
    (29/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.524968383 seconds)
    (30/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.617964022 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.540333404 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.415562936 seconds)
    (33/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.397176262 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.403505877 seconds)
    (35/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.395437083 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.421124941 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.537033735 seconds)
    (38/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.612120143 seconds)
    (39/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.613698765 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.416175237 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.524167135 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.410300679 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.421036476 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.414188069 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.419689223 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.413949946 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.412351095 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.449870253 seconds)
    (49/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.540422141 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.41505184 seconds)
    (51/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.394942035 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.415153745 seconds)
    (53/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.535647208 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.515228983 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.452119133 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.606283388 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.524833261 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.415802571 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.420379216 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.400552286 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.413210791 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.530089935 seconds)
    (63/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.422373827 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.413412158 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.421480124 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.536669239 seconds)
  done (took 164.82765927 seconds)
  (12/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.388642173 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.381198691 seconds)
    (3/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.197774012 seconds)
    (4/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.384941779 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.382651377 seconds)
    (6/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.381916057 seconds)
    (7/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.403027173 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.44823592 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.398975692 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.381405571 seconds)
    (11/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.217286802 seconds)
    (12/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.384149113 seconds)
    (13/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.436257677 seconds)
    (14/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.384607696 seconds)
    (15/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.383962594 seconds)
    (16/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.385768614 seconds)
    (17/20) benchmarking ("zero", "Float32")...
    done (took 2.38498916 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.382722348 seconds)
    (19/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.406615868 seconds)
    (20/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.437077847 seconds)
  done (took 51.884758378 seconds)
  (13/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.368387752 seconds)
    (2/49) benchmarking ("add", "ComplexF64")...
    done (took 3.962118326 seconds)
    (3/49) benchmarking ("div", "Float32")...
    done (took 2.364625586 seconds)
    (4/49) benchmarking ("mul", "BigFloat")...
    done (took 3.100383133 seconds)
    (5/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.267030558 seconds)
    (6/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.090660834 seconds)
    (7/49) benchmarking ("add", "Float64")...
    done (took 2.444746497 seconds)
    (8/49) benchmarking ("add", "BigInt")...
    done (took 2.838622884 seconds)
    (9/49) benchmarking ("sub", "Int64")...
    done (took 3.190976086 seconds)
    (10/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.377135727 seconds)
    (11/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.374849251 seconds)
    (12/49) benchmarking ("div", "BigFloat")...
    done (took 3.371461094 seconds)
    (13/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.397210548 seconds)
    (14/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.376401135 seconds)
    (15/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.37976009 seconds)
    (16/49) benchmarking ("div", "UInt64")...
    done (took 2.379998619 seconds)
    (17/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.310972226 seconds)
    (18/49) benchmarking ("sub", "UInt64")...
    done (took 3.958922465 seconds)
    (19/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.418892147 seconds)
    (20/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.382807755 seconds)
    (21/49) benchmarking ("div", "Float64")...
    done (took 2.381856278 seconds)
    (22/49) benchmarking "13786"...
    done (took 2.371612226 seconds)
    (23/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.922713042 seconds)
    (24/49) benchmarking ("add", "ComplexF32")...
    done (took 2.377708732 seconds)
    (25/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.340571585 seconds)
    (26/49) benchmarking ("mul", "Float64")...
    done (took 2.389090438 seconds)
    (27/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.430686185 seconds)
    (28/49) benchmarking ("mul", "Int64")...
    done (took 2.37526104 seconds)
    (29/49) benchmarking ("sub", "Float64")...
    done (took 2.370747849 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.070975932 seconds)
    (31/49) benchmarking ("div", "ComplexF64")...
    done (took 3.187350322 seconds)
    (32/49) benchmarking ("add", "BigFloat")...
    done (took 2.846467506 seconds)
    (33/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.440883128 seconds)
    (34/49) benchmarking ("mul", "Float32")...
    done (took 2.370416587 seconds)
    (35/49) benchmarking ("div", "BigInt")...
    done (took 3.216374308 seconds)
    (36/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.804382444 seconds)
    (37/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.382950749 seconds)
    (38/49) benchmarking ("add", "Float32")...
    done (took 2.370086521 seconds)
    (39/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.366794639 seconds)
    (40/49) benchmarking ("add", "Int64")...
    done (took 2.36594047 seconds)
    (41/49) benchmarking ("sub", "BigFloat")...
    done (took 2.68648284 seconds)
    (42/49) benchmarking ("mul", "UInt64")...
    done (took 2.427064637 seconds)
    (43/49) benchmarking ("add", "UInt64")...
    done (took 2.368109321 seconds)
    (44/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.182964711 seconds)
    (45/49) benchmarking ("sub", "BigInt")...
    done (took 2.827765495 seconds)
    (46/49) benchmarking ("div", "ComplexF32")...
    done (took 3.20919793 seconds)
    (47/49) benchmarking ("sub", "Float32")...
    done (took 2.371978223 seconds)
    (48/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.380969466 seconds)
    (49/49) benchmarking ("div", "Int64")...
    done (took 2.380302594 seconds)
  done (took 139.908616644 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.386796803 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.392933394 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.439932407 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.387038611 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.397222439 seconds)
    (6/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.430369376 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.438781003 seconds)
    (8/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.397628407 seconds)
    (9/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.43990679 seconds)
    (10/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.43962878 seconds)
    (11/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.395416344 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.431290904 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.443955443 seconds)
    (14/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.443078498 seconds)
    (15/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.443199791 seconds)
    (16/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.443850706 seconds)
    (17/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.39480725 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.390581764 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.392207007 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.389698348 seconds)
    (21/22) benchmarking ("zero", "Float32")...
    done (took 2.386323588 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.394657161 seconds)
  done (took 55.437550223 seconds)
  (15/25) benchmarking "sinh"...
    (1/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.788703423 seconds)
    (2/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.948668795 seconds)
    (3/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.445750047 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.424674635 seconds)
    (5/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.436044535 seconds)
    (6/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.442852627 seconds)
    (7/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.40190577 seconds)
    (8/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.445666079 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.950352966 seconds)
    (10/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.433804908 seconds)
    (11/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.399546982 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.460999157 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.456793382 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.4055279 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.789979166 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.444933758 seconds)
    (17/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.4581551 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.398055065 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.398438394 seconds)
    (20/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.428297852 seconds)
    (21/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.456049163 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.428686748 seconds)
  done (took 57.585798476 seconds)
  (16/25) benchmarking "exp2"...
    (1/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.206229727 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.391448287 seconds)
    (3/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.737534696 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.408412203 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.407499706 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.390889981 seconds)
    (7/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.411532265 seconds)
    (8/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.735358283 seconds)
    (9/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.408663962 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.345970534 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.409872157 seconds)
    (12/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.406494233 seconds)
    (13/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.409708362 seconds)
    (14/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.406693356 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.21152671 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.34719722 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.347384848 seconds)
    (18/24) benchmarking ("zero", "Float32")...
    done (took 2.407204508 seconds)
    (19/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.408810445 seconds)
    (20/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.407560279 seconds)
    (21/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.40901565 seconds)
    (22/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.345998432 seconds)
    (23/24) benchmarking ("one", "Float32")...
    done (took 2.408142908 seconds)
    (24/24) benchmarking ("one", "Float64")...
    done (took 2.40762699 seconds)
  done (took 70.119478431 seconds)
  (17/25) benchmarking "iteration"...
    (1/2) benchmarking "in"...
    done (took 2.3705839 seconds)
    (2/2) benchmarking "indexed"...
    done (took 2.369571154 seconds)
  done (took 7.081004964 seconds)
  (18/25) benchmarking "acosh"...
    (1/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.515474501 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.447852196 seconds)
    (3/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.452915551 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.522444722 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.572708593 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.499744295 seconds)
    (7/8) benchmarking ("one", "Float64")...
    done (took 2.394183282 seconds)
    (8/8) benchmarking ("one", "Float32")...
    done (took 2.409653322 seconds)
  done (took 22.157291466 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.188540069 seconds)
    (2/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.214148419 seconds)
    (3/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.480190064 seconds)
    (4/16) benchmarking ("zero", "Float64")...
    done (took 2.413090826 seconds)
    (5/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.485407126 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.476163823 seconds)
    (7/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.202358984 seconds)
    (8/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.485633277 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.190993538 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.481607594 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.519992445 seconds)
    (12/16) benchmarking ("zero", "Float32")...
    done (took 2.405801092 seconds)
    (13/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.520080422 seconds)
    (14/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.479834686 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.406010733 seconds)
    (16/16) benchmarking ("one", "Float32")...
    done (took 2.405622657 seconds)
  done (took 44.700176996 seconds)
  (20/25) benchmarking "expm1"...
    (1/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.386382395 seconds)
    (2/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.875389314 seconds)
    (3/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.340417546 seconds)
    (4/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.401323652 seconds)
    (5/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.398635785 seconds)
    (6/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.414096978 seconds)
    (7/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.397210183 seconds)
    (8/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.414753557 seconds)
    (9/30) benchmarking ("zero", "Float64")...
    done (took 2.434268146 seconds)
    (10/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.387993752 seconds)
    (11/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.414453409 seconds)
    (12/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.388189471 seconds)
    (13/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.413994592 seconds)
    (14/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.399285104 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.339010419 seconds)
    (16/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.413340983 seconds)
    (17/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.413072056 seconds)
    (18/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.432854386 seconds)
    (19/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.387365421 seconds)
    (20/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.418005874 seconds)
    (21/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.413212138 seconds)
    (22/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.415178502 seconds)
    (23/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.414831603 seconds)
    (24/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.412920402 seconds)
    (25/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.874626878 seconds)
    (26/30) benchmarking ("zero", "Float32")...
    done (took 2.413732839 seconds)
    (27/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.414843897 seconds)
    (28/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.389564118 seconds)
    (29/30) benchmarking ("one", "Float32")...
    done (took 2.41655567 seconds)
    (30/30) benchmarking ("one", "Float64")...
    done (took 2.414184065 seconds)
  done (took 91.389570744 seconds)
  (21/25) benchmarking "sin"...
    (1/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.711676692 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.434971692 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.422184674 seconds)
    (4/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.396200832 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.528355036 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.461903628 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.41221763 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.410453702 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.409840434 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.410939224 seconds)
    (11/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.410242915 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.412221649 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.406352299 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.416350834 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.434164213 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.42761124 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.434149155 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.715303408 seconds)
    (19/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.401511046 seconds)
    (20/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.38935083 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.413892313 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.411851223 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.410853737 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.418711613 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.420576414 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.423460807 seconds)
    (27/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.614156567 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.407233417 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.423637117 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.392633425 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.554397019 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.424707715 seconds)
    (33/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.714990345 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.412910607 seconds)
    (35/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.717490541 seconds)
    (36/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.399454488 seconds)
    (37/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.538006038 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.545021701 seconds)
    (39/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.52738001 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.411962761 seconds)
    (41/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.408407523 seconds)
    (42/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.550215174 seconds)
    (43/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.719717857 seconds)
    (44/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.614123426 seconds)
    (45/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.436186713 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.412207927 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.420678602 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.547122918 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.423554958 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.464935247 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.409871656 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.536653014 seconds)
    (53/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.395369786 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.409501696 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.422846271 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.409674906 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.408576114 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.414793108 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.427456562 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.414799248 seconds)
    (61/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.712612271 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.409531491 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.408918263 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.409441213 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.408263201 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.439374859 seconds)
  done (took 165.00544117 seconds)
  (22/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.485744014 seconds)
    (2/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.578563842 seconds)
    (3/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.408615566 seconds)
    (4/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.39840539 seconds)
    (5/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.520935476 seconds)
    (6/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.567211944 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.479400363 seconds)
    (8/22) benchmarking ("zero", "Float64")...
    done (took 2.399585024 seconds)
    (9/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.463613293 seconds)
    (10/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.527230955 seconds)
    (11/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.458185424 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.397063081 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.420035452 seconds)
    (14/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.459916987 seconds)
    (15/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.576429595 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.458701412 seconds)
    (17/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.51873485 seconds)
    (18/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.395394462 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.394049903 seconds)
    (20/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.570399644 seconds)
    (21/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.418133448 seconds)
    (22/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.530411175 seconds)
  done (took 56.768965092 seconds)
  (23/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.535735179 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.448268059 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.535695512 seconds)
    (4/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.470876509 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.472423544 seconds)
    (6/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.446878606 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.473649366 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.445626604 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.472789872 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.53689825 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.472341056 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.53509724 seconds)
    (13/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.689272766 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.481322781 seconds)
    (15/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.434185264 seconds)
    (16/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.533863716 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.475611095 seconds)
    (18/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.532359682 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.543668394 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.472731271 seconds)
    (21/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.448181654 seconds)
    (22/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.429827303 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.477029876 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.480242283 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.474626656 seconds)
    (26/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.474831042 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.445551947 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.473414166 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.474615604 seconds)
    (30/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.681586404 seconds)
    (31/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.475432616 seconds)
    (32/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.533760515 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.483002969 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.477142091 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.4475663 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.475126313 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.469546222 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.476133518 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.472622154 seconds)
    (40/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.681186856 seconds)
    (41/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.473903972 seconds)
    (42/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.446562237 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.47414179 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.536610229 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.445542144 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.480205593 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.534545285 seconds)
    (48/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.533740065 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.535740465 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.475162222 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.473992722 seconds)
    (52/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.473303923 seconds)
    (53/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.534329287 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.46997056 seconds)
    (55/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.542676245 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.535004419 seconds)
    (57/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.476026923 seconds)
    (58/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.446778679 seconds)
    (59/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.681335092 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.533406737 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.534961278 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.474679601 seconds)
  done (took 157.316759302 seconds)
  (24/25) benchmarking "acos"...
    (1/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.191789169 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.396989902 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.388600227 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.406016476 seconds)
    (5/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.389831877 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.394914071 seconds)
    (7/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.390563361 seconds)
    (8/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.42578453 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.462399441 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.390545806 seconds)
    (11/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.396017781 seconds)
    (12/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.386760248 seconds)
    (13/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.389552565 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.395544496 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.396632269 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.396486947 seconds)
    (17/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.424608152 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.211559214 seconds)
  done (took 47.174004783 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.537800733 seconds)
    (2/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.469042725 seconds)
    (3/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.182120333 seconds)
    (4/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.462223676 seconds)
    (5/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.373395505 seconds)
    (6/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.249524739 seconds)
    (7/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 3.981657729 seconds)
    (8/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.375390333 seconds)
    (9/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.374426614 seconds)
    (10/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.779777187 seconds)
    (11/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.440067816 seconds)
    (12/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.062250439 seconds)
    (13/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 3.082260776 seconds)
    (14/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.997065753 seconds)
    (15/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.409247717 seconds)
    (16/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.382369546 seconds)
    (17/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.374727376 seconds)
    (18/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.138712958 seconds)
    (19/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.425512373 seconds)
    (20/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.441451792 seconds)
    (21/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.373825585 seconds)
    (22/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.318150346 seconds)
    (23/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.522487579 seconds)
    (24/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 3.917881529 seconds)
    (25/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.329357836 seconds)
    (26/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.379554131 seconds)
    (27/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.24011376 seconds)
    (28/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.723056158 seconds)
    (29/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.372156918 seconds)
    (30/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.374350897 seconds)
    (31/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.381751276 seconds)
    (32/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.37730033 seconds)
    (33/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.469191975 seconds)
    (34/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.216577376 seconds)
    (35/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 3.96833745 seconds)
    (36/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.653542138 seconds)
    (37/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.105049867 seconds)
    (38/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.91061268 seconds)
    (39/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 3.193167702 seconds)
    (40/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.373731795 seconds)
    (41/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.530570515 seconds)
    (42/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.367517529 seconds)
    (43/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.3653408 seconds)
    (44/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.08317583 seconds)
    (45/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.073221779 seconds)
    (46/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.869508887 seconds)
    (47/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 3.190756527 seconds)
    (48/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.425274535 seconds)
    (49/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.37447897 seconds)
    (50/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.922716959 seconds)
    (51/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 3.192247112 seconds)
    (52/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.426570372 seconds)
    (53/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.386620529 seconds)
    (54/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.774250954 seconds)
    (55/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.278341162 seconds)
    (56/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.47934097 seconds)
    (57/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.384932751 seconds)
    (58/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.327337588 seconds)
    (59/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.337598634 seconds)
    (60/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.743490783 seconds)
    (61/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.445477652 seconds)
    (62/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.372845178 seconds)
    (63/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.133637871 seconds)
    (64/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.397652403 seconds)
    (65/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.223397435 seconds)
    (66/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.525161368 seconds)
    (67/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.845076582 seconds)
    (68/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.419646497 seconds)
    (69/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.790931222 seconds)
    (70/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.949259241 seconds)
    (71/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.646255699 seconds)
    (72/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.081587716 seconds)
    (73/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.481089387 seconds)
    (74/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.503550426 seconds)
    (75/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.378623244 seconds)
    (76/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.435561854 seconds)
    (77/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.37721408 seconds)
    (78/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.372103532 seconds)
    (79/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.319328434 seconds)
    (80/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.845001612 seconds)
    (81/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.472202637 seconds)
    (82/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.797645643 seconds)
    (83/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.317090887 seconds)
    (84/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.159564053 seconds)
    (85/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.392286615 seconds)
    (86/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.902772951 seconds)
    (87/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 3.201234188 seconds)
    (88/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.119413182 seconds)
    (89/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.445795648 seconds)
    (90/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.137931489 seconds)
    (91/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.529451367 seconds)
    (92/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.904063267 seconds)
    (93/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.282401927 seconds)
    (94/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.384347821 seconds)
    (95/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.304016691 seconds)
    (96/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.362130235 seconds)
    (97/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.305511614 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.54663373 seconds)
    (99/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 3.908089058 seconds)
    (100/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.467412481 seconds)
    (101/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 3.915797276 seconds)
    (102/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.072440858 seconds)
    (103/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 3.182458391 seconds)
    (104/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.026104405 seconds)
    (105/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.305822334 seconds)
    (106/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.611413754 seconds)
    (107/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.311595582 seconds)
    (108/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.445024048 seconds)
    (109/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.375028929 seconds)
    (110/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.040143151 seconds)
    (111/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.383162917 seconds)
    (112/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.429219944 seconds)
    (113/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.376596182 seconds)
    (114/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.756352299 seconds)
    (115/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.16635734 seconds)
    (116/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.514651871 seconds)
    (117/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.987977007 seconds)
    (118/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.745960846 seconds)
    (119/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.431166966 seconds)
    (120/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.688281183 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.550610634 seconds)
    (122/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.55313103 seconds)
    (123/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.307028828 seconds)
    (124/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.483033986 seconds)
    (125/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.961169729 seconds)
    (126/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.66527428 seconds)
    (127/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.783485122 seconds)
    (128/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.584701765 seconds)
    (129/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.372775957 seconds)
    (130/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.068739566 seconds)
    (131/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.615234826 seconds)
    (132/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.866759144 seconds)
    (133/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.496413151 seconds)
    (134/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.528473375 seconds)
    (135/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.374964259 seconds)
    (136/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.838389881 seconds)
    (137/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.993984256 seconds)
    (138/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.321888608 seconds)
    (139/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.726264131 seconds)
    (140/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.667194786 seconds)
    (141/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.114795514 seconds)
    (142/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.505788852 seconds)
    (143/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.371523535 seconds)
    (144/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.035116805 seconds)
    (145/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.554683615 seconds)
    (146/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.746241435 seconds)
    (147/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.501201098 seconds)
    (148/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.238139788 seconds)
    (149/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 4.678631423 seconds)
    (150/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.275012469 seconds)
    (151/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.141716309 seconds)
    (152/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.227613774 seconds)
    (153/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.866758966 seconds)
    (154/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.860732882 seconds)
    (155/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.631495161 seconds)
    (156/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.867592104 seconds)
    (157/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.439459167 seconds)
    (158/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.374009003 seconds)
    (159/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.377232119 seconds)
    (160/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.421042801 seconds)
    (161/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.211615463 seconds)
    (162/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.509310909 seconds)
    (163/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.375105583 seconds)
    (164/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 3.499165498 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 4.380753365 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.661663411 seconds)
    (167/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.192785367 seconds)
    (168/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.375318396 seconds)
    (169/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.37855739 seconds)
    (170/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.797930582 seconds)
    (171/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.040938908 seconds)
    (172/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.678881074 seconds)
    (173/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.372084298 seconds)
    (174/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.374649996 seconds)
    (175/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.371640559 seconds)
    (176/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.912078973 seconds)
    (177/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.851358566 seconds)
    (178/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 5.070246001 seconds)
    (179/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 4.8331034 seconds)
    (180/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 3.187028232 seconds)
    (181/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.076307215 seconds)
    (182/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 3.221369992 seconds)
    (183/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.371180434 seconds)
    (184/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.693914835 seconds)
    (185/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.605345053 seconds)
    (186/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.372757432 seconds)
    (187/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.372181979 seconds)
    (188/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.369635185 seconds)
    (189/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.294902571 seconds)
    (190/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.171644724 seconds)
    (191/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.495612225 seconds)
    (192/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.373892071 seconds)
    (193/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.318688073 seconds)
    (194/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.367868761 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.368285735 seconds)
    (196/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.439212354 seconds)
    (197/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.847581378 seconds)
    (198/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.57118855 seconds)
    (199/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 3.916277245 seconds)
    (200/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.258706912 seconds)
    (201/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.796005276 seconds)
    (202/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.778804508 seconds)
    (203/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.328023647 seconds)
    (204/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.815409349 seconds)
    (205/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.433812773 seconds)
    (206/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.365817829 seconds)
    (207/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.683584593 seconds)
    (208/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.707108036 seconds)
    (209/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.833078714 seconds)
    (210/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.639772672 seconds)
    (211/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 5.177195663 seconds)
    (212/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.479725735 seconds)
    (213/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.378956224 seconds)
    (214/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.811823609 seconds)
    (215/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.50897358 seconds)
    (216/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.368731534 seconds)
    (217/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.763265091 seconds)
    (218/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.610767195 seconds)
    (219/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.687239989 seconds)
    (220/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.272934069 seconds)
    (221/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.442183275 seconds)
    (222/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.691074665 seconds)
    (223/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.443714458 seconds)
    (224/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.380761719 seconds)
    (225/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.369776742 seconds)
    (226/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.437418184 seconds)
    (227/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.37436652 seconds)
    (228/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.729449689 seconds)
    (229/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.573356043 seconds)
    (230/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.746217791 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 3.913414811 seconds)
    (232/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.366044918 seconds)
    (233/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.368924154 seconds)
    (234/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.742019755 seconds)
    (235/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.268098629 seconds)
    (236/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.880569389 seconds)
    (237/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.85966962 seconds)
    (238/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.275541672 seconds)
    (239/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.073235244 seconds)
    (240/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 3.200185963 seconds)
    (241/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.377927112 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.369001366 seconds)
    (243/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.551385917 seconds)
    (244/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.566528044 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.04394143 seconds)
    (246/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.514740758 seconds)
    (247/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.382418957 seconds)
    (248/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.984104999 seconds)
    (249/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.569604596 seconds)
    (250/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.756279197 seconds)
    (251/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.654902751 seconds)
    (252/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.509791723 seconds)
    (253/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.370580838 seconds)
    (254/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.401359564 seconds)
    (255/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.374896644 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.694855794 seconds)
    (257/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.174431928 seconds)
    (258/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.541594076 seconds)
    (259/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.43553997 seconds)
    (260/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.181925782 seconds)
    (261/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.590666296 seconds)
    (262/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.726715199 seconds)
    (263/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.245898547 seconds)
    (264/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.515952466 seconds)
    (265/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.771776593 seconds)
    (266/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.609703447 seconds)
    (267/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.376302921 seconds)
    (268/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.684483291 seconds)
    (269/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.694317312 seconds)
    (270/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.260202854 seconds)
    (271/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.758493115 seconds)
    (272/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.631591957 seconds)
    (273/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.071454454 seconds)
    (274/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 3.183997274 seconds)
    (275/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.656234595 seconds)
    (276/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.623136997 seconds)
    (277/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.311364408 seconds)
    (278/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.518635104 seconds)
    (279/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 3.963727744 seconds)
    (280/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.376039864 seconds)
    (281/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.375328227 seconds)
    (282/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.368065979 seconds)
    (283/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.37030031 seconds)
    (284/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.369867772 seconds)
    (285/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.408528939 seconds)
    (286/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.695465316 seconds)
    (287/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.429463614 seconds)
    (288/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.255422104 seconds)
    (289/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.092749679 seconds)
    (290/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.517712962 seconds)
    (291/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.694343772 seconds)
    (292/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.507277422 seconds)
    (293/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.965431802 seconds)
    (294/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.61063321 seconds)
    (295/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.790793813 seconds)
    (296/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.990288855 seconds)
    (297/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.530602237 seconds)
    (298/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.287987086 seconds)
    (299/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.407711202 seconds)
    (300/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.575413501 seconds)
    (301/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.365217002 seconds)
    (302/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.921164852 seconds)
    (303/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.825875695 seconds)
    (304/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.612637874 seconds)
    (305/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.814776424 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.536950961 seconds)
    (307/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 3.909983508 seconds)
    (308/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.381230365 seconds)
    (309/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.74732238 seconds)
    (310/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.614497564 seconds)
    (311/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.768263286 seconds)
    (312/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.378904986 seconds)
    (313/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.584728766 seconds)
    (314/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.500119477 seconds)
    (315/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.369610121 seconds)
    (316/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.129052683 seconds)
    (317/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.51723675 seconds)
    (318/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.35289701 seconds)
    (319/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.740471094 seconds)
    (320/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.869872583 seconds)
    (321/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.688576453 seconds)
    (322/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.106462903 seconds)
    (323/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.423018488 seconds)
    (324/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.233682944 seconds)
    (325/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.245945118 seconds)
    (326/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.77899666 seconds)
    (327/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.414214919 seconds)
    (328/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.405053594 seconds)
    (329/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.378279519 seconds)
    (330/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.373892783 seconds)
    (331/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.369598509 seconds)
    (332/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.260222303 seconds)
    (333/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.528481071 seconds)
    (334/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.438522642 seconds)
    (335/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.559104793 seconds)
    (336/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.945391293 seconds)
    (337/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.4358979 seconds)
    (338/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.831062937 seconds)
    (339/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.684060001 seconds)
    (340/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.371342167 seconds)
    (341/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.498154594 seconds)
    (342/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.500774767 seconds)
    (343/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.473599035 seconds)
    (344/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.564582518 seconds)
    (345/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.369183329 seconds)
    (346/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.378246217 seconds)
    (347/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.652330879 seconds)
    (348/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.522914918 seconds)
    (349/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.370831241 seconds)
    (350/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.482815569 seconds)
    (351/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.911148805 seconds)
    (352/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.371673707 seconds)
    (353/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.129624859 seconds)
    (354/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.518439602 seconds)
    (355/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.757696246 seconds)
    (356/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.46800785 seconds)
    (357/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.377974921 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.374225166 seconds)
    (359/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.599648464 seconds)
    (360/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.626239382 seconds)
    (361/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.667253569 seconds)
    (362/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.135050423 seconds)
    (363/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.0926558 seconds)
    (364/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.709384397 seconds)
    (365/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.466444216 seconds)
    (366/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.57222887 seconds)
    (367/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.36940087 seconds)
    (368/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.396799458 seconds)
    (369/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.559536573 seconds)
    (370/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.472601883 seconds)
    (371/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.370459692 seconds)
    (372/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.440516614 seconds)
    (373/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.381589642 seconds)
    (374/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.513829082 seconds)
    (375/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.369673444 seconds)
    (376/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.399487893 seconds)
    (377/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.197176497 seconds)
    (378/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.41490025 seconds)
    (379/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.129698422 seconds)
    (380/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.406254358 seconds)
    (381/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.981731263 seconds)
    (382/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.26918198 seconds)
    (383/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.749576975 seconds)
    (384/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.481258892 seconds)
    (385/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.135010725 seconds)
    (386/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.951472566 seconds)
    (387/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.678751242 seconds)
    (388/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.372999265 seconds)
    (389/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.377305724 seconds)
    (390/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.366811254 seconds)
    (391/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.235460959 seconds)
    (392/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.2640906 seconds)
    (393/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 4.422493494 seconds)
    (394/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.432135548 seconds)
    (395/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.465023221 seconds)
    (396/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.868042526 seconds)
    (397/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.602586768 seconds)
    (398/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.368185235 seconds)
    (399/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.368098838 seconds)
    (400/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.367755234 seconds)
    (401/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.507242524 seconds)
    (402/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.673072989 seconds)
    (403/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.598703515 seconds)
    (404/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.368997045 seconds)
    (405/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.370488334 seconds)
    (406/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.662316833 seconds)
    (407/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.730716265 seconds)
    (408/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.510602845 seconds)
    (409/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.801297369 seconds)
    (410/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.666905032 seconds)
    (411/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.476119574 seconds)
    (412/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.109059496 seconds)
    (413/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.509819469 seconds)
    (414/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.400253981 seconds)
    (415/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.057043784 seconds)
    (416/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.564633458 seconds)
    (417/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.418045495 seconds)
    (418/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.462807816 seconds)
    (419/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.900397344 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.374351434 seconds)
    (421/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.697944026 seconds)
    (422/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.5236303 seconds)
    (423/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.375953399 seconds)
    (424/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.671269575 seconds)
    (425/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.588473259 seconds)
    (426/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.374429829 seconds)
    (427/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.367943346 seconds)
    (428/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.389555785 seconds)
    (429/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.35721871 seconds)
    (430/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.518230965 seconds)
    (431/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 4.605224421 seconds)
    (432/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 3.184499994 seconds)
    (433/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.239543645 seconds)
    (434/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 3.772600992 seconds)
    (435/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.369484678 seconds)
    (436/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.286647269 seconds)
    (437/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.039205719 seconds)
    (438/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.28014456 seconds)
    (439/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.255777762 seconds)
    (440/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.198688467 seconds)
    (441/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.094449143 seconds)
    (442/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.753622444 seconds)
    (443/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.500429587 seconds)
    (444/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.466465288 seconds)
    (445/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.758364162 seconds)
    (446/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.492211563 seconds)
    (447/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.221206112 seconds)
    (448/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.415414338 seconds)
    (449/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.709959022 seconds)
    (450/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.73874274 seconds)
    (451/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.311921497 seconds)
    (452/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.278072814 seconds)
    (453/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.090570606 seconds)
    (454/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.696205669 seconds)
    (455/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.982645866 seconds)
    (456/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.280823129 seconds)
    (457/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 4.595467294 seconds)
    (458/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.379156852 seconds)
    (459/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.873124859 seconds)
    (460/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.496198378 seconds)
    (461/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.519375658 seconds)
    (462/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.322038915 seconds)
    (463/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.917013122 seconds)
    (464/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.664180643 seconds)
    (465/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.695549157 seconds)
    (466/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.430254107 seconds)
    (467/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.786133608 seconds)
    (468/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.48725585 seconds)
    (469/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.84755777 seconds)
    (470/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.811339289 seconds)
    (471/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.571026393 seconds)
    (472/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.372518277 seconds)
    (473/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.372307029 seconds)
    (474/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.374087681 seconds)
    (475/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.535497362 seconds)
    (476/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.368674271 seconds)
    (477/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.403593414 seconds)
    (478/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.070944942 seconds)
    (479/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 3.182753826 seconds)
    (480/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.371726703 seconds)
    (481/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.022347227 seconds)
    (482/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.441229644 seconds)
    (483/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.70768562 seconds)
    (484/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.885269649 seconds)
    (485/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.688923224 seconds)
    (486/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.062328112 seconds)
    (487/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.669010164 seconds)
    (488/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.646873684 seconds)
    (489/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.438567948 seconds)
    (490/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 4.800799568 seconds)
    (491/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.792823083 seconds)
    (492/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.506334261 seconds)
    (493/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.373948827 seconds)
    (494/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.36718026 seconds)
    (495/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.369724208 seconds)
    (496/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.708902107 seconds)
    (497/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.134887567 seconds)
    (498/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 3.183939654 seconds)
    (499/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.07571542 seconds)
    (500/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.386873525 seconds)
    (501/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.572119672 seconds)
    (502/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.327818082 seconds)
    (503/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.803208867 seconds)
    (504/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 3.19207063 seconds)
    (505/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.289642241 seconds)
    (506/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.406028675 seconds)
    (507/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.780479427 seconds)
    (508/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.430477753 seconds)
    (509/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.459078843 seconds)
    (510/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.371094346 seconds)
    (511/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.765486975 seconds)
    (512/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.534222633 seconds)
    (513/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.521835788 seconds)
    (514/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.229231275 seconds)
    (515/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.510159912 seconds)
    (516/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.747552354 seconds)
    (517/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.01059271 seconds)
    (518/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.791434087 seconds)
    (519/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.43370395 seconds)
    (520/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.433651243 seconds)
    (521/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.372543838 seconds)
    (522/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.380336389 seconds)
    (523/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.335253306 seconds)
    (524/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.825242563 seconds)
    (525/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.52471181 seconds)
    (526/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.535776388 seconds)
    (527/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.428041546 seconds)
    (528/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.757756398 seconds)
    (529/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.106167133 seconds)
    (530/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.531059037 seconds)
    (531/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.369157672 seconds)
    (532/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.371948883 seconds)
    (533/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.763017762 seconds)
    (534/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.681381251 seconds)
    (535/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.819429938 seconds)
    (536/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.18730781 seconds)
    (537/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.665340549 seconds)
    (538/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.596839217 seconds)
    (539/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.130455662 seconds)
    (540/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.511789929 seconds)
    (541/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.102348979 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.808585143 seconds)
    (543/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.564729195 seconds)
    (544/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.58197294 seconds)
    (545/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.365748194 seconds)
    (546/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.377021703 seconds)
    (547/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.373470576 seconds)
    (548/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.367122137 seconds)
    (549/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.374469596 seconds)
    (550/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.372559943 seconds)
    (551/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.38067719 seconds)
    (552/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.891758873 seconds)
    (553/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.281543555 seconds)
    (554/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.298342125 seconds)
    (555/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.495496586 seconds)
    (556/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.342594803 seconds)
    (557/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.644413154 seconds)
    (558/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.746445349 seconds)
    (559/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.374286195 seconds)
    (560/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.495434809 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.375824235 seconds)
    (562/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.380596481 seconds)
    (563/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.339691073 seconds)
    (564/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.384907909 seconds)
    (565/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.434504222 seconds)
    (566/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.472805882 seconds)
    (567/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.478185534 seconds)
    (568/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.689068274 seconds)
    (569/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.436103234 seconds)
    (570/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.374175641 seconds)
    (571/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.46714351 seconds)
    (572/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.527748309 seconds)
    (573/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.371212564 seconds)
    (574/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.383896326 seconds)
    (575/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.373457916 seconds)
    (576/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.64944083 seconds)
    (577/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.016272925 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.926888141 seconds)
    (579/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.917223605 seconds)
    (580/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.628102123 seconds)
    (581/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.545171586 seconds)
    (582/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.804831707 seconds)
    (583/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.179938488 seconds)
    (584/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.146869114 seconds)
    (585/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.496796329 seconds)
    (586/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.371852438 seconds)
    (587/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.691089401 seconds)
    (588/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.281172023 seconds)
    (589/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.931391758 seconds)
    (590/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.673789518 seconds)
    (591/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.793564801 seconds)
    (592/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.924920867 seconds)
    (593/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.48435703 seconds)
    (594/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.255276161 seconds)
    (595/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.189120513 seconds)
    (596/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.795008476 seconds)
  done (took 1905.173734526 seconds)
done (took 3892.822437922 seconds)
(10/23) benchmarking "misc"...
  (1/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt", "UInt")...
    done (took 2.374696675 seconds)
    (2/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.370863502 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.380068565 seconds)
    (4/4) benchmarking ("Int", "UInt")...
    done (took 2.378248507 seconds)
  done (took 11.840213278 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.959167384 seconds)
  (3/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 3.282631617 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.624615224 seconds)
  done (took 8.313419215 seconds)
  (4/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.402990087 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.957908138 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 2.995078755 seconds)
  done (took 10.711873157 seconds)
  (5/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.200414942 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.17937276 seconds)
  done (took 8.721946349 seconds)
  (6/15) benchmarking "fastmath many args"...
  done (took 2.581064902 seconds)
  (7/15) benchmarking "23042"...
    (1/4) benchmarking "Float32"...
    done (took 2.802398123 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.509213224 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 4.07754514 seconds)
    (4/4) benchmarking "Float64"...
    done (took 3.780855197 seconds)
  done (took 16.509017029 seconds)
  (8/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.512955651 seconds)
  done (took 4.864642962 seconds)
  (9/15) benchmarking "18129"...
  done (took 7.364285445 seconds)
  (10/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.525661979 seconds)
    (2/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.854274901 seconds)
    (3/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.682588706 seconds)
  done (took 10.425241276 seconds)
  (11/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.955618616 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.138179827 seconds)
  done (took 8.456584342 seconds)
  (12/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.346912308 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.351913522 seconds)
    (3/3) benchmarking "Float64"...
    done (took 7.349274749 seconds)
  done (took 24.40788698 seconds)
  (13/15) benchmarking "20517"...
  done (took 2.876236295 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.652749375 seconds)
    (2/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.623609753 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.787489992 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.789805974 seconds)
    (5/10) benchmarking "zip(1:1000)"...
    done (took 2.483054205 seconds)
    (6/10) benchmarking "zip(1:1)"...
    done (took 2.716222385 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.592076629 seconds)
    (8/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.188188673 seconds)
    (9/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.861860659 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.826982512 seconds)
  done (took 29.865616323 seconds)
  (15/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "nested")...
    done (took 7.339480014 seconds)
    (2/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.412822666 seconds)
    (3/4) benchmarking ("parse", "function")...
    done (took 2.723060829 seconds)
    (4/4) benchmarking ("parse", "array")...
    done (took 4.402230083 seconds)
  done (took 24.238876335 seconds)
done (took 176.534700765 seconds)
(11/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.563320653 seconds)
    (2/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.568130226 seconds)
    (3/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.371242561 seconds)
    (4/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.704340416 seconds)
    (5/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.476815591 seconds)
    (6/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.624275955 seconds)
    (7/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.583331625 seconds)
    (8/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.838086288 seconds)
    (9/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.362347314 seconds)
    (10/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 9.419014346 seconds)
    (11/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.564258403 seconds)
    (12/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.606328968 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.601200988 seconds)
    (14/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.688069223 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.757124519 seconds)
    (16/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.400595133 seconds)
    (17/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.474012979 seconds)
    (18/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.426955967 seconds)
    (19/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.427677288 seconds)
    (20/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.539902867 seconds)
    (21/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.403679677 seconds)
    (22/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.343440734 seconds)
    (23/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 9.842417067 seconds)
    (24/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.359997544 seconds)
    (25/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 14.539007566 seconds)
    (26/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.367158574 seconds)
    (27/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.363419094 seconds)
    (28/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.580959696 seconds)
    (29/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.355067247 seconds)
    (30/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.718246002 seconds)
    (31/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.352563903 seconds)
    (32/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 3.020986296 seconds)
    (33/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.681878823 seconds)
    (34/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.8791809 seconds)
    (35/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.551818344 seconds)
    (36/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.519414983 seconds)
    (37/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.584696718 seconds)
    (38/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.3976736 seconds)
    (39/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.855984642 seconds)
    (40/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.859537557 seconds)
    (41/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.543307201 seconds)
    (42/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.423263886 seconds)
    (43/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.772552766 seconds)
    (44/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.58695966 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.590235751 seconds)
    (46/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.893633831 seconds)
    (47/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.460036679 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.235748886 seconds)
    (49/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.597083013 seconds)
    (50/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.4899348 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.65458962 seconds)
    (52/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.576124051 seconds)
    (53/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.070857948 seconds)
    (54/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.34452666 seconds)
    (55/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.427628829 seconds)
    (56/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.371406588 seconds)
    (57/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.892439732 seconds)
    (58/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.58221887 seconds)
    (59/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.410703557 seconds)
    (60/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 2.929891889 seconds)
    (61/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.402953907 seconds)
    (62/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.579087036 seconds)
    (63/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.415895799 seconds)
    (64/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.572422387 seconds)
    (65/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.538556729 seconds)
    (66/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.894253599 seconds)
    (67/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.563975441 seconds)
    (68/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.347132693 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 10.897549882 seconds)
    (70/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.445163005 seconds)
    (71/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.545545456 seconds)
    (72/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.518681646 seconds)
    (73/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.733095859 seconds)
    (74/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.589854104 seconds)
    (75/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.534079896 seconds)
    (76/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.589715438 seconds)
    (77/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.571783359 seconds)
    (78/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.520380846 seconds)
    (79/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.601608128 seconds)
    (80/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.591468826 seconds)
    (81/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.64288865 seconds)
    (82/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.008700696 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.417103639 seconds)
    (84/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.664022188 seconds)
    (85/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.340923739 seconds)
    (86/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 3.064961017 seconds)
    (87/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.376564756 seconds)
    (88/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.36795506 seconds)
    (89/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.472716298 seconds)
    (90/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.531949092 seconds)
    (91/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.361210354 seconds)
    (92/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.586086533 seconds)
    (93/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.371417329 seconds)
    (94/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.34453759 seconds)
    (95/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.586001374 seconds)
    (96/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.528409354 seconds)
    (97/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.803493537 seconds)
    (98/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.438220253 seconds)
    (99/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.402306113 seconds)
    (100/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.346596039 seconds)
    (101/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.739229572 seconds)
    (102/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.441238834 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.530507245 seconds)
    (104/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.349843486 seconds)
    (105/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.423667239 seconds)
    (106/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.539294163 seconds)
    (107/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.437550645 seconds)
    (108/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.540307048 seconds)
    (109/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.373798896 seconds)
    (110/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.342002278 seconds)
    (111/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 7.660716392 seconds)
    (112/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.236467332 seconds)
    (113/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.425438944 seconds)
    (114/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.422456238 seconds)
    (115/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.34281872 seconds)
    (116/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 7.583033555 seconds)
    (117/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 2.428421639 seconds)
    (118/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.357774113 seconds)
    (119/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.354051077 seconds)
    (120/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.335702472 seconds)
    (121/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.617301511 seconds)
    (122/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.722169575 seconds)
    (123/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.556163377 seconds)
    (124/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.832763965 seconds)
    (125/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.385499783 seconds)
    (126/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.579998687 seconds)
    (127/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.346733804 seconds)
    (128/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.107282415 seconds)
    (129/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.681851143 seconds)
    (130/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.595689278 seconds)
    (131/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.228896641 seconds)
    (132/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.45047243 seconds)
    (133/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.154999392 seconds)
    (134/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.450089073 seconds)
    (135/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 3.036330031 seconds)
    (136/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.42319933 seconds)
    (137/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.342528575 seconds)
    (138/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.405664445 seconds)
    (139/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.416566012 seconds)
    (140/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.418896319 seconds)
    (141/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.737797166 seconds)
    (142/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.438205203 seconds)
    (143/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 2.679645164 seconds)
    (144/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.443446007 seconds)
    (145/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.589002904 seconds)
    (146/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.489415261 seconds)
    (147/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.354051506 seconds)
    (148/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 7.262072514 seconds)
    (149/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.425018262 seconds)
    (150/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.445700417 seconds)
    (151/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.349304974 seconds)
    (152/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 10.074918037 seconds)
    (153/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.431882485 seconds)
    (154/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.58607975 seconds)
    (155/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.529094005 seconds)
    (156/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.58801578 seconds)
    (157/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.602607673 seconds)
    (158/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.423160008 seconds)
    (159/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 4.956583462 seconds)
    (160/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.414737231 seconds)
    (161/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.34551415 seconds)
    (162/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 10.16727562 seconds)
    (163/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.604048034 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.654010458 seconds)
    (165/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.355714232 seconds)
    (166/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 6.371214239 seconds)
    (167/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.517868567 seconds)
    (168/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.496985034 seconds)
    (169/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.429951837 seconds)
    (170/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.348975797 seconds)
    (171/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 9.992693741 seconds)
    (172/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.606229349 seconds)
    (173/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.845345588 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.368534635 seconds)
    (175/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.365008729 seconds)
    (176/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.750583443 seconds)
    (177/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.442125848 seconds)
    (178/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.48083817 seconds)
    (179/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.393693929 seconds)
    (180/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 6.088447185 seconds)
    (181/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.363346545 seconds)
    (182/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.679656452 seconds)
    (183/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.104488061 seconds)
    (184/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 3.020595082 seconds)
    (185/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.64965887 seconds)
    (186/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.743405826 seconds)
    (187/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.591619997 seconds)
    (188/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.31483272 seconds)
    (189/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.609666646 seconds)
    (190/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.887266464 seconds)
    (191/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.490316424 seconds)
    (192/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.351320925 seconds)
    (193/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.583125786 seconds)
    (194/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.572030595 seconds)
    (195/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 2.538221415 seconds)
    (196/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.378968199 seconds)
    (197/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.431602997 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.449238463 seconds)
    (199/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.714902951 seconds)
    (200/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.562185668 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 3.003165605 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.335954964 seconds)
    (203/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.671470484 seconds)
    (204/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.695248861 seconds)
    (205/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.841364034 seconds)
    (206/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.38397729 seconds)
    (207/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.466861803 seconds)
    (208/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.604748783 seconds)
    (209/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.458036023 seconds)
    (210/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.477834543 seconds)
    (211/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.53857593 seconds)
    (212/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.427395388 seconds)
    (213/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.497433406 seconds)
    (214/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.444408767 seconds)
    (215/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.392732956 seconds)
    (216/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.361961995 seconds)
    (217/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.37408182 seconds)
    (218/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.551087 seconds)
    (219/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.348856947 seconds)
    (220/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 12.077401334 seconds)
    (221/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 3.523114478 seconds)
    (222/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.347001109 seconds)
    (223/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 14.107391824 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.725842131 seconds)
    (225/434) benchmarking ("sort", "BigInt", 0)...
    done (took 11.93818379 seconds)
    (226/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.590966853 seconds)
    (227/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.650974754 seconds)
    (228/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.355444909 seconds)
    (229/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.416617273 seconds)
    (230/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.500877303 seconds)
    (231/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.416703793 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.698704409 seconds)
    (233/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.372049169 seconds)
    (234/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.080871964 seconds)
    (235/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.564043479 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.678695576 seconds)
    (237/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.590088583 seconds)
    (238/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.500557553 seconds)
    (239/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.4240922 seconds)
    (240/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.347084502 seconds)
    (241/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 3.068373458 seconds)
    (242/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.40442675 seconds)
    (243/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.588245567 seconds)
    (244/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.432044393 seconds)
    (245/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.747147462 seconds)
    (246/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 6.813436925 seconds)
    (247/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.354739921 seconds)
    (248/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 7.268620767 seconds)
    (249/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.295325349 seconds)
    (250/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.186382072 seconds)
    (251/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.357587266 seconds)
    (252/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.679005225 seconds)
    (253/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.530745446 seconds)
    (254/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.780074757 seconds)
    (255/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.435626655 seconds)
    (256/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.356989664 seconds)
    (257/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.902336616 seconds)
    (258/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 3.244273301 seconds)
    (259/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.677718572 seconds)
    (260/434) benchmarking ("sort", "Float32", 0)...
    done (took 3.067606347 seconds)
    (261/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.702833382 seconds)
    (262/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.353039948 seconds)
    (263/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.926129173 seconds)
    (264/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.525369849 seconds)
    (265/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.849240237 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.592192992 seconds)
    (267/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.363193613 seconds)
    (268/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 11.348506451 seconds)
    (269/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.352606497 seconds)
    (270/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 10.199808122 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 3.029249297 seconds)
    (272/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.41027764 seconds)
    (273/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.422145235 seconds)
    (274/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.824920099 seconds)
    (275/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.634717921 seconds)
    (276/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.600046401 seconds)
    (277/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.606828947 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.700045047 seconds)
    (279/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.657601119 seconds)
    (280/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.488739323 seconds)
    (281/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.368412869 seconds)
    (282/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.704654964 seconds)
    (283/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.687620863 seconds)
    (284/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.502430346 seconds)
    (285/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.432966999 seconds)
    (286/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.38283506 seconds)
    (287/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.910014129 seconds)
    (288/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.57495349 seconds)
    (289/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.348362348 seconds)
    (290/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 3.162263913 seconds)
    (291/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.599759483 seconds)
    (292/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.525893658 seconds)
    (293/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.629036837 seconds)
    (294/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.937043385 seconds)
    (295/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.390974864 seconds)
    (296/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.35092601 seconds)
    (297/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 6.655341469 seconds)
    (298/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.810630536 seconds)
    (299/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.371526477 seconds)
    (300/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.342993335 seconds)
    (301/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.98617353 seconds)
    (302/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.371754429 seconds)
    (303/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.565574285 seconds)
    (304/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.448530461 seconds)
    (305/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.53677631 seconds)
    (306/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.70131097 seconds)
    (307/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.678508783 seconds)
    (308/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.369994993 seconds)
    (309/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.538137836 seconds)
    (310/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.359612579 seconds)
    (311/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.433528023 seconds)
    (312/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.365812121 seconds)
    (313/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.536446254 seconds)
    (314/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.351764437 seconds)
    (315/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 7.257244498 seconds)
    (316/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.723820555 seconds)
    (317/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.407506971 seconds)
    (318/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.482126209 seconds)
    (319/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.348447935 seconds)
    (320/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.860802483 seconds)
    (321/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.364722206 seconds)
    (322/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.445507813 seconds)
    (323/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.583759545 seconds)
    (324/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.429488528 seconds)
    (325/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.344439271 seconds)
    (326/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.361927612 seconds)
    (327/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 3.03275336 seconds)
    (328/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.995588955 seconds)
    (329/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.472337681 seconds)
    (330/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.022705428 seconds)
    (331/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 2.692981843 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.594197804 seconds)
    (333/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.382344017 seconds)
    (334/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.405295474 seconds)
    (335/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.694004911 seconds)
    (336/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 6.885395539 seconds)
    (337/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.415071549 seconds)
    (338/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.446028722 seconds)
    (339/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.346292848 seconds)
    (340/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.816659802 seconds)
    (341/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.367821541 seconds)
    (342/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.346264462 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.54495239 seconds)
    (344/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.60473812 seconds)
    (345/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.572194865 seconds)
    (346/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.55298276 seconds)
    (347/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.39543498 seconds)
    (348/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.53231261 seconds)
    (349/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.3529935 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 3.032642807 seconds)
    (351/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.350443926 seconds)
    (352/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.452897675 seconds)
    (353/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.371362397 seconds)
    (354/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.362984992 seconds)
    (355/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.367971701 seconds)
    (356/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.553650297 seconds)
    (357/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.679926814 seconds)
    (358/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.530381345 seconds)
    (359/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.679282935 seconds)
    (360/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.585133429 seconds)
    (361/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.673504433 seconds)
    (362/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.36223849 seconds)
    (363/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.646758155 seconds)
    (364/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.720499887 seconds)
    (365/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.434267018 seconds)
    (366/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.42287525 seconds)
    (367/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.622709611 seconds)
    (368/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.696844265 seconds)
    (369/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.442138242 seconds)
    (370/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.350343019 seconds)
    (371/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 10.133037435 seconds)
    (372/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.518851461 seconds)
    (373/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.41611229 seconds)
    (374/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.520404914 seconds)
    (375/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.393463488 seconds)
    (376/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.548879116 seconds)
    (377/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.413925374 seconds)
    (378/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.447165836 seconds)
    (379/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.370509159 seconds)
    (380/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.45907509 seconds)
    (381/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.689901151 seconds)
    (382/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.436182857 seconds)
    (383/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.726798013 seconds)
    (384/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.367030402 seconds)
    (385/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.716799658 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.352631627 seconds)
    (387/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.60754733 seconds)
    (388/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.12052988 seconds)
    (389/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 3.576303648 seconds)
    (390/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.36887525 seconds)
    (391/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.366752869 seconds)
    (392/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.590212778 seconds)
    (393/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.446506734 seconds)
    (394/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.588551557 seconds)
    (395/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.598367642 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.597827819 seconds)
    (397/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.369917793 seconds)
    (398/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.713998563 seconds)
    (399/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.366396322 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.350427708 seconds)
    (401/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 14.267634019 seconds)
    (402/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 6.7286021 seconds)
    (403/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.603303714 seconds)
    (404/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.534699629 seconds)
    (405/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.622999239 seconds)
    (406/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.624987557 seconds)
    (407/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.68975698 seconds)
    (408/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.561222062 seconds)
    (409/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.685904448 seconds)
    (410/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.441023473 seconds)
    (411/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.348223442 seconds)
    (412/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 9.915820829 seconds)
    (413/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.657293733 seconds)
    (414/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.902379582 seconds)
    (415/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.854511361 seconds)
    (416/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.647754118 seconds)
    (417/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.58335221 seconds)
    (418/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.622919972 seconds)
    (419/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.489305683 seconds)
    (420/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.572458783 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.368486972 seconds)
    (422/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.59641013 seconds)
    (423/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.436983238 seconds)
    (424/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.486208512 seconds)
    (425/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.36690125 seconds)
    (426/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.478616603 seconds)
    (427/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.838443503 seconds)
    (428/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.742149602 seconds)
    (429/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.796221894 seconds)
    (430/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.473320785 seconds)
    (431/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.521330422 seconds)
    (432/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 2.682669215 seconds)
    (433/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.460986374 seconds)
    (434/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.574475389 seconds)
  done (took 1609.253457025 seconds)
done (took 1611.599937945 seconds)
(12/23) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.377618547 seconds)
  (2/4) benchmarking "grow_array"...
  done (took 7.902968742 seconds)
  (3/4) benchmarking "arrays"...
  done (took 7.359340624 seconds)
  (4/4) benchmarking "structs"...
  done (took 7.55483029 seconds)
done (took 32.541674943 seconds)
(13/23) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.343252157 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.73701251 seconds)
    (3/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.343500989 seconds)
    (4/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.69103621 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.587788547 seconds)
    (6/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.353728707 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.354534873 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.549363093 seconds)
    (9/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.540659157 seconds)
    (10/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.532676184 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.424807997 seconds)
    (12/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.563378291 seconds)
    (13/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.517234924 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.520264479 seconds)
    (15/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.354992347 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.427717985 seconds)
    (17/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.564484042 seconds)
    (18/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.472359797 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.359217676 seconds)
    (20/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.686525515 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.357962697 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.580717704 seconds)
    (23/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.673781302 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.363355717 seconds)
    (25/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.599862811 seconds)
    (26/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.62519229 seconds)
    (27/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.350311858 seconds)
    (28/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.34692938 seconds)
    (29/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.343855073 seconds)
    (30/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.572139896 seconds)
    (31/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.664478306 seconds)
    (32/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.435421941 seconds)
    (33/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.535493557 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.346006126 seconds)
    (35/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.663117012 seconds)
    (36/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.346601645 seconds)
    (37/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.345533165 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.524341456 seconds)
    (39/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.665740594 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.568740002 seconds)
    (41/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.347337619 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.350043018 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.349779287 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.34587092 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.549036442 seconds)
    (46/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.345540724 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.510758192 seconds)
    (48/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.630175394 seconds)
    (49/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.557912019 seconds)
    (50/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.610502398 seconds)
    (51/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.400702325 seconds)
    (52/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.577290069 seconds)
    (53/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.572129871 seconds)
    (54/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.568440428 seconds)
    (55/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.530062404 seconds)
    (56/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.503486548 seconds)
    (57/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.586490524 seconds)
    (58/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.730771575 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.628182022 seconds)
    (60/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.342120583 seconds)
    (61/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.664372658 seconds)
    (62/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.342415215 seconds)
    (63/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.411249476 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.345557929 seconds)
    (65/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.579845737 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.703379711 seconds)
  done (took 277.271029807 seconds)
  (2/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.461994991 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.378583771 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.462199776 seconds)
    (4/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.613446293 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.436691961 seconds)
    (6/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.400916112 seconds)
    (7/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.398149412 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.409368315 seconds)
    (9/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.399090415 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.411444888 seconds)
    (11/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.381177929 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.408661003 seconds)
    (13/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.342924308 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.396393536 seconds)
    (15/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.446987845 seconds)
    (16/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.379804679 seconds)
    (17/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.583484825 seconds)
    (18/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.063752934 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.393650073 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.473880667 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.651893916 seconds)
    (22/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 3.101446533 seconds)
    (23/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.398263399 seconds)
    (24/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.397474142 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.38047239 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.406436601 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.376965942 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.400193485 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.409547966 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.407886093 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.395578156 seconds)
    (32/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.48825292 seconds)
    (33/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.379409464 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.447794555 seconds)
    (35/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.854993703 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.50952256 seconds)
    (37/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.966974355 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.378504172 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.322313868 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.919563973 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.650121998 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 3.136135021 seconds)
    (43/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.87672726 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 3.160419044 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.515675558 seconds)
    (46/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.379296351 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.383407731 seconds)
    (48/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.377329448 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.647958035 seconds)
    (50/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.572663574 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.314619579 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.042783803 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.391036962 seconds)
    (54/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.410939582 seconds)
    (55/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.391945922 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.445754672 seconds)
    (57/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.881188951 seconds)
    (58/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 3.299720644 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.37626148 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.38071491 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.447365798 seconds)
    (62/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.46274403 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.464087286 seconds)
    (64/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.380514595 seconds)
    (65/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.574705568 seconds)
    (66/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.586111895 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.655567669 seconds)
    (68/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 3.157362209 seconds)
    (69/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.399951332 seconds)
    (70/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.400109124 seconds)
    (71/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.396552734 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.392834411 seconds)
  done (took 203.137182939 seconds)
  (3/5) benchmarking "sequences"...
    (1/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.688378841 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.496906626 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.686867369 seconds)
    (4/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.605570377 seconds)
    (5/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.996313502 seconds)
    (6/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.699328329 seconds)
    (7/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.92707928 seconds)
  done (took 21.446933444 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.000917505 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.475463813 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.006273342 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.512777213 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.837152749 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.759203134 seconds)
  done (took 19.974452602 seconds)
  (5/5) benchmarking "types"...
    (1/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.40669236 seconds)
    (2/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.353152096 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.248158306 seconds)
    (4/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.459920391 seconds)
    (5/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.400614918 seconds)
    (6/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.286905654 seconds)
    (7/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.449120043 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.433053847 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.385478952 seconds)
    (10/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.462147562 seconds)
    (11/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.570440003 seconds)
    (12/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.343047899 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.41733344 seconds)
    (14/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.673868009 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.638763158 seconds)
    (16/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.385591105 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.208863211 seconds)
    (18/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.25044304 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.527736298 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.686007106 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.3894531 seconds)
    (22/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.343732945 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.703455031 seconds)
    (24/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.404695783 seconds)
    (25/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.445114817 seconds)
    (26/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.543653267 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.39027141 seconds)
    (28/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.40870879 seconds)
    (29/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.568792204 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.668496544 seconds)
    (31/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.38535636 seconds)
    (32/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.341819133 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.399176097 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.390488866 seconds)
    (35/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.579410712 seconds)
    (36/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.401273723 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.601222836 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.397650582 seconds)
    (39/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.406671586 seconds)
    (40/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.640602061 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.407048812 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.802103704 seconds)
    (43/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.343797586 seconds)
    (44/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.342158242 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.40071648 seconds)
    (46/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.554836857 seconds)
    (47/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.4743217 seconds)
    (48/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.402765323 seconds)
    (49/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.241327447 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.389469225 seconds)
    (51/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.683988969 seconds)
    (52/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.41418085 seconds)
    (53/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.638957534 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.339070583 seconds)
    (55/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.679616257 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.512403118 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.384626337 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.387032093 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.387730777 seconds)
    (60/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.41124448 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.394878932 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.393787898 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.640447316 seconds)
    (64/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.528239009 seconds)
    (65/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.432693153 seconds)
    (66/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.340353254 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.388553542 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.404272942 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.399591622 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.472657628 seconds)
    (71/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.384625225 seconds)
    (72/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.400218294 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.52984527 seconds)
    (74/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.409729822 seconds)
    (75/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.342554004 seconds)
    (76/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.07189181 seconds)
    (77/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.532112381 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.635680905 seconds)
    (79/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.396954973 seconds)
    (80/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.406559369 seconds)
    (81/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.400891393 seconds)
    (82/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.338758443 seconds)
    (83/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.402658796 seconds)
    (84/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.509548427 seconds)
    (85/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.394826697 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.397598276 seconds)
    (87/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.683036744 seconds)
    (88/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.645051672 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.636659852 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.399177839 seconds)
    (91/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.105041806 seconds)
    (92/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.400747757 seconds)
    (93/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.424077693 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.566860453 seconds)
    (95/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.422869312 seconds)
    (96/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.345980059 seconds)
    (97/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.383249068 seconds)
  done (took 304.513621722 seconds)
done (took 828.701416758 seconds)
(14/23) benchmarking "shootout"...
  (1/12) benchmarking "fasta"...
  done (took 2.460681571 seconds)
  (2/12) benchmarking "k_nucleotide"...
  done (took 7.374871341 seconds)
  (3/12) benchmarking "revcomp"...
  done (took 3.502657023 seconds)
  (4/12) benchmarking "spectralnorm"...
  done (took 7.385890727 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.344422093 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.373091663 seconds)
  (7/12) benchmarking "meteor_contest"...
  done (took 8.823891072 seconds)
  (8/12) benchmarking "pidigits"...
  done (took 8.027037738 seconds)
  (9/12) benchmarking "nbody_vec"...
  done (took 6.202522943 seconds)
  (10/12) benchmarking "nbody"...
  done (took 3.39875562 seconds)
  (11/12) benchmarking "regex_dna"...
  done (took 7.35751666 seconds)
  (12/12) benchmarking "fannkuch"...
  done (took 3.699126419 seconds)
done (took 75.293399389 seconds)
(15/23) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.345500694 seconds)
    (2/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.35023452 seconds)
    (3/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.345186807 seconds)
    (4/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.347477357 seconds)
  done (took 31.733746651 seconds)
  (2/6) benchmarking "26942"...
  done (took 3.785781473 seconds)
  (3/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.471234869 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.741854006 seconds)
    (3/4) benchmarking ("(10000000,)", 2)...
    done (took 2.745149972 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.421071422 seconds)
  done (took 13.145930752 seconds)
  (4/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.388286929 seconds)
    (2/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.392379697 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.379360947 seconds)
    (4/9) benchmarking (5, "scal_tup")...
    done (took 2.389114559 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.387053015 seconds)
    (6/9) benchmarking (3, "scal_tup")...
    done (took 2.383002181 seconds)
    (7/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.384789029 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.384704667 seconds)
    (9/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.348157217 seconds)
  done (took 28.78828873 seconds)
  (5/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 3)...
    done (took 2.597923676 seconds)
    (2/6) benchmarking ("tuple", 10)...
    done (took 2.54855598 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.472468289 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.641406153 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.810908003 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.530954405 seconds)
  done (took 18.378598016 seconds)
  (6/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.345510889 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.344824962 seconds)
    (3/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.118538849 seconds)
  done (took 23.153159979 seconds)
done (took 121.331254975 seconds)
(16/23) benchmarking "sort"...
  (1/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.350380733 seconds)
    (2/13) benchmarking "small Float64 view"...
    done (took 2.351482919 seconds)
    (3/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.838422079 seconds)
    (4/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.360264037 seconds)
    (5/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.853396149 seconds)
    (6/13) benchmarking "small Int view"...
    done (took 2.357828574 seconds)
    (7/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.760387356 seconds)
    (8/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.757716584 seconds)
    (9/13) benchmarking "Float16"...
    done (took 7.346043621 seconds)
    (10/13) benchmarking "sort(rand(10^8))"...
    done (took 12.995099095 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.362822036 seconds)
    (12/13) benchmarking "inplace sorting of a view"...
    done (took 2.512071219 seconds)
    (13/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.490397396 seconds)
  done (took 80.683430908 seconds)
  (2/11) benchmarking "length = 10"...
    (1/17) benchmarking "all same"...
    done (took 2.352481431 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.359306285 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.356135157 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.356818157 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.356910857 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.361247253 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.359398275 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.353362293 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.353335699 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.353541631 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.356056864 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.355604928 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.365651813 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.348900896 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.355615019 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.35329394 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.390425667 seconds)
  done (took 42.475475612 seconds)
  (3/11) benchmarking "issorted"...
    (1/8) benchmarking ("reverse", "ascending")...
    done (took 2.972428149 seconds)
    (2/8) benchmarking ("forwards", "ascending")...
    done (took 2.947426259 seconds)
    (3/8) benchmarking ("forwards", "descending")...
    done (took 2.789225464 seconds)
    (4/8) benchmarking ("reverse", "random")...
    done (took 3.161344334 seconds)
    (5/8) benchmarking ("reverse", "ones")...
    done (took 3.392920245 seconds)
    (6/8) benchmarking ("forwards", "random")...
    done (took 2.961153474 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.390548433 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.954980105 seconds)
  done (took 26.918652307 seconds)
  (4/11) benchmarking "length = 30"...
    (1/17) benchmarking "all same"...
    done (took 2.352947882 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.35772468 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.36131213 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.358279826 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.351464112 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.362513541 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.359720336 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.354209605 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.356844042 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.356231779 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.361945154 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.356204462 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.36438806 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.351196366 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.362944131 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.355689109 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.505250611 seconds)
  done (took 42.573828822 seconds)
  (5/11) benchmarking "quicksort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.343754475 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.361407944 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.34769499 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.349141744 seconds)
  done (took 31.744499374 seconds)
  (6/11) benchmarking "length = 100"...
    (1/17) benchmarking "all same"...
    done (took 2.351953896 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.373074161 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.365875644 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.369460527 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.349476284 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.373125532 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.386363266 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.371269823 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.381025398 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.380577681 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.38168068 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.363441015 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.376167543 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.35227074 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.393290499 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.362941965 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 3.026205518 seconds)
  done (took 43.309411513 seconds)
  (7/11) benchmarking "length = 10000"...
    (1/17) benchmarking "all same"...
    done (took 2.552854986 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 4.897067229 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.062377181 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.050555897 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.378056706 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 3.985668365 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 6.554484511 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.963785167 seconds)
    (9/17) benchmarking "descending"...
    done (took 5.088027082 seconds)
    (10/17) benchmarking "ascending"...
    done (took 5.041694563 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 7.336316363 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 3.979799693 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.14900053 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.382752317 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 6.645416269 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 3.897030134 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.364242184 seconds)
  done (took 81.674410085 seconds)
  (8/11) benchmarking "mergesort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 7.34818068 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 7.350793394 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 7.346092995 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 7.349989044 seconds)
  done (took 31.737622148 seconds)
  (9/11) benchmarking "length = 1000"...
    (1/17) benchmarking "all same"...
    done (took 2.376041244 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.57442518 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.567341683 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.556100413 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.359975919 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.547547753 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.691710964 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.508192979 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.563009244 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.543695849 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.738134207 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.537412049 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.57195001 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.357770445 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.690986705 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.525604489 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 7.34317276 seconds)
  done (took 50.411040781 seconds)
  (10/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sort! reverse"...
    done (took 2.372127228 seconds)
    (2/4) benchmarking "sortperm forwards"...
    done (took 2.374945172 seconds)
    (3/4) benchmarking "sort forwards"...
    done (took 2.368708092 seconds)
    (4/4) benchmarking "sortperm! reverse"...
    done (took 2.384059183 seconds)
  done (took 11.845675368 seconds)
  (11/11) benchmarking "length = 3"...
    (1/17) benchmarking "all same"...
    done (took 2.350918761 seconds)
    (2/17) benchmarking "sort(randn(length))"...
    done (took 2.349651121 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.34920639 seconds)
    (4/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.349286521 seconds)
    (5/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.352932993 seconds)
    (6/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.356763634 seconds)
    (7/17) benchmarking "Int unions with missing"...
    done (took 2.350029437 seconds)
    (8/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.3494326 seconds)
    (9/17) benchmarking "descending"...
    done (took 2.350971317 seconds)
    (10/17) benchmarking "ascending"...
    done (took 2.350687764 seconds)
    (11/17) benchmarking "sortperm(rand(length))"...
    done (took 2.34944494 seconds)
    (12/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.349636528 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.356000888 seconds)
    (14/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.347535471 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.350887641 seconds)
    (16/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.34919692 seconds)
    (17/17) benchmarking "mixed eltype with by order"...
    done (took 2.378061166 seconds)
  done (took 42.33774629 seconds)
done (took 488.054012448 seconds)
(17/23) benchmarking "array"...
  (1/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.584981701 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.594257578 seconds)
    (3/5) benchmarking ("setindex!", 4)...
    done (took 2.624937326 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.565025076 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.591256664 seconds)
  done (took 15.304631769 seconds)
  (2/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.345517315 seconds)
    (2/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.015044615 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.40261077 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.70177232 seconds)
    (5/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.451433364 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.718571612 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.35211975 seconds)
    (8/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.529653055 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.943927503 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.035439873 seconds)
    (11/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.349328555 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.406532963 seconds)
  done (took 105.596814946 seconds)
  (3/13) benchmarking "index"...
    (1/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.816556848 seconds)
    (2/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.696997868 seconds)
    (3/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.344754668 seconds)
    (4/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.350195602 seconds)
    (5/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.345866392 seconds)
    (6/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.176517276 seconds)
    (7/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.426136681 seconds)
    (8/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.348764602 seconds)
    (9/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.349083211 seconds)
    (10/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.344057786 seconds)
    (11/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 4.498446732 seconds)
    (12/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.35514168 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.461788564 seconds)
    (14/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.464378618 seconds)
    (15/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.480878386 seconds)
    (16/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.344797488 seconds)
    (17/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.839220015 seconds)
    (18/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.350382636 seconds)
    (19/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343977107 seconds)
    (20/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.38238079 seconds)
    (21/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 4.09255604 seconds)
    (22/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.344562048 seconds)
    (23/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.358213583 seconds)
    (24/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.343913288 seconds)
    (25/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.56258932 seconds)
    (26/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.345452027 seconds)
    (27/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.343893087 seconds)
    (28/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.500923286 seconds)
    (29/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.890972742 seconds)
    (30/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.348515942 seconds)
    (31/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.346332616 seconds)
    (32/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.345435102 seconds)
    (33/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350414109 seconds)
    (34/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.253271052 seconds)
    (35/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.351941327 seconds)
    (36/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.345942869 seconds)
    (37/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.365313315 seconds)
    (38/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.847283305 seconds)
    (39/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.356521993 seconds)
    (40/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345184706 seconds)
    (41/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.854325848 seconds)
    (42/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38029488 seconds)
    (43/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.390800842 seconds)
    (44/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.355746475 seconds)
    (45/608) benchmarking ("sum", "3darray")...
    done (took 3.477804077 seconds)
    (46/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.918810799 seconds)
    (47/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.344846355 seconds)
    (48/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 4.590398344 seconds)
    (49/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347038893 seconds)
    (50/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.472714597 seconds)
    (51/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.343617811 seconds)
    (52/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.525181601 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347849066 seconds)
    (54/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4659998 seconds)
    (55/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.346673397 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.35390492 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347252349 seconds)
    (58/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.380658501 seconds)
    (59/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.343956257 seconds)
    (60/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.45382407 seconds)
    (61/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349026843 seconds)
    (62/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.897156538 seconds)
    (63/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.745229529 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347849219 seconds)
    (65/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349990199 seconds)
    (66/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.007923979 seconds)
    (67/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.514141681 seconds)
    (68/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346894851 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.446470014 seconds)
    (70/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.346369957 seconds)
    (71/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.341583862 seconds)
    (72/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.344510787 seconds)
    (73/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.344942057 seconds)
    (74/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.341598997 seconds)
    (75/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.37640969 seconds)
    (76/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.348156284 seconds)
    (77/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.645325285 seconds)
    (78/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.346352048 seconds)
    (79/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.264514249 seconds)
    (80/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.357678157 seconds)
    (81/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.347079074 seconds)
    (82/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.346626114 seconds)
    (83/608) benchmarking "6d"...
    done (took 7.341877516 seconds)
    (84/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347940553 seconds)
    (85/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.151559592 seconds)
    (86/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.445793295 seconds)
    (87/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.31553181 seconds)
    (88/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.346827414 seconds)
    (89/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.346488599 seconds)
    (90/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.361564029 seconds)
    (91/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.347031172 seconds)
    (92/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.34375432 seconds)
    (93/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.34375157 seconds)
    (94/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.151425416 seconds)
    (95/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.354945566 seconds)
    (96/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34440753 seconds)
    (97/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.345990166 seconds)
    (98/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.780120138 seconds)
    (99/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.642193548 seconds)
    (100/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.344094849 seconds)
    (101/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.343321057 seconds)
    (102/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.343569155 seconds)
    (103/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346993727 seconds)
    (104/608) benchmarking "ind2sub"...
    done (took 3.08530013 seconds)
    (105/608) benchmarking "5d"...
    done (took 5.45059584 seconds)
    (106/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.48054717 seconds)
    (107/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.344576996 seconds)
    (108/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.342555557 seconds)
    (109/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.404534855 seconds)
    (110/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.344031817 seconds)
    (111/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.342495672 seconds)
    (112/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353989525 seconds)
    (113/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.346331668 seconds)
    (114/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.343480947 seconds)
    (115/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.34568411 seconds)
    (116/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.345285198 seconds)
    (117/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.74507884 seconds)
    (118/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.346496899 seconds)
    (119/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 5.570908415 seconds)
    (120/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.435706642 seconds)
    (121/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521948513 seconds)
    (122/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348783047 seconds)
    (123/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.346342645 seconds)
    (124/608) benchmarking "3d"...
    done (took 3.930708336 seconds)
    (125/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347776246 seconds)
    (126/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.368394989 seconds)
    (127/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.344028746 seconds)
    (128/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.402357223 seconds)
    (129/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.36487181 seconds)
    (130/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.344730467 seconds)
    (131/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.345061682 seconds)
    (132/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.346512255 seconds)
    (133/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.34797602 seconds)
    (134/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.345519658 seconds)
    (135/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.834085286 seconds)
    (136/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.345883309 seconds)
    (137/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.377309694 seconds)
    (138/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.192232165 seconds)
    (139/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347003623 seconds)
    (140/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.747459352 seconds)
    (141/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.760991804 seconds)
    (142/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.347359979 seconds)
    (143/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.377133211 seconds)
    (144/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.344889067 seconds)
    (145/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.344432317 seconds)
    (146/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.751855685 seconds)
    (147/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.269944138 seconds)
    (148/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.343980449 seconds)
    (149/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.431346915 seconds)
    (150/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.780305435 seconds)
    (151/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.568744396 seconds)
    (152/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.826865484 seconds)
    (153/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.383890156 seconds)
    (154/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.751246204 seconds)
    (155/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.377221033 seconds)
    (156/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.347309 seconds)
    (157/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.178702152 seconds)
    (158/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.463010169 seconds)
    (159/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.85502552 seconds)
    (160/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.597457355 seconds)
    (161/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.837581777 seconds)
    (162/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.345584929 seconds)
    (163/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.348601136 seconds)
    (164/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.409623282 seconds)
    (165/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 4.588000839 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.345741915 seconds)
    (167/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347384798 seconds)
    (168/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.348941259 seconds)
    (169/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365022257 seconds)
    (170/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.345893571 seconds)
    (171/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 5.945972493 seconds)
    (172/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.875434967 seconds)
    (173/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.346146566 seconds)
    (174/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.347260403 seconds)
    (175/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.347491873 seconds)
    (176/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.348226132 seconds)
    (177/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.363608181 seconds)
    (178/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.497047846 seconds)
    (179/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.361978709 seconds)
    (180/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.889989218 seconds)
    (181/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.348638746 seconds)
    (182/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.368330333 seconds)
    (183/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 6.374967554 seconds)
    (184/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.544057328 seconds)
    (185/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.34661451 seconds)
    (186/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.345873326 seconds)
    (187/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345046071 seconds)
    (188/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.34892314 seconds)
    (189/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347347437 seconds)
    (190/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349144289 seconds)
    (191/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.608446782 seconds)
    (192/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354137575 seconds)
    (193/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.345913054 seconds)
    (194/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347731407 seconds)
    (195/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.925230601 seconds)
    (196/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.391129594 seconds)
    (197/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.460330386 seconds)
    (198/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347899257 seconds)
    (199/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.347597848 seconds)
    (200/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.196100191 seconds)
    (201/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.348693123 seconds)
    (202/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.348266327 seconds)
    (203/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.35163796 seconds)
    (204/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.388629286 seconds)
    (205/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.348469976 seconds)
    (206/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.61499296 seconds)
    (207/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.076259679 seconds)
    (208/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351621404 seconds)
    (209/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.881019846 seconds)
    (210/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42843974 seconds)
    (211/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346346461 seconds)
    (212/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.346733879 seconds)
    (213/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.372083749 seconds)
    (214/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.344987199 seconds)
    (215/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.386146738 seconds)
    (216/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347821273 seconds)
    (217/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347086616 seconds)
    (218/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.349120281 seconds)
    (219/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.642250109 seconds)
    (220/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350755987 seconds)
    (221/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 4.602512985 seconds)
    (222/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.348112107 seconds)
    (223/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.767241201 seconds)
    (224/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.695766698 seconds)
    (225/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350175182 seconds)
    (226/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.694684551 seconds)
    (227/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.346402139 seconds)
    (228/608) benchmarking "7d"...
    done (took 4.896899537 seconds)
    (229/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.344621899 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347753103 seconds)
    (231/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 4.578751433 seconds)
    (232/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.349381384 seconds)
    (233/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.350636323 seconds)
    (234/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.350771453 seconds)
    (235/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349859675 seconds)
    (236/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.357916559 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 6.95072291 seconds)
    (238/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.350628217 seconds)
    (239/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345170816 seconds)
    (240/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.348550671 seconds)
    (241/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.78520393 seconds)
    (242/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.840784683 seconds)
    (243/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.401653632 seconds)
    (244/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.357718781 seconds)
    (245/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.834582843 seconds)
    (246/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.433922732 seconds)
    (247/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.345633313 seconds)
    (248/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348840269 seconds)
    (249/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.792299621 seconds)
    (250/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.347956654 seconds)
    (251/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.03593271 seconds)
    (252/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.66535395 seconds)
    (253/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.513245023 seconds)
    (254/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.357021952 seconds)
    (255/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350529678 seconds)
    (256/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349179605 seconds)
    (257/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.354062499 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.753654267 seconds)
    (259/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.355715956 seconds)
    (260/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.347413701 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.358368227 seconds)
    (262/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.379673639 seconds)
    (263/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 6.947645853 seconds)
    (264/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.373701009 seconds)
    (265/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.349391424 seconds)
    (266/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350793903 seconds)
    (267/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.374168389 seconds)
    (268/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.349823818 seconds)
    (269/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.346488556 seconds)
    (270/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 4.583409158 seconds)
    (271/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349558023 seconds)
    (272/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348084529 seconds)
    (273/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.3509209 seconds)
    (274/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.399853289 seconds)
    (275/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346897902 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349970836 seconds)
    (277/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.455326213 seconds)
    (278/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.745064338 seconds)
    (279/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.349362008 seconds)
    (280/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348780779 seconds)
    (281/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.349757798 seconds)
    (282/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347476908 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.376138273 seconds)
    (284/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349278824 seconds)
    (285/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.344121948 seconds)
    (286/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348946614 seconds)
    (287/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.614847227 seconds)
    (288/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.37826722 seconds)
    (289/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.349001376 seconds)
    (290/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.34704411 seconds)
    (291/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.358450614 seconds)
    (292/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.352980864 seconds)
    (293/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350761076 seconds)
    (294/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.347219116 seconds)
    (295/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.182034025 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.34630807 seconds)
    (297/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411749813 seconds)
    (298/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.637119754 seconds)
    (299/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347928869 seconds)
    (300/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.349002281 seconds)
    (301/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.349545113 seconds)
    (302/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.349195502 seconds)
    (303/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.122705858 seconds)
    (304/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.351338185 seconds)
    (305/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.785394613 seconds)
    (306/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 4.579241958 seconds)
    (307/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.34941582 seconds)
    (308/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.362957473 seconds)
    (309/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.349435946 seconds)
    (310/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.353946427 seconds)
    (311/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.859341582 seconds)
    (312/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348540285 seconds)
    (313/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.355511333 seconds)
    (314/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.283482425 seconds)
    (315/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350371993 seconds)
    (316/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347442358 seconds)
    (317/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.36430037 seconds)
    (318/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.235557337 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.439054932 seconds)
    (320/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350029225 seconds)
    (321/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.375356689 seconds)
    (322/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.366301933 seconds)
    (323/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 5.98241687 seconds)
    (324/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.377779316 seconds)
    (325/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.364056611 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.346702301 seconds)
    (327/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.35623668 seconds)
    (328/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.631671272 seconds)
    (329/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352253989 seconds)
    (330/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348760777 seconds)
    (331/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.369170527 seconds)
    (332/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.620809388 seconds)
    (333/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.353804105 seconds)
    (334/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.351135973 seconds)
    (335/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.347418454 seconds)
    (336/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352834767 seconds)
    (337/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.764931713 seconds)
    (338/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.76651523 seconds)
    (339/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.034792871 seconds)
    (340/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.197654779 seconds)
    (341/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.534131047 seconds)
    (342/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.353301964 seconds)
    (343/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.365743334 seconds)
    (344/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.379869818 seconds)
    (345/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.519448964 seconds)
    (346/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.352877106 seconds)
    (347/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352274236 seconds)
    (348/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.349602432 seconds)
    (349/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.376910829 seconds)
    (350/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351294707 seconds)
    (351/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.352452669 seconds)
    (352/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.353224476 seconds)
    (353/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.353832583 seconds)
    (354/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.840307267 seconds)
    (355/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.532506134 seconds)
    (356/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.354642108 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349600423 seconds)
    (358/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351339593 seconds)
    (359/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.350098228 seconds)
    (360/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.37827787 seconds)
    (361/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.871243959 seconds)
    (362/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.353092198 seconds)
    (363/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.876559129 seconds)
    (364/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352135074 seconds)
    (365/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.347394181 seconds)
    (366/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.190446748 seconds)
    (367/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351138464 seconds)
    (368/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.358711513 seconds)
    (369/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348737902 seconds)
    (370/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.824649737 seconds)
    (371/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.842559697 seconds)
    (372/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.351214636 seconds)
    (373/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.461792369 seconds)
    (374/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.457627028 seconds)
    (375/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.352500958 seconds)
    (376/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 4.583687188 seconds)
    (377/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 6.543934411 seconds)
    (378/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.441298104 seconds)
    (379/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.40333999 seconds)
    (380/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 6.954009568 seconds)
    (381/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 4.583536306 seconds)
    (382/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.355612216 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350203081 seconds)
    (384/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348731503 seconds)
    (385/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352829952 seconds)
    (386/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 2.37747326 seconds)
    (387/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.3495814 seconds)
    (388/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351442364 seconds)
    (389/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.350840823 seconds)
    (390/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.68662502 seconds)
    (391/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351928718 seconds)
    (392/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.207767397 seconds)
    (393/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.341840995 seconds)
    (394/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.504450635 seconds)
    (395/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.485444754 seconds)
    (396/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350852999 seconds)
    (397/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.485481699 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.350952445 seconds)
    (399/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349219812 seconds)
    (400/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.351547654 seconds)
    (401/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.361637166 seconds)
    (402/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.240886446 seconds)
    (403/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.864503615 seconds)
    (404/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.394237205 seconds)
    (405/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.648356148 seconds)
    (406/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.346802246 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.6118499 seconds)
    (408/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.349161213 seconds)
    (409/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.872900584 seconds)
    (410/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349405192 seconds)
    (411/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352994007 seconds)
    (412/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.780938644 seconds)
    (413/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.742859603 seconds)
    (414/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.347318595 seconds)
    (415/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.35139071 seconds)
    (416/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.353956992 seconds)
    (417/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.349874354 seconds)
    (418/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351721302 seconds)
    (419/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38379358 seconds)
    (420/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.493540418 seconds)
    (421/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.596719384 seconds)
    (422/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517928537 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.485817101 seconds)
    (424/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.348782476 seconds)
    (425/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349274863 seconds)
    (426/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34997704 seconds)
    (427/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.348468561 seconds)
    (428/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.383362013 seconds)
    (429/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.35203409 seconds)
    (430/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.380497922 seconds)
    (431/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.403102851 seconds)
    (432/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.352661309 seconds)
    (433/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349887438 seconds)
    (434/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.565352376 seconds)
    (435/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.351110111 seconds)
    (436/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.364058666 seconds)
    (437/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351732452 seconds)
    (438/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.494642157 seconds)
    (439/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.446020552 seconds)
    (440/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349797421 seconds)
    (441/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.34919571 seconds)
    (442/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.352205969 seconds)
    (443/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.346251858 seconds)
    (444/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.389771832 seconds)
    (445/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.193103287 seconds)
    (446/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.349500187 seconds)
    (447/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.760845397 seconds)
    (448/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.35167621 seconds)
    (449/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.402619697 seconds)
    (450/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.349353287 seconds)
    (451/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.349389284 seconds)
    (452/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.346545164 seconds)
    (453/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348734195 seconds)
    (454/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.357507041 seconds)
    (455/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.349103888 seconds)
    (456/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.738570949 seconds)
    (457/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.349768371 seconds)
    (458/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.572950665 seconds)
    (459/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.068563063 seconds)
    (460/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.452947598 seconds)
    (461/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.798655682 seconds)
    (462/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.35611307 seconds)
    (463/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348020097 seconds)
    (464/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350779619 seconds)
    (465/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 6.944723437 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.35462672 seconds)
    (467/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.362698238 seconds)
    (468/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.347928 seconds)
    (469/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 6.942793207 seconds)
    (470/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.448052422 seconds)
    (471/608) benchmarking "sub2ind"...
    done (took 7.505547557 seconds)
    (472/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.351771385 seconds)
    (473/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.349929272 seconds)
    (474/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.403631839 seconds)
    (475/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350949406 seconds)
    (476/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.478638062 seconds)
    (477/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.353964024 seconds)
    (478/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.864926922 seconds)
    (479/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.75387364 seconds)
    (480/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352236427 seconds)
    (481/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.41963165 seconds)
    (482/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.911332519 seconds)
    (483/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.348791251 seconds)
    (484/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351542814 seconds)
    (485/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349365282 seconds)
    (486/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.42311614 seconds)
    (487/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.350190633 seconds)
    (488/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.35163941 seconds)
    (489/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.364549835 seconds)
    (490/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351101919 seconds)
    (491/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351295848 seconds)
    (492/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.495210195 seconds)
    (493/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.950944763 seconds)
    (494/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.346971747 seconds)
    (495/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.346091767 seconds)
    (496/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.610116355 seconds)
    (497/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35192886 seconds)
    (498/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.123135806 seconds)
    (499/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350802893 seconds)
    (500/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.350293883 seconds)
    (501/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.350643658 seconds)
    (502/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351530069 seconds)
    (503/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 5.563820042 seconds)
    (504/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.35375155 seconds)
    (505/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.349141436 seconds)
    (506/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.230266764 seconds)
    (507/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.351997217 seconds)
    (508/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.356609982 seconds)
    (509/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.008109686 seconds)
    (510/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.372092524 seconds)
    (511/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.349055025 seconds)
    (512/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.35031787 seconds)
    (513/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.350249501 seconds)
    (514/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.349776829 seconds)
    (515/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.357602839 seconds)
    (516/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.746267294 seconds)
    (517/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38097696 seconds)
    (518/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.350895716 seconds)
    (519/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.349363611 seconds)
    (520/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.354563714 seconds)
    (521/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.350296191 seconds)
    (522/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.11641839 seconds)
    (523/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.353221452 seconds)
    (524/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.35379154 seconds)
    (525/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.35306697 seconds)
    (526/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.35316448 seconds)
    (527/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.7196643 seconds)
    (528/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.367579081 seconds)
    (529/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.352221335 seconds)
    (530/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.348152985 seconds)
    (531/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350676045 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 4.832103121 seconds)
    (533/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.352899524 seconds)
    (534/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 5.119731803 seconds)
    (535/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351695926 seconds)
    (536/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.350339402 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.356825462 seconds)
    (538/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.350359532 seconds)
    (539/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.352288049 seconds)
    (540/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.349978427 seconds)
    (541/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.352922887 seconds)
    (542/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.186397391 seconds)
    (543/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.359983564 seconds)
    (544/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.34594413 seconds)
    (545/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.222268561 seconds)
    (546/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350873875 seconds)
    (547/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.34931458 seconds)
    (548/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.261234684 seconds)
    (549/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.353796442 seconds)
    (550/608) benchmarking "4d"...
    done (took 4.169389549 seconds)
    (551/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.35745933 seconds)
    (552/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.82292448 seconds)
    (553/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.354304222 seconds)
    (554/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.348460859 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.351390529 seconds)
    (556/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.34864751 seconds)
    (557/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.3506125 seconds)
    (558/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.839253434 seconds)
    (559/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.353328503 seconds)
    (560/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.346062469 seconds)
    (561/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.349079678 seconds)
    (562/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.347754968 seconds)
    (563/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351296995 seconds)
    (564/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.378855913 seconds)
    (565/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.371928345 seconds)
    (566/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.847137321 seconds)
    (567/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.357346622 seconds)
    (568/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.348264029 seconds)
    (569/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.593623667 seconds)
    (570/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.367691284 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.347724843 seconds)
    (572/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.347558358 seconds)
    (573/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.740975317 seconds)
    (574/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348659848 seconds)
    (575/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348123351 seconds)
    (576/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.350704735 seconds)
    (577/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.411868344 seconds)
    (578/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.969152134 seconds)
    (579/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.351776578 seconds)
    (580/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.357017444 seconds)
    (581/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.523032147 seconds)
    (582/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 2.38213542 seconds)
    (583/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.353522221 seconds)
    (584/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.359635077 seconds)
    (585/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.38564394 seconds)
    (586/608) benchmarking "2d"...
    done (took 3.609003599 seconds)
    (587/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.352639101 seconds)
    (588/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.348314058 seconds)
    (589/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.371961873 seconds)
    (590/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.347076701 seconds)
    (591/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.38208534 seconds)
    (592/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.352040223 seconds)
    (593/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.36684903 seconds)
    (594/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.348551119 seconds)
    (595/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.348847009 seconds)
    (596/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.160483708 seconds)
    (597/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.447125366 seconds)
    (598/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.635475379 seconds)
    (599/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.348333413 seconds)
    (600/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.171556481 seconds)
    (601/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 2.486569748 seconds)
    (602/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.350761664 seconds)
    (603/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.364477668 seconds)
    (604/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.376243638 seconds)
    (605/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.349702365 seconds)
    (606/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.354545276 seconds)
    (607/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.349953699 seconds)
    (608/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.350034805 seconds)
  done (took 3877.15174155 seconds)
  (4/13) benchmarking "convert"...
    (1/4) benchmarking ("Float64", "Int")...
    done (took 2.860092803 seconds)
    (2/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.013550468 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.289235533 seconds)
    (4/4) benchmarking ("Int", "Float64")...
    done (took 2.796706536 seconds)
  done (took 14.308214675 seconds)
  (5/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.348356564 seconds)
    (2/6) benchmarking "boolarray_true_fill!"...
    done (took 2.832099112 seconds)
    (3/6) benchmarking "boolarray_true_load!"...
    done (took 2.787698383 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.716697456 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.371185156 seconds)
    (6/6) benchmarking "bitarray_true_load!"...
    done (took 7.361755688 seconds)
  done (took 32.781224869 seconds)
  (6/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate", "Float64")...
    done (took 2.49337255 seconds)
    (2/12) benchmarking ("cumsum", "Int")...
    done (took 2.971689679 seconds)
    (3/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.426280938 seconds)
    (4/12) benchmarking ("accumulate!", "Int")...
    done (took 3.00906264 seconds)
    (5/12) benchmarking ("cumsum", "Float64")...
    done (took 2.508500168 seconds)
    (6/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.49927661 seconds)
    (7/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.356576153 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.349230097 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.012464291 seconds)
    (10/12) benchmarking ("accumulate", "Int")...
    done (took 3.134310332 seconds)
    (11/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.329605176 seconds)
    (12/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.4092498 seconds)
  done (took 54.851822782 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("push_multiple!", 8)...
    done (took 2.55066558 seconds)
    (2/12) benchmarking ("push_multiple!", 256)...
    done (took 2.444919632 seconds)
    (3/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.445569114 seconds)
    (4/12) benchmarking ("prerend!", 8)...
    done (took 2.558194863 seconds)
    (5/12) benchmarking ("prerend!", 256)...
    done (took 3.28855953 seconds)
    (6/12) benchmarking ("push_single!", 256)...
    done (took 2.424362006 seconds)
    (7/12) benchmarking ("append!", 256)...
    done (took 3.080843287 seconds)
    (8/12) benchmarking ("append!", 2048)...
    done (took 2.605505825 seconds)
    (9/12) benchmarking ("prerend!", 2048)...
    done (took 2.645646751 seconds)
    (10/12) benchmarking ("append!", 8)...
    done (took 2.528983375 seconds)
    (11/12) benchmarking ("push_single!", 2048)...
    done (took 2.447238385 seconds)
    (12/12) benchmarking ("push_single!", 8)...
    done (took 2.412153848 seconds)
  done (took 33.781719193 seconds)
  (8/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.255814478 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.760217239 seconds)
    (3/20) benchmarking ("sumabs", "Float64")...
    done (took 3.322690167 seconds)
    (4/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.21230576 seconds)
    (5/20) benchmarking ("norminf", "Float64")...
    done (took 2.427942152 seconds)
    (6/20) benchmarking ("sum", "Float64")...
    done (took 3.232244363 seconds)
    (7/20) benchmarking ("norm", "Float64")...
    done (took 3.24496907 seconds)
    (8/20) benchmarking ("sum", "Int64")...
    done (took 3.079695232 seconds)
    (9/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.166479997 seconds)
    (10/20) benchmarking ("norminf", "Int64")...
    done (took 2.451371526 seconds)
    (11/20) benchmarking ("norm", "Int64")...
    done (took 2.521963057 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.22705357 seconds)
    (13/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.464450482 seconds)
    (14/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.221694832 seconds)
    (15/20) benchmarking ("maxabs", "Int64")...
    done (took 2.912579377 seconds)
    (16/20) benchmarking ("mean", "Float64")...
    done (took 3.279210884 seconds)
    (17/20) benchmarking ("norm1", "Int64")...
    done (took 2.780416334 seconds)
    (18/20) benchmarking ("mean", "Int64")...
    done (took 2.874949856 seconds)
    (19/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.165843375 seconds)
    (20/20) benchmarking ("sumabs", "Int64")...
    done (took 3.573152572 seconds)
  done (took 63.525988073 seconds)
  (9/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.351771067 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.354340205 seconds)
    (3/4) benchmarking "rev_load_slow!"...
    done (took 7.355378188 seconds)
    (4/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.355163375 seconds)
  done (took 31.767194101 seconds)
  (10/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.665549015 seconds)
    (2/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.712811833 seconds)
    (3/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.712818255 seconds)
    (4/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.651037373 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.67308213 seconds)
    (6/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.700202014 seconds)
    (7/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.587806541 seconds)
    (8/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.7106037 seconds)
    (9/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.694406145 seconds)
    (10/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.66805955 seconds)
    (11/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.699667212 seconds)
    (12/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.698070917 seconds)
    (13/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.714132404 seconds)
    (14/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.676032222 seconds)
    (15/24) benchmarking ("any", "BitArray")...
    done (took 3.036265151 seconds)
    (16/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.702175004 seconds)
    (17/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.7024535 seconds)
    (18/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.591438362 seconds)
    (19/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.692980247 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.696723505 seconds)
    (21/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.651077812 seconds)
    (22/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.587935084 seconds)
    (23/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.584139445 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.038020506 seconds)
  done (took 67.196073554 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.35064363 seconds)
    (2/17) benchmarking ("vcat", 500)...
    done (took 7.347633161 seconds)
    (3/17) benchmarking ("hcat", 5)...
    done (took 4.851342925 seconds)
    (4/17) benchmarking ("vcat_setind", 5)...
    done (took 5.08060612 seconds)
    (5/17) benchmarking ("catnd_setind", 5)...
    done (took 2.821234478 seconds)
    (6/17) benchmarking ("hvcat_setind", 5)...
    done (took 3.527518791 seconds)
    (7/17) benchmarking ("hvcat", 5)...
    done (took 4.671979263 seconds)
    (8/17) benchmarking ("hcat_setind", 500)...
    done (took 7.782883955 seconds)
    (9/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.37190784 seconds)
    (10/17) benchmarking ("catnd", 5)...
    done (took 2.398426728 seconds)
    (11/17) benchmarking "4467"...
    done (took 2.523310544 seconds)
    (12/17) benchmarking ("vcat", 5)...
    done (took 3.475190169 seconds)
    (13/17) benchmarking ("catnd", 500)...
    done (took 7.777554722 seconds)
    (14/17) benchmarking ("hvcat", 500)...
    done (took 7.355526884 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 3.525212704 seconds)
    (16/17) benchmarking ("vcat_setind", 500)...
    done (took 7.838242999 seconds)
    (17/17) benchmarking ("catnd_setind", 500)...
    done (took 7.360103673 seconds)
  done (took 95.410174489 seconds)
  (12/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.497005739 seconds)
    (2/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.438336683 seconds)
    (3/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.497678896 seconds)
    (4/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.726264673 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.361555669 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.382108149 seconds)
    (7/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.505976614 seconds)
    (8/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.450528643 seconds)
  done (took 62.21441318 seconds)
  (13/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.84970947 seconds)
    (2/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.432236627 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.626188883 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.464953375 seconds)
    (5/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.763779126 seconds)
    (6/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.76428534 seconds)
    (7/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.560786946 seconds)
    (8/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.569996486 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.42265005 seconds)
    (10/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.770865435 seconds)
    (11/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.355386881 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.714115553 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.604341003 seconds)
    (14/24) benchmarking ("==", "BitArray")...
    done (took 2.577743057 seconds)
    (15/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.392504005 seconds)
    (16/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.744402261 seconds)
    (17/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.585564585 seconds)
    (18/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.606504426 seconds)
    (19/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.715003348 seconds)
    (20/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.681009451 seconds)
    (21/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.393004716 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.574192918 seconds)
    (23/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.600961687 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.99267047 seconds)
  done (took 70.114751006 seconds)
done (took 4526.347418206 seconds)
(18/23) benchmarking "string"...
  (1/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "different"...
    done (took 2.447387646 seconds)
    (2/4) benchmarking "identical"...
    done (took 2.658254374 seconds)
    (3/4) benchmarking "equal"...
    done (took 2.522255304 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.524123743 seconds)
  done (took 12.508392575 seconds)
  (2/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat str len 1"...
    done (took 3.235400954 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.904692155 seconds)
    (3/4) benchmarking "repeat char 2"...
    done (took 5.08684262 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.225983583 seconds)
  done (took 17.810667103 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "different"...
    done (took 2.42167639 seconds)
    (2/3) benchmarking "equal"...
    done (took 2.669343641 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.396666599 seconds)
  done (took 10.266910716 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.337365751 seconds)
  (5/7) benchmarking "findfirst"...
    (1/2) benchmarking "String"...
    done (took 2.556230396 seconds)
    (2/2) benchmarking "Char"...
    done (took 2.4736781 seconds)
  done (took 7.38563234 seconds)
  (6/7) benchmarking "join"...
  done (took 7.410409294 seconds)
  (7/7) benchmarking "readuntil"...
    (1/7) benchmarking "barbarian backtrack"...
    done (took 6.742336504 seconds)
    (2/7) benchmarking "target length 1"...
    done (took 3.025857361 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.064913414 seconds)
    (4/7) benchmarking "target length 1000"...
    done (took 2.91333073 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 5.068001439 seconds)
    (6/7) benchmarking "no backtracking"...
    done (took 5.080767526 seconds)
    (7/7) benchmarking "backtracking"...
    done (took 7.125727896 seconds)
  done (took 35.374108727 seconds)
done (took 96.450063053 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "symm!"...
    done (took 7.404059654 seconds)
    (2/36) benchmarking "symv"...
    done (took 3.79718321 seconds)
    (3/36) benchmarking "dotu"...
    done (took 3.369654438 seconds)
    (4/36) benchmarking "sbmv!"...
    done (took 4.702956074 seconds)
    (5/36) benchmarking "scal!"...
    done (took 3.289092468 seconds)
    (6/36) benchmarking "gemm!"...
    done (took 7.411560821 seconds)
    (7/36) benchmarking "trmv"...
    done (took 3.801465869 seconds)
    (8/36) benchmarking "asum"...
    done (took 3.115048893 seconds)
    (9/36) benchmarking "gemm"...
    done (took 7.397020746 seconds)
    (10/36) benchmarking "gbmv!"...
    done (took 4.628242359 seconds)
    (11/36) benchmarking "trsm"...
    done (took 7.386305613 seconds)
    (12/36) benchmarking "ger!"...
    done (took 7.347941849 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.857064178 seconds)
    (14/36) benchmarking "syr!"...
    done (took 7.369180322 seconds)
    (15/36) benchmarking "gbmv"...
    done (took 4.704609239 seconds)
    (16/36) benchmarking "symm"...
    done (took 7.429401971 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.088651951 seconds)
    (18/36) benchmarking "scal"...
    done (took 2.473245667 seconds)
    (19/36) benchmarking "trmm"...
    done (took 7.40398386 seconds)
    (20/36) benchmarking "trmv!"...
    done (took 3.73288376 seconds)
    (21/36) benchmarking "trmm!"...
    done (took 7.375265431 seconds)
    (22/36) benchmarking "dotc"...
    done (took 3.373477584 seconds)
    (23/36) benchmarking "syrk!"...
    done (took 7.407122298 seconds)
    (24/36) benchmarking "syrk"...
    done (took 7.396373867 seconds)
    (25/36) benchmarking "gemv"...
    done (took 5.142635362 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.57168648 seconds)
    (27/36) benchmarking "nrm2"...
    done (took 3.213229489 seconds)
    (28/36) benchmarking "sbmv"...
    done (took 4.741208955 seconds)
    (29/36) benchmarking "trsv!"...
    done (took 3.845343006 seconds)
    (30/36) benchmarking "axpy!"...
    done (took 3.551090157 seconds)
    (31/36) benchmarking "trsm!"...
    done (took 7.379306941 seconds)
    (32/36) benchmarking "her!"...
    done (took 7.347536372 seconds)
    (33/36) benchmarking "herk"...
    done (took 7.532038819 seconds)
    (34/36) benchmarking "dot"...
    done (took 3.342501446 seconds)
    (35/36) benchmarking "herk!"...
    done (took 7.477484105 seconds)
    (36/36) benchmarking "symv!"...
    done (took 3.732418345 seconds)
  done (took 194.489393694 seconds)
  (2/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.399993074 seconds)
    (2/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.349043927 seconds)
    (3/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.417270256 seconds)
    (4/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.348598443 seconds)
    (5/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.346866576 seconds)
    (6/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.502977564 seconds)
    (7/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.347698113 seconds)
    (8/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.34638934 seconds)
    (9/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.349158105 seconds)
    (10/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.34587148 seconds)
    (11/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.351451726 seconds)
    (12/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.376246222 seconds)
    (13/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.343508655 seconds)
    (14/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.402332865 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.348717081 seconds)
    (16/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.346404294 seconds)
    (17/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.350427186 seconds)
    (18/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.522696336 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.353182863 seconds)
    (20/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.895922959 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.343358421 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.345424151 seconds)
    (23/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.430000569 seconds)
    (24/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 23.449416873 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.351677566 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.350453777 seconds)
    (27/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.429257429 seconds)
    (28/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.345496615 seconds)
    (29/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.347240013 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.348563375 seconds)
    (31/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.974622049 seconds)
    (32/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.354277793 seconds)
    (33/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.348323553 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.352561236 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.348571621 seconds)
    (36/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.403227156 seconds)
    (37/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.72298249 seconds)
    (38/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.470484096 seconds)
    (39/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.587585456 seconds)
    (40/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.34568137 seconds)
    (41/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.429142532 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.402827942 seconds)
    (43/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.343927475 seconds)
    (44/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.367879568 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.046482569 seconds)
    (46/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.352024055 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.111895215 seconds)
    (48/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.409796306 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.345242063 seconds)
    (50/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.343960858 seconds)
    (51/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.048841175 seconds)
    (52/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.345949884 seconds)
    (53/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 24.091643448 seconds)
    (54/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.089152406 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.361651181 seconds)
    (56/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.346169262 seconds)
    (57/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.354097802 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.345381257 seconds)
    (59/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.406068636 seconds)
    (60/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.34579503 seconds)
    (61/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.345557772 seconds)
    (62/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.342969717 seconds)
    (63/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.350573328 seconds)
    (64/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.371129591 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.364010845 seconds)
    (66/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.344777576 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.8455572 seconds)
    (68/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.411707063 seconds)
    (69/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.409241368 seconds)
    (70/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.410397717 seconds)
    (71/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.345337737 seconds)
    (72/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.345737312 seconds)
    (73/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.346693118 seconds)
    (74/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.346560773 seconds)
    (75/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.349781642 seconds)
    (76/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.347600874 seconds)
    (77/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.344869895 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.350110324 seconds)
    (79/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.352809404 seconds)
    (80/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.549968137 seconds)
    (81/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.348532842 seconds)
    (82/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.347459976 seconds)
    (83/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.344673502 seconds)
    (84/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.420436563 seconds)
    (85/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.352769735 seconds)
    (86/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.566724229 seconds)
    (87/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.432526785 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.112330539 seconds)
    (89/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.426634082 seconds)
    (90/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.345635399 seconds)
    (91/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.362222352 seconds)
    (92/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.148945049 seconds)
    (93/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.344051337 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.721151118 seconds)
    (95/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.278101471 seconds)
    (96/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.346438511 seconds)
    (97/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.34750178 seconds)
    (98/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.352948979 seconds)
    (99/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.076884056 seconds)
    (100/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.347539002 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.345658716 seconds)
    (102/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.345284685 seconds)
    (103/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.346343209 seconds)
    (104/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.421811176 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.363024191 seconds)
    (106/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.424479276 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.35653175 seconds)
    (108/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 19.2664224 seconds)
    (109/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.373644807 seconds)
    (110/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.347943154 seconds)
    (111/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.345699854 seconds)
    (112/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.351893468 seconds)
    (113/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.34659632 seconds)
    (114/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.719591811 seconds)
    (115/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.352180238 seconds)
    (116/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.346130047 seconds)
    (117/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.470579959 seconds)
    (118/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 24.092479486 seconds)
  done (took 476.449863298 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.468019718 seconds)
  (4/4) benchmarking "factorization"...
    (1/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.37025234 seconds)
    (2/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.27951899 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.464675186 seconds)
    (4/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.720756999 seconds)
    (5/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.36896364 seconds)
    (6/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.472780932 seconds)
    (7/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.352354387 seconds)
    (8/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.372852604 seconds)
    (9/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.24318548 seconds)
    (10/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.374225988 seconds)
    (11/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.350984537 seconds)
    (12/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.472616802 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.440235765 seconds)
    (14/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.474425685 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.402535916 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.402765572 seconds)
    (17/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.363296594 seconds)
    (18/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.430246498 seconds)
    (19/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.280587011 seconds)
    (20/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.369091178 seconds)
    (21/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.390102005 seconds)
    (22/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.367681778 seconds)
    (23/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.355390477 seconds)
    (24/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.361880064 seconds)
    (25/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.960897544 seconds)
    (26/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.075853303 seconds)
    (27/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.328382038 seconds)
    (28/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.363128633 seconds)
    (29/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.356663685 seconds)
    (30/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.388265457 seconds)
    (31/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.513902249 seconds)
    (32/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.434105167 seconds)
  done (took 218.25567894 seconds)
done (took 894.020503771 seconds)
(20/23) benchmarking "tuple"...
  (1/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.360156505 seconds)
    (2/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.364782021 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.361679047 seconds)
    (4/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.371976454 seconds)
    (5/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.362988493 seconds)
    (6/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.362795909 seconds)
    (7/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.36452214 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.360704323 seconds)
  done (took 21.271795244 seconds)
  (2/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.388184677 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.80823165 seconds)
  done (took 7.553180918 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.364857085 seconds)
    (2/24) benchmarking ("sum", "(4,)")...
    done (took 2.362564289 seconds)
    (3/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.362094232 seconds)
    (4/24) benchmarking ("minimum", "(8,)")...
    done (took 2.36127758 seconds)
    (5/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.359420561 seconds)
    (6/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.361818981 seconds)
    (7/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.361054213 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.361528773 seconds)
    (9/24) benchmarking ("minimum", "(2,)")...
    done (took 2.362097328 seconds)
    (10/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.35966384 seconds)
    (11/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.360803535 seconds)
    (12/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.366366696 seconds)
    (13/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.364734946 seconds)
    (14/24) benchmarking ("minimum", "(16,)")...
    done (took 2.364083041 seconds)
    (15/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.362411169 seconds)
    (16/24) benchmarking ("sum", "(8,)")...
    done (took 2.364463178 seconds)
    (17/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.360396331 seconds)
    (18/24) benchmarking ("sum", "(2,)")...
    done (took 2.363802266 seconds)
    (19/24) benchmarking ("minimum", "(4,)")...
    done (took 2.359829395 seconds)
    (20/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.375014484 seconds)
    (21/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.444078919 seconds)
    (22/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.503627129 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.578376636 seconds)
    (24/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.608322958 seconds)
  done (took 59.761446621 seconds)
  (4/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.359679062 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.364539254 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.359602394 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.364469947 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.469940429 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.367279907 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.361776772 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.362631635 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.361111842 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.362872623 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.359896264 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.365294949 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.360558798 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.363203603 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.36061342 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.361210746 seconds)
  done (took 40.271831563 seconds)
done (took 131.214597175 seconds)
(21/23) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.547028087 seconds)
    (2/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.492497246 seconds)
    (3/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.795033734 seconds)
    (4/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.05480925 seconds)
    (5/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.556944972 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.529386314 seconds)
    (7/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.487782723 seconds)
    (8/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.531500851 seconds)
    (9/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.632440436 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.482732583 seconds)
    (11/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.508050144 seconds)
    (12/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.569645716 seconds)
    (13/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.870762646 seconds)
    (14/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.361484391 seconds)
    (15/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.505544991 seconds)
    (16/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.490845838 seconds)
    (17/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.504718658 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.741506708 seconds)
    (19/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.900052065 seconds)
    (20/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.912845741 seconds)
    (21/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.30246485 seconds)
    (22/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.550474504 seconds)
    (23/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.306069105 seconds)
    (24/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.244295349 seconds)
    (25/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.871272325 seconds)
    (26/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.490834067 seconds)
    (27/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.912072105 seconds)
    (28/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.625060343 seconds)
    (29/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.577499601 seconds)
    (30/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.47888603 seconds)
    (31/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.807771165 seconds)
    (32/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.567327029 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.050658063 seconds)
    (34/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.961803991 seconds)
    (35/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.350421044 seconds)
    (36/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.54058532 seconds)
    (37/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.491847642 seconds)
    (38/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.501584715 seconds)
    (39/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.490974891 seconds)
    (40/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.638838976 seconds)
    (41/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.591148303 seconds)
    (42/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.604135111 seconds)
  done (took 120.788245935 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.40475535 seconds)
    (2/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.489449053 seconds)
    (3/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.440560577 seconds)
    (4/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.412357711 seconds)
    (5/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.41776487 seconds)
    (6/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.460010122 seconds)
    (7/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.44405419 seconds)
    (8/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.515727635 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.477294327 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.518837083 seconds)
    (11/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.88995964 seconds)
    (12/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.478610347 seconds)
    (13/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.470659188 seconds)
    (14/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.437751004 seconds)
    (15/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.892306487 seconds)
    (16/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.432231796 seconds)
    (17/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.445277661 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.872139956 seconds)
    (19/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.419961312 seconds)
    (20/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.468649876 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.399243124 seconds)
    (22/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.469916479 seconds)
    (23/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.47265432 seconds)
    (24/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.899068438 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.397771366 seconds)
    (26/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.489768778 seconds)
  done (took 67.906410249 seconds)
  (3/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.665065762 seconds)
    (2/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.881292675 seconds)
    (3/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.750192339 seconds)
    (4/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.408104672 seconds)
    (5/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.542628732 seconds)
    (6/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.03005909 seconds)
    (7/28) benchmarking ("Set", "String", "filter")...
    done (took 2.60922733 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.435996858 seconds)
    (9/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.5911871 seconds)
    (10/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.518691837 seconds)
    (11/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.660160671 seconds)
    (12/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.425811476 seconds)
    (13/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.418565721 seconds)
    (14/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.486539091 seconds)
    (15/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.522472372 seconds)
    (16/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.862397596 seconds)
    (17/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.913115895 seconds)
    (18/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.564709066 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.668409202 seconds)
    (20/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.472369144 seconds)
    (21/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.499087931 seconds)
    (22/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.644710322 seconds)
    (23/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.60536205 seconds)
    (24/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.638344958 seconds)
    (25/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.710452866 seconds)
    (26/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.858066855 seconds)
    (27/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.257503404 seconds)
    (28/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.705196028 seconds)
  done (took 82.698228451 seconds)
  (4/6) benchmarking "set operations"...
    (1/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.414380726 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.508677933 seconds)
    (3/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.319155753 seconds)
    (4/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.430469736 seconds)
    (5/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.84350994 seconds)
    (6/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.466515393 seconds)
    (7/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.636781165 seconds)
    (8/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.83076171 seconds)
    (9/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 3.096593202 seconds)
    (10/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.954662589 seconds)
    (11/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.592782155 seconds)
    (12/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.430010565 seconds)
    (13/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.395631225 seconds)
    (14/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.534990668 seconds)
    (15/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.472149994 seconds)
    (16/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.157132265 seconds)
    (17/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.13772329 seconds)
    (18/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.703322084 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.515552273 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.286060216 seconds)
    (21/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.651386539 seconds)
    (22/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.492583057 seconds)
    (23/117) benchmarking ("Set", "Int", "union")...
    done (took 2.511645171 seconds)
    (24/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.646166169 seconds)
    (25/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.465191073 seconds)
    (26/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.712851413 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.799545096 seconds)
    (28/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 3.194835574 seconds)
    (29/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.019099525 seconds)
    (30/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.467658471 seconds)
    (31/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.394663373 seconds)
    (32/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.541773012 seconds)
    (33/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.010135039 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.688893348 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.314188489 seconds)
    (36/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.587332679 seconds)
    (37/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.413310533 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.488969009 seconds)
    (39/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.50059405 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.456000862 seconds)
    (41/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.571291181 seconds)
    (42/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.462130174 seconds)
    (43/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.731419613 seconds)
    (44/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.319026349 seconds)
    (45/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.836819729 seconds)
    (46/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.54601578 seconds)
    (47/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.611855136 seconds)
    (48/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.208055814 seconds)
    (49/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.663404718 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.459071056 seconds)
    (51/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.436273659 seconds)
    (52/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.382957451 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.52204366 seconds)
    (54/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.460823848 seconds)
    (55/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.640359787 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.517082091 seconds)
    (57/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.588153871 seconds)
    (58/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.520766721 seconds)
    (59/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.544763222 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.547210118 seconds)
    (61/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.892061705 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.147425491 seconds)
    (63/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.83474606 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.609058156 seconds)
    (65/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.344176369 seconds)
    (66/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.065828644 seconds)
    (67/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.55123714 seconds)
    (68/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.211768119 seconds)
    (69/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.052355598 seconds)
    (70/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.457253322 seconds)
    (71/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.404996232 seconds)
    (72/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.623828997 seconds)
    (73/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.658027484 seconds)
    (74/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.410621549 seconds)
    (75/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.577625869 seconds)
    (76/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.202894947 seconds)
    (77/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.416661218 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.511846308 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.010220142 seconds)
    (80/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.259035995 seconds)
    (81/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.633006516 seconds)
    (82/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.891182733 seconds)
    (83/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.196567292 seconds)
    (84/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.927452438 seconds)
    (85/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.53575049 seconds)
    (86/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.878497784 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.548601464 seconds)
    (88/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.535682985 seconds)
    (89/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.471809164 seconds)
    (90/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.613006262 seconds)
    (91/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.694780453 seconds)
    (92/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.505263374 seconds)
    (93/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.858763511 seconds)
    (94/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.474220348 seconds)
    (95/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.465653515 seconds)
    (96/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.505624737 seconds)
    (97/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.462500131 seconds)
    (98/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.519009532 seconds)
    (99/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.647007802 seconds)
    (100/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.467746025 seconds)
    (101/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.550739516 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.268440788 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.954144726 seconds)
    (104/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.66610813 seconds)
    (105/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.857655379 seconds)
    (106/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.424648946 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.469756624 seconds)
    (108/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.448889303 seconds)
    (109/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.611237254 seconds)
    (110/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.684028252 seconds)
    (111/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.600928985 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.602525185 seconds)
    (113/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.896396936 seconds)
    (114/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.637536177 seconds)
    (115/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.396849758 seconds)
    (116/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.808187678 seconds)
    (117/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 4.295698942 seconds)
  done (took 339.269005679 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.415709304 seconds)
    (2/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.816265177 seconds)
    (3/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.721254127 seconds)
    (4/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.433731063 seconds)
    (5/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.429846875 seconds)
    (6/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.389006903 seconds)
    (7/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.563974153 seconds)
    (8/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.423589031 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.484745679 seconds)
    (10/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.422704248 seconds)
    (11/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.654781898 seconds)
    (12/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.694186463 seconds)
    (13/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.878088604 seconds)
    (14/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.507752527 seconds)
    (15/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.472832326 seconds)
    (16/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.514794541 seconds)
    (17/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.621634915 seconds)
    (18/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.62528937 seconds)
    (19/105) benchmarking ("Set", "Int", "length")...
    done (took 2.384177994 seconds)
    (20/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.420875751 seconds)
    (21/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.553986439 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.478970214 seconds)
    (23/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.386587709 seconds)
    (24/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.644876959 seconds)
    (25/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.542461893 seconds)
    (26/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.684032985 seconds)
    (27/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.389324291 seconds)
    (28/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.437622789 seconds)
    (29/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.413649943 seconds)
    (30/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.430748693 seconds)
    (31/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.770859684 seconds)
    (32/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.504997052 seconds)
    (33/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.736055878 seconds)
    (34/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.785701316 seconds)
    (35/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.451605646 seconds)
    (36/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.499775829 seconds)
    (37/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.644970787 seconds)
    (38/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.449571442 seconds)
    (39/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.476077868 seconds)
    (40/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.853613602 seconds)
    (41/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.402979781 seconds)
    (42/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.40551374 seconds)
    (43/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.864797634 seconds)
    (44/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.428232752 seconds)
    (45/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.50964099 seconds)
    (46/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.399385945 seconds)
    (47/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.206758988 seconds)
    (48/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.490905756 seconds)
    (49/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.595979936 seconds)
    (50/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.592743432 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.424044322 seconds)
    (52/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.557550501 seconds)
    (53/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.425839913 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.594900626 seconds)
    (55/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.406433194 seconds)
    (56/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.898262323 seconds)
    (57/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.576803968 seconds)
    (58/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.735749668 seconds)
    (59/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.41770193 seconds)
    (60/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.492116335 seconds)
    (61/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.558965181 seconds)
    (62/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.363975043 seconds)
    (63/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.905475832 seconds)
    (64/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.664897838 seconds)
    (65/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.598271609 seconds)
    (66/105) benchmarking ("Set", "Int", "first")...
    done (took 2.430374745 seconds)
    (67/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.418195243 seconds)
    (68/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.422571677 seconds)
    (69/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.487839163 seconds)
    (70/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.405102191 seconds)
    (71/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.572785977 seconds)
    (72/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.389119735 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.085860481 seconds)
    (74/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.920943096 seconds)
    (75/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.816151509 seconds)
    (76/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.751304828 seconds)
    (77/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.654926643 seconds)
    (78/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.734610365 seconds)
    (79/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.422525566 seconds)
    (80/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.73690553 seconds)
    (81/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.408280108 seconds)
    (82/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.812281252 seconds)
    (83/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.216447679 seconds)
    (84/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.781156215 seconds)
    (85/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.834590285 seconds)
    (86/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.5957518 seconds)
    (87/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.460103646 seconds)
    (88/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.100163752 seconds)
    (89/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.478396504 seconds)
    (90/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.673572924 seconds)
    (91/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.386572646 seconds)
    (92/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.594421105 seconds)
    (93/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.393281735 seconds)
    (94/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.413948687 seconds)
    (95/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.384564851 seconds)
    (96/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.576308867 seconds)
    (97/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.469992782 seconds)
    (98/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.785290725 seconds)
    (99/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.565471641 seconds)
    (100/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.430411892 seconds)
    (101/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.466234881 seconds)
    (102/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.706549473 seconds)
    (103/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.466919386 seconds)
    (104/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.736173713 seconds)
    (105/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.692898827 seconds)
  done (took 282.565107791 seconds)
  (6/6) benchmarking "optimizations"...
    (1/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.352402927 seconds)
    (2/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.583368725 seconds)
    (3/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.363993897 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.355610411 seconds)
    (5/27) benchmarking ("BitSet", "Int8")...
    done (took 4.057284818 seconds)
    (6/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.350658931 seconds)
    (7/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.352162263 seconds)
    (8/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.353344351 seconds)
    (9/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.168761954 seconds)
    (10/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.448266849 seconds)
    (11/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.361783464 seconds)
    (12/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.494487661 seconds)
    (13/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.351561861 seconds)
    (14/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.356651497 seconds)
    (15/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.35460434 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.358666304 seconds)
    (17/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.35444339 seconds)
    (18/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.352522121 seconds)
    (19/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.352305017 seconds)
    (20/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.353653185 seconds)
    (21/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.353205492 seconds)
    (22/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.359488786 seconds)
    (23/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.502007891 seconds)
    (24/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.355471442 seconds)
    (25/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.030556518 seconds)
    (26/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.751390639 seconds)
    (27/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.367781748 seconds)
  done (took 182.153431732 seconds)
done (took 1077.737517955 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "optimization"...
    (1/12) benchmarking "many_const_calls"...
    done (took 33.581285069 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 36.649863552 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 33.717654407 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 34.670107687 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 34.006912736 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.383309283 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 33.009115406 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.102865837 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 33.153956192 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.27110752 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 42.204896159 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 34.309141048 seconds)
  done (took 425.419076385 seconds)
  (2/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "many_const_calls"...
    done (took 39.229180699 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 37.363582018 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 36.229996416 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 36.000348674 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 36.596056885 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.219828363 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 36.781340286 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 37.883662621 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 36.02014509 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 36.75451551 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 36.303376823 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.350395124 seconds)
  done (took 445.36735959 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "many_const_calls"...
    done (took 35.270533607 seconds)
    (2/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 38.464655474 seconds)
    (3/12) benchmarking "rand(Float64)"...
    done (took 39.475672304 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 35.319074134 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 39.62683933 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.453696947 seconds)
    (7/12) benchmarking "sin(42)"...
    done (took 38.63217156 seconds)
    (8/12) benchmarking "many_local_vars"...
    done (took 36.103320545 seconds)
    (9/12) benchmarking "many_invoke_calls"...
    done (took 38.778094666 seconds)
    (10/12) benchmarking "broadcasting"...
    done (took 35.318271049 seconds)
    (11/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.280548746 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 36.506472021 seconds)
  done (took 457.605855524 seconds)
done (took 1330.745704788 seconds)
(23/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 10.303363374 seconds)
done (took 15.669767914 seconds)
SAVING RESULT...
DONE!
