cset: moving following pidspec: 819007
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.32700455 seconds)
loading group "shootout"... done (took 0.852534274 seconds)
loading group "string"... done (took 0.227256995 seconds)
loading group "linalg"... done (took 3.275089958 seconds)
loading group "parallel"... done (took 0.021614628 seconds)
loading group "find"... done (took 1.234468255 seconds)
loading group "tuple"... done (took 0.726543682 seconds)
loading group "union"... done (took 3.245378305 seconds)
loading group "dates"... done (took 0.157544749 seconds)
loading group "micro"... done (took 0.058045818 seconds)
loading group "simd"... done (took 0.376463842 seconds)
loading group "io"... done (took 1.448501426 seconds)
loading group "random"... done (took 2.349450568 seconds)
loading group "problem"... done (took 1.173006696 seconds)
loading group "array"... done (took 4.535624189 seconds)
loading group "misc"... done (took 1.138337414 seconds)
loading group "scalar"... done (took 3.528522538 seconds)
loading group "sort"... done (took 0.309179919 seconds)
loading group "sparse"... done (took 3.429222083 seconds)
loading group "collection"... done (took 6.158070689 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.546906944 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.075694917 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.267188519 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.077303019 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.281895862 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.086083931 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087923759 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.074288333 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.138738202 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.169093357 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.21703809 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.390311595 seconds)
done (took 5.186804918 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.324134406 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034396012 seconds)
    (2/2) benchmarking "String"...
    done (took 0.129739688 seconds)
  done (took 0.791432261 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.139199101 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016011259 seconds)
    (3/3) benchmarking "different"...
    done (took 0.02302045 seconds)
  done (took 0.799904481 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020778546 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.099880237 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021853844 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022460691 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.02232747 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021788287 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021667923 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02161805 seconds)
  done (took 0.84876568 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.030140936 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024613408 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021929444 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02329485 seconds)
  done (took 0.714632457 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023467134 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.097112431 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.029195539 seconds)
    (4/4) benchmarking "different"...
    done (took 0.028661083 seconds)
  done (took 0.81273661 seconds)
done (took 4.941091139 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.198122177 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.782701867 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.981452848 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.179679881 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.351719193 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.297116559 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076942692 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.243342301 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.150304277 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032974464 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.184923998 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.042697035 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.511569495 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.471087648 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028607365 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.142753876 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.578093214 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039156472 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070598429 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.224180615 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.038474865 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039345256 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043718504 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027866353 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.157902067 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.140862155 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.585182932 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067198296 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026060948 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048600952 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028905224 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03232861 seconds)
  done (took 9.471204834 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.170864403 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.152709761 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.025518233 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.061166388 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.051649388 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025276956 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030525295 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023263679 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043285684 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.08875985 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046327338 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.156996704 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021387943 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024818965 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.137304741 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.115745812 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.03797917 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037448853 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.023058447 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.037052556 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.050328926 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036065336 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033097594 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032650007 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.068740411 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.088993801 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.045438334 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068414627 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022885974 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034671631 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.055050463 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063583704 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023022408 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021650214 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.065417961 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043907598 seconds)
  done (took 2.733964573 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.742249901 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.05179066 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.143330095 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.133107623 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070404835 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.055904955 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.181768841 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078755524 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.055582822 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024308568 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.207672101 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.66414221 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.170518597 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.101623137 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02851043 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.187434981 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.935573745 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.974314813 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025223357 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025487789 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.137664794 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028019114 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.177469539 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.027258718 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.138640229 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.725790026 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.144921846 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026463736 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.057143413 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.149917529 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.022770239 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.101928231 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050931152 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.027012387 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.573958655 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022812696 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020986302 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043807425 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.054307981 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023608927 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.02445815 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.033173263 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.022981671 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074598211 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.034428768 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.526504207 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026555513 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.72035961 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.643121293 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.032660067 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028952809 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.059467398 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020609703 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024261372 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.539557738 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.114515315 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023452693 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.29494167 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02615225 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024599146 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.0248639 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.056813456 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02364484 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024850581 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026931107 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041726775 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.967483611 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.035197405 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.043553445 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021987302 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02301248 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.02159097 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403920193 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.030043418 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025389956 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020968625 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027445698 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023169054 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022678629 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067875375 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049815816 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046675335 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026617728 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023472959 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022655711 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541089942 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.968893725 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02557583 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024675591 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481263386 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021085545 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023138577 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024712781 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.046208814 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023489106 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020530379 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062836117 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025444388 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.132413001 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.349862125 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.02528795 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020721554 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.389388937 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024713995 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058467383 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07931295 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023427789 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.069528807 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023583516 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020578463 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026802409 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020582419 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024740323 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021739288 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02243417 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02147817 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023430179 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.02440461 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023533787 seconds)
  done (took 23.598558148 seconds)
done (took 38.18452143 seconds)
(4/20) benchmarking "parallel"...
done (took 1.013648063 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.216970815 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.051448534 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020459123 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.166435112 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.047586719 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.140195649 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.18329059 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.131191642 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.047604659 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.047047475 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.047220382 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.181444985 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.190384136 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.048093365 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.117371364 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.191293024 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048005663 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020613723 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.048002524 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.047962983 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.047986306 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020081158 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.046758901 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.047730381 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.116495907 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046238717 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020030871 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.115937309 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047670182 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.118328704 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.048031314 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046995761 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047549469 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.116645196 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.047917386 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.118058906 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020588836 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.049610408 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.049370389 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.050284065 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049229286 seconds)
  done (took 4.010536326 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.04714921 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038996385 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.054889294 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018500648 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028579538 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.0390978 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018495369 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038641002 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05791152 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039110413 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039116679 seconds)
  done (took 1.178331708 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.042164273 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039862013 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.047817397 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01841625 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030310663 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039692309 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018449128 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039269571 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055790294 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039686086 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039720588 seconds)
  done (took 1.122634307 seconds)
done (took 7.032112371 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.15123093 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.122151835 seconds)
  done (took 0.972719905 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.587440374 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.205431438 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.129553695 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.253064968 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.123146291 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.155813021 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.864626731 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.157735525 seconds)
  done (took 7.23462262 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.076306271 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.142076494 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02477237 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023216175 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023502245 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023440135 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024933267 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023710456 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022926686 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025442121 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025027709 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023169557 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023918541 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025087985 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023195581 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023428832 seconds)
  done (took 1.389048262 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028813087 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.026047066 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027212913 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017512818 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027582257 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026187318 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.02729469 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028583265 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026783502 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027035662 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024947456 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.028190409 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026662685 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025414843 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028144826 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017372296 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028296273 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027166399 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029196591 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027611809 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026710347 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024955314 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028323054 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026229692 seconds)
  done (took 1.357265948 seconds)
done (took 11.667053486 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142936819 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030224293 seconds)
  done (took 0.884601641 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.127595785 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.126184202 seconds)
  done (took 0.975234714 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029342659 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016287078 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032977452 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.02482724 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.01652425 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016271593 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031937618 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016579136 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.01634637 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016477076 seconds)
  done (took 0.942870577 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019721494 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023376133 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021360932 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019692306 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021387796 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017375252 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019687725 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017580714 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023209974 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016662054 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020477689 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038621566 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019921542 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039005316 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.01980023 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020403198 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021809984 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019589168 seconds)
  done (took 1.123438497 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018088492 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017193141 seconds)
  done (took 0.76184524 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020956333 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017331463 seconds)
    (3/7) benchmarking "month"...
    done (took 0.01895834 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018935975 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016973631 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016404485 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016974962 seconds)
  done (took 0.845415508 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.393287403 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090609042 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.32137416 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025123549 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.038260166 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.235692303 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020014829 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024228727 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024153693 seconds)
  done (took 1.894610734 seconds)
done (took 8.153431318 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.04546467 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.14420262 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.149017069 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.448750411 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.034780538 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022928997 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.05770853 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.229063911 seconds)
done (took 1.867275534 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.493709293 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.286875129 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.191216388 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024136205 seconds)
  done (took 2.230040395 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.314041851 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.141760983 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031237653 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023327675 seconds)
  done (took 1.251622489 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022434079 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027821522 seconds)
  done (took 0.78829853 seconds)
done (took 5.502599057 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0305798 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017131559 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023537151 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018793628 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018412037 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017913755 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017873974 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018774575 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016765619 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01879765 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.01881985 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018804862 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018461699 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018453064 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017934007 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018821554 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016797354 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018419867 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018362795 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018426833 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016741453 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018822596 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018020578 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018447077 seconds)
  done (took 1.178014073 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.038685458 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.022778791 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022710226 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.022742043 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.023918559 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022768519 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.022732244 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.022690279 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022990147 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.021660729 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023915747 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.024032759 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.021533275 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.02402228 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02166729 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023985057 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.023010873 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022754006 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021653565 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.024139611 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022864802 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022836256 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.024041127 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022862592 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.023965855 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023983256 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021801542 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.022860522 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02285616 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.02399155 seconds)
  done (took 1.444455182 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023634737 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015461668 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015711424 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025960178 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015362886 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015510423 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016006346 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01524377 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015608637 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016481799 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015947749 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.01534417 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.01619032 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015404879 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015375259 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.01595751 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020691265 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036583251 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015665009 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015413572 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020244123 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015697534 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015407848 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015387386 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.01589744 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015458562 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015222545 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015706682 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015439074 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015997314 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.01536179 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020087404 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.02172497 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01588044 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025965035 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020674373 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015898251 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020011019 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016294532 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015284708 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015236371 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015228124 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.01537127 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015334173 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026052131 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015581754 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016508566 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015872471 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015591956 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015188948 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015347368 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016981952 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021164975 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016561952 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015243042 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016521893 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015210636 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015964328 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015397836 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015215125 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015212884 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019399439 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016655658 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016024911 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037301502 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016652049 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026022977 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015361574 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015739359 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019535136 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015909654 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.03544486 seconds)
  done (took 2.023334143 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028181771 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026065519 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.035098066 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025562443 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019022151 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016295161 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019505355 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016338678 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025787489 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.01990453 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016310237 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01945225 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02577827 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019967296 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017375045 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02566858 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019935513 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019092777 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.01633347 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019860309 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017408312 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019549302 seconds)
  done (took 1.211534859 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.107853165 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.02306128 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.069955322 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.022878383 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0214437 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.022685958 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023034382 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02302075 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023204659 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024349701 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024265394 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023197088 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.021438229 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024226674 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024258744 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02409408 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023181686 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.024039298 seconds)
  done (took 1.288980255 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.035010931 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021592942 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049393124 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021355472 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021410268 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021007408 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.025347902 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025127022 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021170885 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021560981 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025162763 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021213049 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021190049 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021636136 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021202124 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021580166 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021119708 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021538467 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025085886 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025628083 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025638836 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025059243 seconds)
  done (took 1.280536057 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03767708 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021522897 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.040682125 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.023815688 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015805884 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015861303 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.023775927 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.022405506 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023609911 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.021426956 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022567674 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015948435 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.024771221 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022638128 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.024776165 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022547077 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021526733 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022526577 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021444681 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01590597 seconds)
  done (took 1.202500796 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.131175908 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018023738 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017826499 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022295128 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017716459 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017784305 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022430154 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017781796 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017723979 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042508644 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017813719 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017759836 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022476046 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02063102 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017788026 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022402036 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022334204 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022330493 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.01783686 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017800396 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042459726 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017833511 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022405272 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017782665 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017750351 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017761901 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017795283 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020695106 seconds)
  done (took 1.439453371 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039937619 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.015250613 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015358078 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019375835 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019469814 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025441973 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019713758 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019367167 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015147317 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015506635 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017496153 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015153803 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015153773 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.024858867 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015061024 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017420341 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024886049 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019421589 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025610948 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027502209 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017493342 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024686945 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017480625 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015473613 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026247486 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.0174714 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019390184 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020259472 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017416138 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015526736 seconds)
  done (took 1.343623154 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030256345 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026879302 seconds)
  done (took 0.799363273 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018894372 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033874446 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.01525423 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028887251 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024814429 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.01968558 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024351784 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024765955 seconds)
  done (took 0.926936049 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.126045684 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.150097551 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017436621 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017687378 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.123122104 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.084913118 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.134196279 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028996559 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030890416 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020113359 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017329538 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.134244311 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016854257 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030614775 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018435869 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026693898 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024215747 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035403113 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030133242 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015890939 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029586519 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017513475 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016701528 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017620231 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017941846 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023641569 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032780068 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02940682 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02518221 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.01516678 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03567887 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015991985 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016663755 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0251917 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124267576 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016186135 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053963764 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016183603 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020435886 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015799094 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028104649 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037011321 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030343926 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034090569 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017430575 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017885786 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015886543 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017547272 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.02020436 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025196233 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016121128 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023459803 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015774646 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.01747918 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026647611 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016190262 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020826864 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025406251 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029751661 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026629481 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028546831 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031587637 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024836996 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024478971 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016785142 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036111856 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017626876 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029384555 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03105595 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017175851 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029168453 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015959007 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015299448 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016092898 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050220548 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017481496 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016944916 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.01622326 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016311337 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017453153 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025659898 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020833008 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023565399 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019148451 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032127111 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025275367 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.016008581 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023333853 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034609088 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020301055 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016216461 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033370598 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.02018363 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015925794 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034275192 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026721386 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017620598 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016819109 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020142412 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029536039 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017448836 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015220095 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024550098 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017560331 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.125303052 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020515721 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024359939 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015982715 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026357411 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021905067 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017464295 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015416266 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021303264 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017312806 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015561544 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026029342 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016559478 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031585277 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023643973 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031400375 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031823612 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027259978 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032835865 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016404157 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015645517 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035395935 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025997273 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017792795 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.03501932 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016429965 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027198871 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016597279 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018035549 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025973727 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015841115 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018246633 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016770253 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022888948 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018078152 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018200616 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022589448 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025117958 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029023339 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017663393 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025403602 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016819138 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032684128 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026229757 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021468889 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019793785 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017265474 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028732627 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023531599 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.0257555 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016406404 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017285009 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016515098 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.02785296 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026150638 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018194973 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.025736525 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021484135 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017242209 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016526443 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017493984 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.0204758 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019885386 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017000708 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024327773 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025247973 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030921553 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023879341 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025571755 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015888811 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016290386 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018140507 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016258325 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021302654 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025695729 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03217583 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02834135 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038481094 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016831267 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026310681 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018276233 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033938188 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.030124245 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017542311 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021508908 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.01569155 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018303257 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025930277 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027993958 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030883018 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031797618 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021660521 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021488835 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016449929 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031942399 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017126668 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025194163 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025969564 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023021578 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016561935 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018480805 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025794882 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021636667 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017735773 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032714581 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024567647 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016593693 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031338641 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016974879 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027436809 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016617048 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020588762 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022197717 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018635349 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026354475 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032331016 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015880289 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017036292 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032680144 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018675111 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018453126 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.02474814 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032137303 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021660755 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024545347 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027428373 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.02739001 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021552232 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027012928 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017774499 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.026007753 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020257028 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028865546 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016864379 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035744087 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015952999 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.032327207 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.017551301 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.028152711 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.017247488 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026378337 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017744479 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.034637004 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018496716 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017791978 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.029107772 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015980714 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.026008254 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016693244 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02215854 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.024060763 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.026158503 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018796084 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026438372 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018628695 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.026051826 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.168435524 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02496887 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025160093 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02099737 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015779736 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024280002 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026567571 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.0240634 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017214268 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017148048 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016254695 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025148772 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.01718576 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016754181 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024065458 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021057421 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02219067 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017165971 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01728245 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017215995 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02424934 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025138798 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033826912 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024336561 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023238683 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024887381 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015690155 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031267129 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015638084 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023167767 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015005605 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021939561 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024810282 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.0158959 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034581934 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.01706121 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023521025 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027385143 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024169209 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019863854 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.033483556 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.01847162 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024115868 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023587413 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020651046 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02275255 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017044529 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024035516 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025003164 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025995453 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016264006 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023091782 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02451524 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017045361 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.023359745 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016965128 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023942778 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017160753 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015022921 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020622957 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026557764 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020840997 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.02110679 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015839142 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014870447 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015755177 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022117617 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020669864 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024096882 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030972219 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014926051 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016264619 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015403464 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019668935 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033458428 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025047872 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023490778 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02067131 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015052421 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016834288 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017053695 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01567419 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018280656 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015174309 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015590663 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026086503 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017129884 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020596881 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015933079 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016758138 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025587156 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019711583 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01608921 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022845685 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015591654 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021246074 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015213426 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017095543 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020759121 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015548234 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019946325 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026100108 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032422879 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022925748 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02472073 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016714692 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023855806 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031388878 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023876021 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016796138 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02522588 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015650802 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03489253 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025356497 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024596596 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025753149 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016907968 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.033117964 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020991336 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025904625 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031544025 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016955388 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.023768834 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015933232 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031818956 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021036454 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015888164 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024628163 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0238262 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022385292 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027703342 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016811282 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02454701 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020800636 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020309267 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017562666 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017507832 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024784803 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032305409 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016789422 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021290651 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023982692 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024453188 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021054326 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028154704 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024159071 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016956467 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017556372 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020056281 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016722083 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028418261 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016766851 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021330808 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021316829 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016290012 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023530776 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033076296 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025711457 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025893924 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016381484 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015801215 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034727153 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020447645 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019803322 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024433954 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026275069 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028812849 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025757535 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033672066 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016896793 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022672892 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028761633 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017357776 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016257075 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020410077 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018007764 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025584513 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026300401 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023916158 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018323833 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023655689 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030047821 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017919144 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021423231 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.0225654 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017212561 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026971002 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024453603 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024994487 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017944237 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016252805 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020115879 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025108548 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023875325 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025437034 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017325086 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.024839843 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030718363 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023885766 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019767359 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016258371 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019640797 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025485478 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.022733211 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016261552 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02139444 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020369587 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02490362 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025657709 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021329774 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016297432 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033741448 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.025020099 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.0253588 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.01804903 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018133226 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016632149 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016189328 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027652285 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016325434 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017975293 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021423359 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018233535 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.03506563 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024617734 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032501062 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017485769 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021351116 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016377033 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026042093 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021468043 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016519736 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026936853 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015983482 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032091493 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028525773 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024043657 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016416264 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021991853 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025282465 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031772412 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026153783 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025410778 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020184262 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026119969 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.018286889 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027688234 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016535572 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.01563519 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026572327 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025003862 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028952824 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016441699 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.02660952 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018433133 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024699064 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.025231722 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.01818963 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018341499 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.018286885 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02614273 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021603759 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025939797 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021783058 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.034318902 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.0176075 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027940165 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025459352 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027708572 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030551777 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029179869 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.025351869 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.017074476 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024151194 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.025323114 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017850569 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021925408 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020160793 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039583931 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018404434 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.018334893 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031484047 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.02543228 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016735623 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.025084779 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021863398 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026971258 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017631593 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.027301652 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.022778117 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.017663928 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021741854 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021750389 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015819646 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01658602 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016899805 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026493275 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021792797 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.01684565 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.184349561 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017242103 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024574504 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026541553 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022983063 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017113621 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01515443 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016568449 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029353206 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031311634 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020207835 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024323071 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017268588 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024932307 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015131418 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02441001 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023681814 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024245217 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015634462 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015889159 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.03065235 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031258023 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020945464 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032648417 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024615829 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.01706379 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03736538 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024642932 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016555205 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02633198 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017595824 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015303924 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015082817 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017063156 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026916414 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015592876 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017588414 seconds)
  done (took 15.313283179 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061629708 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016994288 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015637922 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015687732 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022790317 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016895364 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01561233 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016873427 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016981633 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017977507 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015707692 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015694603 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021242247 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030916838 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023546449 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019375816 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015720377 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.0169457 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015700449 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016940955 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021758081 seconds)
  done (took 1.217533992 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020230374 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020060987 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019364287 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019648054 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018923768 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015899652 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019250317 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015869766 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019790071 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016297148 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019778307 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015973768 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016274617 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016243268 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016246571 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017323991 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019806009 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019022467 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015928034 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019431357 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017339629 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019368748 seconds)
  done (took 1.172954386 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01850052 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016356188 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024294923 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015256496 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015155845 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018030672 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015274037 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020027451 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020036608 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020050869 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024289898 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016072358 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015179494 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021347489 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015242244 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015989268 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.062011694 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016110383 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016155903 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015412012 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017561928 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024373238 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015487185 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015591714 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020040594 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.01813357 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015411225 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017695062 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015909752 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020077673 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016146287 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01517954 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02415711 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023473909 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020098278 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020014974 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016517226 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016111538 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015383616 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015397072 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023670439 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016586198 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015628539 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016408158 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024170627 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015451193 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.0151966 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024216112 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015278618 seconds)
  done (took 1.704734152 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028759452 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.069673741 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.023610048 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051086792 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.028756507 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020901634 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.022491916 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053794644 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016640429 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017135408 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.02942063 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.030116853 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018189783 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019302067 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.023721235 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018003859 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018719325 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017423381 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020443163 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017739832 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020399235 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023696939 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028408195 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.029640612 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018878303 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017445078 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01765877 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019163198 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.029303228 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020787799 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019316173 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019830559 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.028976406 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024740732 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017709681 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017849592 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029477029 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018250438 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017989829 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016581286 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017748004 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019084132 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.02365754 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029662934 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018153085 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.024597665 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018054409 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016177131 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029363545 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.01784385 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021149857 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030362457 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019046513 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.01833142 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019437259 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029188747 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018232055 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016986499 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018323003 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029549877 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016617898 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018909859 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.147286857 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018269926 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.02118881 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030571308 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024916499 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01902901 seconds)
  done (took 2.615313278 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.027494819 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.022784406 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02700874 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.027106385 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022705714 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.022942748 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.022783257 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.022759844 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.022657736 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.025457509 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02277408 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.137591787 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02008016 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.023697014 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.022958394 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.022992995 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.02296117 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022909009 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.022856306 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022803976 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.022898467 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.027312105 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.022922182 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.027349009 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.056153831 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019839972 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.022745387 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.022792008 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.027505867 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.022847507 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029692845 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.022847667 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.022890848 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.027498581 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029740065 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.022703799 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016067708 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02262597 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.022873063 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.022877725 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019852823 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.027804862 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.022957676 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019835174 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.023178644 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.022940066 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.027830827 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030017904 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.023898963 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.025863592 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.023152644 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02787786 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022921834 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.023225307 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.028061109 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.061212989 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029240797 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.03008239 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024740602 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029966673 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030070158 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.037304908 seconds)
  done (took 2.498835359 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030879865 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021270474 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.026815804 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015440143 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015337326 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02123371 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015327699 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.01540098 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021255949 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021248698 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022704864 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021400129 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023115129 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022698401 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02132418 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023159786 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021270719 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021307556 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021234865 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021311567 seconds)
  done (took 1.222514526 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019179349 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020768965 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016061196 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020059465 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016149463 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019530646 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016155323 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016075357 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016094526 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016211099 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020667598 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020605454 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016181577 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020161514 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019674612 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019671511 seconds)
  done (took 1.073589579 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020579357 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.026529895 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.125834067 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016790645 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018694914 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016139448 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016925072 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015804202 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018172518 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.02993937 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016847774 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018977061 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016930842 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015655884 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016161109 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018938727 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018114929 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016964774 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.01689014 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.126344793 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025391575 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017461508 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019025563 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017558868 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018651492 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024976616 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018258557 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018608877 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.01686967 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018969994 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018511544 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027925449 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.01858451 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.01745245 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.0156397 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016479588 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.01690674 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018963515 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018907989 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016887281 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015841465 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.01854841 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016961309 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017226101 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018069043 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.01893559 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018009975 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027149728 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016729604 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018591432 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016866485 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017975493 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017294351 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028065847 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018859149 seconds)
  done (took 2.034012725 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036008517 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022119635 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015221296 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015187388 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021627852 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.023014763 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021865595 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022410915 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022974651 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015239164 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023153667 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021318733 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023143338 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022094975 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023180081 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022102458 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015314321 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022794434 seconds)
  done (took 1.17903842 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024569637 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020952361 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021179552 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017309327 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017270852 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021232678 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.016104085 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016847668 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01684097 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.01726665 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017302432 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016873161 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016880202 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016808362 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020878385 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017255611 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.01685203 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015829837 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017285097 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01566662 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021303901 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015798493 seconds)
  done (took 1.180339959 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.187227234 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.147032227 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038887936 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034076277 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025646909 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.052110442 seconds)
  done (took 1.267842356 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.05442575 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025479612 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.02197765 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.047550702 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021539981 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020115166 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020108283 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02044222 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023548052 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029223833 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020504032 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023198126 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023492801 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025229563 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022073228 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021520533 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020392165 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020498552 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022225787 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031976585 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020580085 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023110812 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020504614 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020201235 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020422704 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025147845 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023657456 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029374327 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020290742 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023205037 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021586702 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020529658 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023250929 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029464199 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022040197 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02353127 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020392559 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032001135 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021583782 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025128881 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02173787 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02210459 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023507378 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023132503 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023054354 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02060231 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023111625 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020593862 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020728545 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034710839 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021832035 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025251725 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022434695 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02346343 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023777035 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034617514 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029592645 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025461632 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022402609 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029569475 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025564191 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021944948 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02575822 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03134024 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023919088 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02731668 seconds)
  done (took 2.416677702 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030950887 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049790178 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020324801 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02899633 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024796396 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020441027 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020374834 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020388033 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020379474 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02261056 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0607075 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02066884 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025006465 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025093349 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020566717 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020314862 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020397666 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024962132 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022579439 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034371902 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02042733 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025030606 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024924631 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025021005 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029229589 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021678392 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020419583 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020332996 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020381245 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020362071 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023226779 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020567817 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025000813 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.022477637 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024909487 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020578412 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020424307 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023236754 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020367054 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021690947 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025181851 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031364009 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020474143 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020437354 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029372866 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020601258 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020559664 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022725584 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02058243 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022698117 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029571989 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029535275 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029517885 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025508801 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020850979 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020828616 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020647272 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020570505 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02081197 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021774909 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025315841 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020656214 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035046322 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021622301 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021862948 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027295781 seconds)
  done (took 2.40964866 seconds)
done (took 52.176504336 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.182874197 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.171008828 seconds)
  done (took 1.125627628 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.13642015 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.134703822 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.163066822 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023822184 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081482019 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174680584 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.127098965 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026455918 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024104351 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025499034 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02377807 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025236799 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025416859 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023685812 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086508504 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026367672 seconds)
  done (took 1.918154725 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073315067 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.273027486 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.067760403 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023054879 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103379497 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.02901667 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023877688 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028422464 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028921579 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023235203 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.070187334 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.04438 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027334569 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028508885 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.02390108 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027333134 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028399532 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028927851 seconds)
  done (took 1.745291069 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.064566968 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.03190744 seconds)
  done (took 0.888657494 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.138941319 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064061868 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105997968 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.313395165 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.098947428 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.294293493 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102709899 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.09967342 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.065855216 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095936347 seconds)
  done (took 2.163593206 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060001022 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.055533788 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.280365594 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054652856 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.03421636 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029257981 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.03025982 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.029948422 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030514043 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029456513 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.071898345 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027994374 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024473843 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.067749117 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.048899294 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058945063 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023716455 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029383659 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032757723 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023634859 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028381132 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.029853388 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133430983 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029714519 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.050222186 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027168554 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028863942 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029610879 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029477889 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030296269 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030407764 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.053627247 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029485341 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03743988 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028237858 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049804316 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024575298 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.04878982 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.02717204 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024345957 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.02709928 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030458625 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025079519 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030090627 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030685369 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029435266 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.030031105 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023714276 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.030625322 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027447964 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024560094 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028223507 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028497392 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029028712 seconds)
  done (took 3.014152574 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.076447453 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066659104 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024414682 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.074121656 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065682722 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024550587 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078684476 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06026522 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077025306 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023912242 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.02358144 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023507968 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031360826 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035669135 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076340582 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069135743 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025661556 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024264352 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068578416 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068537567 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022994998 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079414613 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.07031558 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06728486 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022727424 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02418323 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022897646 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023584888 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030737926 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030950863 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023328838 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033051576 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035256723 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030609325 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022657896 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022974742 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022894271 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031476752 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03206047 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031947172 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029918057 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022604874 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022960386 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023526148 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024124757 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022534015 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032093358 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031025175 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031931154 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023859071 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024169398 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.023096939 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023932315 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030404453 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029334564 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030775527 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032876063 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023204834 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023158673 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024617393 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033856939 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031548382 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031423466 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024316679 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031562115 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023158864 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032594426 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036103681 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023024402 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023669403 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023337797 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02332535 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023690819 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029814582 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029937609 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023781854 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023596515 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023037135 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031393091 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030005237 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02303618 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031105646 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02275938 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023377134 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023751405 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024260595 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032439872 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031418058 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02378733 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023342963 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023434027 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023336301 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022643883 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031361295 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031218226 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031417734 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.032323685 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023743636 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033727376 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032624571 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024377414 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031546547 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02384631 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024252539 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024169059 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031508739 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031229927 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.032922799 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023865864 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023468928 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032748919 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035383832 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023688068 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031172442 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033247789 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031677056 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023240105 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034594361 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02370588 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033582765 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023985163 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032919748 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024039053 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031789052 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023932706 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023159792 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023841043 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034271777 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024341446 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023823317 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024248683 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023829413 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031809626 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.03508341 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024422348 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032293004 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032069872 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024349373 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033249275 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023965909 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033225822 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024004681 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024390186 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02321596 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035742422 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023846388 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024307742 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023958476 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03387009 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023867092 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033784338 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031171776 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023346147 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034339499 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033880168 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031228134 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034261973 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024603194 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024024967 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023670558 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023990761 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033336856 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035242305 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024911088 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024161391 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031139912 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034037359 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023443305 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031585169 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031387053 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031806408 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024266733 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024165954 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034979379 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035832605 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031940759 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.034045756 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032936261 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023929817 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.03159031 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034111617 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02392043 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038360029 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023946618 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.035271502 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.034549687 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031026719 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034214855 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.036548572 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.033974461 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.034226256 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.176809312 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023001214 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023191287 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029655056 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023107007 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023438872 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029262834 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023714301 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023906386 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035941546 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023392223 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031484348 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.02273078 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030239306 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022657876 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023651817 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034563361 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023115033 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023641566 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.02963983 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023221724 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029115493 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031988068 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.02917137 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023010253 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023544614 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031969077 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031108505 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022963762 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022932727 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023532621 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030783175 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030190979 seconds)
  done (took 7.816054098 seconds)
done (took 19.470699795 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.145677954 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073383722 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.144381 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.08485419 seconds)
  done (took 1.232875373 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058291466 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019747838 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.141180932 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.152920545 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.01995151 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.135116557 seconds)
  done (took 1.333161879 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.262926659 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.155261616 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.164158382 seconds)
  done (took 1.390751397 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.153965554 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.280266815 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.54555757 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.146201738 seconds)
  done (took 1.940844694 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.169083362 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.164674524 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.031545141 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.182037685 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038751081 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016339199 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.107428467 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017178722 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.051722279 seconds)
  done (took 1.648364163 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095713496 seconds)
done (took 8.44754143 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.197908432 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137889746 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.034002698 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027987799 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.124418147 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.131053753 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.143194153 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.03050703 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.133719476 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.31134307 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.181165228 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048995637 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.153590227 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042924258 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.26012343 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031279143 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029739745 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024779163 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.140220997 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.131600158 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.240888902 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028547148 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.097238617 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031025405 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.101373308 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.079687805 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.188029821 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.312279132 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.273657081 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031239785 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.119649449 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042344903 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.11542021 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.123962541 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.133535006 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048729146 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020300936 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.241107387 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.105289569 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.320299203 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.164954418 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027345649 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.139953283 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025506743 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019691175 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.143175362 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032574349 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026681793 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043033184 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027353897 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041573392 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028110927 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.129912302 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023715321 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092289186 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138722162 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.183506825 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.102097029 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026363699 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.039119652 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030254402 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.158397773 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038493151 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025837949 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.03203167 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020231634 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.136162695 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039673364 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020675082 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031081755 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.02916727 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.097555679 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.153285936 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.065425671 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031749441 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.118029876 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.09681463 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.046079933 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048528302 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029518795 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.01980725 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.189511482 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025168928 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038121705 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.02692427 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053034226 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020128013 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035631862 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.168631656 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.148899581 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.086887763 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.02152434 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.236365089 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.02228164 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046848953 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021722443 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020901092 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.187696189 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020598386 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020784931 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.031103745 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.02953586 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.02241564 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.169275577 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102828712 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02890184 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027751063 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021263022 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026668876 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021962002 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.021397485 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020798623 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.09602937 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037559262 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.177788191 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106545505 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.119010332 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031691393 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036631679 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.084637846 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023789911 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.030428547 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027556944 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.135718864 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026879506 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132152642 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022062674 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042479091 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.119729558 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.096573952 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.102907445 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019897274 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.137913469 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029834343 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019424257 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027293017 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.0468205 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.02945449 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036738271 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028365438 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.137675907 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030645183 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.02560053 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.119226815 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019232989 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.116470523 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.098088464 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.128923868 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024968814 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030375049 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091961424 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042329675 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049243053 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041955629 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023956616 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019960874 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019602962 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.032798977 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019093423 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019858621 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032625826 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.02656371 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035849115 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.239629083 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.02976269 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024065165 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.249480488 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.032043608 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.090902707 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039934903 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020328969 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.100675968 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021843801 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.040246167 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.084185266 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020431178 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096703972 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020774316 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020237876 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026258636 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021843787 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029729255 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033870474 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020788222 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033348657 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027917552 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020201357 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.101007182 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022033753 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.188316662 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.099363533 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.094849043 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020413235 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038694445 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020030944 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.132589326 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020384917 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.069650471 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.111406918 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034884042 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.04026447 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021598034 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.098672104 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034451245 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025253531 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.098948115 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.130562533 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.091499239 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.02657738 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.24549224 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029371627 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020651863 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026115562 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028985562 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020723231 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.099930945 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025016644 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019650424 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019963223 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021958652 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019337002 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.044237069 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019482576 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028120441 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025821252 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023140841 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021857621 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019332728 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028349575 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.099953152 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.119174293 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026224543 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.03939257 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033524351 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031333013 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067459479 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028032922 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.157413334 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.01941597 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029793976 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040470732 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019633546 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024378255 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025385489 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.037098966 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023426875 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021216194 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028968995 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020381518 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020498249 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020255963 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020418592 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029089887 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021598364 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019801027 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019778493 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.036211872 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025170486 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025088033 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031322759 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040056742 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.476039171 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02173431 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022625563 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.03294068 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025785464 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020627524 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021929084 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020247329 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022124923 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020400817 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019830695 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048016606 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.024984854 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020843717 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.041015918 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.026139086 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.030290022 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.118995508 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036783381 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024957793 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019665748 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.259215291 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.093949283 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.041449783 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039797052 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020600061 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031212054 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020479494 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021003168 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019662343 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046721936 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025424207 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.02070188 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.01977733 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020061458 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068426954 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028751949 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019983322 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028635751 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020303598 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020299451 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047223493 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021112371 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020409882 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038377046 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032804213 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.106851351 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03275108 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023808624 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.071897658 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019887046 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020492828 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020782946 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.118814849 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033880009 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02213263 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020554428 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028054001 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029745019 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.074259891 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026813692 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023978728 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.02838089 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019849012 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020784869 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.047348351 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.049274814 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021677508 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.024138995 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020359172 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020727479 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.276141026 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.032720615 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025669004 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.107622441 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022125262 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028540608 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019535171 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.488959978 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.024544263 seconds)
  done (took 22.366084812 seconds)
done (took 23.190022746 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.15244873 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033541607 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.040089438 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028562621 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031905249 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03169812 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.042180947 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029510952 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032526412 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.03955139 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.141602495 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020005621 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027477101 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034161399 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.02844867 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.032551602 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031432592 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.032120604 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020482703 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.032378735 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031537368 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.030990527 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028769787 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031778574 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020450596 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028476537 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.148867774 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034767939 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.030179128 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029424404 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027479088 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.041817211 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.032912594 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.02696842 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029216161 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025287346 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029955391 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026396378 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.148642344 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.02565902 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020457175 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031755918 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027232145 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027644308 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028560123 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.030898726 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025347664 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.032548182 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.028035372 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039489476 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.148387968 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028725097 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.030173854 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028268668 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025424206 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029178169 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029878409 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030484605 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025159057 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038918356 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028366831 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027714629 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019741952 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028410706 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027037016 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027298835 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019002743 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028517004 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019850346 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019686224 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.028094388 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028225731 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026639068 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024857172 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.028050121 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019760299 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.027540633 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.038723934 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.02668442 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028485027 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020139441 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025294969 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024887979 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020293831 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028504365 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030776421 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028765323 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020272815 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.028062012 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.039078837 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026409097 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019756683 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030712345 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028565655 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028308889 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019847915 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.02815041 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028228321 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.02770273 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019776074 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019029218 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02841648 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024954406 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028435388 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.0201605 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028288083 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02831491 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019076559 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028327685 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026936536 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028773533 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.030553387 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028363047 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031089712 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020260512 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019020619 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029475127 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020088413 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028480764 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027776926 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025179146 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027539618 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020249116 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.027566336 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028310133 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025826516 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020108415 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020182851 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020087109 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028485034 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026922869 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019124087 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.01974899 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028465472 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028336916 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.027720247 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.028030879 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028330388 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020242032 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025706135 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025207197 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028413917 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.027843129 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020112672 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027997167 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027834058 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.028681561 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025256851 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028540028 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020430188 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028437631 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.0268426 seconds)
done (took 5.676702271 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.076764325 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.064544682 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.178113753 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.141996325 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033617044 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034453822 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025325415 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040962197 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02720904 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046057146 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045748181 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043445775 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.163160516 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.041086406 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020322006 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032282206 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020793164 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.04787206 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.144816149 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.045169566 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.06366871 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019034609 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036585495 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038950465 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.033036651 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039174118 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.044477065 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021320129 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.038127043 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037811577 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047302209 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022840447 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020639595 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.040121928 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036722467 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029366935 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.019991793 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.02733057 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.032303219 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.0201647 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.064608214 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038965518 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027169975 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027433127 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021007799 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.035429014 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020967261 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028728562 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034862162 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.027029252 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033229898 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.03781485 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022345315 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.038595928 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019225339 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027985751 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.027639795 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019968699 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.02092182 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.02010327 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02003282 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023020673 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.033135791 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.039692536 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024209313 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027853773 seconds)
  done (took 3.577402261 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.045897324 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.067034356 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034962285 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.03534312 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019990353 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020568264 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020477582 seconds)
  done (took 1.154867846 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.093025305 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.137001206 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.144946333 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.146302929 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.156519462 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.143136783 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.033264355 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.050520154 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.055715166 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.157668257 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.153852623 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.147961232 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024436284 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.033103748 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.053053231 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151059939 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033553492 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028120711 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142149977 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148541721 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025721958 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052045639 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033618993 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.024083211 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.14693446 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138978369 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024589694 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062527145 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023245752 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021111955 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021077516 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043827067 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.139050127 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.036347331 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021392327 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020055667 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.13631865 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021614279 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.139132203 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028221731 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.138939979 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023688574 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023770149 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021457704 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02240115 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.14185255 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022504351 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021177283 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020788623 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141013837 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032254078 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.139420088 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022754577 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026299176 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028216135 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027939446 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028265766 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021608928 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.142385258 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031609297 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023050564 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.150423229 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.149397596 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.139444781 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150034674 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030386379 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.140576537 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.139103652 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021196956 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.0291535 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021906786 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.151074814 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.02481321 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023391129 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019502843 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028283329 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.156308294 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.156788262 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.157128193 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035530323 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022987201 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022261377 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.155767465 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.15821896 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027049639 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021646647 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021856919 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037344995 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046236871 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023789349 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026300588 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021532648 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032097834 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023837092 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023202262 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.151725824 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020648388 seconds)
  done (took 7.74845052 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.039506995 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021707749 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021097647 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.02153324 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021748219 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021652101 seconds)
  done (took 1.133307604 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.049227461 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022306675 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.03477146 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021982204 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.045270655 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.135002287 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.134835679 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023194453 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.038673806 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034214456 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.134670407 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.137707525 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.137322145 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023288601 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.134775232 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.033943825 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.135310179 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026728499 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.033143453 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023268889 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.032672063 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022812549 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023094091 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.149896799 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.017097314 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.033363476 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.031539751 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.033251008 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.03280213 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022762621 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022717164 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016728902 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.027885888 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022773439 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.136751262 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.02835149 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022233767 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.01793892 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026330887 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016785565 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.138979025 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023435115 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026701985 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017899861 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022807638 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.02810942 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017988491 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.032399527 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.137236636 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.01818727 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.0179415 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022570276 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.016854834 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017882137 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028111076 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022954229 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017893554 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.13725878 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.023183891 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028234775 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022193226 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.016857458 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022790686 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.016800347 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027129647 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.017836105 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028039887 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02322918 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02315104 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022020021 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.017957468 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022067872 seconds)
  done (took 4.068222667 seconds)
done (took 18.591247462 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.45425349 seconds)
  done (took 1.3638885 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.987677592 seconds)
  done (took 1.908707962 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051279915 seconds)
  done (took 0.986688009 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.308492858 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.49760968 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.721639042 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.093537844 seconds)
  done (took 2.542321226 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.831631631 seconds)
  done (took 1.779913415 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.21420462 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.178189911 seconds)
  done (took 1.354793766 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.494232356 seconds)
  done (took 1.428170982 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.314801878 seconds)
  done (took 2.257860879 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.204830055 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.135620232 seconds)
  done (took 1.281955126 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.608104574 seconds)
  done (took 1.546415333 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.487862318 seconds)
  done (took 5.429168918 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.188494853 seconds)
  done (took 1.179100309 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.191223317 seconds)
  done (took 1.134563375 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.706625432 seconds)
  done (took 1.645934494 seconds)
done (took 26.786899421 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044084913 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.037399612 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.03737362 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034723893 seconds)
  done (took 1.083385126 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031166149 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025276541 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027570945 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027946957 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025357127 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027207086 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027981177 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024178937 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025252027 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024529337 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023027017 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024382648 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027068326 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024208437 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026722969 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028159574 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024456205 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025109663 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026441722 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024102326 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027126058 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024357074 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024458316 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025756998 seconds)
  done (took 1.565140046 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.03451065 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025852327 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.027717929 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024803526 seconds)
  done (took 1.060203594 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033457093 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031075894 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039778898 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.040264149 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030896583 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031540227 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038135954 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038579509 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.045135759 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041297829 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022013784 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021662602 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020911539 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035726277 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037632556 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016207528 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017474277 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.031746419 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030850593 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.033611191 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023951495 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.01959558 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031076625 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031466525 seconds)
  done (took 1.686909675 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038097905 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019809605 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.036371082 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044328359 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044473057 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019661794 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.033829277 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045088251 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.083940228 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019733454 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025725171 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019708406 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057464237 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019689973 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034810523 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.065383233 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.068144933 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.02384598 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050674176 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019752198 seconds)
  done (took 1.722521669 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028979273 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024541284 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025183939 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019449943 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030781082 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026889209 seconds)
  done (took 1.108753832 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.02444901 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021526101 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021347903 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025721245 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.0212605 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021204528 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021250615 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020101441 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020093398 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020880613 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020893534 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021208828 seconds)
  done (took 1.206173313 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.162064425 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026780854 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024703243 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.02005696 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021748764 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020830595 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.035924688 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022932599 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039032538 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020770659 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021164063 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023377209 seconds)
  done (took 1.385975937 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061198778 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065502229 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098375609 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074675002 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08017584 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050923766 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.197453851 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033383911 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.115089673 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09055993 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077373489 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046152236 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040089025 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023747983 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055971731 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072940616 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090584158 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027076661 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074680556 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.238110445 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086403953 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.08663739 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103369481 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078862188 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047070984 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103198161 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050860237 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058091346 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076656349 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082593198 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077090184 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.058050444 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025675922 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025176418 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115891122 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.057892005 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075109988 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047724686 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060159413 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043934656 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082305475 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.025263741 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037830107 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065452215 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042957863 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092804545 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049885805 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074293831 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036705924 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098356299 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087737114 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175980447 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042674968 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061410744 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100755664 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07118572 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090357711 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064485922 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037077747 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077945417 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.067552142 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060347631 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068334604 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036309404 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.290224401 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043146099 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.078866868 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06889726 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.045463765 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049114054 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065269758 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090252845 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079471155 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.072179582 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084189832 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046127805 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083271672 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05438952 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.077481632 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056830112 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026455725 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07535749 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08088389 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051718353 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053710165 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081953791 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047176668 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030233313 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.044083998 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.073458371 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034475606 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.063918931 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03990749 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.085725548 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090404364 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0534614 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070556491 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073882106 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032898832 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121272021 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064302347 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027339376 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07364305 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069160044 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108456555 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052635458 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029669208 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054734161 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058602541 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.114693034 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060235067 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03552462 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073810841 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098708847 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049935353 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.255442353 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051396307 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101968644 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073651393 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041724059 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030445126 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.050368312 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070239172 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068545326 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083082991 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051944677 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.03886159 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042050329 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079521752 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050563402 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03523856 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077062866 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.060985724 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.030462127 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047297094 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.032483507 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.266519506 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.040707488 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09079924 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08604328 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029809098 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060057761 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050266703 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058854241 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.054488581 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07208291 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093788809 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.13682878 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044120522 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.037379327 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062740754 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096667822 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079170586 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044933401 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.038242193 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05295228 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063979712 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053667596 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.076353231 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047403993 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064943095 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05683476 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094729506 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100376769 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056444248 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060738164 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061205828 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.078631414 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029598342 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113663495 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059153813 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077707254 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042002072 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097062194 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.070889973 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062890717 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041191511 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059729776 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.05843105 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061400012 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100008963 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.04845098 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026601574 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049491069 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104953497 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031943414 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076130601 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.045318007 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.047199366 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072374654 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.049399706 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03731044 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022893555 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08181081 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119966728 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024867419 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073473034 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.071604473 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061798225 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.082234729 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024402176 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087669059 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09665053 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086659608 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110612249 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.315334166 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072319893 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070476235 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.075464748 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.066279122 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033404965 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078502957 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087269797 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047206501 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045697282 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088935554 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071758323 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.088066007 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.067090927 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075340573 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.059302953 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059944409 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057698419 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.053338968 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096244012 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075588038 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.07877147 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038086509 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066412565 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073052888 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093248929 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035653111 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097706533 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.039836189 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099715112 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.033088819 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082554249 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.03073929 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.124063145 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034117101 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05467916 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024066679 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027037387 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098070289 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.077665795 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060910854 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054654457 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.091386519 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093650538 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032175123 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068188074 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070557974 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059741118 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071421111 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064601766 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.043327955 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051183913 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063256555 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041017985 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.037274896 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085899299 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053063604 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095118438 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038553121 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029716167 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097170255 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069101236 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051411813 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031784635 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066468029 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.083117549 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048754884 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042196013 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079612855 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062818227 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104021902 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.046841971 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.059237177 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.240881528 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035751444 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.049938671 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023968679 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.043431658 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.030798676 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082132817 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030134314 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070285832 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022926649 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082560008 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039476179 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.050716261 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057478033 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062335223 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087477176 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047699088 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093652462 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043115689 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070373134 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062336858 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06715882 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040058462 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055440094 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05797424 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07449138 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.046976796 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075199114 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099149966 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058389899 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097887491 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045480213 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077722581 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060993893 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077736784 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068381464 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150664151 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095035948 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069499757 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067501173 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029841258 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050481963 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06683425 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065501032 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133584421 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081833461 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.02673818 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060158363 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048414574 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062436368 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064084108 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03486587 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098978635 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056647283 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041969211 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064276107 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.046087963 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061208977 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031421891 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05899296 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.053463426 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051744471 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053947188 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072167851 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088092832 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067693722 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104993067 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.059129706 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047052578 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.077449023 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077311521 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074966281 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039691594 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040444329 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255084473 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070682924 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080261114 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.051327848 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062750786 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064445151 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053078602 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084376487 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060230796 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.078314886 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0334066 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.030432617 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022452941 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.02581808 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076473055 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064751768 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063266833 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057735981 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025964178 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058736879 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060790892 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025982607 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039247099 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047802704 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052186175 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.036436842 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059156394 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.068739751 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.047918912 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055978807 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058610234 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099059397 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.053181344 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044235396 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099919462 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107154295 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043340746 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048833482 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025631765 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033438339 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079227228 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100295571 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105535219 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.03365929 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041015937 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.038821511 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042417214 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025675584 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042389518 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.043477822 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060044594 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053078624 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.069102789 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060235623 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030060491 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063434944 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055219251 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047939604 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062656471 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073978007 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083138199 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.098870275 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070397368 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074053026 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031501071 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.03546532 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031488788 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03488175 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062814018 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034107945 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031405309 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108233144 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.047843442 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069600373 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071905857 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044699022 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031220811 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095087593 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024687865 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096405824 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025943494 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036402312 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.190931743 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032889142 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048356067 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092575493 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059915063 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.308166655 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060795947 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063482366 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141310937 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10987715 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039165308 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093593393 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029343238 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030152766 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02995318 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061135991 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043429236 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071096226 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096826407 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041489419 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054231951 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031764886 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095824013 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.049241898 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055698498 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03992543 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033633619 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099663749 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033972293 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.041546932 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044153881 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067004785 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026545014 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056237532 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037902535 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034020548 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147143968 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.666717735 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051503362 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.028999341 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051274132 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097270626 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089634571 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051300181 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066396591 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.073616778 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0602722 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049202317 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069781056 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.153807123 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028220085 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050716442 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.053138856 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057885451 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065002189 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051514833 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.044683982 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.051979724 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041375019 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034718971 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071903221 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042604888 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053550078 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062828939 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038618696 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.044569218 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087800517 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.058612981 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.039538844 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045210103 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.066799976 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04268226 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064468563 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024413402 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067310058 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045024679 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080593355 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.05590199 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068865584 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.232986192 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048274678 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089165072 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060666291 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074932179 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040632385 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031478095 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076643833 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042918695 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031017943 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095848743 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.048025377 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057074117 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06013352 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.04894449 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062163713 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066544019 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065268528 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053901404 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031769363 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051865278 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.059416705 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039511494 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033079808 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.027128111 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.029546447 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063216434 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03986312 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040563547 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070353135 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043393525 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056771203 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.053458121 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077599982 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043766241 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060238485 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065267619 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047314311 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089810213 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055505754 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083907384 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133072395 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089194222 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085391765 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089970177 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032745178 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.034570489 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02339103 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069349148 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034336454 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.04193856 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033570956 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08996712 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038735347 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067716727 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.211529853 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035095683 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049070941 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052533496 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.0243393 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038409472 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065909849 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041205163 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03495662 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067847294 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037180562 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086781445 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065995952 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056289216 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052290766 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03662359 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067199037 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.060843444 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.087360184 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056523287 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.030791169 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085230142 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064501657 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105233866 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029875033 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037275413 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.241256861 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057394243 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085131032 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034712371 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108899466 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094994168 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057089149 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085930489 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025218658 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042929171 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042364343 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.075107236 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037880399 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059653467 seconds)
  done (took 41.307670935 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.133771364 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.128282987 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077371891 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089403089 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.246148249 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.254934717 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.111383419 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.07828626 seconds)
  done (took 2.179158794 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024806766 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.053967157 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035377784 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.290626543 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.05506733 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021105303 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.02847927 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036286672 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021133875 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020575114 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054974792 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020900927 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021247547 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.458565545 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020266528 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025475881 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021365551 seconds)
  done (took 2.283702674 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.31328655 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.564672725 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.204568996 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.627443549 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.104125154 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.562116647 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029065857 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034114409 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.665368111 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.352158429 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.098219077 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181429543 seconds)
  done (took 17.796569454 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.03183661 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155125383 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.154035993 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028171227 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027655144 seconds)
  done (took 1.518027647 seconds)
done (took 76.921122033 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040930713 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123819234 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021085303 seconds)
  done (took 1.231302782 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.157822002 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.153041528 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.153373275 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.15612342 seconds)
  done (took 1.674563076 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030988988 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030122124 seconds)
  done (took 1.122843837 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.183588942 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.257100179 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.044593399 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040643373 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034922132 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.03518249 seconds)
  done (took 1.174312419 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027339271 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.025250634 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025249704 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.02568913 seconds)
  done (took 1.156253088 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.135361979 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019967748 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022444294 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024280227 seconds)
  done (took 1.256623731 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041179431 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040255708 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.071197374 seconds)
  done (took 1.212323517 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040195159 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039039159 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033800449 seconds)
  done (took 1.172595466 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064551001 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.050277161 seconds)
  done (took 1.170313784 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03668269 seconds)
  done (took 1.096317213 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.048953018 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052928342 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.215440604 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.181606086 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.219535887 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.202084398 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.034002987 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.03105168 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.032763181 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.035631557 seconds)
  done (took 2.108078611 seconds)
done (took 15.959630281 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036934698 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.14590572 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270728832 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.04083693 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.781167141 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.267902338 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.678762546 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043676448 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.054155791 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022309849 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039120598 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.75866384 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.694946396 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.100714219 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.669537255 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.097662844 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.76114892 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022433914 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021506181 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022099882 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.663378778 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021680778 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021976109 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022417535 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.759162937 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.41085453 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023062788 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.096278893 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021832026 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025675661 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.393010874 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022908213 seconds)
  done (took 13.062173513 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026674184 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076818221 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027035314 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037803421 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023902269 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024236345 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025869331 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022507537 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065512845 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022205261 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039508373 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021681686 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026507795 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023326925 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042545308 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02206501 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024064427 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022690962 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021881339 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022485957 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040955936 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02186306 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02235336 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022393014 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02220282 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036636938 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022952359 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021818319 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.0220906 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025779004 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026996925 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023414985 seconds)
  done (took 2.000630232 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079011827 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07812049 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027911962 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062199283 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073698191 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025101251 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105335104 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044208141 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067647475 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022722805 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039577571 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022185864 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058855758 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023486038 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043121491 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022301255 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024676625 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022833321 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022047967 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022616809 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041680041 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021980523 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022521459 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022771777 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022891329 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.038774868 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023355455 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022301433 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022509232 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026258251 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028292801 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023977533 seconds)
  done (took 2.275816089 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025985015 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026515317 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032382191 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035768318 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020835111 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023362625 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024652413 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020957459 seconds)
  done (took 1.283661438 seconds)
done (took 19.699101368 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036393005 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022747625 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025662836 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.046847932 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028998613 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.14364854 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.025135767 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027572621 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026031495 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025380616 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027611385 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019924535 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024602097 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.024703921 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026528946 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020614787 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.146496166 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025024165 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.144283089 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.145538785 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023235325 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026151573 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029035494 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.144877877 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.144920783 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.144741307 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029952819 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026476687 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.026236661 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023504459 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.142503752 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.14468761 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023296284 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140756328 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020812053 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020580244 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024998971 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022108028 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.147612035 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029885755 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022857427 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029470878 seconds)
  done (took 3.456876653 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.148944093 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.154467761 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.146963363 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033206172 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029407347 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032465304 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.153099421 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029768247 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028457206 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.151976408 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024147465 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028215003 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030451034 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021206738 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027918405 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0245683 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029971301 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022386867 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027879922 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028218415 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.152805246 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021698152 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029028158 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029380739 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024061704 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030072554 seconds)
  done (took 2.550763514 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031288438 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043650374 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045982489 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.109860565 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063312446 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043728663 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037331702 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047680309 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053370011 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021459015 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043904556 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.05063219 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050028022 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028602393 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060553199 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.040455124 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.034496947 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023047558 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028060556 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.056108418 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.044903365 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040900931 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054292213 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041211931 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020566176 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030463729 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025890553 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038097354 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032996047 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033989597 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025142712 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025960857 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022277047 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032330332 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025198532 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019796925 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044725431 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034381138 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036225959 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060497761 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03174745 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022647685 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048153154 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.081849027 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020301857 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024397484 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025775663 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.034241678 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022842397 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063606025 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036733869 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021310639 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.041518453 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022971901 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.02337939 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.043078733 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023526183 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023917471 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.042721613 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.028256742 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043548352 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027244126 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042013418 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020551239 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033175655 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022871459 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023260557 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020302281 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055787345 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028824775 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.068327376 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022657921 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019933592 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033901842 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033122187 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028845291 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020191729 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039879292 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03421023 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025446851 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.040072641 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024345621 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02487159 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.065541318 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020763788 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019864132 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019744395 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024097083 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024740146 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.02201269 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033927251 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020848425 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024848028 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.048344192 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021123936 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022002534 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.02411129 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022889243 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020717826 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031079228 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024851687 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023166719 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034263271 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022166184 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024873738 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036535119 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030912905 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020098663 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022842016 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024047041 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023163305 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022955503 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024945245 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023288089 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026855237 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028944241 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027406112 seconds)
  done (took 5.017386547 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.241955832 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.231186934 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022661113 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.227159442 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.030358985 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.158402445 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.228975774 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.230729878 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022228652 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023081242 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021818546 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.172553776 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.167431847 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.179806592 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.15852272 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024156408 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.054942006 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.177998406 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.233705095 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.227950113 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.053820701 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029321577 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024313215 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023269431 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02262165 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030715065 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038780359 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030613918 seconds)
  done (took 4.188551821 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030585905 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066577773 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025791612 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046920516 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.039660399 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022635637 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024030549 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022808561 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038941938 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027988924 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022373883 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026288549 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.02562192 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024408293 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022327913 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.032165984 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028903718 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.020968901 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025598222 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026752874 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03322657 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.046573483 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026102579 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021985297 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025516744 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021829305 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027414803 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.03090486 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021693757 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.02174541 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019285015 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030685665 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037111389 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023261792 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021819783 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022686511 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022426953 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02238401 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022264681 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020480596 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020387403 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027298642 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020875731 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.02716383 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035454395 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024354675 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023882998 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024699506 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024653072 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019137734 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.0251995 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025215871 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024627643 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030484038 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024390322 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024672196 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023498669 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036735095 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028032588 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021636456 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021339875 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020636562 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024164286 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028801331 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038256286 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024112257 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020525359 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022486532 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023746584 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035435098 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021588223 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028731892 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019392616 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022413044 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024558746 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025074313 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023517752 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020509254 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.02171225 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021511537 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022248271 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021987468 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021378938 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024708573 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020174277 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020561773 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022772282 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023877061 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027530917 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021034384 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025662777 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023519718 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020951038 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024691403 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027474468 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024953372 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.040004071 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030004184 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022814539 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019999171 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.039014217 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024905758 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021579486 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024128977 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03080585 seconds)
  done (took 3.863887406 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053140562 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024496269 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041946144 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.05801846 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032678055 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028249358 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036126996 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023686692 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044036419 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02154623 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031631131 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020750636 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.03545866 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.03125795 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024244182 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032314202 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025137951 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042935701 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037370223 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021063333 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030982629 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034715966 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034870224 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039824681 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039200716 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040658286 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034588784 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025051733 seconds)
  done (took 2.050228357 seconds)
done (took 22.194836455 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.159019325 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.332311399 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.128383517 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.90038499 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.186055572 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.243698367 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.23404876 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.105468959 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.126946814 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.211918274 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.77579943 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.41353805 seconds)
done (took 59.98120685 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.237079096 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.240135206 seconds)
    (2/2) benchmarking "String"...
    done (took 1.320549546 seconds)
  done (took 3.65495048 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.529816966 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.092484356 seconds)
    (3/3) benchmarking "different"...
    done (took 1.126063115 seconds)
  done (took 4.826705246 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.405705542 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.776695748 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.434071629 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.080627215 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.097384593 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.881201645 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.253613032 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.784771227 seconds)
  done (took 27.399449674 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.12272245 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.335665647 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.473576703 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.575672427 seconds)
  done (took 17.681360575 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.539147317 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.646540496 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.646890789 seconds)
    (4/4) benchmarking "different"...
    done (took 1.708570574 seconds)
  done (took 7.755833803 seconds)
done (took 71.142433465 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.081333829 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.369830958 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.128829417 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.275753698 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.163002821 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.181776682 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.090529184 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.120697762 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.09188307 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.096842483 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.018688277 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.09227265 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.103426055 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.167401853 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.097055618 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.099805683 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.221369516 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.100734504 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.107760103 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.978251251 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.447055716 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.122052032 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.149315794 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.186045432 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.549987986 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.142119583 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.538845241 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.108288445 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.740427992 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.144467169 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.134275514 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.126600095 seconds)
  done (took 182.056192359 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.120853203 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.935951088 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.97511664 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.134227332 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.514179089 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.48277531 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.994627527 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.565824827 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.130639736 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.096481985 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.300676667 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.142863417 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.225065979 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.729561665 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.192659171 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.170175729 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.067448339 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.992097193 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.179901081 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.050954274 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.093092005 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.738753236 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.727733307 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.013809738 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.13601224 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.168173645 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.186615603 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.19204299 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.672239229 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.069994806 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.193809295 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.201929586 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.361070648 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.409360467 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.17176076 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.171062627 seconds)
  done (took 154.624339839 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.426381131 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.177046325 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.212718279 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.293102502 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.165112839 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.032505477 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.173015684 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.114795404 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.107141622 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.096410391 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.133028656 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.238820877 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.169149689 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.470029446 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.203676026 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.169453985 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.168465074 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.475406528 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.177733021 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.170325836 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.168111108 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.271632759 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.512751462 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.293345897 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.174563765 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.14108694 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.219628716 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.121372589 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.10650078 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.082525191 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.241002657 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.169359578 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.297852193 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.282734467 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.175789165 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.228074399 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.177551207 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.430536791 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.1722364 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.169227577 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.170407452 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.215791223 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.171323078 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.307628148 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.270507396 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.173461875 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.189841628 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.642000443 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.772430185 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.173864052 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.17127121 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.164794697 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.154348605 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.16823821 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.271753698 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.113801872 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.128429375 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.792888166 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.123871824 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.098569568 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.123565249 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.120790439 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.107382339 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.103386771 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.150869834 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.733207238 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.72758541 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.465380468 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.89770236 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.115306538 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.110659529 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.08202653 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.145295857 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.196332432 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.118632329 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.132617853 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.280024895 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.114137517 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.133762661 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.018576049 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.026245036 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.114761402 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.231231545 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.116159039 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.126347161 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.576921273 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.283320552 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.118885637 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.138281408 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.148765485 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.087327005 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.098032399 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.105253473 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.025401598 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.116319115 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.116112669 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.446533819 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.129039148 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.110567377 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.249271602 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.459927267 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.112393859 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.213967033 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.507845459 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.009075592 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.145747823 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.09941557 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.160811777 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.108072405 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.107043062 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.121952562 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.091141459 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.085100324 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.111211943 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.092135089 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.091621042 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.105735524 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.107252289 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.088029962 seconds)
  done (took 330.710748694 seconds)
done (took 670.014152982 seconds)
(4/20) benchmarking "parallel"...
done (took 1.142281147 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.363003595 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.109858552 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.309892458 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.379291742 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.316605729 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.296884877 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.366730795 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.4564594 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.329890441 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.264247527 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.386384523 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.337100169 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.448895143 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.406601713 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.446539895 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.43153196 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.324503546 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.782102203 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.305263155 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.264074211 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.28890466 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.255649292 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.247150233 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.334494161 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.43429153 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.283390087 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.516284966 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.328183884 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.299017009 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.337360547 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.357105749 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.377243978 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.307246623 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.369734271 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.331670333 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.387051601 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.250744035 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.35082576 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.271969531 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.30257139 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.31063009 seconds)
  done (took 63.360519118 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.50388506 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.279757258 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.418879636 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.400394203 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.04314203 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.407136115 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.49163527 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.282118138 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.292712997 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.417985783 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.43151833 seconds)
  done (took 18.077664395 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.387621368 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.277629016 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.424694983 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.419485785 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.494459014 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.408490218 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.456632162 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.279210878 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.292477552 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.421919913 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.439001947 seconds)
  done (took 17.409271195 seconds)
done (took 99.93897112 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.711124519 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.166378002 seconds)
  done (took 3.956826186 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.112970924 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.102367116 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.093687971 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.097241946 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.096244726 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.093337848 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.144521779 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.105989295 seconds)
  done (took 9.926594407 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.094282805 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.094697237 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.094324558 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.094032813 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.093456237 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.093460729 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.093937975 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.09442171 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.093452194 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.093926942 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.093775937 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.093490017 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.09416736 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.093906562 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.093151932 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.092371436 seconds)
  done (took 18.583048217 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.093575353 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.094395315 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.094185871 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.093173141 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.094374098 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.093412559 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.094215537 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.102331766 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.094962466 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.094464922 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.093547304 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.093899778 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.093688061 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.093574512 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.094871759 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.093999726 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.095893255 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.094959543 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.09389961 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.094076811 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.09438014 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.093902755 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.094334899 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.097358523 seconds)
  done (took 27.351545492 seconds)
done (took 60.925288042 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.699387252 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.894885551 seconds)
  done (took 6.674298275 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.094722831 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.093394281 seconds)
  done (took 3.336067443 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.092476178 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.093358375 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.092671661 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.09259244 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.093854563 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.093329563 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.09340443 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.093240337 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.092587891 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.093986205 seconds)
  done (took 12.010954075 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.093893015 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.092864152 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.09328709 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.093309051 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.093264432 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.092752393 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.09295013 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.093034924 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.09308607 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.093854482 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.093072362 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.282374701 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.093071063 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.320200811 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.093412267 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.092975485 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.093662579 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.092916865 seconds)
  done (took 21.174112034 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.093079439 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.092856306 seconds)
  done (took 3.265618489 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.093216601 seconds)
    (2/7) benchmarking "second"...
    done (took 1.093035106 seconds)
    (3/7) benchmarking "month"...
    done (took 1.092455954 seconds)
    (4/7) benchmarking "year"...
    done (took 1.092849426 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.093346455 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.093882659 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.09304692 seconds)
  done (took 8.731425636 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.535169694 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.25726397 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.308890166 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.55826409 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.773579234 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.0273345 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.773420312 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.028703822 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.854265291 seconds)
  done (took 16.197346823 seconds)
done (took 72.469579053 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.858029336 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.107445015 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.619926844 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.271928404 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.117632064 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.436343712 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.10300644 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.727523435 seconds)
done (took 37.329068265 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.40538343 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.081986598 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.12000836 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.121460746 seconds)
  done (took 19.40625189 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.083419985 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.65262878 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.125767892 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.129326249 seconds)
  done (took 19.152117451 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.503627281 seconds)
    (2/2) benchmarking "read"...
    done (took 1.496941379 seconds)
  done (took 4.099884058 seconds)
done (took 50.14574606 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.093835568 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.093972688 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.094362157 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.093452668 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.094288438 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.094525128 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.094791949 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.093930045 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.093797339 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.093664389 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.09349266 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.094200113 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.094736346 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.094182357 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.093859644 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.093913607 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.094271216 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.094214289 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.094196096 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.093948289 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.093695203 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.093697284 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.09437394 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.093558383 seconds)
  done (took 27.337410672 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.167812471 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.155053894 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.168620799 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.170697328 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.192802165 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.170502895 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.164941875 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.133232662 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.174449746 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.141889774 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.127238209 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.186535234 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.133520656 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.190219611 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.132361757 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.190176586 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.168379269 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.133804833 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.132579541 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.191480929 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.164830506 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.133658872 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.186162181 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.126467774 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.184920085 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.127734705 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.14208591 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.154364148 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.132932416 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.183668604 seconds)
  done (took 35.843906972 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.127117252 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.095539973 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.094165596 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.183173447 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.093750062 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.093493171 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.093924138 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.094060727 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.093995345 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.093527402 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.094227543 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.094249425 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.094022842 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.093287404 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.093552104 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.093425126 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.126876536 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.275289967 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.093934966 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.093777909 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.147468527 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.093695243 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.093056626 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.094482599 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.093726805 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.093411645 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.094426461 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.093619719 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.093382392 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.094106922 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.093959472 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.138700698 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.129652713 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.093336688 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.213730531 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.156110515 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.093978559 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.125189359 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.094099043 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.094325952 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.093908294 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.093442492 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.093801972 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.093498905 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.152209132 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.093498676 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.093220984 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.094088277 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.093611927 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.09302803 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.093951925 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.093959376 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.108710218 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.094244902 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.093650089 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.093896822 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.093396716 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.093957227 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.093533028 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.093711111 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.094003254 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.159603671 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.093974309 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.093908647 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.462977157 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.09524511 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.160352148 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.093871246 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.093726208 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.316156437 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.094121191 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.29886809 seconds)
  done (took 81.526568488 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.093286358 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.094281765 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.174698889 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.177474535 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.094245188 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.093215938 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.094732005 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.093466632 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.763905082 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.093730951 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.094686974 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.094073959 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.761314626 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.093619888 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.094347049 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.17818733 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.093752609 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.093980716 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.094396955 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.0942397 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.093539392 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.093862855 seconds)
  done (took 26.733454287 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.13704466 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.108666722 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.130362038 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.093787366 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.094754695 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.094448634 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.132626641 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.108748302 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.130644617 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.131861434 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.130009398 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.135989698 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.094897558 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.130495195 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.136459764 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.10945121 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.133097977 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.109202238 seconds)
  done (took 21.223319291 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.272236507 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.260481691 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.175774661 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.139402312 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.355722819 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.328883113 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.198829446 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.269236156 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.136414849 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.260480269 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.269331751 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.136551702 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.328998215 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.136386935 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.135811922 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.355700969 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.175682756 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.136761501 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.206030604 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.199393783 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.272410329 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.205550724 seconds)
  done (took 28.036950159 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.129830303 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.138930532 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.172694951 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.168355729 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.094309069 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.095323129 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.153699317 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.130886085 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.109163054 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.136468897 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.136171151 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.093934423 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.109358275 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.151728038 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.184382941 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.130407372 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.139135445 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.151937634 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.135683465 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.095299298 seconds)
  done (took 23.738921695 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.093933101 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.093558253 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.094200282 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.094576029 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.094422515 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.094664171 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.094390008 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.093936011 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.093618483 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.349044691 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.094298046 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.095196141 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.094915907 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.09388826 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.094208676 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.094591173 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.093992749 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.094413732 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.094844546 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.093908074 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.349347353 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0940493 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.094137599 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.093974092 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.094223581 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.094100658 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.094062244 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.094244905 seconds)
  done (took 32.229779271 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.157975757 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.093557269 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.094887804 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.094891525 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.095174223 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.163168068 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.094875679 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.094605886 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.09361912 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.094577859 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.094465548 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.094118783 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.094460196 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.153780364 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.094154997 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.093962679 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.212312053 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.097361889 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.162074592 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.08294367 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.095576014 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.205738186 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.095627011 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.09449951 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.082611364 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.096409703 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.094456595 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.095172968 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.094280093 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.094929692 seconds)
  done (took 52.387314039 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.115170746 seconds)
    (2/2) benchmarking "in"...
    done (took 1.115522695 seconds)
  done (took 3.311365964 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.096191505 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.195541587 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.093955277 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.293828503 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.262831402 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.269524443 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.25972874 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.190535538 seconds)
  done (took 10.743668772 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.102946036 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.277562258 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.240122729 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.095373702 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.099706125 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.390563177 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.162748515 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.912512345 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.781116073 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.977337858 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.114124204 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.594257146 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.129421232 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.361494513 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.209920062 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.899644622 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.256241648 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.488730122 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.03148406 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.207373959 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.703846498 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.173797155 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.095376317 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.094829456 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.0945732 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.011844268 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.874001715 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.535450077 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.158098085 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.206963707 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.743751986 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.152315578 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.095134814 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.260320061 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.200308147 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.095830642 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.172148251 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.190647435 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.095778626 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.096782602 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.777754748 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.570205567 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.295154844 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.237688083 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.170313128 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.094904333 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.09517227 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.095162259 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.314188985 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.730286033 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.130123878 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.023709642 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.232489907 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.096115373 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.533743037 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.227043444 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.095980753 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.010468374 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.441454367 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.241448973 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.457799416 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.227065519 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.023804948 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.21178875 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.09624645 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.289801937 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.971317347 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.812783049 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.732885724 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.196340431 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.404312349 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.256087906 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.095938856 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.095359772 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.002740826 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.401203989 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.101441386 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.094955452 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.095195855 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.095237044 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.271248934 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.201813754 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.8787077 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.232750611 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.272944645 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.516385583 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.211118698 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.096255777 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.684407062 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.939937617 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.115058333 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.671823082 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.257969129 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.231644896 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.025129971 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.318295703 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.131612883 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.095495459 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.905230788 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.482963936 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.242336216 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.09672497 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.44248789 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.189968336 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.105222956 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.095463721 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.702231715 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.211170337 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.144004233 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.125421412 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.096357981 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.0958601 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.70431752 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.120581655 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.102306669 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.594778026 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.133870234 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.41056372 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.414585387 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.251145049 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.358701118 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.910619491 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.316309518 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.972364295 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.105786715 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.380013285 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.070449147 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.751410116 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.258201591 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.207645687 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.808099043 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.125080537 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.09570566 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.099581448 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.1491915 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.095904042 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.095490625 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.095674641 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.095970256 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.095659514 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.186793442 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.391158795 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.630325378 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.224541024 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.296512773 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.214187233 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.800482401 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.186574142 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.739608816 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.232205905 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.096755767 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.542342602 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.380106017 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.697916334 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.211045636 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.096386402 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.096288688 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.896916751 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.995048427 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.181655247 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.096261492 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.717586858 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.120283993 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.103088911 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.096069989 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.581693936 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.231625459 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.096370399 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.114044893 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.767352453 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.685369619 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.231044662 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.3587625 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.210583465 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.096560789 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.096432225 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.096406126 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.842630184 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.732770792 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.148682852 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.690314551 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.816089555 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.163680202 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.160760652 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.177073724 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.276792687 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.275136497 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.233267624 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.097224778 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.096988101 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.096536088 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.588309345 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.957157094 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.854064517 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.982015258 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.095797235 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.998883935 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.10876764 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.867109604 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.111491373 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.706705684 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.978067809 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.186998064 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.097030768 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.096388863 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.213088219 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.238999921 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.234119986 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.420454171 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.241313954 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.097456321 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.67405077 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.211082836 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.683564099 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.19058938 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.87738471 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.093532367 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.210118178 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.156109832 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.529856382 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.18911512 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.096469441 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.588818252 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.205695874 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.096771338 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.089324548 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.531224314 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.004265451 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.813257042 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.50922078 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.170495281 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.689298169 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.338439352 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.27060539 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.907427289 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.238967826 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.368903941 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.215770277 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.332187825 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.246750759 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.817155423 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.161679061 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.598732782 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.254622076 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.033881531 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.228077746 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.48036061 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.244478074 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.133594523 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.185970788 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.210240097 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.681034709 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.237554024 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.233558919 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.397224836 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.906566361 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.207118219 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.397106988 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.234417992 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.966234267 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.105824142 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.422747088 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.963505194 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.132693411 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.150331012 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.840843461 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.211664667 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.355061588 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.244943899 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.125593201 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.126106334 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.298561913 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.22234371 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.119446963 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.349223314 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.055478961 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.213446586 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.158371811 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.167576251 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.146731801 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.285526003 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.201937884 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.259686401 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.524651006 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.722742816 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.80639832 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.213657563 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.560209299 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.218959452 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.829349713 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.149908564 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.153633214 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.717791234 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.249622628 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.317809249 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.25975632 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.23482726 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.573385472 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.334696404 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.421769146 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.222895887 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.282575564 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.880260059 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.724201967 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.388692233 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.474566668 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.195370994 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.721927627 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.22428812 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.720751188 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.23171252 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.892486275 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.095880423 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.21416385 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.184425975 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.181354888 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.725180962 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.139767212 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.109980245 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.926676478 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.641700726 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.236702132 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.915464896 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.198170058 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.186936922 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.184328023 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.183352035 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.0981927 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.091976778 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.35130844 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.283031109 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.182935093 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.181778786 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.099428181 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.351003672 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.872444092 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.966333464 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.092847256 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.28856343 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.183730896 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.130590401 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.130810629 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.127532082 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.117214124 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.097956067 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.400505871 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.323553455 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.800644492 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.197824426 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.190892733 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.310742068 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.225174073 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.183550953 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.262868386 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.230838047 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.262928538 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.239908817 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.184804598 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.6030137 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.308002182 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.156801391 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.297930396 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.356722097 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.360542701 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.586547791 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.196078659 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.615514793 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.471731616 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.006343716 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.190614032 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.100581171 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.153452887 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.787570727 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.063949999 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.474204241 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.768615797 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.224601462 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.364012006 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.025584516 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.553076479 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.320733788 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.228105416 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.183915244 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.183281146 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.18267045 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.378673288 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.218770814 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.382622555 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.3068854 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.156688626 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.277668504 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.237393605 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.307833077 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.190338252 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.202090276 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.172450955 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.16535588 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.490813948 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.9315278 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.224389059 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.170637323 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.099454887 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.846125715 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.977571145 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.758871649 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.108994256 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.280336481 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.119962947 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.342902254 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.190527586 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.709246394 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.272701459 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.849613836 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.427948614 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.172421676 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.186892752 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.497263694 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.782189859 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.404326572 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.221110053 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.113940277 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.416358702 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.074823853 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.261177404 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.030435031 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.350976731 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.669699669 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.618141714 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.352921755 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.235335669 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.01522676 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.66111665 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.162267908 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.137890171 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.92285142 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.252606627 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.387623859 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.000703127 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.353341694 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.272858137 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.751483903 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.692795873 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.257907506 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.710868964 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.246152328 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.159834327 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.661615818 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.17560058 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.096868795 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.233237112 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.122355561 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.188443294 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.705009275 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.754710328 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.220298763 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.188750173 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.142402368 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.634391296 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.987652251 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.168849442 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.164435487 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.136457903 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.428308174 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.138560264 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.146715084 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.568099755 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.775694534 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.240173078 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.629114161 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.236173006 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.294424018 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.362216605 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.45877296 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.329599646 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.158271666 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.099261782 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.099520057 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.116636871 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.455531222 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.26570376 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.099581633 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.648148658 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.234550107 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.831939229 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.059452594 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.281129852 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.199154724 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.573740906 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.252810374 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.595182753 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.067249703 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.156825266 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.41711803 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.255951181 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.190490974 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.768131055 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.192060555 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.103381226 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.966568233 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.312345181 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.355571332 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.406309987 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.34195037 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.260861419 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.741429696 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.198826634 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.635524254 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.33270006 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.178898713 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.656792697 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.268356543 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.49005656 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.270385745 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.481558855 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.225880915 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.468719941 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.406140369 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.2321588 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.149902866 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.150069875 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.083997312 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.169533955 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.675752627 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.133018801 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.542132202 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.294565017 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.041500474 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.706724736 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.728627724 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.47899351 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.292149726 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.521813036 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.198677341 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.110583975 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.414357686 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.234029408 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.317908565 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.269320386 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.857177937 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.226909552 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.17870515 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.504137571 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.26834083 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.115305243 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.166951562 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.095581627 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.792799673 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.269294087 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.313608988 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.260962495 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.187655096 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.752323252 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.430637093 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.215490187 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.189370899 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.189559728 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.9745598 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.27401137 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.189397116 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.424483689 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.315073126 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.421418677 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.957002217 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.577779749 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.268777206 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.18865786 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.170152787 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.818804371 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.499568886 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.347078549 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.535568288 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.27704479 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.696322129 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.216856051 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.563353168 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.710892509 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.067166527 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.288384579 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.188415264 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.161620097 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.811080017 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.231457448 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.931622674 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.469677608 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.251768353 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.844362545 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.001504262 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.197215063 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.262480374 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.168149106 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.14573032 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.165942759 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.176382079 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.665587787 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.216083515 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.174014978 seconds)
  done (took 1423.154225518 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.455422758 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.165294765 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.176508683 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.181796212 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.17121735 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171747967 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.175957377 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.166450604 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.178810995 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.170915954 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.168770655 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.178474553 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.163794173 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.463123364 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.123567886 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.15533231 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.125561203 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.115939399 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.121242293 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.131700686 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.137645741 seconds)
  done (took 26.060788686 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.11372604 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.119789964 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.138304608 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.119604381 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.128073795 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.118131793 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.126938065 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.166618459 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.121369806 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.129523065 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.137829685 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.111055946 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.101662288 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.141770574 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.129399574 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.138455883 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.115732149 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.135788286 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.129898666 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.149656437 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.11764321 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.150976413 seconds)
  done (took 25.959172246 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.168107927 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.123958262 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.796953115 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.289645212 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.137237781 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.138228629 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.110041748 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.303784253 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.090604291 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.999651173 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.470318191 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.226361432 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.149125359 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.254046265 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.236607188 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.123428095 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.243742316 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.148549503 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.121099297 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.125341774 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.113145447 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.246094189 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.249728982 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.147400332 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.917827771 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.271131867 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.115360424 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.115645448 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.113581552 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.098848402 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.127599867 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.13231667 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.910059164 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.773307115 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.365208233 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.016266986 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.125822082 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.122958145 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.110743106 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.147223452 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.365645367 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.94682191 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.146891776 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.168522849 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.39718866 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.241416202 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.147263742 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.50442754 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.244866681 seconds)
  done (took 88.759919093 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.175451671 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.316360636 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.205165809 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.110965863 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.294929154 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.128494404 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.175916773 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.160106016 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.173611494 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.167609676 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.267649699 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.273771521 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.144198494 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.14467251 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.224386196 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.165011367 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.12139726 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.169084145 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.1171887 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.137821982 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.149074157 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.169551028 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.300549167 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.280206071 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.136264968 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.115961437 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.114897178 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.145162926 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.266803482 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.132755755 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.123016979 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.116446973 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.250595914 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.24826857 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.151772228 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.115693917 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.283854241 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.143588953 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.169669374 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.183247411 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.161468682 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.100794535 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.17936692 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.259475202 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.174413743 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.247905322 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.114435864 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.166130554 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.335644523 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.198811781 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.175870397 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.338130823 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.169385716 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.157495969 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.127483701 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.255931733 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.127604732 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.134420674 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.101339002 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.298791114 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.145407708 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.113124367 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.257643719 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.100410542 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.1021399 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.267973158 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.20819276 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.10042424 seconds)
  done (took 81.550444573 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.103990846 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.142558483 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.13688558 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.130595179 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.11181812 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.100311192 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.102926255 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.100119205 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.100119289 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.099800594 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.10007569 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.10112506 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.099992989 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.099593879 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.099715267 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.099802619 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.099769661 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.099411997 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.099595923 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.099883775 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.09972401 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.099763305 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.099563388 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.099162242 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.462811862 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.10051585 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.099576157 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.099744014 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.099921224 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.100224991 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.460929739 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.099830757 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.099404871 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.099929233 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.459780574 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.099442568 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.099048639 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.099859244 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.099949967 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.100096966 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.099268148 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.099499357 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.100557342 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.09972272 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.099819215 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.099717135 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.100699032 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.459598363 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.09953998 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.099668323 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.100459511 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.099762898 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.099592169 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.099213204 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.099411231 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.194722591 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.100082721 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.099709285 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.099575768 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.100049498 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.100324757 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.196152381 seconds)
  done (took 71.042924811 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.099468059 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.100082609 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.100502251 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.100508336 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.099486562 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.100935259 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.099969311 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.099210948 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.099541752 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.099410056 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.100703171 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.099988686 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.100196501 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.099669602 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.100269989 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.100745134 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.099674709 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.100069665 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.099635269 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.100287747 seconds)
  done (took 23.086662279 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.100142559 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.099358455 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.100554288 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.100600108 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.099875871 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.100162977 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.099690453 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10033848 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.100088766 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.099360671 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.100196302 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.099780528 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.10037911 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.100430694 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.099642727 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.100517686 seconds)
  done (took 18.687983426 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.100871957 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.099124614 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.099767518 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.099856528 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.100628331 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.099531179 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.099721672 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.099926044 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.100523724 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.556431917 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.100287067 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.100592505 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.099673146 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.10014977 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.099174984 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.098976346 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.099751658 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.100556886 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.099975276 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.099688153 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.674383515 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.100726528 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.099549852 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.099537616 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.100033517 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.677600997 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.101048851 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.100987014 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.099890727 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.099742876 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.10105108 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.572313062 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.100078379 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.100043023 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.100543365 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.100454327 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.099250768 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.099162979 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.100137589 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.100029853 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.099904859 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.100767229 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.099736611 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.099808678 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.100649737 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.099428472 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.101113798 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.561781482 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.100266173 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.101608953 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.099740384 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.100808249 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.099795479 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.577846605 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.099508453 seconds)
  done (took 64.612795138 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.142086455 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.159619532 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.100634506 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.099718619 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.153840324 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.142600955 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.142799451 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.115425236 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.143210128 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.099745284 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.16353401 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.114621952 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.14359263 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.154678505 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.162621573 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.142253023 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.100747957 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.178603031 seconds)
  done (took 21.546975362 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.100097727 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.100056665 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.099746464 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.100624797 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.100455648 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.099889531 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.100752244 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.100149466 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.099899661 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.100200784 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.100307402 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.099986591 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.100201218 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.100597842 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.100728426 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.100610166 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.100141124 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.100371132 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.100934825 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.100478256 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.100151084 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.100912819 seconds)
  done (took 25.294289773 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.132614301 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.146844094 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.101482 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.101221266 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.100412624 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.123509183 seconds)
  done (took 7.792058905 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.154851844 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.101079391 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.137146554 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.151924797 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.099776071 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100300471 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100278184 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.10022649 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100085449 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.405598859 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100336636 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100108144 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099919526 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101355108 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.10000423 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.099727911 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100037612 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100624734 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.147194868 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.18365354 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100279588 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.099746651 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100905168 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100058512 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100359033 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100252261 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099444235 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.407655727 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100349101 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.099774808 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.099871468 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100850052 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099149552 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.403396538 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.151330939 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100906517 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100499161 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.184669005 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.099924924 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100516728 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.147194199 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.100152303 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099763834 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.099966468 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.101265522 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100169316 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100362689 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100010292 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100224665 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.415039574 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.101055009 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100125538 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100295338 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100902154 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.099620982 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.405792722 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.407354364 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101426709 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099742726 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.40513252 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100526886 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100358247 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.099930145 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.407072068 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.099913627 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.101016326 seconds)
  done (took 76.638295306 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.100428877 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.136425757 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100373817 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.4112181 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100048231 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.10091923 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100813783 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.101087579 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.100609266 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.154696018 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186394113 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100738283 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.10113101 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.099999724 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100479743 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100469279 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.101679715 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.1006702 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.155780821 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.408362503 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.101118665 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100166751 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100397969 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100597136 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.402847937 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10159371 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100885579 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.101292704 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.101282114 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.101491298 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.101414399 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100392665 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100821733 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.137030096 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100531391 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100172152 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101175714 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100424789 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.101548986 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.099970245 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100961036 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.186789849 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100835251 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.101047781 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.403705628 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.100279478 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.099742581 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.160809249 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.100389556 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.155530833 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.40393454 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.403973901 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.411724296 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100310817 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.100610856 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101022171 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.10055685 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.100944919 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.106965894 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.10000174 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.101414138 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.100251527 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.412031415 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.101065841 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.101438121 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100727175 seconds)
  done (took 76.663315176 seconds)
done (took 2375.043959469 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.089921215 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.235519033 seconds)
  done (took 13.411362665 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.102480716 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.100772171 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.254152305 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.101184657 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.109233881 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.197890693 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.120755129 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.113737743 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.102514524 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.183307135 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.101539972 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.232044437 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.203061043 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.103397866 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.142927848 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.114212696 seconds)
  done (took 39.389714683 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.056057567 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.415834853 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.032055953 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.736848213 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.10651677 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.85666591 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.366665181 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.218511255 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.476648639 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.548267419 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.359489882 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.655421875 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.849448712 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.147590547 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.740336654 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.635601337 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.721129431 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.77692108 seconds)
  done (took 58.786937726 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.090204298 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.258454566 seconds)
  done (took 8.45841724 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.125567189 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.110766296 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.107030303 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.108738501 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.126336312 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.137460609 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.125089147 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.130290037 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.146533241 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.114951491 seconds)
  done (took 62.337439392 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.084580452 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.73537521 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.513463151 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.544270338 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.56643028 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.541250553 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.255730859 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.479107918 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.194528766 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.088391176 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.848174718 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.685649322 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.814284437 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.025503003 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.627528568 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.497483757 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.705156984 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.507365102 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.417687556 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.479005593 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.238356075 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.915908873 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.461141501 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.968145365 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.107928595 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.126779444 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.200662131 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.220649182 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.189507994 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.974803165 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.853395236 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.231285664 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.951843852 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.20960626 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.291921987 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.595778192 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.758542594 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.30857748 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.420373721 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.413550883 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.468960524 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.315252697 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.26694193 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.305480825 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.366188602 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.269914392 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.064027903 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.35649072 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.191211369 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.219256359 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.734331486 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.28156564 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.235863998 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.210598662 seconds)
  done (took 149.449394639 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.088493324 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.480338741 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.265077251 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.092502606 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.523059638 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.305695708 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.674375891 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.596996658 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.11064995 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.299674157 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.271196839 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.224303443 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.091047357 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.092597052 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.090161758 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.091879058 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.28059443 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.614821668 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.108655528 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.08977311 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.296126472 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.331514198 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.224839184 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.092145066 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.259137591 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.341982789 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.512006146 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.229425287 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.486403866 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.089953466 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.550137406 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.108196822 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.089136931 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.985187081 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.499845346 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.459776926 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.526077009 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.099866513 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.859082607 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.09133684 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.73977115 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.297478625 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.430119768 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.24192765 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.249084852 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.329149052 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.727126629 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.088840911 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.864161477 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.265989892 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.315946687 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.30770042 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.372847458 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.096509338 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.641851557 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.093008426 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.089800741 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.382635232 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.242906514 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.225530083 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.09187449 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.089907124 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.091141114 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.338183717 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.092118182 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.209509444 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.091948203 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.09178027 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.212087139 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.224291264 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.2440216 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.338727018 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.343809288 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.04513046 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.446164543 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.328789699 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.508057974 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.361565448 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.092645899 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.089533139 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.539025402 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.55128475 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.256144936 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.337974033 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.406489474 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.384275598 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.628739584 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.089373803 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.310500691 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.254910702 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.437114805 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.247585894 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.465342391 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.003325553 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.090222713 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.089733645 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.329208257 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.23021483 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.092635431 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.603432603 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.361833293 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.704837805 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.266365569 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.555719966 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.202640765 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.092670073 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.677508855 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.090637692 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.319984607 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.385049529 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.099234858 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.091196725 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.246791464 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.06022478 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.090863683 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.141536225 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.50538442 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.101710571 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.250718685 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.092422513 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.355036063 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.922282954 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.327722973 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.09192054 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.368845095 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.282787937 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.246673717 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.092342108 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.438368142 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.365061773 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.499788644 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.326110349 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.806636688 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.091784299 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.402079655 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.092112584 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.089939006 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.271783269 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.853735148 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.268900412 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.09263216 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.458590136 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.259944636 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.472339411 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.09025743 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.340767294 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.345430507 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.463035211 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.09150499 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.230079011 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.091346674 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.047961494 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.261456048 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.090408997 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.091787075 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.955107437 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.093944513 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.243033785 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.327549619 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.816855674 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.468028169 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.428912812 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.088874873 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.507370415 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.288921756 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.537220661 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.619807607 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.267851952 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.092614786 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.090865882 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.090025089 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.338183431 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.283686722 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.090697594 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.090658952 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.803263523 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.007164058 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.090635196 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.283872226 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.749816325 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.315087367 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.308716722 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.094002859 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.455017044 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.090432067 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.295509377 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.597944684 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.166046655 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.090779229 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.091113557 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.090970262 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.092543117 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.304199462 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.346217186 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.64610388 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.25233327 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.419001887 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.321583355 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.43771167 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.563116872 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.108266257 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.389631143 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.178369745 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.551642521 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.183190561 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.360406098 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.40857567 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.153743033 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.482144951 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.53043626 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.214871155 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.556594096 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.133504431 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.140688661 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.112966565 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.356637637 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.674724862 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.172101411 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.223060842 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.486428526 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.24238649 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.31709227 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.338699455 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.124669609 seconds)
  done (took 725.333474173 seconds)
done (took 1058.253410364 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.110483468 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.161626986 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.165564537 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.252520377 seconds)
  done (took 25.803178801 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.933241428 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.928630256 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.214218827 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.106652474 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.493269249 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.259746555 seconds)
  done (took 11.135994842 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.790329461 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.102481445 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.117102776 seconds)
  done (took 18.235392999 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.414521045 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.635594081 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.294278758 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.213050205 seconds)
  done (took 6.672217636 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.122878572 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.114130399 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.130087766 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.121565223 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.122072723 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.121408935 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.125328855 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.125975462 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.123971887 seconds)
  done (took 11.212846625 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.668569937 seconds)
done (took 78.8398509 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.527399519 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.415163855 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.121220142 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.455486955 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.308239726 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.448284212 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.249326733 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.15597881 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.466998647 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.533074471 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.657873311 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.205225049 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.507008087 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.596549721 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.37323132 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.14738026 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.137620928 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.182253601 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.652853277 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.312259053 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.890909728 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.297629691 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.166859002 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.165497007 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.992435778 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.279919778 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.374514681 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.160649247 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.819741759 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.190062744 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.200213426 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.714148222 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.38390557 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.428800004 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.256197988 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.01397022 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.632150525 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.140786597 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.443098924 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.631099082 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.418353065 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.275834839 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.279339179 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.351567345 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.556697389 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.154583395 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.063609213 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.286304073 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.58799925 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.292496602 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.544196528 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.14011973 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.785863449 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.228653127 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.264426855 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.182824434 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.173105006 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.592163941 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.346364452 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.420154397 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.143576639 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.152288247 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.231650393 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.202790427 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.821219093 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.629265572 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.592625578 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.257870383 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.270570711 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.176711478 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.148153232 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.142375853 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.83985119 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.29667622 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.158464238 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.257308084 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.432339681 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.2972166 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.281924415 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.46698905 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.369326266 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.281010749 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.298174692 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.505148727 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.330058812 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.496671184 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.661060105 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.494227517 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.652272673 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.127952085 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 9.3575021 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.469590745 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.228759732 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.133054739 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.28908264 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.649795112 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.816250188 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.687749121 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.296555634 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.828844974 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.189282205 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.192584137 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.509516815 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.528674772 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.954708011 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.181096638 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.250319374 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.149478491 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.428374213 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.433545559 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.255654461 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.7251471 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.167089077 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.205212506 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.682651345 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.166158075 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.440754948 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.600182489 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.241435714 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.189552854 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.525240741 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.148468415 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.282629855 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.705175931 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.521255147 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.327363233 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.154544376 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.865948306 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.13418458 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.375257554 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.128186598 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.833590461 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.742369599 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.166102868 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.406404726 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.26638869 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.121633862 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.379232769 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.180807425 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.261000029 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.439214524 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.458526137 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.317513392 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.118167702 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.500258172 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.141049651 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.386165696 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.462229783 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.31166999 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.446315922 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.221327196 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.13199018 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.085926235 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.578279472 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.756266667 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.873047109 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.40990107 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.286099752 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.775505575 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.422440208 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.925226539 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.227231171 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.17738431 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.144810168 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.17493781 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.19238504 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.148435751 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.107875478 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.51994791 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.457206026 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.946196536 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.963181949 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.146078039 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.401727585 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.346313031 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.120096777 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.788497571 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.11654842 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.438601177 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.608491974 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.301123488 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.16262687 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.105542194 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.142901685 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.815207815 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.197176836 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.449234038 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.630640192 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.423203138 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.58566594 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.351631968 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.147307571 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.483773073 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.416935255 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.464256183 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.355779416 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.657897913 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.279478776 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.491552523 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.19503007 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.397458255 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.115462171 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.621016074 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.325729945 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.595499581 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.49685497 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.347156124 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.34202458 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.397051221 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.117073821 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.117486549 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.3033999 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.454452223 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.144976768 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.108399747 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.35084213 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.062956522 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.108554271 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.284005601 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.418322285 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.262352939 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.2674026 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.667403889 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.157666579 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.466885202 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.372277991 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.344478719 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.34810975 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.149498094 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.290157848 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.277813337 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.24378226 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.328984144 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.23508829 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.625688576 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.181946705 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.516305903 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.106155345 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.347705322 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.148984062 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.124971021 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.446175903 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.308039317 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.419130987 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.265732062 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.265418011 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.090170196 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.276064347 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.591440689 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.01264834 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.711818426 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.140851461 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.13509483 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.091548287 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.516623022 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.520650089 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.16806715 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.238385328 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.774200357 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.145514278 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.298319275 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.107238388 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.107954901 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.794066208 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.232174777 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.346444949 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.831958269 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.10694378 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.760106869 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.11999254 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.626083644 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.657819541 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.156259838 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.224865548 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.545604341 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.123662922 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.512019741 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.132207506 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.246775509 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.487843179 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.223725176 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.2276662 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.094277889 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.144764523 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.583760839 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.327693816 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.63554526 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.139828209 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.475447985 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.365710727 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.330489194 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.117375913 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.185155403 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.517999394 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.229352424 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.550057205 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.106100213 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.251373976 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.352960483 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.12799171 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.090385849 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.374857218 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.109051192 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.200240677 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.752349986 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.275059839 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.016648275 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.339481345 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.102123145 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.094191221 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.263457907 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.185978648 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.6847472 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.671676991 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.105763519 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.322969452 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.11343233 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.467878429 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.130457339 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.118351861 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.227072698 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.192416056 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.090694207 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.439743148 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.269074419 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.63584121 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.279049608 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.963178506 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.419597249 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.28462758 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.215243092 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.40974301 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.104560489 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.119663512 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.301276265 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.774251859 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.216478822 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.133070222 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.347840595 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.10601007 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.805393792 seconds)
  done (took 882.069641237 seconds)
done (took 883.285285011 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.16162776 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.49313604 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.319421806 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.998303766 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.92103052 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.761637739 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.339032962 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.354248883 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.203753347 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.34012081 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.066024366 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.920985304 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.211999936 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.234037915 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.208119196 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.220111009 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.323804881 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.357725564 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.237158284 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.057013231 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.483748402 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.062721807 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.539885592 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.415128767 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.49209499 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.216510106 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.184480202 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.472214726 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.472173576 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.310680834 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.325422284 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.319466307 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.962143096 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.361569189 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.208991879 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.201256485 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.001259693 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.211726757 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.147319864 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.201580039 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.494515994 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.243361425 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.832570571 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.047643356 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.898277917 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.537483737 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.974260596 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.222614617 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.224800419 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.296648524 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.148893417 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.145195696 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.472545833 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.331224312 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.011683221 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.060222516 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.472071737 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.999218045 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.849993074 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.297426943 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.490761329 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.23000679 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.297304528 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.351648014 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.253568437 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.430607671 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.554484672 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.157902904 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.356025829 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.359466299 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.387096335 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.371181533 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.279816427 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.307618565 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.292151455 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.408022385 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.041713282 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.394364473 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.949117789 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.248162585 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.036048578 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.036475039 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.078320682 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.20753373 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.161703355 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.898265992 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.210613218 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.979340529 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.238752077 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.321299397 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.064357364 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.320222617 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.577968182 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.185048778 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.161575927 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.318673651 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.223185129 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.145112555 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.116561922 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.320066558 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.903813051 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.184571676 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.128659894 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.199367632 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.222941252 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.145723862 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.184547897 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.535775996 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.346064485 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.286023668 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.49536369 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.239031093 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.344675514 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.234972752 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.19559586 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.898642133 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.404575182 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.998366989 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.144245126 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.798582987 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.378493783 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.199790518 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.495164927 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.415948629 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.162780655 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.217598891 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.222824088 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.972976541 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.222930563 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.223375398 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.299024294 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.572616728 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.29755677 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.000400217 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.345091784 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.904935367 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.356497867 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.345732271 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.19598361 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.001716023 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.21776624 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.101629877 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.417254475 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.494707963 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.358509017 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.415759129 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.239258479 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.413196301 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.145140047 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.23859357 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.344917951 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.233670542 seconds)
done (took 244.099552967 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.447908179 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.306717457 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.361775925 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.318912531 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.460236438 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.40238044 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.170641644 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.556874024 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.149668855 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.515615704 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.298531344 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.001417536 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.384200353 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.33694353 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.444710904 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.336225693 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.152667596 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.350060061 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.547087117 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.476945273 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.888446162 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.297711287 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.240215034 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.492003293 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.091103419 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.887358066 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.400270048 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.213506539 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.365121437 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.831081931 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.89855286 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.364789169 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.400907952 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.775803446 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.474890129 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.794763515 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.419114891 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.87437098 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.349334501 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.431329728 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.295342761 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.090300913 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.842262437 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.910788746 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.202843901 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.381918323 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.168087424 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.980145079 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.091619948 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.804445145 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.363458653 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.884575197 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.005708918 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.370553126 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.336047496 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.974953468 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.495440453 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.496463664 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.477373034 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.396572539 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.34998373 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.513658674 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.480306512 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.221186238 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.900052886 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.390702654 seconds)
  done (took 146.026423943 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.523263606 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.39228519 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.503997215 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.319417465 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.627364023 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.519890156 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.432401167 seconds)
  done (took 13.407429173 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.157488666 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.147657403 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.39254626 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.391525112 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.153103646 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.274126317 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.237075685 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.868920513 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.395604127 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.195924515 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.468230378 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.391223512 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.782629955 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.853142504 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.23781877 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.388431494 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.135259503 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.216927322 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.208490025 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.406539997 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.873890684 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.849503246 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.299250412 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.130464959 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.152503409 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.193777756 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.147428814 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.120312179 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.146643878 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.128371801 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.159506075 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.260765514 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.147238263 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.835161932 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.135116449 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.471034819 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.150416948 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.150297209 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.283656503 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.091609888 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.129218044 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.153179182 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.289030328 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.157562303 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.128257047 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.337167091 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.135795968 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.159379496 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.132350548 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.147680659 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.340004709 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.144342536 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.133024465 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.788656138 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.358560068 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.842547546 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.215618454 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.142347955 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.141841148 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.205644916 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.152971985 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.407574554 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.369673364 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.134793073 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.391145812 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.440375647 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.144325153 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.136204375 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.132581443 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.366308517 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.140998107 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.392403748 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.151628097 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.197941301 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.153659581 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.275447348 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.339258325 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.945139531 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.928823626 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.762065993 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.471749934 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.13530169 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.469687332 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.087495726 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.784352743 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.132758406 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.150027306 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.800696454 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.05747219 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.146660636 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.457890499 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.128763834 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.20566449 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.196874009 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.128682914 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.207816437 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.31076548 seconds)
  done (took 150.182155669 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.290141202 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.396824464 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.300517434 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.071131272 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.156641856 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.394470807 seconds)
  done (took 14.699190665 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.464299125 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.905826644 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.16477491 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.195964861 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.202723527 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.102868653 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.104115808 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.330292776 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.312266234 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.156096254 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.104246549 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.103888899 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.103268458 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.277936579 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.102984248 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.15302024 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.104187855 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.161174561 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.148357397 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.212041999 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.468121884 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.203152683 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.21327504 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.024578136 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.190394051 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.150086394 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.865753923 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.157813263 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.159066255 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.511541946 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.342412537 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.104411365 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.954690978 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.513435296 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.824973012 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.020593421 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.32385602 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.106298467 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.152573265 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.103418616 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.103639222 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.212664978 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.16003107 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.104142242 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.501236113 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.974866251 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.19137065 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.404704776 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.103154448 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.104314953 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.103987208 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.166945795 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.104059887 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.103952096 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.665052565 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.584155383 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.086480807 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.105961594 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.203255648 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.013905303 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.252694825 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.106412436 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.481301747 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.079527443 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.793016216 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.104424671 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.028811623 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.310361442 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.215889637 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.169482847 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.103354235 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.168547893 seconds)
  done (took 115.74842551 seconds)
done (took 441.153466129 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.4812577 seconds)
  done (took 7.570550675 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.20930933 seconds)
  done (took 7.447918534 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.095644147 seconds)
  done (took 7.197926843 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.099018933 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.143855008 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.117747626 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.128538019 seconds)
  done (took 25.627828648 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.558794947 seconds)
  done (took 7.656506685 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.093244138 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.134225392 seconds)
  done (took 13.416961774 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.177631103 seconds)
  done (took 7.293717155 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.404881054 seconds)
  done (took 7.51891294 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.110864592 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.104640603 seconds)
  done (took 13.342157508 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.096349708 seconds)
  done (took 7.186949073 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.45338024 seconds)
  done (took 8.647888577 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.095865487 seconds)
  done (took 7.215935952 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.148792161 seconds)
  done (took 7.240833901 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.169925519 seconds)
  done (took 7.260236833 seconds)
done (took 135.714357987 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.092049894 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.098317431 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.097064967 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.095898656 seconds)
  done (took 25.473972257 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.428232255 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.42792082 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.405604812 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.479643434 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.37154031 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.371479359 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.428325257 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.427208838 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.371507115 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.49153286 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.428376094 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.578791614 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.478942413 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.406148479 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.405673453 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.473786365 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.48048788 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.42848176 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.371940923 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.404635111 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.472023606 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.479618411 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.845017956 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.839336422 seconds)
  done (took 36.391083327 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.312888564 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.549627341 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.257874552 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.445355605 seconds)
  done (took 6.655651319 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.140380719 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.477835523 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.460286435 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.519612736 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.460449878 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.274784944 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.460240631 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.312326159 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.28202673 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.282725595 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.727546666 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.254626046 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.267413688 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.51992552 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.274484068 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.103574795 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.103793498 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.242384962 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.477239851 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.318239452 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.363081192 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.461081495 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.459888342 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.460246579 seconds)
  done (took 33.795311602 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.918538474 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.032216837 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.462166543 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.016180538 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.807253014 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.89838562 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.384851396 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.601691265 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.370769343 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.346925867 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.828967992 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.796618342 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.247400423 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.997453674 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.86263947 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.280443191 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.281261789 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.952442301 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.519610865 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.403315461 seconds)
  done (took 38.099438944 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.092014905 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.091648853 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.341500246 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.267947233 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.09297894 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.095460271 seconds)
  done (took 28.072145131 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.492556341 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.231593783 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.391472806 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.35384851 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.257216273 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.22459389 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.658136113 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.308846695 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.857408275 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.799095306 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.527672321 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.521934763 seconds)
  done (took 21.722211264 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.091641197 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.143537535 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.098582959 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.338053759 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.435543299 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.867428789 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.1098242 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.092611224 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.633312131 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.360920467 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.235311429 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.329495353 seconds)
  done (took 44.845322832 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313171896 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.28013706 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.402223579 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.1359217 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.495382708 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.144168919 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.467426709 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.058526938 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.827159088 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.845275018 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.480714093 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.109784318 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.627919465 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.071478267 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093463929 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.388143341 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.913882186 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.591695417 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404539807 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.135346164 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056245203 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.237759408 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.091732406 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.52095282 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.379131238 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09308943 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.287528016 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.342014898 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.092196733 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.334016949 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.101527775 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.559690426 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.298776108 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.401139097 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.490798085 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.139518025 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.223636721 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.760279885 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.652482288 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.390949553 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.239040797 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.259328186 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.341577868 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.099889861 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.35329935 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.877986416 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.110237861 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.759097458 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076810623 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.262275903 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.005239825 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.331878361 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.547947687 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.816016396 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.238210163 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.387004213 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.250857676 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.132596161 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.345639584 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.155873164 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.29359511 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.225439016 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.313012286 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069187315 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.358680999 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.448425574 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.141840157 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332038576 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.41203526 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.390116927 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.464701091 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.245040888 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.936955616 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.220993116 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.660953024 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.009024837 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.457258752 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.095710839 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.800363415 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.629925046 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.075835337 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.210646212 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.713552631 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059681583 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.092104663 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.263316964 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.710792652 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064838433 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.105471456 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.176275904 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.486152983 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.220641623 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.238105668 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.338162521 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.798400328 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108013147 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.094798965 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.377936682 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.06590707 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.655355847 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.093098702 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.148770232 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.093409366 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.681015906 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468211035 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.136331792 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.865453502 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.742951627 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.395181924 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.702219656 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258581601 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.927837604 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.465934339 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423654688 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092543066 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.786581193 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.094239523 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.207119898 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462530655 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.092073382 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.07036214 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.515619025 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.297759893 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.0934241 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.346615392 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09531135 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.244634325 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.092425877 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.678996668 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.525195392 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338321448 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.549751077 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.183458589 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.249991594 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062803406 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.24096883 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.529172922 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.169496937 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.437033668 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404339852 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.286094728 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862844359 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.089855209 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.945968376 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.451218359 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.322204936 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.432598427 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.740906076 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.262243699 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.104964363 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09249187 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.279942548 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103217378 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.639624383 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.092805678 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.756371042 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.06925197 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.394234952 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.092862817 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.256730169 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.094265175 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.358797821 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.655633101 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.111302902 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258309961 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.381973175 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.28246338 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.093954974 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.064548347 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.36153777 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.310301632 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.550495378 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.33550729 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.65347679 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.418968666 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.576021567 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.2849139 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.474944932 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.848777531 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.324353451 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338497134 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.116841219 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.144403554 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.643311291 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204834397 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.534994062 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.323155026 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.863575549 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.572854002 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.514969605 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.134675894 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.101849116 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.069835297 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.24132421 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.462175282 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.100000402 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.5813427 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.174213583 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.405679463 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.608397392 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.126427614 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.388261401 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.85650172 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.488896561 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459507119 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.4247846 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086918019 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.507668339 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.623653042 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.233590415 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.174863766 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.412753859 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.029210945 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157433019 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.114839248 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468423659 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.048452806 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.870930693 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.674709512 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.690501122 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.04843367 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.252302893 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.656808723 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.115690107 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.007186923 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211739447 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.174413299 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.749402951 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.531557052 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.327531875 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423157142 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.172283507 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.145608838 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.398150321 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.451618438 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.40341499 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.572378033 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.326597935 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.817943509 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.228898828 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.784397802 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.304292254 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.174591649 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.640326443 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.042433334 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.000159999 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.343571257 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.818318254 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.303813835 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.823264306 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.453252945 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.131906875 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.521128819 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751612925 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.178860019 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.048710646 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.257265414 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.126712884 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.323965873 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.883471626 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.169834497 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.802718251 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.345132359 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.382474822 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.324782036 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516540911 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.557209222 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.47663946 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096397536 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306962941 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.241233036 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.423386507 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.117767253 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.463535025 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.797428063 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.686415858 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.946492818 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.665968831 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.378372565 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.302661121 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.457177169 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.306792218 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.393628497 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.98914824 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.724064617 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.08274123 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.245561307 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.073175909 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.837876448 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.39133072 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.469525498 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.457528257 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124645623 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507354266 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.441937837 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.170570442 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.292267981 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.363477696 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.097635124 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.34804087 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.098455845 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.689286467 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.509315312 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.101232589 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.776686968 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283871073 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.454605696 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260192152 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.635671314 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.198371598 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382617209 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.626241091 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.358963421 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389642491 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.623488871 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.116899902 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.280008267 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.343866698 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.852626974 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.922170869 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.631569661 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.819418509 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.757327051 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.623710106 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.048111318 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.27519786 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.466769207 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.442013785 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.271357502 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.449506943 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.64691957 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.303429891 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.493348752 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.581962593 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.419193397 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.800261838 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.353598561 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.961953446 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.583117371 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.796567475 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.803158714 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.067263732 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.702863368 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.273279548 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.785536803 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.239259067 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.438419613 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.644065199 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.959271069 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.31042326 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099530036 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062073633 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.505398299 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.722994541 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.437216198 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.06113731 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.436336304 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.513759977 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.468873493 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.410941438 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.252925418 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.863242914 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.053398369 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.54383163 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.440801631 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.470970045 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.477155853 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.450517553 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.813457022 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.583914628 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.048410789 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.634537171 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.46625971 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.255408269 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.270307413 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.552289087 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.639031622 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.284451046 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.571041245 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.601898343 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.29214138 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.311739686 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.313133311 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.625669874 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.066424345 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.012978525 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.507386017 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.660958597 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.732727639 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.264628179 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.048603158 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.46323319 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.692301841 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.651908609 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065212811 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.708709803 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.572421479 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.427525356 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.246776241 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.475124716 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.272036846 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.375223213 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.008646176 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.574995651 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.421465379 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131665027 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.909885359 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.347168983 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.264085934 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.70293256 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.493792817 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.471698803 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.274787516 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.89173306 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.65174484 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.428019169 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.271859728 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.03528378 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.246506158 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.466306524 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.272253808 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.498873187 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.133243356 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.414712188 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.948790897 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.758114026 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.304360363 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.497308782 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248964891 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067080794 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.26603706 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.940025696 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.068812919 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.524930714 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.791215073 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.467752339 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.281127562 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.602014148 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.406246575 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.582156239 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743272554 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.644775952 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.663215018 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.541716035 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.531895917 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.111368225 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.440264414 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.516158983 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.249465439 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.270460012 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.338923391 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.650219986 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.629416988 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.276620498 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.817428079 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.525674227 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.48923426 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.467232837 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.464825621 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.824987338 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.486190945 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.482822415 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.446979362 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.302312094 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.60549349 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.273142005 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.538079367 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.261564464 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.308617538 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.461578701 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459119601 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.648406138 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.511249355 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.096022773 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.339098526 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.911094319 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.857709851 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.702712037 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.20947236 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.825981548 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.745223046 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.217565556 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.622386983 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.86227565 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.446769968 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.944689788 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.320865214 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.251456679 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.427319836 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.750085014 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.254548783 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.832266615 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.642709465 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.247706692 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.529895433 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.25653094 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.409254169 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.018950369 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.729705082 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.246755021 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.816561695 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.551666234 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.769195748 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.944594358 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.242113674 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.327803839 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.847198476 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.210118318 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.243719275 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.354282704 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.786186877 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.237570353 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.718371394 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.405280797 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.40196211 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.191261519 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.295391132 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.161777528 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.384227334 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.809403646 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.452777212 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.498292381 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.402735258 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.208857157 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.788762664 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.903737534 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.329133279 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.458274636 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.30963409 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.556242228 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.0140046 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.241165971 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.804671996 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.44499394 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.227474727 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.646628454 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.497022624 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.272037466 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.479541689 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.246989569 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.530232954 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.391241868 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.727425024 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.469629048 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.56055689 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.336301986 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.254663285 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.786247727 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.602612277 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094894868 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.248196061 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.556349668 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.232052064 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.822870631 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.965874355 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.400505208 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.432122556 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.989254754 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.020748935 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.222357591 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.27092157 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.243079414 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.439404484 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.756150231 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.199435947 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.766762027 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.267761155 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.328234937 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.48993349 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.109691554 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.316739395 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129378658 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.091375769 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.609999679 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100639953 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.460496228 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0749987 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.666517032 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.1122507 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.225315968 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.247076568 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.42545876 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.096623197 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.827851118 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.267455567 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.098126687 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.103818662 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.48102186 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.249772696 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.349701059 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.461761002 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.314198041 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.45950186 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00350963 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.649002235 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.303588888 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.414174523 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.932919418 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.662249538 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.21803303 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.626287564 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.630240772 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.319469695 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.647722274 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.369099648 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.847747213 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.261233702 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.580066401 seconds)
  done (took 1979.596202815 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.177003981 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.240038214 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.184541318 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.161133859 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.312603628 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.16141458 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.148918134 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.230110415 seconds)
  done (took 50.728834938 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.105511133 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.156860159 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.671008919 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.298555736 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.135249203 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.344598276 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.271755204 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.656401718 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.31375672 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.161787436 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.175296197 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.20743523 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.117114893 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.149686124 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.026588191 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.194707326 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.113971276 seconds)
  done (took 93.210746341 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.134215415 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.438229168 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.134801942 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.123584207 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.208186612 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.486905073 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.122413188 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.105117418 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.505559238 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.396578981 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.148386171 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.182997119 seconds)
  done (took 81.140082064 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.135123884 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.134225735 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.134511847 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.133822115 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.133321534 seconds)
  done (took 6.763873129 seconds)
done (took 2447.604702738 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.348000983 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.572991022 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.629465982 seconds)
  done (took 4.294740516 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.164023898 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.238405745 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.29416577 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.244607304 seconds)
  done (took 6.062126909 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.410346141 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.589159957 seconds)
  done (took 4.092083652 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.517268023 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.131295757 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.668618164 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.095391149 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.102838623 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.104383366 seconds)
  done (took 19.412383512 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.123974133 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.128216657 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.127500819 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.121911125 seconds)
  done (took 5.602513665 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.09321999 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.118138707 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.104555131 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.100467693 seconds)
  done (took 18.509085908 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.456718038 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.192089757 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.842713948 seconds)
  done (took 5.597080068 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.914075423 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.233100583 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.912324726 seconds)
  done (took 6.151859099 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.046939111 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.12848163 seconds)
  done (took 5.268303576 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.271780244 seconds)
  done (took 2.363816054 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.581036111 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.586220565 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.745323896 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.821001563 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.99787859 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.397536898 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.501570606 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.418015009 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.605549235 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.635074214 seconds)
  done (took 17.382310667 seconds)
done (took 106.494575395 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.998515325 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.51076493 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.25370627 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.289832669 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.271043873 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.255800852 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.124578713 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.084110492 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.413651185 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.413731552 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.305985442 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.270931977 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.154107658 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.494603231 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.157331837 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.463646989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.253343426 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.012309335 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.887215229 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.743597856 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.169457272 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.394333079 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.032748504 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.41123736 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.271317129 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.256976725 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.055762135 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.479965908 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.116274851 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.072696943 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.273459995 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.985822719 seconds)
  done (took 151.972598643 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.094026318 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.111844934 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.113449486 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.10539289 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.948914366 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.113253566 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.108622353 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.104973449 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.785078841 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.78653635 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.113021196 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.940411667 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.113574062 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.105467333 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.112148209 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.105970943 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.897564463 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.112590128 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.112208484 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.111959949 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.111181139 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.722344577 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.118499478 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.724904035 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.941463539 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.173191038 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.164301108 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.170124051 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.161954245 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.149833398 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.159285561 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.133490957 seconds)
  done (took 186.839195807 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.159222718 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.157237505 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.151399275 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.147521649 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.153999315 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.158940218 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.11388705 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.115430452 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.137535735 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.212152743 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.139819256 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.271093892 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.114797959 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.107546968 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.112925905 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.111497284 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.382895608 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.378648818 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.135220497 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.513452643 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.459350431 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.457346198 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.492028512 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.481452704 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.46642144 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.464674544 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.469385459 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.485377356 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.467500866 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.456671563 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.484823703 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.471471227 seconds)
  done (took 202.588785891 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.771418323 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.509873533 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.475760309 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.04971776 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.437185978 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.500656 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.02764791 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.780967519 seconds)
  done (took 17.029151815 seconds)
done (took 559.539228266 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.233595936 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.43369091 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.659745889 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.705939929 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.067410874 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.4894441 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.578476676 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.925737018 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.229078526 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.896850055 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.961401776 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.697382568 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.30637763 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.714250764 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.668506146 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.93050852 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.890336629 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.181952319 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.684834309 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.344707145 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.711247377 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.377085883 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.962734584 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.269583817 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.956620513 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.420211085 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.619439096 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.892809856 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.674841629 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.688332491 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.59634688 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.932875382 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.717190169 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.725531444 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.988462829 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.971732349 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.869605511 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.978955425 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.649519193 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.168397674 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.332298677 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.080704054 seconds)
  done (took 90.641211337 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.498765131 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.525372079 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.659661968 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.568527733 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.250663878 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.573468963 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.746699576 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.723594514 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.580431609 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.711435609 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.750158127 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.260439195 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.722239532 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.862107873 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.424027198 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.771074886 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.631784965 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.229233496 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.798727238 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.767784811 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.623181027 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.723376322 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.610933147 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.775602596 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.58323595 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.630684834 seconds)
  done (took 46.480176366 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.602271107 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.774767286 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.802824866 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.649829147 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.7726021 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.563232137 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.916532704 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.734024504 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.465028808 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.951567183 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.659574988 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.745918546 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.740566 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.837585307 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 5.075379021 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.67671071 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.762138684 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.766420807 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.749520172 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.760995463 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.727045697 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.647127079 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.930944005 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.74892074 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.228299397 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.329775746 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.799379501 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.229467951 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.768853806 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.816857238 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.573891845 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.54823588 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.63682104 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.797109919 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.735062751 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.592114162 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.629869329 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.690609356 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.631447439 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.788121715 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.937996526 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 5.161619155 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.852791264 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.154532016 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 5.054539325 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.758834778 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.099678235 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.718745996 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.724540855 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.459576381 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.904003954 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.425881215 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.699302899 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.779100065 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.743925954 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.95397727 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.75815339 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.92716993 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.687001779 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.220727481 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.647288702 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.956201604 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.796684709 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 5.076585037 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.835390639 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.785897478 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.758194048 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 5.403780449 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.857476984 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.809116758 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.259949975 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.691624173 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.606204421 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.660924421 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.787030583 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.137210091 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.674735441 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.816709824 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.056500027 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.957718699 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.824989727 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.066344253 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.221979499 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.694353071 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.184888595 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.180530215 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.240489751 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.500927304 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.489095658 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.648081955 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.713945487 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.496188828 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.647951264 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.394672013 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.793302362 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.525680824 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.150876777 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.1736169 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.384781671 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.709522744 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.239012823 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.350371214 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.814969909 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.664360346 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.53416675 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.297189954 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.542342203 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.479159492 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.478319294 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.126230203 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.203612453 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.29456592 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.523209459 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.459745757 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.190157911 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.725602158 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.287196208 seconds)
  done (took 276.256965326 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.095424944 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.123353111 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.110329388 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.112506982 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.097207539 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.64108787 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.153715461 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.097258653 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.640300349 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.153467511 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.100916863 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.100806782 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.099503067 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.107331614 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.236858563 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.2841342 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.014608494 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.097894999 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.096485816 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.107898223 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.93550578 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.099499101 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.099981005 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.10772677 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.100281766 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.100441951 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.103812129 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.155355408 seconds)
  done (took 151.288916908 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.161552245 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.521830056 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.188141301 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.246523562 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.20771018 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.182393688 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.671035201 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.294299511 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.236603306 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.167633256 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.171021649 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.383752458 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.478818631 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.751420488 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.298480115 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.382576535 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.85122152 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.309182535 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.169670904 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.16805088 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.315738618 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.537378424 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.426994344 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.420478874 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.306362266 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.421548678 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.241960897 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.166412285 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.273860839 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.644749614 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.184130792 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.528602014 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.319698955 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.166144072 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.659737567 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.522993582 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.733511276 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.802850858 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.35520494 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.127052521 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.12314374 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.400286563 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.454411284 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.224775488 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.157868775 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.814476032 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.185137242 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.420113922 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.188436222 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.123689946 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.267878765 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.278786355 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.413507642 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.162594123 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.349913121 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.313435079 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.760595284 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.147176633 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.230734992 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.46992644 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.140503851 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.640321827 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.652359487 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.219663201 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.173440962 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.023825304 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.244360235 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.679102612 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.780071825 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.211138289 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.503341467 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.360708949 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.139688363 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.419286044 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.338479807 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.656234096 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.739175182 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.296868227 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.262932659 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.235665232 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.437277228 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.154330544 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.722202194 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.272693583 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.138543086 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.649811804 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.554651904 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.141582627 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.156239048 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.25839444 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.323884445 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.377480323 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.452603731 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.237247453 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.078360975 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.431424088 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.438451949 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.174828612 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.290544115 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.154081163 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.568902619 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.35147958 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.143651632 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.486734607 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.567650963 seconds)
  done (took 155.868543882 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.890418087 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.223493405 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.348269969 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.670352134 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.512433293 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.589236375 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.431284012 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.235611712 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.459852812 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.365815297 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.352587602 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.24753337 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.843595049 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.91455539 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.217076165 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.385170434 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.231103548 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.76108204 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.496378334 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.151790675 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.483555073 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.94293379 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.479334179 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.556025211 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.560555459 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.686368971 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.81104428 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.271732732 seconds)
  done (took 48.228033345 seconds)
done (took 770.235297506 seconds)
SAVING RESULT...
DONE!
