cset: moving following pidspec: 3081264
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.189547699 seconds)
loading group "shootout"... done (took 1.077644917 seconds)
loading group "string"... done (took 0.66707051 seconds)
loading group "linalg"... done (took 8.737779938 seconds)
loading group "parallel"... done (took 0.222002831 seconds)
loading group "find"... done (took 3.453948633 seconds)
loading group "tuple"... done (took 2.21590897 seconds)
loading group "union"... done (took 13.173280506 seconds)
loading group "dates"... done (took 1.718491717 seconds)
loading group "micro"... done (took 0.217415391 seconds)
loading group "simd"... done (took 6.505067321 seconds)
loading group "io"... done (took 1.420664887 seconds)
loading group "random"... done (took 12.193485844 seconds)
loading group "problem"... done (took 1.756494503 seconds)
loading group "array"... done (took 34.056217154 seconds)
loading group "misc"... done (took 2.030771542 seconds)
loading group "scalar"... done (took 61.93635747 seconds)
loading group "sort"... done (took 4.949838861 seconds)
loading group "sparse"... done (took 17.912452811 seconds)
loading group "collection"... done (took 23.186551858 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.453022248 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.114795992 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.164672491 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118870603 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.235485572 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.127074769 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130691456 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.11396652 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.066142924 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.145096751 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.138608955 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.434322746 seconds)
done (took 5.654141586 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.307197802 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.243169037 seconds)
    (2/2) benchmarking "String"...
    done (took 0.163547935 seconds)
  done (took 1.550369631 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.092656123 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058353406 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06537121 seconds)
  done (took 1.356034254 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063850952 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.141855416 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064843204 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065263031 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067989111 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064771325 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064696665 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064593068 seconds)
  done (took 1.674264376 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072764235 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066229922 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064248501 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065858786 seconds)
  done (took 1.410014239 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06637462 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125497588 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063015726 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06263569 seconds)
  done (took 1.455367417 seconds)
done (took 8.973294188 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.176047478 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.778461976 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.861022081 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147238721 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.317453947 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.347126916 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121338119 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.203635361 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.115442625 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075524522 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149176285 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080949443 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.489241538 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.491794787 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071672668 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187025316 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.608680366 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084744051 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112539332 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.182778618 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.082261765 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08277742 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087979061 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071684185 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.121700558 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.176257257 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.616452758 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099227978 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.167068638 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.089411269 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070124016 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074813529 seconds)
  done (took 10.515774492 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.11655848 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.112517542 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066966504 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.101199977 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093727599 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068121692 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073444462 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066904113 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086515553 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129582546 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090360716 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.124420571 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066371186 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067881064 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.099303728 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.157387468 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082839343 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081115941 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067961496 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081567466 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.093467018 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079464047 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07754847 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.077049413 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.111116233 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131731024 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088940498 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.107025232 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066848217 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.08746302 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093933652 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.107106236 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067469528 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065364964 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108197975 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.084354804 seconds)
  done (took 4.45320297 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.041066666 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.099528244 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.107069629 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097833144 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105994179 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093589893 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148932892 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122544566 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100278217 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067478604 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.176870574 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.700100612 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.135780036 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.107895969 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071163588 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.147488917 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.366338299 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.903164021 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073080131 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06853716 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.099569225 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07050619 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.142939085 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066798781 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17992065 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.792246201 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070761778 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068333536 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096373222 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.112729885 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064459827 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14225141 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094183843 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068893951 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.583533463 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066204066 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063604687 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.084393727 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.10027345 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06592739 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066866129 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077752267 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065023569 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11633566 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080202238 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.557692448 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069396441 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.645562708 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.336323937 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073503156 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071973648 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101836779 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064558201 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067703781 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.676312211 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.155552359 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06739718 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.287259377 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070826767 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068421595 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069208416 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101139367 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06763755 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068864619 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073399178 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.085069188 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.018646797 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.154069603 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0867842 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.067008854 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066977814 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.065416624 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.4312282 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077878826 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070515271 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.065997797 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071990498 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067789714 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06710801 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.245590109 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.098243446 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090433807 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069931908 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066866361 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065870089 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.582354836 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.972223007 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070089773 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067504941 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.509903847 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065205289 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06645248 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06787698 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088287942 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066855613 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063639859 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100402946 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069021481 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.095577462 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.595914279 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067958239 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.063979817 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.532698058 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070684706 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098913103 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.125354275 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068050615 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.109162393 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068411103 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065396067 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073954311 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065088039 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069873058 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066463101 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06728625 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.066165317 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06929262 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068977331 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067931262 seconds)
  done (took 23.572075809 seconds)
done (took 40.722697434 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.407967474 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079903554 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07989151 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079752797 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079857378 seconds)
  done (took 1.916647755 seconds)
done (took 3.205973987 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.268990481 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.094010233 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064219142 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.213156579 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.091398566 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.182708837 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.229192427 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.175763499 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.093245458 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.092931989 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.093480395 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.232421293 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.245116649 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.094605455 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.167092408 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.244933932 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.096329516 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065812421 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.09310157 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.095490245 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.095783184 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065888198 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.093870107 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.09604878 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.167302554 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.093516777 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065103035 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.168166779 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.097051342 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.172685484 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.096974068 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.095582078 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.096610577 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.168843351 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.09718106 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.169346029 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065967127 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.096712054 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.096999729 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.098421869 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.096838198 seconds)
  done (took 6.460874832 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.091360894 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081460189 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084745389 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061763285 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070995492 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08112365 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061887225 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080936944 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.097872291 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081644615 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081398139 seconds)
  done (took 2.16105829 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.084956815 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085146744 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084034794 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061440814 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072723264 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082188956 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061719719 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082249174 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085738643 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082504454 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08259822 seconds)
  done (took 2.084664207 seconds)
done (took 11.913796255 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.19546599 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.092439449 seconds)
  done (took 1.493373949 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.577531504 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.196326246 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.102507383 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.239956765 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.098869775 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.130681187 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.504212678 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.128775393 seconds)
  done (took 7.243862043 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.125838251 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.100307583 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.069504563 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.067943872 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.068663432 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.068514155 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.072614751 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.068908631 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.067729236 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.070606476 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.070526748 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.068074574 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.068995968 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.07032694 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.06835758 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.068527966 seconds)
  done (took 2.529133037 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.074660833 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.071687594 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.072515269 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.062382267 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.074003679 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.073850314 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.074855687 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.074679494 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.07417166 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.07474323 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.073051023 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.075976671 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.074250095 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.07166085 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.074245418 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.063050483 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.074056476 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.073845737 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.0759477 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.075782776 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.074051354 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.072005502 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.076859843 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.073849929 seconds)
  done (took 2.99875076 seconds)
done (took 15.48486035 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.193057661 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07683492 seconds)
  done (took 1.48857812 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.100102111 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.098596266 seconds)
  done (took 1.435918367 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.077061607 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061046056 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079716342 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071431762 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061961016 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061613953 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078967581 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061928566 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061819605 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062084192 seconds)
  done (took 1.917484341 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.066129419 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069270342 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067384593 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064924571 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067867262 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063029957 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065661488 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063393278 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069903306 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062069608 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066350737 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085308942 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066009473 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08554772 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065812379 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066518017 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068531491 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06647427 seconds)
  done (took 2.470073499 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.064215222 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062296308 seconds)
  done (took 1.364969767 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067440836 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062168719 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064402071 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06428658 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062172261 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06193762 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062395382 seconds)
  done (took 1.676109518 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.453208645 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.196229148 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.441999193 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071569217 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.0885062 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.280085142 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066424561 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071008024 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071091505 seconds)
  done (took 2.974112516 seconds)
done (took 14.565024404 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.087187167 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.187709862 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.119281748 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.440300891 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.082034545 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068781793 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.096738553 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.232398797 seconds)
done (took 2.566049859 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.32801629 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.405917162 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.32531382 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.070735151 seconds)
  done (took 3.045492963 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.43515044 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.174207098 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077491609 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068854445 seconds)
  done (took 2.014515789 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.069371631 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073556629 seconds)
  done (took 1.394041248 seconds)
done (took 8.038989209 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079343862 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063010802 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.071080142 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06487056 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.067670342 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064469142 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.064555747 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065665221 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063212632 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.065483499 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.065557248 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065841134 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065381491 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065427469 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.064758425 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065714416 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.06338501 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065484495 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065476027 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065987889 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.063837961 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066684705 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065781433 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06639495 seconds)
  done (took 2.820691164 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.0856656 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068290159 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068673455 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068386503 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069502099 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068637621 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069062693 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068449516 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06917749 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067684796 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070073394 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070190277 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067492345 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070368653 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067825637 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070480031 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069583553 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068521795 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067754087 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.071461585 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.070087991 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070063756 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.071950248 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071195913 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.072231906 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072194732 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.069682671 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.070540383 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071133884 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.072182552 seconds)
  done (took 3.365701775 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.072192198 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.06210186 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062477758 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.07285026 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062135115 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062633521 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062960123 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06240675 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.06277268 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064180121 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063632039 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062685069 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063588985 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062925473 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062830965 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063503352 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067991407 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.085488263 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.063236909 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062804675 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067728718 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.063313812 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062854492 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062892034 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063756484 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.063450504 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.063337109 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.064222749 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.063744124 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06474745 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063836228 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.068756992 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.070740517 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06398248 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.074740094 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.069402623 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063993097 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.071457788 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.065530528 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.063739594 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.063890606 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.063818269 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.063977363 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.063991992 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.074861919 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.064206634 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.065619845 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.064516283 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.064140013 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.063832696 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.064037979 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.066256315 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070450715 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.065990021 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.063936526 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.066014163 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.063958483 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.065403688 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.064094054 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.063847449 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.063980856 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068456032 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.066034604 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.065023714 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.086880613 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.066130828 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.075144211 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.064240863 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.064749353 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.068531885 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.065438839 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.084968403 seconds)
  done (took 6.030438643 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082194501 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.079380151 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.084776054 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.075819104 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068352012 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064760317 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06919361 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064763202 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.076693243 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.0691873 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064721227 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069097072 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.076601471 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072774468 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066297695 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.076470175 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06933437 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068606518 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06532825 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070135119 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066815398 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069812138 seconds)
  done (took 2.852224709 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.170275626 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070981633 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.121668979 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076082592 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.074489433 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076045829 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.07127501 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071511404 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071348914 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073107571 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072892469 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071687195 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.074607304 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073141881 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072990828 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072820369 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071883668 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073720607 seconds)
  done (took 2.724218199 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.087235767 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.071540521 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.102365702 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071192948 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.071231654 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.070676149 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.076711738 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.075917724 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.070572647 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.071767486 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.076097873 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070801827 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.071035515 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072019679 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070876423 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072034186 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.071034861 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072441541 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076447275 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.077531324 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.078043429 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.077318096 seconds)
  done (took 2.920956436 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.087647466 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.070095425 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.090954871 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.073019802 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.064819069 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.064842359 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.084855679 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.071636992 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.072864468 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.070090485 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071476354 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.065204677 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.074778737 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071761332 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.074842139 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071607796 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070296201 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071945919 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070832388 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.065907979 seconds)
  done (took 2.72839054 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.117662389 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068892681 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.068572888 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074770284 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068878578 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069217738 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075448834 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069307039 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069203904 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.096229956 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069500649 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069360855 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075754196 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073018474 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069430809 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075701071 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075684375 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076706277 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07014128 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071530249 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097714536 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070329901 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076966121 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070625978 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070372774 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070345094 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078422271 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065320658 seconds)
  done (took 3.374354724 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065454697 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061665094 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06174758 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06158184 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061543121 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061431369 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061441013 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061707698 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061531825 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061862978 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061559898 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061495607 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06153966 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061603718 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061615732 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061522029 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061467291 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061877097 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061981111 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061962472 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06155145 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061784299 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061902435 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062085914 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062074497 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061697372 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062313408 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062408592 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062101626 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062487175 seconds)
  done (took 3.14674829 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07355457 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069198761 seconds)
  done (took 1.426416534 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062108333 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075446089 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057341075 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070480484 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066279788 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061877088 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066983193 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066721373 seconds)
  done (took 1.804359055 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.0928044 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.114861608 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059642231 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060106006 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089809291 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12719465 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100178824 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072101922 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074705503 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063951403 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06015982 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099981806 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059449613 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07338437 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060867665 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072123702 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067789108 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078335629 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073542676 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058525691 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073135323 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060763195 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05965977 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06118898 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061150877 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067582754 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076769278 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073172438 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069199094 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058192581 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079676534 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059011419 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060162871 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069047381 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091733645 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059292978 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09742508 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059558155 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064174944 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058667711 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071878465 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080634035 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073954559 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077957045 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061067222 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061080213 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058736481 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060875268 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06327634 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068916244 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.05884421 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067135485 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.05850948 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060496205 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070226359 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059472576 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06418746 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.06901392 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073498024 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070356447 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071976718 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075491869 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068688893 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068470747 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060357079 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079945893 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061158912 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073280876 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074792838 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060541416 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073265354 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058790217 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05814275 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059067952 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093936816 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06104828 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06062108 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059572776 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059385988 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061208772 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07000138 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065214328 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067936285 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063795018 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077980313 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070891956 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060947143 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069906228 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080520723 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065073781 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061359262 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078953435 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065032168 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06072538 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080707705 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072252987 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063902006 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063081682 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065749575 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076937992 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063688373 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060761514 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071266149 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063930499 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.249309839 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063355724 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067584408 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058733516 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069339624 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064002656 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059868268 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057297782 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062996941 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059159605 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057060788 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068106422 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058161261 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073069512 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065266852 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073227837 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07382877 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069249087 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074547387 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058301512 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057181324 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076672252 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068046126 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059403176 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076685038 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057747566 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.06936243 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057933181 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059446433 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068010977 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057339956 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059870512 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058126492 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063849322 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059432692 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059833035 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064328978 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067308294 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070753977 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.05934226 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067724236 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058564908 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074655939 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069160194 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063993106 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062387906 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059935795 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071885307 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066706623 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069501017 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059018192 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060161139 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059537584 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070618806 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069552289 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061227654 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067948839 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064501818 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060158138 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059615838 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060433624 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063414183 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062696036 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060080188 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067832835 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068726321 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073947919 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066784155 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068867634 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061437332 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058819077 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061010433 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.05870554 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064173676 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069184033 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075670365 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071733375 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081336451 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059686814 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069899088 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060935905 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076987487 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073462214 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060460041 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064170389 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058489586 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061255201 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069393968 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071665357 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074194035 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075210253 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064722304 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064630373 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060546725 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076747173 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061349901 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069943551 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070863669 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067727725 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.0611241 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062857919 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070739826 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066074008 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062076783 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077975721 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070001497 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061292196 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076956815 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062147189 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073393162 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061474906 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066017116 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067630156 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064243796 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.22991244 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075078958 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057826158 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.05923551 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074652907 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060167521 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059739933 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067034502 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073864409 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063326568 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066711938 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069420045 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068848512 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063327729 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068563631 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058971015 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068098176 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060964065 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070274092 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058243433 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076648495 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057305653 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073997729 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058632424 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069797236 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058993872 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068185146 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059221653 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075693185 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059876579 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059086884 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070346525 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057235459 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068118327 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057862836 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064032069 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065477359 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068148088 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060075435 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068327195 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059980033 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067998332 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063596971 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067184229 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068228666 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064251344 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058826637 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068035217 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070695068 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.06787612 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060537374 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060574616 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059824779 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069221594 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060936561 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060686431 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068188954 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064720466 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065866557 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060903946 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061314156 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061103611 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068443538 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06942887 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078239966 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06848078 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067375179 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06914194 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058956098 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075631089 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059451685 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067290654 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.05820625 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06656569 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069091202 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059471579 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079397636 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061011788 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067955092 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072615845 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068567947 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063627553 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078233579 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062860287 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068435931 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068061395 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064610745 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066830077 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061592838 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068715088 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069656916 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070791534 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060691773 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067907021 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069357732 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061549319 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070916651 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06307075 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070036654 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063036318 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060270433 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066299888 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073542068 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066474798 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066599763 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061567122 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060427022 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062025843 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071238464 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067045115 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071273199 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078524674 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060760737 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06624956 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061731445 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066244211 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.241088738 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06943158 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067367814 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064009107 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057782194 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059896486 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.0601988 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058705998 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061349073 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057551248 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057943767 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069422002 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059790404 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063108707 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058558942 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059159507 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068598883 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062417232 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058918403 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065387752 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058099811 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064033237 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057540609 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059739092 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063495136 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057679307 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06257891 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069261798 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075244828 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065454114 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067821174 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059402711 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06677569 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074230089 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066965451 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059430945 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068047033 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057655207 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077264826 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068109432 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067455382 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068623629 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059425304 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075614456 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063371117 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069478515 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075271636 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060604926 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067094658 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058802205 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075535541 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064190126 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058743983 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067805908 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067606052 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065570051 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071514724 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060183302 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068140943 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064800468 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063217545 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061084133 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060949735 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068754922 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076161983 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060159616 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064938597 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067906348 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068315505 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064474041 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072177701 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068095435 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060707762 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061027815 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063543798 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060202764 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071828868 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059856697 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064341225 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064398952 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059018919 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066526325 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076624249 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069411749 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069673037 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059091029 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058787877 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07819391 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063903736 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063112697 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068442682 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070052956 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072378415 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069613108 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077412369 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060490693 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066056106 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073482893 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062018726 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.0609335 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065090661 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062829332 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070949448 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07172114 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069038391 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063372552 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068396034 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075780108 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06303304 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067017879 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069187631 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062871166 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073089486 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070809061 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071464995 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063869916 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.218700487 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062901515 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06821658 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06679069 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068080029 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059359333 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06539933 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072268092 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066344731 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061071685 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057782475 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061123641 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067769662 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063207136 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057708389 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063313357 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062402802 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065423992 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067879684 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063231131 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057775878 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075582758 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066841516 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067838121 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059865491 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.05994138 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058793016 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057815478 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069728437 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057738158 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.328137596 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064806932 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.05995314 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076373707 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067091087 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074688823 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059018634 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063269444 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057914826 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071118209 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063514532 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058626843 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069223727 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057676562 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07483469 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071335982 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065686653 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058749195 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064861124 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06783384 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074923822 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069380155 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068542824 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062409027 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069276424 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060806122 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070500974 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058639287 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058084772 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069682557 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068659599 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072278537 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058977889 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.06995895 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061241225 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068243681 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068088698 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061159514 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061018844 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061208349 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069413125 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064512832 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069286963 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064599266 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076793401 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060381525 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07094233 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069041988 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070871464 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07396297 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072267011 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068008338 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.06026176 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06757724 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068217105 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06091299 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065091528 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06305516 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082420502 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061659499 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061294575 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074845963 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.06778763 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.05993959 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068150048 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065109935 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071727136 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062198098 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072145341 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067318527 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062066257 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066336767 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066267865 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060004433 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060656332 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061282943 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072011239 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066510792 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062094635 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082731684 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063677485 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071401692 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074421197 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.228030056 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061054581 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057847632 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059562998 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072514987 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074463513 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06233766 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06748276 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059721442 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068011143 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057245424 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.0676003 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066903983 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067353368 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057971669 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058561023 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073706217 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074252624 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063415093 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074717223 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.06778908 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059561065 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080281524 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067870221 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059364716 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069456975 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060256977 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057566516 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057432549 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059732092 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070122621 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057807152 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06037196 seconds)
  done (took 41.927516774 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102774503 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.05958581 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058054994 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058012166 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065218098 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059612357 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058389509 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059584897 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059580236 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060556868 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058332543 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058295525 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063916205 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073566455 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066332855 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062055885 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05892902 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059617848 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058449758 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05984431 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06515923 seconds)
  done (took 2.702763302 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064559359 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06207072 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061674644 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061970693 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060880335 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05824357 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061950057 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058457665 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062482334 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058826286 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.0624548 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058497663 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058875672 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058841788 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058845606 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059972476 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062373857 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064420385 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058589011 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062003746 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06024021 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062591197 seconds)
  done (took 2.699408148 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062810181 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059074809 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067476876 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057546267 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057516097 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.060695474 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057573886 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063081361 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063121633 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062787548 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.067694096 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.058968298 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057755624 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064241791 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057659078 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058930347 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102878473 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059259464 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059245765 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057955232 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060796559 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067900242 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058069764 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058570763 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063351229 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061579534 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058442223 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061065253 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059198095 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063893464 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059671333 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.05815946 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068161982 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067467437 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063464307 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063456977 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060193518 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059576117 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058497107 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.05853154 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067493773 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.059924908 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058736214 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06008491 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068184381 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058577055 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058228831 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068229281 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058183999 seconds)
  done (took 4.406931836 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07342141 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.11642007 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064181343 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.099487817 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070690559 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063739748 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064293729 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.102674896 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059476337 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059857468 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071458784 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071484999 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061553858 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06207929 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065497326 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061150194 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062098364 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06076035 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063908958 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061089848 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063858228 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065878207 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.0712011 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071665206 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062319685 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060664834 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060955887 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062513045 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071084366 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064254927 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062592091 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063241469 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071427199 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066471158 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06101752 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061143301 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072383762 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062006694 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061721432 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060183347 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061437161 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063073443 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066268778 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073022142 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061872829 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066628075 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06173245 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059781048 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072056798 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061589107 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065353933 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073049762 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06287338 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062016093 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063115766 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072169794 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061847502 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060516014 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061983631 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071731817 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060334419 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062718692 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073068138 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062272741 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065031571 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072990799 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067043704 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063087877 seconds)
  done (took 6.034324216 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070839589 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093038825 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072719239 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072728572 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068519842 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068657278 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068593386 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068620314 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068506979 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071494574 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068714567 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132143645 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065693398 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070241633 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068864086 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069421394 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069521138 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069379585 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069257891 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069356452 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069772345 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074050856 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069365488 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074044117 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073990383 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065815261 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069114059 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069366945 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074283646 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069262489 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073972276 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.06924601 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069323767 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07709138 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07417958 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069283773 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060102864 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069700578 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069856099 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069768113 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066232498 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074975412 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069729507 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066288611 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06983907 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.06951486 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07480665 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074625482 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071548028 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072898362 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069945311 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075107167 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069773211 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069937769 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07483887 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078121678 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075090322 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07522594 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07006453 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075212523 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075187506 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078591512 seconds)
  done (took 5.892264504 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076266939 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064214958 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076861045 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.05786616 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058026714 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067730681 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058194528 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058190768 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064379862 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064302217 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065860865 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067785038 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069627145 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065820144 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06765991 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06942878 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067628076 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068123126 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065275781 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068227209 seconds)
  done (took 2.72862346 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.06310937 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063602183 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058604761 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074003218 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058685541 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06626555 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059138323 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059098476 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059195748 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058999145 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063586015 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063526259 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058866389 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066907128 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062474697 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066335217 seconds)
  done (took 2.383392653 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064367284 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066417212 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092702729 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059622912 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061819952 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058893891 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059608423 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.05870054 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060936193 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07282209 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059828315 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061714006 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.05963332 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058714316 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058954798 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061479288 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060670653 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059760182 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059489749 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094139375 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068462667 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060553588 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062241291 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060686331 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061788756 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068118164 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061493268 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061733198 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060029058 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062235554 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061847564 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071033008 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061931962 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060672628 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059056077 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059760608 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060193587 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.06241264 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062337633 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060222983 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059040475 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061794644 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060208148 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060651037 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061489351 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062290272 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061422516 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070437002 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06052511 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062478561 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060548137 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062042432 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061213517 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072136983 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063013509 seconds)
  done (took 4.857471162 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07920951 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063872728 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057946209 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057869322 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063404108 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063881806 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063648786 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063967174 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064342746 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058057106 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064279154 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063315726 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064198728 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064013533 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064324645 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06391098 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058122404 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063952471 seconds)
  done (took 2.547400257 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07143355 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064205958 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063765992 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059782316 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0595308 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064410438 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058552244 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.05972712 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059804303 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060120541 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060001624 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059652993 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059628561 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059690695 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063711676 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060169518 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059693233 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.05875699 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059965102 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058349797 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064656149 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058917962 seconds)
  done (took 2.732368625 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117689496 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.0820202 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157928146 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078144107 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088656262 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070067933 seconds)
  done (took 1.984648439 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095136582 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095840741 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063507171 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063287935 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067539583 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066259094 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066260233 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066347489 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069384591 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072143063 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066349521 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06972322 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069396501 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071180575 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067859002 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067932542 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066604784 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066971091 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064126831 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074964781 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067143296 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070552288 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067136626 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06698631 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067061636 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072007398 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070403246 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073203724 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066949387 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07044119 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068759906 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067139153 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070484702 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072981355 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064362488 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07044747 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067363205 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075301535 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069077914 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072778606 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06460962 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069410247 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07095122 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070594487 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071106169 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067774218 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070729063 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067752989 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067792668 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079628853 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069572204 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072476274 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069527396 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071296678 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07107849 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079664995 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074026119 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073031364 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069926604 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07415635 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073275206 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070105158 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073241302 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074484224 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069932056 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073252435 seconds)
  done (took 6.05486975 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104922249 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064307854 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066240411 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071838091 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071201843 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066658253 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066745514 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066569264 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066567811 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064304504 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102224678 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066969724 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071437651 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071517115 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066753362 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066609116 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067142363 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072182495 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064818974 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079001356 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067371745 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072196669 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072353124 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072373199 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073395471 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069311708 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067453566 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067357642 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0671987 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067216241 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070264974 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067322871 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072302432 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064608139 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072151905 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067430594 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067249695 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070268139 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067221731 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069514337 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072878766 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076067813 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067783618 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067648545 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073730278 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067644172 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067704385 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065114311 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067812166 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065037082 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073914493 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076820906 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073925321 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072812981 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067910274 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068041201 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067826074 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067910873 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068127467 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069869355 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073040144 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06781042 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080456486 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068322197 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068135981 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.097051488 seconds)
  done (took 6.097031538 seconds)
done (took 127.491478022 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.251203797 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.223785605 seconds)
  done (took 1.849376707 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.104377592 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.101550176 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.122450695 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.069592033 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.127727092 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.221232928 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.173605522 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.073739854 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.070127983 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.072138581 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.069678808 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.071831583 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.072155882 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.069537527 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.133018711 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.073546033 seconds)
  done (took 3.02913746 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121354971 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.20931071 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.104746176 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067741946 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151111908 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076032086 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071049889 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074634794 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075709741 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068870503 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116950869 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08282791 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073572722 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074813614 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070705248 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073600162 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074542936 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075746277 seconds)
  done (took 3.069364436 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.136795676 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.080082571 seconds)
  done (took 1.625086007 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.167371898 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107102047 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145199408 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.351688637 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.1402137 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141633222 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145861723 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141297001 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114372487 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13952284 seconds)
  done (took 2.993837641 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106747755 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102762305 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.326221906 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100674424 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080066741 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074922404 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072693023 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077894292 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072891568 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07425986 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120031703 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073069125 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070251807 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122361052 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098162359 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105464295 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069350135 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077041404 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07820701 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068979277 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074066472 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078509639 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177768814 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077245926 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100569687 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073421044 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075440279 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072531449 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072462912 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076357655 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07709448 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100534507 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077133233 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082883878 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074968932 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097068596 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070288846 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09969534 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072967725 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070792432 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07339279 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077159333 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070714197 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076504504 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073519816 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076024372 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079223098 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069500732 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073845804 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07318284 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071286077 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074881749 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074737586 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075772891 seconds)
  done (took 6.132599438 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.12357953 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.11015559 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067890773 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117530388 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108960651 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068184589 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124465308 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104201329 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122525169 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067864039 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067879719 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067085611 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074983573 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.0790267 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119728318 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113575288 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070075098 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068393581 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.113074518 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113157625 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06720097 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124780514 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.1160556 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112021466 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067091772 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068353077 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066983401 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067569708 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075865158 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075142219 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067357693 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078270899 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079717784 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074902258 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066598272 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066873526 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066859872 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07558642 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080129792 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077116946 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074191006 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066458888 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066919261 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067418079 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068003441 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06664741 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0772584 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075964668 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077671818 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06850909 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067936002 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067330919 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068676992 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075047227 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074038763 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075575086 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078738285 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068574292 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067640278 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069182957 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079384045 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076296355 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076044389 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068693872 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077256043 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067719067 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078535891 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081398211 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067590333 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068119526 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067804848 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067870836 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068254086 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074579318 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074549599 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068404477 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068672976 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067502193 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077362335 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077126157 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068933273 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07937824 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068546243 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069193219 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069625562 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070481049 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081833039 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079041534 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070548293 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071878645 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070325973 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070479266 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069523499 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.233963129 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074797617 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074278316 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075659949 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06686149 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076093829 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074619879 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066911674 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072907498 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066350731 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066737822 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066537035 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072879019 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072514733 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074293217 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066208643 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066144762 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074161381 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076776719 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066414242 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072632002 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07474448 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073163845 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066011309 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076036397 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066561557 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075542251 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066528446 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075046696 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066658336 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073162134 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066552172 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065811362 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066388014 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075980839 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067636942 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066322536 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066813745 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06645023 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073437553 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077322831 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067490276 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074538226 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074514365 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067701794 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076586727 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067436167 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076940931 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067528525 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0676679 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066535439 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078642991 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067272436 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06845541 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067423782 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076599891 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067457045 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076718937 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074110405 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066951572 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077767666 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076952047 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07424761 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077449311 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068276878 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067731174 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067461734 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067703107 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077257851 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078571288 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070011502 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069556548 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075025529 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077690656 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067325579 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07442549 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074495894 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074824585 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067919839 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067941108 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078169553 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079536502 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075999785 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080177697 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078059587 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06916136 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076683523 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080204712 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069214126 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084552071 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069921447 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081578922 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.082148871 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077827686 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.237394837 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077582029 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07495384 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075061947 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077206061 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066067661 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066278887 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07260619 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066239777 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069078309 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072405812 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066684133 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067455241 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079318551 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066793909 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075615198 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066107783 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073373443 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06589504 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066851853 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077792517 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066459831 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066711286 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073463369 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066313821 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072475687 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075194043 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072501639 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066173763 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066773112 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076099431 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075966276 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066300379 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066206477 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066699254 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075224909 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074546838 seconds)
  done (took 18.469389734 seconds)
done (took 38.591986069 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.197904686 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.115949207 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.203874633 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.13512292 seconds)
  done (took 2.061637181 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10118468 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063338179 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106687683 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116475386 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063473417 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.102682309 seconds)
  done (took 1.995642517 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.257320789 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181578337 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.185612269 seconds)
  done (took 2.067491708 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.176507108 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.313846301 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.573137866 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.173383655 seconds)
  done (took 2.685811507 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.143595318 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131913653 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075717952 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.146066975 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082657857 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060213771 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.146101085 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067758752 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098334294 seconds)
  done (took 2.454306904 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141154926 seconds)
done (took 12.85348852 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.310280518 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.106761035 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.077143985 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.070932796 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.190961609 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.157297556 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.247422237 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.073532644 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.248436351 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.339319384 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.207134452 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.092247058 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.12390467 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.087549391 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.28456346 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.075428466 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.072906678 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.068401693 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.189090223 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.172886386 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.206884276 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.073021378 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.137496619 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.074748025 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.14955064 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.12314129 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.227546693 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.329145463 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.298340648 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.075029136 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.174246476 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.09242446 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.165042113 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.192012305 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.159267467 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.098194599 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.064745961 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.267568707 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.148940568 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.330917817 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.198383618 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.071442557 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.188534817 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.06970405 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.127834757 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.112015094 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.077785272 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.071004389 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.088880769 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.071089279 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086064942 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.071220026 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.202232478 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.068120069 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.13855139 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.164393786 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.212700002 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.207166832 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.070874801 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083763247 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.074405572 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.215418337 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.091388086 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.071692242 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.07874544 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.066873587 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.327464004 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.084040882 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.065561008 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.073811029 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.071853127 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.150330768 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.114997124 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.107828154 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.074416237 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.16146727 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.139236806 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.089701406 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.094956649 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.072304042 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.063660834 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.20984284 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.068626168 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.081183975 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.068878046 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.099314109 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.064034407 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.083642392 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.19411518 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.190758075 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.120175522 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.064735501 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.265312329 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.064881813 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.092346981 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.127140303 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.064498477 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.207902774 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.064461347 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.064387455 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.072584818 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.071219501 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.06578465 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.194580556 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.14759214 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.071543949 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.070285211 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.064498783 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.069242042 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.066326333 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.064571521 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.064212356 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.143166342 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.085051785 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.06485048 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.151527183 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.172949012 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075009152 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.082439835 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.123296901 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.067053905 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.072770907 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.071597969 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.170796963 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.072390211 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.180849095 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.066887358 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.087841698 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.164060793 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.139612369 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.151347352 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.065622468 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.202979717 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.074729166 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.065277875 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.071829883 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.092981347 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.074353904 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.080274638 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.072839995 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.203382067 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075461104 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.070165231 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.164507824 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.065654024 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.157516089 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.141542559 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.177045014 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.070256097 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07563479 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.20239959 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.09076572 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.095591534 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.091247937 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.072279911 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.067472774 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.066810766 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.081427543 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.067127439 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.06772968 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.258518261 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.071395488 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.06467222 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.207960797 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.074077368 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.067921451 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.227197047 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.076230918 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.13159543 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.085185498 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.065256783 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.148361247 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.065749789 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.084592592 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.200650591 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.064385516 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.140107287 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.065321458 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.064634914 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.071038667 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.066224069 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.072140321 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.076436461 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.065132845 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.07693471 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.071023729 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.063762599 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.147549268 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.066498211 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.225623253 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.146643383 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.150343059 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.064114593 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.082308989 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.06414994 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.178528598 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.064988446 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.112133269 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.158591326 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.079896659 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.084801617 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.065215948 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.138747626 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.079314193 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.06422987 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.146460079 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.17517938 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.131782131 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.071893307 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.210238758 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.073524951 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.064805123 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.071684848 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.07227464 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.064896892 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.140915146 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.06878417 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.064917785 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.064682193 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.066550578 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.064010811 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.089892236 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.0647758 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.071352285 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.064099486 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.066789763 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.067023407 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.064590142 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.071685147 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.141242663 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.17556777 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.06994228 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.084776014 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076803827 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075474512 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.187410938 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.071232798 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.188017416 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.064963067 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.07344662 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.086262293 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.065558618 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.06997729 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.064702728 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.083701253 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.067633535 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.06618471 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.076153365 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.066030495 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.065265095 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.06566966 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.065938267 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.072838853 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.067188063 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.065556458 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.06578776 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.065299991 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.070038017 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.072193505 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.076868362 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.087090715 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.427166776 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.250728371 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.069597508 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.064488697 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.064248817 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.065548458 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.065729677 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.064569525 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.066071585 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.064644599 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.064186944 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.091422872 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.069039509 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.064221899 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.085268775 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.063387295 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.072446882 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.171425759 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.080595223 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.068558174 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.063541129 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.226759065 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.146211115 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.085271069 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.083490397 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.063696107 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.075519779 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.063755905 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.065101985 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.063766092 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.089402792 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.069003455 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.063702068 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.063923208 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.064090314 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.184870107 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.071098766 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.064045756 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.070615446 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.064298977 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.064090658 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.089604534 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.064051639 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.064046673 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.081887102 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.075618495 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.140906711 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.07499107 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.066342834 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.188864391 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.064696581 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.064926649 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.064583609 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.156315955 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076880783 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.066363915 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.064876955 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.071010783 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.072423596 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.246606486 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.069853167 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.067099629 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.071533128 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.064511453 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.064415771 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.088856971 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.092148127 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.066167493 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.067112581 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.064715507 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.064221687 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.137047291 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.071409909 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.068574879 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.148764124 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.067055458 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.07153201 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.0649258 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.419864753 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.070878306 seconds)
  done (took 38.001084329 seconds)
done (took 39.464920346 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.128379977 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077701554 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075323505 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072347398 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076004889 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076287134 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076193538 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073812035 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076119778 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075070342 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106572283 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063449011 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071124122 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078495032 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072428542 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079320402 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076081608 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078660788 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064258116 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078931005 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089281309 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077084054 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07282621 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079095303 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064706766 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072947912 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120266462 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084223526 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.068908841 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073887686 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071596233 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079919272 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071575149 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071141174 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.081433026 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069091893 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073968979 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070174583 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120189495 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.06936309 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064573687 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076803725 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071127503 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071895461 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07252724 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076066187 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069401069 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077891527 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063594088 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075198397 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.12075979 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069632062 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068918151 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072601826 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069376306 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073677914 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068836824 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075880791 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069254429 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075859881 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073497357 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072111419 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063886535 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072804177 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074138303 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071508374 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062961892 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06938926 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064092315 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06410074 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063605976 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073250044 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071198268 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069273771 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063666968 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064502946 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063743447 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076258681 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071485568 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073556513 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064776384 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069689883 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069394687 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064866295 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069783421 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076019641 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063843857 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064855692 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063648341 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079242053 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071053083 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064520575 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076397828 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069835849 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06974024 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064592117 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064343332 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070139526 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073074747 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064933616 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063579063 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070113623 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069748082 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074500371 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066251614 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070988172 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071065369 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064868179 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074885015 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07334856 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075830449 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079516826 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076206668 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078453539 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067373049 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065616692 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.237787943 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06436941 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069077304 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071438306 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.0687287 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071311161 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06390121 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062463903 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068762686 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068865264 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063523038 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063675662 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063481845 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071915966 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070360138 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062189839 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063234679 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071972102 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071702188 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062488028 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062425304 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071891897 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063665356 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.06899727 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068344776 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072043858 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062879039 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063579306 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062172087 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062664417 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062336302 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068404325 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068530012 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063681565 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071819853 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070281093 seconds)
done (took 12.715659464 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068203743 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107452272 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115870383 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109184862 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077473566 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065263694 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06804685 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083989629 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067438712 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089545146 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089618481 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085856548 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128978885 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063021111 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064318093 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064919009 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062375739 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076378649 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113891507 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088402683 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107439828 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064444806 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078294125 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084867512 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077675049 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083936176 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065852915 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065258238 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067556084 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082333872 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090579909 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064525488 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06572988 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083763272 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080878226 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073632617 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065468084 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071552113 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065535343 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064500439 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066593957 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083783721 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071780328 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072283903 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065651357 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065618195 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064841201 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072573853 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079011084 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071064305 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077730926 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082032326 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066318658 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064720318 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063065158 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072784473 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064666817 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065447558 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065360327 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064545678 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065301764 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06760563 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070528791 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075877364 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069175721 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072504003 seconds)
  done (took 6.536173462 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084105939 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092493712 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078452104 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081372332 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063832505 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064426931 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064692547 seconds)
  done (took 2.113688007 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068271265 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104901212 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111654353 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111595488 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.12150935 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.110139757 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065440722 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097609308 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064067869 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106340004 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119814788 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.114391563 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.06784455 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077176206 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065474133 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.1145235 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065782941 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072144305 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110653034 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116271883 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069640835 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095735994 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078861966 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065898951 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114964371 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.107095939 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06764542 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065813488 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067465611 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06491317 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064830147 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088195264 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106724877 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080245048 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065767513 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064349459 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104948522 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066133384 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103822277 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072458268 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104102411 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06717871 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067543818 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065114773 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066263574 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109289194 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066111653 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064968965 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064736779 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.108140423 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064664643 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.107210764 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067712582 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070335189 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072613891 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071966912 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072803617 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065881285 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109780716 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075480793 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067144767 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118745305 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118661518 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.106315557 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118924563 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075050636 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.11070265 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106961264 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065725778 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065567153 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066132207 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119753893 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069664722 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068839311 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071370919 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073893063 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.11413916 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.125048278 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.127378778 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081886088 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.236560566 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065472141 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070552153 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119491194 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069343254 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06424834 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065126855 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063942054 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069216591 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066185671 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069114188 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.0641202 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074396026 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066907535 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066253082 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.112142498 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064608974 seconds)
  done (took 9.898198709 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069767682 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066894451 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065505922 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06556162 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065675232 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065391073 seconds)
  done (took 2.000204386 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093157087 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065760271 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077293064 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065545572 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087300819 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108214419 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107821004 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067159587 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081516794 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076809768 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.108571099 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.110212147 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.110500936 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066839848 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107860119 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06691972 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109364442 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069466143 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076991636 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067612026 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079661717 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067268929 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067366383 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.117110189 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068518052 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06703261 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066733712 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077157979 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.07676633 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067541006 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067318335 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068422813 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075260395 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067496579 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.111212369 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07535778 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066385389 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070832742 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068064782 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068289282 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.113122722 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067974322 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07025145 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07079995 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067531918 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075097706 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070730547 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070087362 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.111242505 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070846707 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070651258 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069456876 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068198609 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070540897 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074907161 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067244347 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07049294 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.111203333 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067585842 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075567261 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066708933 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068601779 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067815157 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068405238 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071657992 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071122263 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075469952 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067893693 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067919203 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066718371 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071222753 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066785342 seconds)
  done (took 7.162042306 seconds)
done (took 29.270712781 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.549410083 seconds)
  done (took 2.112988601 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.978473862 seconds)
  done (took 2.584704717 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.228329702 seconds)
  done (took 11.839073695 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.389774442 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.474681359 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.768880896 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.140128174 seconds)
  done (took 3.414395609 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.878428146 seconds)
  done (took 2.490952118 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239089778 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225383695 seconds)
  done (took 2.098299462 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.45182321 seconds)
  done (took 2.052291834 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.270405519 seconds)
  done (took 2.874690783 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236827028 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162098104 seconds)
  done (took 2.01080248 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.643107226 seconds)
  done (took 2.247231298 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.581555788 seconds)
  done (took 6.190881803 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.253993367 seconds)
  done (took 1.913267669 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.238651034 seconds)
  done (took 1.848791052 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.887901529 seconds)
  done (took 4.493287861 seconds)
done (took 49.79778072 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086033474 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083873149 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08350766 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079172101 seconds)
  done (took 1.914681572 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075402922 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068695979 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071086295 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071479767 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068943861 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070685581 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071086036 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067599118 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069155596 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.06823731 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066391755 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068100435 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070662979 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067718566 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070285935 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07177598 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068076133 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068381037 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070175137 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06759688 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070572428 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067920671 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067866887 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069298157 seconds)
  done (took 3.274974571 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07908073 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069881272 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072783156 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068563306 seconds)
  done (took 1.908074344 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077333675 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074268452 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082550813 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087467734 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073324978 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074209288 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081332365 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082475214 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.087771295 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084514518 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065592373 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065332637 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064463025 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083106575 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080478958 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.059953401 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061330517 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074910406 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073899804 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076766841 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067523318 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06314258 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073956671 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075146655 seconds)
  done (took 3.404301803 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083151126 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063567293 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079774727 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088534428 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089694699 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063155739 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077362515 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.089948366 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12635854 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063608688 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069295005 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063330534 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102606334 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063297613 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078743328 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108129884 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111397293 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067335889 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096390292 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063467431 seconds)
  done (took 3.2743446 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078332259 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068094683 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068166801 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063431961 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073985405 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070310609 seconds)
  done (took 2.048380812 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069103618 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066030284 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065117279 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069931586 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065568852 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065511592 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064855153 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06359813 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063985069 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064766169 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064646427 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065164293 seconds)
  done (took 2.40662742 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215684063 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070535103 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068416393 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063739786 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065308124 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06439624 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078693105 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066700652 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081657034 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064801583 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064802844 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066797263 seconds)
  done (took 2.590702033 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106167876 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109405098 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142046279 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114100536 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112986067 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093767737 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.164292104 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.091905252 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164878512 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136349365 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115612611 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090242749 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08564756 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067943624 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099262175 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119915864 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137561521 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071277157 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11238964 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.211440383 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133161399 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135696825 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147859417 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116295021 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092207748 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147758751 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095944236 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102473234 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122636019 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128346393 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119095703 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097133277 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07052468 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069756141 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151121327 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108153362 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121304492 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092651857 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106160168 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088964895 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109766917 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069190492 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083411023 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114054885 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086879892 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135580268 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.0936823 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118541711 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083520846 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.312774785 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125993309 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134700064 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083957349 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102621196 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135451649 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110186983 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132261488 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10407811 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080236002 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116197792 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103470027 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097491313 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105958965 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077663197 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.175095753 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087086806 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109780205 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109911537 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093955263 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094089873 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105990438 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136116038 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127850434 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127811982 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141071806 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092217722 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120831243 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101676399 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128860914 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104530335 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071749874 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.123567658 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129771982 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100383776 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101547982 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134616138 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093164916 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075624359 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102596268 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121293388 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080289759 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.116293233 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081557558 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111991406 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142304838 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102282362 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117391995 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.298435896 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07668653 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151282327 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106151639 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070792228 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114154536 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110108479 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153515313 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092693337 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074057439 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097747279 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100577193 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14948212 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105675138 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077478367 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106573739 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137599341 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091664999 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.210046782 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093424417 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138472005 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109086827 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085384261 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07347305 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089275116 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113611185 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108044036 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111745043 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093715579 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.0835672 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085661376 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115204238 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09312501 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080254918 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114190538 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103913489 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074453798 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087761934 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075443753 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143012289 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077847726 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13954889 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126970105 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076415989 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108599535 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096691397 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108513677 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098725785 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121471105 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145905425 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.18846442 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09276002 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.099117855 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115107455 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.155344385 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.136259855 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09752358 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079974048 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106369204 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119021689 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103632452 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.134546407 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0999775 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115073962 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109653506 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.153266813 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16169077 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106727306 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106849659 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116501219 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.132370879 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077417027 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168732574 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112347901 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125837674 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090979794 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152804588 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.117390649 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09505006 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090833153 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105205838 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.113384238 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113045239 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155488211 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099862719 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074681522 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099519459 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.156543788 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081376351 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117081096 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094741131 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.096008561 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126218903 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.102076017 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084850841 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069843662 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138638342 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.171431048 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071626874 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1180531 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.123378298 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11084004 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.131360487 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071143359 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127169311 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145759226 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.481337946 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142454261 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168525725 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118577194 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119670017 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115034441 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106682238 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079372696 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126262258 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135850251 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096132614 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09184518 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136338213 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118753392 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137972796 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.119391281 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120631562 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107740442 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107687126 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104585581 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.106004727 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147081904 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123086468 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125883538 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083331336 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10621993 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118749929 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137700787 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081418281 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142777126 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085233735 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12133977 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077884751 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124560272 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077026907 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.16994749 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078773595 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100451037 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068623053 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073404836 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145444136 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114751319 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110088339 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103188903 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.142348214 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140992174 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079289995 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109836346 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116772661 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102813883 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.295192151 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10726377 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087277101 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093195422 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105124223 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083316428 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079918671 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113552925 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092071593 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122869182 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082023182 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0727926 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136962067 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101986736 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092955493 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074026712 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105220881 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121647785 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092173546 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086031639 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115270701 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105000242 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142553685 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090395852 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097186358 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.125519611 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079707545 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092003457 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068724281 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084967259 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075349107 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.130405816 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075291871 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118111737 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067966173 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132002164 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087791365 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.0926045 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102134093 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110372934 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127777804 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094195949 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142245284 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089390231 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121303084 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108677733 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094862392 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087086995 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103863455 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101161275 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126026526 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096811533 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127051906 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149116874 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10524146 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147014692 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.267550675 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120443394 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104407595 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121661109 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109355916 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164936321 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136697572 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109455775 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107690618 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072979988 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096233567 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102618722 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110078192 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171107569 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123784059 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070675364 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104590944 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093119498 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109015286 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103941881 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081373797 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14621939 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103154625 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087283814 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112433598 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091658783 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104353842 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075575163 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100110312 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104974882 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095232055 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097316235 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115199328 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130623279 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11331461 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145666302 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100155053 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091807764 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119184528 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111017595 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110239045 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085885466 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0865015 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140623915 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122595094 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129616581 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10237563 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111856075 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113850002 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102672637 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129546085 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.281238488 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124171601 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078158676 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074468656 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066085742 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069716257 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121076988 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105366157 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109370466 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096047426 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070136628 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10074909 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100934504 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06993374 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085553935 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091559856 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095893636 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090002623 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10804177 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.110257 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094118342 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102015152 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096142218 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148439652 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101116554 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088389652 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145244442 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152327647 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087793746 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0927927 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070847711 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078409524 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112874441 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151397062 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153713494 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07844345 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086498401 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08593763 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086387427 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070690005 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089090653 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088361742 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105629011 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098609124 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113703836 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105118493 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074722394 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103116217 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099530785 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093144682 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109162686 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123488626 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.130541536 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.146462989 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116746025 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110013292 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076530176 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.254954117 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074413437 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077652435 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099163784 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.07686198 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074166846 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140295562 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089646967 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102506374 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10577322 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085415629 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073259565 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131508789 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067313651 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132100798 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069180033 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079625443 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080071282 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076907271 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091341872 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135276455 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107630319 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111260215 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10677711 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104058383 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162554873 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159854484 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081632293 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142965932 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075259623 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075752322 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075332142 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111662163 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089904625 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114142189 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143668047 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090593041 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101983651 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077608104 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145020462 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099767392 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10484017 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085807483 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07853017 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144697294 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079103837 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081492638 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089201291 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112587666 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072042253 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103317813 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083590805 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079811761 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169020668 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.713061876 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091413707 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075939357 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097579599 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.319489945 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130616714 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093860442 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105992956 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116560975 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098588383 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092273587 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105366056 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187780921 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072451073 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092472797 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101699663 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095353661 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099328282 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096808014 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086571506 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090109423 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084839512 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077125792 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1050591 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08636601 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095325606 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107110056 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082418494 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08791156 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131648824 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104324461 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082472569 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08777031 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104756506 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087423686 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103511712 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069602173 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112607812 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088645095 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120303213 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098341364 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108252131 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126439276 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094421521 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138984287 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108402421 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123114516 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087167597 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077973234 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128371426 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090769412 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077785655 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148884449 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098955983 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.10564791 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105920632 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097429468 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115744437 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120141283 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.286929854 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095048894 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077269354 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098589903 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.100157415 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084671986 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077380351 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072423835 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074513198 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104946685 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084028411 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084544898 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110361538 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086813885 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100958279 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101095118 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119719309 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08569257 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098722808 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108759354 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089925565 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108839395 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100043341 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129124815 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176614215 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126346171 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130235288 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135737229 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.0775511 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075396824 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067991018 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113596223 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078937267 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089330119 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078008692 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135641592 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081643709 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113772283 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.241999057 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080232463 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094878433 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096967508 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068880935 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083120723 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108118238 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086791472 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079744899 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120341969 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081296315 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130352536 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112719317 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100662861 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097065096 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08186299 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117652029 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105562532 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132435301 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096532451 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076160271 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12764694 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.27624211 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135803777 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071375293 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079056711 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127895102 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101573318 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128907965 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077926347 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146699688 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139772795 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098134198 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131920531 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.593698452 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087144019 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087438655 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124082771 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081988337 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110539218 seconds)
  done (took 69.572306033 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.179903486 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.176145495 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.122194826 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132853746 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.289393946 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.298222348 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.151884855 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123180525 seconds)
  done (took 3.277144766 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069575765 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081201946 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078871486 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.242278621 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.099123024 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066422886 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071574274 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080382429 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072240898 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066026138 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103529581 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066142936 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069512464 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.539934186 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065382171 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071014754 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069481669 seconds)
  done (took 3.718593251 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.346128155 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.512939863 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.317660481 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.75412675 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.165813705 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.722259786 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.073701428 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081359676 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.928927553 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.206788196 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159227037 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087076537 seconds)
  done (took 21.155084251 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076966961 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.11882127 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117996646 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072440487 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072045865 seconds)
  done (took 2.256861438 seconds)
done (took 122.440659591 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084733691 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175324484 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066639771 seconds)
  done (took 2.06354328 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120509988 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116516255 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.11647107 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117951231 seconds)
  done (took 2.268735508 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075569762 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074240345 seconds)
  done (took 1.94674715 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225874807 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.212382236 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088935836 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084582875 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078219586 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078347592 seconds)
  done (took 2.045615999 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072041325 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.06899472 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069058134 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069184957 seconds)
  done (took 2.070001832 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.169593123 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065082783 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067369716 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069507289 seconds)
  done (took 2.163865898 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085748051 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084408921 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113585556 seconds)
  done (took 2.083019796 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084276467 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082825728 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076992507 seconds)
  done (took 2.042722139 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109829531 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09444395 seconds)
  done (took 1.998810542 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080093846 seconds)
  done (took 1.878908057 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092149589 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096058033 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.18264944 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.148695777 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.185887483 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170935136 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075562311 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07601854 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071774357 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070580668 seconds)
  done (took 2.962994405 seconds)
done (took 25.929209986 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085023846 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.190803283 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.314392919 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084191743 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.653414343 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.311837528 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.731670655 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.087995216 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098274728 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06671835 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083340479 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631661367 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.730392801 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.145494223 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.715378807 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.133578969 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560233903 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06688212 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066130661 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066614275 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715407526 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066352152 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066453676 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067012928 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558051935 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.33015047 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06741876 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.133431773 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066289922 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070400644 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.313200094 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06757816 seconds)
  done (took 14.118608117 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075932798 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124128737 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071425021 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081515553 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.06823518 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068327491 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070019091 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067071607 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109270609 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066875134 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083771981 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066264055 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071340869 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067867851 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087039539 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066836646 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068962364 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067438034 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066594042 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067415667 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085339869 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066308123 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067189649 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067090862 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066903327 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081256134 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067818101 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066624314 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066674042 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070771711 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071950819 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068089232 seconds)
  done (took 4.177671172 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.142875601 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128341781 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071912221 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106130065 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120367801 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068895612 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153935306 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088951885 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113194026 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067403491 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083969322 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066707265 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102869373 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068216554 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087383609 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066861383 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069099954 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067128471 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06663888 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067211645 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085921689 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06645036 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067166063 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06741778 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067284319 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083196901 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067996394 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066984288 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066895438 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070924477 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072719186 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068032793 seconds)
  done (took 4.47709338 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070342613 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069106219 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07520848 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078081653 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064311243 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066472935 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067616745 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064889184 seconds)
  done (took 2.377003637 seconds)
done (took 26.966097475 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079594367 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065666771 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068374744 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085167139 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071510625 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.109779093 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063006609 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07265236 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069350594 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.06961953 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071208033 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065715282 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068176912 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062947492 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069997347 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06404335 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112744461 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068319585 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110569868 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.111103134 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06642195 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069547891 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072273858 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111093547 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.11048725 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.110420783 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072955508 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069841815 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064448574 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067371178 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.183769069 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183628196 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074059212 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117057085 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064667318 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064294502 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068476976 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067100172 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.114817182 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073586623 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066573708 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073241551 seconds)
  done (took 5.308136884 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189376106 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192473974 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.18524431 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078698516 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.09070739 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078215249 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192610221 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.075885092 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.073980761 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191629479 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.069868312 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074233895 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076519275 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067241146 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074001324 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070153498 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075423989 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068186024 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.0737881 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.073695745 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.1915893 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067584473 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078690722 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07542655 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069569355 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075382692 seconds)
  done (took 4.468685208 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075456928 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088119234 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090298243 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144467567 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108769165 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081251717 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081721824 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092213794 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100171907 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066743031 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.088666071 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09387413 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094923489 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073453336 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10594625 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084511499 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078538457 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067962389 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073184896 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100434424 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089227171 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084985825 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.147650938 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086905692 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065529431 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075456432 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073678051 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082189195 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073817049 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078793163 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070276705 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069690846 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066822743 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077748843 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070709876 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064444401 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089133891 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079662905 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081520932 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106470346 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076891374 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068180388 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.093910941 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131448047 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066426371 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068988065 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070746215 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.07956509 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068183586 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097406594 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08238625 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06652465 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085764241 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068248115 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068133868 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085658335 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068524241 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068676607 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078574937 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072907174 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087642875 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072245357 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087946269 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066833335 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078389517 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068223961 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068412364 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065457762 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100913124 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074378287 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117072143 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068079694 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06457712 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079183472 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078288009 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07368223 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066498637 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086086725 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078820276 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070531256 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077761942 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069515444 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070262025 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103442441 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065744373 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064647627 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064691186 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068836401 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.0701242 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06728929 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079819854 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066398878 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070526026 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08202334 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067132797 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.06757395 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069478743 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06814085 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066451106 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077478582 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071102974 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06896092 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079916442 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068248339 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07055756 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08226406 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076302615 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066721439 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068463481 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069746529 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069213382 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072017981 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071378213 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069511702 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072175845 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075025769 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074035232 seconds)
  done (took 11.046369734 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.207230681 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.194918851 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.0677857 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190622236 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075527221 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.124772296 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192271485 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.193927298 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067684645 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068145067 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066316443 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.13908961 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.133230521 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.144245815 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.124976518 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069056859 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093615323 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.145057221 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.197244069 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.191681095 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093320365 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075116772 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069624423 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068636569 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068637628 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076439371 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083077932 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076117358 seconds)
  done (took 5.183293134 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075274337 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.110137548 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070017263 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090383941 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083216665 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066315913 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068806166 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067669077 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083541857 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072739449 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066423596 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071100217 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07008046 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067220088 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067506502 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072965002 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073105973 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.074004098 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.069991322 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075999789 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077716714 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154592639 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071213139 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067022346 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070021077 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066993007 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073449592 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075293458 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066466044 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.072339204 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063607869 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070690478 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081114631 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067570506 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066617209 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067734766 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066989225 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06686423 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067410222 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065029525 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06492375 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072931577 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06574022 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072296368 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081327588 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.070168507 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068471667 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069371177 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069378616 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063840397 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070597063 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070340942 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069895379 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075819726 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070752238 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069393445 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068818692 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098187491 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073156789 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066580559 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066990355 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06549928 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068612092 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075398246 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083916508 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068861627 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065337006 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067201691 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077712697 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081542861 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066807216 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072551668 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064163947 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067123567 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069471975 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070091458 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068753914 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065479395 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067532314 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067382089 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068086267 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066964682 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067430856 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069982166 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064814278 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065470535 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067969995 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068635459 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072773511 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066003832 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.06984559 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068856775 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066320017 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070510395 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073615216 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07089706 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088161256 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075935814 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068040878 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065277009 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08241573 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069149027 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066502359 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071139901 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072094315 seconds)
  done (took 9.43796553 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09781868 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067654402 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086180627 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097780137 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076413265 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071192989 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080364742 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066908329 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087974697 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065313299 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075136055 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064629669 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080039028 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075719863 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067880918 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076886037 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068848961 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087631982 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081385036 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064924085 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075434076 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078771472 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.0788281 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084880545 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084373667 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085240961 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078756237 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068753485 seconds)
  done (took 4.067657678 seconds)
done (took 41.322797258 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.910157018 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.102277214 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.901573733 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.396802519 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.962989366 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.008642166 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.987969438 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.88904214 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.592343258 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.967821126 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.681381296 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.559594401 seconds)
done (took 68.860707287 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.108952397 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.049235367 seconds)
    (2/2) benchmarking "String"...
    done (took 2.129884657 seconds)
  done (took 6.066134628 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.326053098 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.888829977 seconds)
    (3/3) benchmarking "different"...
    done (took 1.927792483 seconds)
  done (took 7.966974674 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.209347033 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.824220116 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.168111457 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.88743386 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.897084117 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.374505971 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.060864747 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.529852771 seconds)
  done (took 33.577188671 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.896640232 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.282267823 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.294699123 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.365784848 seconds)
  done (took 21.753416401 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.332709789 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.305444497 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.305545213 seconds)
    (4/4) benchmarking "different"...
    done (took 2.590370959 seconds)
  done (took 11.456262648 seconds)
done (took 93.121836004 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.890863432 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.05224166 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.892671363 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.063823945 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.914832574 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.919043494 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.898078463 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.933694609 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.896352513 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.953094368 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.934835597 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.931188814 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.95373356 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.933392381 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.974720126 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.973251037 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.189064725 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.900886614 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.924137105 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.627048595 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.231813453 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.897843684 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.895678095 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.950853526 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.295879589 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.941323881 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.46151976 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.275908316 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.927072923 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.286148752 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.274459927 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.274379115 seconds)
  done (took 210.295722888 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.274217744 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 5.165518217 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.194182076 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.306041603 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.570167771 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.544573182 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.04985686 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.5931379 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.205477685 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.235261016 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.169929608 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.20288947 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.210206674 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.747942423 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.239069061 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.257337664 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.066837009 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.969465964 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.239331617 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.113529571 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.217362661 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.740846752 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.723391975 seconds)
    (24/36) benchmarking "symv!"...
    done (took 4.007143652 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.397914825 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.059043413 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.903083746 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.902730401 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.393125535 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.684825069 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.897915405 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.913779246 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.066036493 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.12478419 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.896754768 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.945623003 seconds)
  done (took 190.442352226 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.502873304 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.28492801 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.320515929 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.391331595 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.36421098 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.193424503 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.269840153 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.270670568 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.277381765 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.284129688 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.279605256 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.350629475 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.279546808 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.348505143 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.410697926 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.196161062 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.201071946 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.35744264 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.207780686 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.199044402 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.204186154 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.33099804 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.548016277 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.548021307 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.20538634 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.213662137 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.316851893 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.206485022 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.207240718 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.201977808 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.320169101 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.204321403 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.334857154 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.31449751 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.058675476 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.383241758 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.15332503 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.464936144 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.063935221 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.946788125 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.89759641 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.943237236 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.927962817 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.953443796 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.001399669 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.90125817 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.912029243 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.350109853 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.495486988 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.901606935 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.895125743 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.893558342 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.903479852 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.895920238 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.026747996 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.901931054 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.92796877 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.436041512 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.898163214 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.894090941 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.894579259 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.894161832 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.894566143 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.900560447 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.935872222 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.507648968 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.626340531 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.250759411 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.628500283 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.898660931 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.894199291 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.893175124 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.579472134 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.962216861 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.897199408 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.893702977 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.070898453 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.91475198 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.912606207 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.932319603 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.843405526 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.900513972 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.003994078 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.899524353 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.895032472 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.34024215 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.29996892 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.90269105 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.914052437 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.95754582 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.899676189 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.895228583 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.901577631 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.832666764 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.901625266 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.911093691 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.064367779 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.900858159 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.895485982 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.341128907 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.26158042 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.900021565 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.987945541 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.298770332 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.660892243 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.906682219 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.896882415 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.915130281 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.898444442 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.9099225 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.916977982 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.898589658 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.89773459 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.902381533 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.89723144 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.896551981 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.89917303 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.915821439 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.89895566 seconds)
  done (took 434.5545806 seconds)
done (took 839.75657368 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.562976526 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.637284229 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.488608348 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.551520551 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.501966642 seconds)
  done (took 14.57627954 seconds)
done (took 16.408453628 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.269710103 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.014268372 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.992500377 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.48580145 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.102249049 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.06270937 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.095063899 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.185328121 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.119787111 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.056933359 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.118162176 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.070463333 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.170881585 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.14968014 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.166645586 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.183745744 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.093862539 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.606227795 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.138829877 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.070005044 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.088030686 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075412627 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.053426839 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.125447821 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.16006873 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.093571288 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.31558899 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.138418212 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.103061852 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.15279899 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.16455085 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.174452613 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.105252296 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.140366871 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.162695489 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.163451236 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.100139624 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.165994816 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.072326922 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.106540805 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.126836833 seconds)
  done (took 96.777340694 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.211945988 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.078732361 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.172922041 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.191125023 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.935910248 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.18245672 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.279050228 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.067061839 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.069215066 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.185462175 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.199307357 seconds)
  done (took 27.439459767 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.050642259 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.076174519 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.181208232 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.211882966 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.299339437 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.196999515 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.247881699 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.061824478 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.074018976 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.196286688 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.20702149 seconds)
  done (took 26.660465929 seconds)
done (took 152.713232292 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.452504261 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.960748951 seconds)
  done (took 6.250719565 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.923741626 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.903094235 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.903835558 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.90482889 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.90354691 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.90475711 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.081208732 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.905351903 seconds)
  done (took 17.268378031 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.903762764 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.903605233 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.903779764 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.903410343 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.903890915 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.904209831 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.90365253 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.903839411 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.903514326 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.903993278 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.903789249 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.903821515 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.904581356 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.904405391 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.904420362 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.903322742 seconds)
  done (took 32.300458204 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.903813518 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.904618576 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.904302402 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.903367697 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.904290929 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.904634831 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.904274625 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.912577812 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.904326136 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.904232803 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.904397703 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.904708916 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.904203264 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.904528938 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.90474933 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.904094011 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.906296674 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.904158149 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.905367006 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.905104375 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.904378785 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.904978271 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.905369675 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.908411778 seconds)
  done (took 47.559964437 seconds)
done (took 105.234437756 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.512126212 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.901910219 seconds)
  done (took 9.253600917 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.90926845 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.904841634 seconds)
  done (took 5.75410549 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.905235928 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.905583588 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.905486088 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.905199747 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.905060782 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.905083119 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.905355803 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.905529034 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.906121277 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.905633994 seconds)
  done (took 20.894774607 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.905678894 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.905480637 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.905777479 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.90548854 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.90614332 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.906253692 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.906373358 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.906388387 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.906600656 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.906403779 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.906552636 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.096910492 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.906027802 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.132697773 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.906523036 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.906411963 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.90598084 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.90702882 seconds)
  done (took 36.569988718 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.907058422 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.906310652 seconds)
  done (took 5.65523917 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.906653281 seconds)
    (2/7) benchmarking "second"...
    done (took 1.907577733 seconds)
    (3/7) benchmarking "month"...
    done (took 1.90730429 seconds)
    (4/7) benchmarking "year"...
    done (took 1.909526707 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.912919421 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.907238322 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.9069234 seconds)
  done (took 15.200018197 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.366848476 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.073038361 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.126075981 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.38212671 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.549026083 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.820619874 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.552826024 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.814709841 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.703453842 seconds)
  done (took 24.23124682 seconds)
done (took 119.397528664 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.589947097 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.910733301 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.515977282 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.127803093 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.921571312 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.266153269 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.930445657 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.432842497 seconds)
done (took 44.560361017 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.919734193 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.90422191 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.945816309 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.94651349 seconds)
  done (took 22.640024286 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.913846169 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.571273339 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.944182132 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.953510097 seconds)
  done (took 23.314265372 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.413375806 seconds)
    (2/2) benchmarking "read"...
    done (took 2.322272517 seconds)
  done (took 6.592748549 seconds)
done (took 61.308502389 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.90847653 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.908686484 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.908674689 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.909146951 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.908523239 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.909034814 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.909804206 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.90912932 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.909460105 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.909047583 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.909144558 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.909681429 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.90911166 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.909376704 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.909038967 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.90944011 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.909818266 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.90982636 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.909752117 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.909594794 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.909572448 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.910240705 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.909859304 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.91000488 seconds)
  done (took 47.668685511 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.977254553 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.966083779 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.978069258 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.969972899 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.998819624 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.970883068 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.972488776 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.948936255 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.97837409 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.960554635 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.948507414 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.996013897 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.950058802 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.997145519 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.949256824 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.996127971 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.9791728 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.954449467 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.949109341 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.99906012 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.971792974 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955316286 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.996628752 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.949891929 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.990966775 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.949607253 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.959497096 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.969414894 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.943615614 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.996147096 seconds)
  done (took 60.968318215 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.943688998 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.911351171 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.910521703 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.993875404 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.911011559 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.911195186 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.911501058 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.91137904 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.911287545 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.91169761 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.910957642 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.91127218 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.911546026 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.912367874 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.911922046 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.912144067 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.941606999 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.0880415 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.912081039 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.91199899 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.968596299 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.912595093 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.91197784 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.912173467 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.912030113 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.912499469 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.912438864 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.912250039 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.912091367 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.912383206 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.913274008 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.96128318 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.945655621 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.912864498 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.033402063 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.972324599 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.912651009 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 3.429734851 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.971069129 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.948811672 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.913129707 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.913180673 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.914232562 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.914048449 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.972140182 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.913691556 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.913351338 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.914081341 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.913686394 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.914199659 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.913599464 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.913925795 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.928618741 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.914096692 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.913719633 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.914329686 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.913394875 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.914167898 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.913802207 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.914740659 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.914589201 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.986131572 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.914630393 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.914058433 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.290689582 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.914454213 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.976815466 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.914712982 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.914724036 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.128384112 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.914513754 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.125801782 seconds)
  done (took 144.839312336 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.914795238 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.914907176 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.993112152 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.991582947 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.914815863 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.915576493 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.914806863 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.914747469 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.581210183 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.915039545 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.915170865 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.91502063 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.58223921 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.914814434 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.915430798 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.993250784 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.915093621 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.915494199 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.916063271 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.915268106 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.915644048 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.915498077 seconds)
  done (took 45.549812694 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960198202 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.930976952 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.952199916 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.931120242 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.931469066 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.931247976 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.955256429 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.931553917 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955944495 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.958588591 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.952635114 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955552212 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.93207613 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.95204449 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.958343906 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.999662987 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95651715 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.996861078 seconds)
  done (took 36.992930406 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.091900649 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.082156659 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.994229359 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.962476364 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.169325932 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.142603192 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.020223695 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.088507074 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.958925969 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.082513479 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.088202384 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96144146 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.142883675 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961262199 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.957072137 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.170345737 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.995024407 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.961023747 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.02718944 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.020547822 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.094995074 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.026336582 seconds)
  done (took 46.85173839 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958303274 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.962288932 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.992206838 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.992108755 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.91846665 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.917959998 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.97568859 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.962513318 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.933005487 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.959628032 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.957205067 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.918573037 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.003641667 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.971559231 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.002845803 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963087877 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.960983467 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.97189545 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.959896653 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.918430191 seconds)
  done (took 41.053482733 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.919188477 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.91922446 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.919334526 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.918832153 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.919381934 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.919700455 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.919379494 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.920136994 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.919581163 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.157514288 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.919699592 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.919385617 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.919469537 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.920069861 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.919203575 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.920009003 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.920327224 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.919472482 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.919712883 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.920891578 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.15811837 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.920101386 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.920137394 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.91998139 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.920119237 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.920129114 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.920519747 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.920733176 seconds)
  done (took 56.084832529 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97838989 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.958581199 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.958006797 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.038325438 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.038063534 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.95836821 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.038684422 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.038682447 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.956942111 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.956118994 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.00623528 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.957620312 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.959929929 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.956593872 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.959730961 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.006898138 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963070916 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.039213084 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.995581189 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95929216 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.006841946 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.957281375 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.007387527 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.961356845 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962295699 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.007237222 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996663924 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.081884405 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984084687 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.958082619 seconds)
  done (took 61.502916903 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.945793423 seconds)
    (2/2) benchmarking "in"...
    done (took 1.942569286 seconds)
  done (took 5.744581503 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.921651902 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.016733443 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.921725478 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.116567094 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.086045039 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.096640857 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.084406972 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.012388592 seconds)
  done (took 18.112584499 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.921848197 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.396382513 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.93108381 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.922455288 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.922169005 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.458716344 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.837978426 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.807787906 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.691067956 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.800248822 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.090604668 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.470750953 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.953676 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.254097091 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033306245 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.747405676 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.149337138 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.469942614 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.96747554 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.036707066 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.6613011 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.008773978 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.923942352 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.924314327 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.923482111 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.865250039 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.91248813 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.325520959 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.057822019 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.036632285 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.693454845 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.988566905 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.925406256 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.167517323 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.030559457 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.925452268 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.103986566 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.020933248 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.925153519 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.924749456 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.711599854 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.607411254 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.167904665 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.131415662 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.002355168 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.925333857 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.924676459 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.925659958 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.188957411 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.575037315 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.957531202 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.923530304 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.059753265 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.92660254 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.486837125 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.063405861 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.926771595 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.867824361 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 6.614957534 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.15170896 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.29496645 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.16596286 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.033118656 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.043709502 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.926375089 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.145606183 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.803235379 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.766032607 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.661583711 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.029136179 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.503273768 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.935810117 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.926697872 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.925808724 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.907030037 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.302778122 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.9591299 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.927420213 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.927348068 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.928149708 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.170753687 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.034632023 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.756525054 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.063131915 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.13457335 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.4822847 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.045197414 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.928327961 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.559797998 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.800801355 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.096743322 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.622915008 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.119123092 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.062619851 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.920898652 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.16389188 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.961259677 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.928481956 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.770291046 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.433127273 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.076901377 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.928601431 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.300433093 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.020260905 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.964599672 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.92926285 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.635248102 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.045851727 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.03947112 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.96037635 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.929078014 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.928675791 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.548717852 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.104014189 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.963341124 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.434280114 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.967009914 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.375388552 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.302527581 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.111180186 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.276869842 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.884793764 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.188749275 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.809895049 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.965111126 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.29651071 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.926277179 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.572700435 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.205944654 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.04545852 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.777653023 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.968900485 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.930465563 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.120689442 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.991669247 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.931152551 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.930801294 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.930975493 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.931265247 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.930323953 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.041547429 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.300435453 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.601591372 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.069719693 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.160232791 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.050071364 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.791331773 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.132924911 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.61096537 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.067704106 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.931822708 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.522761172 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.317384829 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.625113596 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.050671107 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.932332255 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.93164936 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.75108108 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.903463714 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.021865875 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.932594017 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.57137392 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.108156586 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.967907388 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.932605286 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.390320561 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.068273514 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.93271749 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.038576754 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.717178289 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.651943186 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.076682151 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.236061765 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.047129585 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.933502453 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.933401229 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.933367792 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.718199396 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.591003936 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.165788251 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.559460941 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.814462754 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.009408658 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.079605836 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.018347581 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.198880944 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.144897461 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.072466443 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.934741429 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.934318585 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.934457869 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.447709627 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.893975016 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.91229639 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.930826899 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.976677467 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.995209438 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.100055731 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.776744832 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.943444474 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.666764675 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.897263091 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.030608355 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.936086384 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.935750232 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.076102308 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.106431331 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.072806675 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.358633841 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.085658681 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.935687832 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.609327506 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.055637126 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.581301072 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.034360701 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.766923656 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.023210589 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.054599737 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.071818119 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.625111911 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.042884679 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.936361017 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.689033547 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.060398339 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.937082924 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 4.006766761 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.478857672 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.873155479 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.667174006 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.464126288 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.013385755 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.472812663 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.178400702 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.075491437 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.74466807 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.030900016 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.196398117 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.050165017 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.550082119 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.946525243 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.706922939 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.946283001 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.523430739 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.078252457 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.932677724 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.052719733 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.375428837 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.047705019 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.939655441 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.103018063 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.024693239 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.615121535 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.058042742 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.049449481 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.238757109 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.801863512 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.031991505 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.205797598 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.051131254 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.886638392 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.874519246 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.267150214 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.836579624 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.962679567 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.105073618 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.744757263 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.120017154 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.273954707 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.074809275 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.940713553 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.940203966 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.114735914 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.018459016 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.940405463 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.266891074 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.880219482 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.01724251 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.10642367 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.975389289 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.941037985 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.18140923 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.080592485 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.224033386 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.396131943 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.494748635 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.753878752 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.059437506 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.620264159 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.050263292 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.659063513 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.115100713 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.976294796 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.616865188 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.060032279 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.227774173 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.078558232 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.063170938 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.677283668 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.056026235 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.218863424 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.07763795 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.05656087 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.708441507 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.462960896 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.179777178 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.343221826 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.962313496 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.513043662 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.074622202 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.516305484 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.000881609 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.703802128 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.107455358 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.988292541 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.942450751 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.942992398 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.507645339 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.975834558 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.979311737 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.727970985 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.517207518 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.976209355 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.696638744 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.12042792 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.979131518 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.943309342 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.943734287 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.88528055 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.130838378 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.285645515 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.062350658 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.943995517 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.9435622 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.910158934 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.271602791 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.717977672 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.826211007 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.888787557 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.079124226 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.945620495 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.944431975 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.945181511 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.944672676 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.944509793 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.944588243 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.336037133 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.101140367 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.580075555 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.124307354 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.980596016 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.146101505 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.999014925 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.945289268 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.147619912 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.011654851 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.045056724 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.011007124 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.945424286 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.343007378 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.082642712 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.954426027 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.314411036 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.206016594 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.160964681 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.505924606 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.968767853 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.352292576 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.28262316 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.785119617 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.991916974 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.965693365 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.150813414 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.88848805 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.101165093 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.584920145 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.61699923 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 4.121182472 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.350365897 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.904691569 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.421153638 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.219366071 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.04994188 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.021061966 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.031085499 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.039497778 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.234418754 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.051312094 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.315562493 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.187555728 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.017600625 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.391040073 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.054162531 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.195412753 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.979882861 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.983525913 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.980740019 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.988388014 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.462766285 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.91716851 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.05131741 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.99909484 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.934173454 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.964645076 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.89796101 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.667705747 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.970947966 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.158555685 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.021102064 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.197631546 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.046746019 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.859803581 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.018114629 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.781063815 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.314698642 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.035281432 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.180903443 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.386558056 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.809380091 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.372613054 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.090659802 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.969934491 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.340829567 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.973566232 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.112348007 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.903683892 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.352884994 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.602515807 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.491434923 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.365224515 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.163080232 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.937142093 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.638568207 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.027642473 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.024119484 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.848426048 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.147533325 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.317902486 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.995226333 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.249698419 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.116253208 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.689379456 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.822594631 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.184532381 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.585144161 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.133522319 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.964578762 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.602582959 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.065461696 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.294773043 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.106039093 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.968889644 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.989086798 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.679717416 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.55678094 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.427422638 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.059546908 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.967838978 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.82256676 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.73633691 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.237904484 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.024747977 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.040410894 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.492812843 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.997349371 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.001193021 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.412343781 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.640690257 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.176587327 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.516910168 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.165931845 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.157092402 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.244569046 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.362117646 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.150530228 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.021176523 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.970811056 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.971049505 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.969030129 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.414418909 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.153769695 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.008637449 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.609691714 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.156116232 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.804557738 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.875334903 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.191982237 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.056374399 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.45305345 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.192106922 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.517899011 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.949458602 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.195342751 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.358508282 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.138988978 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.113144667 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.687415849 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.067486604 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.991661478 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.965217379 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.351527202 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.304009793 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.375321004 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.287808401 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.067528117 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.726724631 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.073855375 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.655582585 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.213031182 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.038460445 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.554847701 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.205354133 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.435863592 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.187024119 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.45829922 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.101022877 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.340489013 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.386447731 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.114080973 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.031227899 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.0339404 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.062054307 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.051879528 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.631611914 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 6.014748371 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.480907445 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.096342734 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.841161262 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 6.644560705 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.711445416 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.356774014 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.270435475 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.416407494 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.98828316 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.948638512 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.387285295 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.077246372 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.181176836 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.12563335 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.804824803 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.024058925 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.977674577 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.426127934 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.152489097 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.995201545 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.994272378 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.931203013 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.991259085 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.196166831 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.237615055 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.226515139 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.116732857 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.660979834 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.284462018 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.057036264 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.038124484 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.026676894 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.89591018 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.131567476 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.022751779 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.352983873 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.166315233 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.329557244 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.869853295 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.563840832 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.149187317 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.980261678 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.960008896 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.698925234 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.432761738 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.167834416 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.327369016 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.095987795 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.56725571 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.002330748 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.447313702 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.458070831 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.953060568 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.073853756 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.96063626 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.031557489 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.872999919 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.998419751 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.722833735 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 6.478069199 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.041664151 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.760013369 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.953083983 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.009833573 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.123211126 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012440344 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.960342098 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.960426151 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.960874053 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.477491106 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 4.012403865 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.998557536 seconds)
  done (took 1946.946580933 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.230753743 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.96110448 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.961258891 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.961360383 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.961157392 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.961579556 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.961139713 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.961050788 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.960422115 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.961374345 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.961392865 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.961494325 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.961620849 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.236307207 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.961331557 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.96124163 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.961230842 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.960904857 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.961146905 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.961042354 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.961506522 seconds)
  done (took 43.623719832 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.960480341 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.961812374 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.96165858 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.961983153 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962132941 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.96251527 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.962252205 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961917877 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.962185441 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962322821 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.962445357 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962444913 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.96196637 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.964807479 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96217669 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.962554186 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.962542188 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.962599937 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.962404187 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.962448856 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.006632916 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.982757553 seconds)
  done (took 45.129737351 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.965207121 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.963056354 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.69818325 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.077450544 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.963277895 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.964085018 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.963647366 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.151514475 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.977320447 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.88138792 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.466893413 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.064028502 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.001701143 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.131096769 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.056360404 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.963783513 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.083548078 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.965068156 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.964437267 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.963731113 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.96442311 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.203947416 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.090657105 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.96422228 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.797864298 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.103184625 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.964707929 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.96414428 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.964634472 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.969430605 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.12741896 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.000401145 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.816143901 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.716594019 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.276903591 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.882885822 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.140404289 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.001102219 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.96542424 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.96497547 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.199240629 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.807292764 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.002533651 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.965713715 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.254491745 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.072050907 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.96604686 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.348579522 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.067679901 seconds)
  done (took 131.725495377 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.005016126 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.085974653 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.024118944 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.964702579 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.082737619 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.965092554 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.025177335 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.966038727 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.965372739 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.965042004 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.093605896 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.107379396 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.966225136 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.965552327 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.047112129 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.965538729 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.96615395 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.96506718 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.966225856 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.965534636 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.966426487 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.015889152 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.075379894 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.104953352 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.96649458 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.965567364 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.965688888 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.966420252 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.103627727 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.966671171 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.966548533 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.966580529 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.088073793 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.069785798 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.966625144 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.966288496 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.087316354 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.967233363 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.967009505 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.967094156 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.966803545 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.967338086 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.022776142 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.097049706 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.967285762 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.061939804 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.966784206 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.967391468 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.099604824 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.967862282 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.967956524 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.115313509 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.967753789 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.96769431 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.967505555 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.079829635 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.967733992 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.967148394 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.968524082 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.097986462 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.968613281 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.967912556 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.109553939 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.96809598 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.968471421 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.115756444 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.065058684 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.968162929 seconds)
  done (took 138.355038282 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.969727396 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.105322373 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.144409682 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.145750311 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.105955226 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.090064027 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.108866118 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.105318915 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.105364802 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.108512439 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.105615808 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.070374098 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.075905191 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.069666754 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.111584434 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.090705672 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.091039785 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.091607497 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.10953712 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.108582607 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.088595112 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.144241703 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.109036687 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.14616145 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.327772699 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.076320281 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.10620913 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.109163156 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.149409424 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.106518665 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.325813792 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.109400709 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.108055274 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.149113388 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.324934891 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.104186767 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.971114334 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.106847353 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.111433049 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.107232508 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.076926524 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.148093943 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.104134185 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.077656169 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.092390706 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.104513331 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.147629575 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.325433253 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.072431455 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.110246268 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.111584005 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.148552753 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104697085 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.090523252 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.148346789 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.075443675 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.146478087 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.14913171 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.112462852 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.146496415 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.147381782 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.075559998 seconds)
  done (took 133.314621194 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.971431566 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.971931804 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.053410518 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.971434747 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.971609224 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.054305062 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.971507351 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.971976001 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.972347214 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.972492645 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.971649752 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.053986234 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.330492859 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.971782664 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.055146016 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.333385503 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.054586438 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.061102609 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.001272521 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.07547917 seconds)
  done (took 44.696878247 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.001556339 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.055038581 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.019264083 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.168868271 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.025692089 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.151616938 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.006797559 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998342822 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.992222058 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002214037 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.02990118 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.011902884 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972486418 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.130658571 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.973260744 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.107437345 seconds)
  done (took 34.611266204 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.973893878 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.973248646 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.974180237 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.999942223 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.077422079 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.044129448 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.022713428 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.027851865 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.043301936 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.511767477 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.986043513 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.978468646 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.987463423 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.038567396 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.005634984 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.273727764 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.304516011 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.300400539 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.310446073 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.304823077 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.870744104 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.299907685 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.24739563 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.110288973 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.120191719 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.684750897 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.061260252 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.976484078 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.975378951 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.990950302 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.974377871 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.446317324 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.975154925 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.975031986 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.974629295 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.974962711 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.973945438 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.975155619 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.974421092 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.974634949 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.974209735 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.974943821 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.975701286 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.975176668 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.975293497 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.975574186 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.974963288 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.431442085 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.975568124 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.975614329 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.975950778 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.97546586 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.975696376 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.451785541 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.975619246 seconds)
  done (took 117.165023988 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.020155928 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.028794053 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.975026644 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.975523596 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.030629888 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.019909024 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.019563942 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.991072302 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.015057779 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.975804529 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.041797466 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.991205384 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.014976373 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.029278706 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.04103235 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.020144912 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.975946451 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04399719 seconds)
  done (took 38.11785473 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.975426809 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.031057701 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.024137571 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.977038723 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.976608097 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.001806065 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.198531783 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.342626647 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.344032061 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.351503746 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.348849246 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.344958525 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.351030356 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.349496625 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.353926927 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.350886604 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.350915061 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.35033271 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.347839086 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.34813625 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.348127586 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.345658954 seconds)
  done (took 51.321357465 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.96915989 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.953693361 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 3.130208283 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.557342349 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.621343567 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 3.16310533 seconds)
  done (took 20.671882291 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.435315143 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.412492703 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.393688011 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.398912147 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.419311749 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.429993239 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.424704104 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.439974009 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.410914843 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.646659676 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.43305202 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.41562293 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.409374393 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.482606723 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.413261841 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.41612245 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.438682205 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.435121993 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.391574221 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.431544097 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.439386556 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.417459971 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.443197896 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.429705154 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.440121177 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.475441859 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.409779278 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.653654307 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.427496584 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.415507205 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.410976481 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.44392202 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.419930907 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.648710904 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.403044149 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.414239804 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.440930449 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.436100872 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.411149894 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.473568602 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.393268804 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.41554205 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.412907302 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.444270576 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.420729495 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.442360774 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.439112606 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.450379546 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.44161699 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.647260596 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.419328322 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.471407629 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.421089096 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.423648593 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.413294381 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.635845221 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.65123764 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.474777607 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.414859817 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.654694315 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.47772924 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.422234477 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.476299453 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.660236223 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.419728158 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.479613283 seconds)
  done (took 164.43586458 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.4560977 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.345181115 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.346275912 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.516188753 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.303408669 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.247436966 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.202615072 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.169769826 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.146890485 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117952761 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.181569539 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.316151407 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.363454464 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.386174714 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.343432456 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.429866366 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.363007337 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.345031452 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.370534741 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.607314613 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.367193626 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.411381855 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.381791491 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.419698239 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.598162618 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.35069441 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.346392923 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.360253347 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.381499197 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.393395831 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.368549782 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.395564276 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.415405642 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.322347411 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.415022786 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.346157783 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.378651764 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.411321599 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.366108679 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.36389174 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.413625114 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.369232686 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.373151726 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.36094996 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.592171066 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.37195715 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.365965941 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.356062594 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.396235033 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.346663227 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.582175227 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.574341633 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.586247563 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.429335871 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.37740273 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.385307992 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.383058257 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.35063687 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.361753025 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.381496794 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.419158139 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.380658573 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.563654517 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.346135783 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.381857821 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.425431978 seconds)
  done (took 159.49627014 seconds)
done (took 3636.824293599 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.340862671 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.395067652 seconds)
  done (took 16.975618853 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.289178917 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.286271434 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.464897278 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.309241951 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.343080965 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.300866046 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.37615468 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.30103207 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.315330575 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.396517485 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.28298571 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.406738387 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.400119489 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.300102712 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.369089948 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 2.296019589 seconds)
  done (took 59.705966973 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 7.308417081 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.837760468 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.31288409 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 4.066304128 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.342609721 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.98370279 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.462186892 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 7.025661446 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.572666136 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.757576524 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.575822774 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 6.213250822 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.291230189 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.336222655 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.915215475 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.82256933 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.864283334 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.943939007 seconds)
  done (took 82.862857346 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.31845083 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.380773979 seconds)
  done (took 11.907806956 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.308819813 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.306415836 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.320446 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.299380481 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.31959536 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.307562405 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.350247582 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.294161977 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.320550311 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.333117096 seconds)
  done (took 75.382866598 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.323829237 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 4.944222669 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.836731671 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 4.481491255 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 5.293825282 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.781043261 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.465205189 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 3.096975407 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.393213604 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.280780594 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.300730018 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.880761518 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 4.304810829 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.37297049 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.862202691 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 4.201030656 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 4.264520621 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.711879187 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.662213739 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.734639602 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.970643604 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 7.290134946 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.659343418 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.077120282 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.312086255 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 4.90879006 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.791437716 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.484299887 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.373695689 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.259658888 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.418350978 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.489152145 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 7.265128273 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.444920096 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.677990382 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 3.97720722 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.003286608 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.506026678 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.692259962 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.729343413 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.685528748 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 5.224993775 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.413319305 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.172007698 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.511749311 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.551670615 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.196205378 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.570353007 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.395922813 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.468165117 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.809668268 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.47763833 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.477633381 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.417065946 seconds)
  done (took 228.102954023 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.301808819 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.772247358 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.445964944 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.296458391 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.666956302 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.467448433 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.063302626 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.773775639 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.277751229 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.547974607 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.50598402 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.410059116 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.264516233 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.338514153 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.273533846 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.316918994 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.429571043 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.656612161 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.1246443 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.124400054 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.341039712 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.367540941 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.203634513 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.102187522 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.292350483 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.323640207 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.448875728 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.19293509 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.440425474 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.038925105 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.466161994 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.430981504 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.352033826 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.258192094 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.620484329 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.57576681 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.697760692 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.261448412 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.010539262 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.295510515 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.87536654 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.462473023 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.624564351 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.435827445 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.387855879 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.492595004 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.928713358 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.162227298 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.859367109 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.339109495 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.368677825 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.369659798 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.443720263 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.16823854 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.519826298 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.05264527 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.045918455 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.266102244 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.14394348 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.158359474 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.998468171 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.993706371 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.993557914 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.228253927 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.015323243 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.107775479 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.000703775 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.334812189 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.405330441 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.298157295 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.353443249 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.471390648 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.50743123 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.242230544 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.648663515 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.453369701 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.661236676 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.559999248 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.381032268 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.266724852 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.499757206 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.575691597 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.416409888 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.492993366 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.420532884 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.342354558 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.559515413 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.993949651 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.235166358 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.210597682 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.21816335 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.143427253 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.37622694 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.909400277 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.333310374 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.354447358 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.649509824 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.479345275 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.356928958 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.707951624 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.49351696 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.948286803 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.43904379 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.831077684 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.439979685 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.248668398 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.959601508 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.357010634 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.45635647 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.615241644 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.35572434 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.250146561 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.48914084 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.992275106 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.235847155 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.662590532 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.676868786 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.327200347 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.429944659 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.256005752 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.349815302 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.958064298 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.462041914 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.296841249 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.421234605 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.329463981 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.222781526 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.038137847 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.334073105 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.236902584 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.357607352 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.320365514 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.999594312 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.045688975 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.283070031 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.041216225 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.342169362 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.521640129 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.288854032 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.485645312 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.219347916 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.507989224 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.452027145 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.70008259 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.375564696 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.535221697 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.525506639 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.81468735 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.343682372 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.400742438 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.324366169 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.336611972 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.435680703 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.345085128 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.263449063 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.176486961 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.073673176 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.416327327 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.401432383 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.75657432 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.383905362 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.430277145 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.041302165 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.454844619 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.189599547 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.430501129 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.499224632 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.158050915 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.679425385 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.271724229 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.369245579 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.603725118 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.647113909 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.37239207 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.370573934 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.123698377 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.819576774 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.371370411 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.524058957 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.967095314 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.517665438 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.48568526 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.274320578 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.627797056 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.308158668 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.544842239 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.840274015 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.60803339 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.31519048 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.309224612 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.306270296 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.328185777 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.498225396 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.543272703 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.017532092 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.445853926 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.585834874 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.512425718 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.585045807 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.790274934 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.307875317 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.587486615 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.301577251 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.745704776 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.282678051 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.577798923 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.572266933 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.27069246 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.616667721 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.649119039 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.478346644 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.773964017 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.311728099 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.263749469 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.171477025 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.439190278 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.7466794 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.255216057 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.351333681 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.486790211 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.165026092 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.207160319 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.279220478 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.950961037 seconds)
  done (took 976.482494713 seconds)
done (took 1453.643550352 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.000872029 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.003052668 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.002902697 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.002877601 seconds)
  done (took 29.947724891 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.972472329 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.055375161 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.17442855 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.004422134 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.380641626 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.042228324 seconds)
  done (took 17.571069343 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.001023805 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.003253785 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.005521048 seconds)
  done (took 22.94441325 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.287384885 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.475774193 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.164458416 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.108157255 seconds)
  done (took 10.977319526 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.030359188 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.029945469 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.002849796 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.025642043 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.003593734 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.003216154 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.034295821 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.024879274 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.004325753 seconds)
  done (took 20.09769909 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.500044286 seconds)
done (took 110.020940524 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.272945364 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.301823343 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.009527398 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.284948884 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.144675163 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.356988946 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.116006834 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.024363054 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.303000322 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.416244897 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.513622992 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.136030342 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.491374981 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.424102417 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.291096826 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.021220123 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.019383415 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.062821795 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.764564541 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.173311848 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.741739171 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.1334267 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 7.003291922 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.026666496 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.934725022 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.155326023 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.265695958 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 8.320314236 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.112375867 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.018901914 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.104016245 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.488160904 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.28449003 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.35202948 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.097874645 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.896142283 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.425994668 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.011356798 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.272914625 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.420284153 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.298815126 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.12882196 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.166432836 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.162297862 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.37441549 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.022132587 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.980762467 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.171735576 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 3.685737613 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.162492805 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.49545407 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.009181299 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.655501372 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.072015305 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.093972441 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.10717513 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.931631019 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.461897947 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.159664333 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.318484037 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.023940415 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.004015053 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 3.019308289 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.024541125 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.004418826 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.343285906 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.43066306 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.098757019 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.503305506 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.023447801 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.016953007 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.035573962 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.697345571 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.15306291 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.006921157 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.131706464 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.329206934 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.148578601 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.126703823 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.014124586 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.782953511 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.010488134 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.315935792 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.329572548 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.16193831 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.379929383 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.525462259 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.453893042 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.45142882 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 8.299672161 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.204249608 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 9.186446727 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 8.858232563 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.163077118 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.315976114 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.88132504 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 4.07614263 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.627676362 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.309026182 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.686288591 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.190250457 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.208808925 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.790745962 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.48424961 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.972374289 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.230993586 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.332902287 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.167675407 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.42075932 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 8.358118898 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.342526286 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.70878592 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.242442916 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.215868089 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.762841183 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.18559127 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.509985875 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.588357549 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.324378762 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.180328363 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.444623213 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.214128883 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.300593552 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.714023825 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.571548928 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.390057382 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.187629143 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 4.120943001 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.208822362 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.362107658 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.20175062 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.71771672 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.690007481 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.21394212 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.502734885 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.343003883 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.173477737 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.507963936 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.240476654 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.389074793 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.520977065 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.495516089 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.331818699 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.177344799 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.507654524 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.181894289 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.478905656 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.561211626 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.322015664 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.485578517 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.277623078 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.208761072 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.115076632 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.610751201 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.865218808 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.731260589 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.417126077 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.299177741 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.702568269 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.418517077 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.993179437 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.306148478 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.228030182 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.23200294 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.200297686 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.24835538 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.181812871 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.176273827 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.445132286 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.490347972 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.681093357 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 3.000231591 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 7.19421492 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.558867438 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.343069136 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 3.034071561 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.72447084 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.195948233 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.475823625 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.652617231 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.445461023 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.196303794 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.179405378 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.214410139 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.964745242 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.217405462 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.460238082 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.842037713 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.638941459 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.625300649 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.488411406 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.212198476 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.507385871 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.410944964 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.492191364 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.406084011 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.601498859 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.337958673 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.546691219 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.313879765 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.537598013 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.188868611 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.051601821 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.519039898 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.739243286 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.573173084 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.429050233 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.350870776 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.485567036 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.187539225 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.193350582 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 9.38061059 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.478370703 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.209333174 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.179339054 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.415361462 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.836135975 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 3.257634378 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.299520002 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.681560382 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.375426473 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.361000715 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.663396684 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.207246254 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.516489589 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.340793544 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.375517446 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.455433933 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.226968782 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.324493302 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.417723772 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.346851832 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.429164059 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.005800038 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.619057082 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.235429706 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 4.679817088 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.216809807 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.312077595 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.191092193 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.202963759 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.437392123 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.346060054 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.512140837 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.364296412 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.348225688 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.185306224 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.350648099 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.593471971 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 3.005228526 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.693594255 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 3.147597799 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.203158429 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.183012129 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.577471747 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.559160932 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.245489549 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.306391097 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.730565899 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.200461427 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.381756228 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.234184549 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.185550355 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 4.054021114 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.28960503 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.387078607 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.654961018 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.156325758 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 4.195993321 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.285456356 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.610617076 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.653096456 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.202806426 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.282703475 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.161864492 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.562397734 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.524642811 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.179446894 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.350064319 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.510203878 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.245765389 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.28464406 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.109276242 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.131055338 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 3.754830117 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.423739475 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.591729881 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.127004858 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.528885822 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.091467784 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.956070647 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.060778999 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.131774853 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.37870997 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.205772518 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.465169711 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.130401937 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.29496201 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.438634109 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.20520406 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.166769162 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.40176179 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.18977478 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.191423485 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 4.251549561 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.132441052 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.024416174 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.26253644 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.03257999 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 4.082042911 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.195943216 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.164146984 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.679652203 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.492642108 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.027229438 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.158002398 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.085623478 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.358010043 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.297774253 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.417740564 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.5625835 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.489531175 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.426621823 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 4.373875684 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.664848426 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.921048027 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.538186298 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 3.32966379 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.420530143 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.136208247 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.572395674 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.815075008 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 7.41140204 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.416543024 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.548743962 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 5.985077025 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.608002278 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.441147123 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.649405705 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.413442318 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.969126797 seconds)
  done (took 1229.851846907 seconds)
done (took 1231.928008189 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.603123061 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.786138101 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 3.007559803 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 3.312517499 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 3.214673538 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 3.050889122 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.986280055 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.64701541 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.485237427 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.982348006 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.350997746 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 3.205982707 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.504773741 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.525677215 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.50488744 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.51107523 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.631216768 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.653259909 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.533987862 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 3.368856389 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.809911197 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 3.36248039 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.83736447 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.704795128 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.785038419 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.508858455 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.618442516 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.809600877 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.806368517 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.521780965 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.613800707 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.821169032 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 3.313503537 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.654951121 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.514194523 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.494579116 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 3.242306191 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.506236139 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.668023435 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.496579424 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.787106246 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.540700206 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 3.140627538 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 3.266193067 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 3.197085148 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.842090096 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 3.298035008 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.516220872 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.540600567 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.830366241 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.720222167 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.665858379 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.809378735 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.538387568 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 3.301078503 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 3.262972941 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.805139133 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 3.266421572 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 3.141103139 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.828736919 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.863937953 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.515977083 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.831128953 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.694686058 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.533218077 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.703805078 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.822836721 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.662522445 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.814862422 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 3.040586153 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.659885993 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.636355754 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.524121083 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.555420208 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.525260014 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.984088399 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 3.063519386 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 3.105088381 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 3.199870881 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.476508343 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.264910786 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 3.040082398 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.242702332 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.373276561 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.495923646 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 3.112176899 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 3.210738084 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.230782701 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.475652903 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.745471547 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 3.350069659 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.925413985 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.795180058 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.536506737 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.50706225 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 3.044535247 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 3.205122182 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.597376198 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.487995533 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.746972179 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 3.195510535 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.542619251 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.325219223 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.396833643 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.444708877 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.633374778 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.541435769 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.747118737 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.541619109 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.482169305 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.726098775 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.441006087 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.554640922 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.459571141 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.392346265 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 3.132636054 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.60971123 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 3.197760796 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.568025577 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 3.008889972 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.629780407 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.428039206 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.708244659 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.619612833 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.518498901 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.445025243 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.45788735 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.292664493 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.429127329 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.410645921 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.526022034 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.813277492 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.740643813 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 3.264454575 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.562530754 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 3.08698964 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.585675127 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.54142985 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.405900172 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 3.234423134 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.434605701 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.494153301 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.624481055 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.720640208 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.568117294 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.636277669 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.438958988 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.601292285 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.597789689 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.456076182 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.546722204 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.453872192 seconds)
done (took 443.42131836 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.673850157 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.706514298 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.629052179 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.638387078 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.693693168 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.726788953 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.416007523 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.819752791 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.45285703 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.742332039 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.574012325 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.465025157 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.708416288 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.524210614 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.708958118 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.589779433 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.430209625 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.592767382 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.774143632 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.685100777 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.38621791 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.610934572 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.455444362 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.744224663 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.364123427 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.346424823 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.671620985 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.470863892 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.624611308 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.360918649 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.355818286 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.61520797 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.685498738 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.476598912 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.759579588 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 3.317724747 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.714061973 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.467585429 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.666717652 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.680442127 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.628609262 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.126776892 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.319576607 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.391957693 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.513423428 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.663221938 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.383792504 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.61057625 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.335939527 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 3.336342304 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.64633395 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.411101859 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.429057988 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.66113742 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.573465268 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.463115076 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.826705376 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.784119812 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.696659908 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.656329745 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.701809289 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.745853188 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.726722541 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.515970965 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.377539771 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.642293081 seconds)
  done (took 208.780436986 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.756282918 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.640901355 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.783730259 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.722247893 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.893930497 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.770126754 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.86929964 seconds)
  done (took 23.689646263 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.406759844 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.390220252 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.649050479 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.555183305 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.387550589 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.531402792 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.484855238 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.378618507 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.637332079 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.438923133 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.696872244 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.6227489 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 3.316660498 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.372723318 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.44693638 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.715859993 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.381093325 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.47657352 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.467618303 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.623866239 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.342759172 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.388897048 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.651719706 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.451037697 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.379279369 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.435413882 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.433319012 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.37638164 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.430236911 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.361290379 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.381141029 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.499269367 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.388597831 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.354002097 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.401567674 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.696305026 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.399280337 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.434693404 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.556313173 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.379207498 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.382409899 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.372901224 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.536279452 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.40687693 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.360967021 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.587108958 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.382216798 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.391661819 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.401908178 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.385956258 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.656937092 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.408437936 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.397982106 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 3.331441386 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.574449367 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.367091589 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.469342946 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.386393566 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.37603361 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.432329451 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.422289349 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.668693844 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.623925853 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.356636522 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.630023157 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.684760391 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.417214289 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.376291359 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.396195001 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.618495943 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.384811635 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.570740427 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.401673078 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.473857518 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.427462779 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.506300496 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.581888466 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.181123118 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.205649412 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.285558083 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.345168644 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.391106731 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.695825844 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.346223098 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 3.312616212 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.382003963 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.417391443 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 4.052142074 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.305060255 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.390660835 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.694322835 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.370957163 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.485102485 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.447805269 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.401661027 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.459189387 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.620919024 seconds)
  done (took 266.114260195 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.732404984 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 5.00569571 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.599705068 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.620577883 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.725866726 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.894969131 seconds)
  done (took 24.875833342 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.7575734 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.286179771 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.44937241 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.392471045 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.44609029 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.361662969 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.398475547 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.634290103 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.707664013 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.439515975 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.366468478 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.396232732 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.410711495 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.570296254 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.398059182 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.361796766 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.345610058 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.445668813 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.418353218 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.474853517 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.563408798 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.420254074 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.456194953 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.320515172 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.61201736 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.433619669 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.367433222 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.416435465 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.401764201 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.837005473 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.581812207 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.409121741 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.287895987 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.939720189 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 3.24624366 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.397123488 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.65594632 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.433274278 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.482178636 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.396657853 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.426976972 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.454735575 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.384053696 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.418496039 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.830921895 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 4.401649251 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.623600668 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.711255611 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.408878383 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.432245249 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.407333469 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.394234721 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.397200765 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.402004202 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 5.335160549 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.843173881 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.496210837 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.389288863 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.479370274 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.350433679 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.642256528 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.433009754 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.784089088 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.486284514 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.402081833 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.433706587 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.342684449 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.660895634 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.513459303 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.410989585 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.419285316 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.426178825 seconds)
  done (took 210.611481465 seconds)
done (took 736.36822123 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.362820767 seconds)
  done (took 9.658397321 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.462202875 seconds)
  done (took 9.852199156 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.99925838 seconds)
  done (took 15.324103471 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.354922641 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.405049 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.384312958 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.348194571 seconds)
  done (took 31.784195011 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.439795976 seconds)
  done (took 9.71619143 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.106874231 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.101919905 seconds)
  done (took 16.419585625 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.174818581 seconds)
  done (took 9.204920632 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.442597418 seconds)
  done (took 9.473908658 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.179179771 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.484202581 seconds)
  done (took 16.726580799 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.379316319 seconds)
  done (took 9.712976108 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.21432396 seconds)
  done (took 11.532866186 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.331517924 seconds)
  done (took 9.609669996 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.331854515 seconds)
  done (took 9.578612795 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.183258605 seconds)
  done (took 10.415948791 seconds)
done (took 181.280416899 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.32079209 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.303645599 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.295340848 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.329957003 seconds)
  done (took 31.497257622 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.567436445 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.542169152 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.518476257 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.688901 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.476689455 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.485057444 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.534426043 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.525686881 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.457875833 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.571888355 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.526195918 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.580715284 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.696079543 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.508412523 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.519928599 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.496310734 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.485038439 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.43535287 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.378657716 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.404696695 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.456333156 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.42866874 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.852108825 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.842525806 seconds)
  done (took 63.244220692 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.254552822 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.525767982 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.220818528 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.360478579 seconds)
  done (took 11.347767863 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.099267768 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.417690094 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.399769231 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.458523636 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.401673592 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.282724079 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.411863221 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.231622272 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.195492287 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.336569972 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.04755528 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.579144161 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.595716716 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.749790965 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.606231317 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.434140859 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.435340985 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.574971334 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.812495603 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.652245009 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.703859645 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.796421305 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.795702246 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.794861349 seconds)
  done (took 62.812946636 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.19925561 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 3.369193954 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.795595278 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.346685665 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 3.137073268 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.259128828 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.719308065 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.937529658 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.704845767 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.6877784 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 3.163459689 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.242731882 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.580080631 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 3.329617556 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.198032322 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.616471955 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.620500861 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 3.289515755 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 3.051715192 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.739018511 seconds)
  done (took 66.357498358 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.442771501 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.694365682 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.723016227 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.603903686 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.438712903 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.441837869 seconds)
  done (took 35.710376061 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.562490043 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.579593536 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.773556781 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.737148462 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.599877239 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.584453523 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 3.063563417 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.651895603 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 3.230453874 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 3.214110668 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 4.118722293 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.905662787 seconds)
  done (took 39.390568548 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.449897447 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.448331932 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.445945162 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.564635495 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 3.343391795 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.306941924 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.764191113 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.442768239 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.636877657 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.634535967 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.307016666 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.61450857 seconds)
  done (took 57.338866065 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.674894703 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.685166538 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.762860583 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.31385067 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.948813275 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.513116644 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.846975091 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.950561221 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.223952993 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.271587153 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.933811625 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.486182119 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.976601478 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.398159406 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.450059242 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.760534346 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.263844352 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.92697488 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.866045438 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.51711801 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.392545695 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.579964281 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.444291971 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.105234326 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.757379617 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.447710891 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.598551268 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.580320131 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.1887485 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.526183844 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.340045763 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.880656904 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.531454014 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.647839114 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.886590395 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.509572007 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.436070073 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.520769625 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.947073056 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.679725211 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.50768854 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.493310911 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.356630974 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.564154392 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.622879374 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.153813274 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.389067295 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.980062727 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.336801383 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.48095306 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.265308694 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.976688881 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.702790151 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.31160346 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.518882973 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.672663222 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.508051895 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.531320819 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.65913971 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.456409497 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.529681845 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.437558162 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.600368931 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.312628141 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.873232315 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.687323996 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.660328128 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.676575927 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.659017839 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.690845745 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.71853675 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.496541951 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.107427097 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.469193619 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.931020527 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.278236729 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.701492295 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.391856975 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.093494875 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.897127066 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.301981838 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.485569324 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.080811814 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.313576172 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.380783273 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.51877532 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.228155314 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.315376364 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.443303032 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.443198339 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.754924894 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.499822795 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.519998924 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.618699481 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.062808897 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.343672752 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137193005 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.652345358 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.335084663 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.909733947 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.367905657 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.412214985 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.391154114 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.994234101 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.775599868 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405380092 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.092088405 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.992717139 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.660253532 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.916644225 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.565232822 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.158340442 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.701330554 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.70924801 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.399963914 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.188960249 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.557608156 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.497821239 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.704374297 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.354157676 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.310363516 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.762422463 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.592101358 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.394513842 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.666537724 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.403840835 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.527382779 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.359686354 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.123680556 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.962159052 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.621170156 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.900788026 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.553098901 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.447621141 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.324324373 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.513616945 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.833796372 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.491640556 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.689260517 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.78985582 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.992793538 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.127254278 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.355091482 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.261275819 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.821010627 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.627670062 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.699653716 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.516911165 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.506722984 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.439966877 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.389393744 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495365873 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.373756245 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.906390531 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.368115575 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.160182846 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.119616839 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.669998816 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.370750017 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.36033519 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.536122976 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.653888692 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.031449788 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.414349504 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.530274369 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.638113984 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.635060045 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.378077962 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.349198949 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.700406047 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.649446238 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.885967897 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.609103864 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.018606719 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.719325296 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.88225734 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.59220961 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.696502308 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.033501498 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.773978002 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.701356089 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.979886591 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.38128011 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.894964571 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.465102946 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.775343236 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.596407368 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.107167545 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.561709219 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.215112927 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.405133005 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.354928893 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.316763576 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.512395295 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.809009155 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.378704062 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.907530599 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.473550502 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.737336736 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.634492517 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.380035805 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 4.310645427 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.200192645 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.764526215 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.751146953 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.707654404 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.322912552 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.179039159 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.840977555 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.855415156 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.517840633 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.633321306 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.333214336 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.382935773 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.37895317 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.710812445 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.301832783 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.09733255 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.634829757 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143740003 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.942970123 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.48743062 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.352698463 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.403517424 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.255864943 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.527466553 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.475975086 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.462667614 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.947279257 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.665042323 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652956772 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.351912001 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410355123 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.663848225 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.683435588 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.641161142 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.856479047 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.009962676 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.062301927 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.472715375 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.974870765 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.553720787 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.392381538 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.962850656 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.652388654 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.337038537 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.57185912 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.102993186 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.532073327 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.395248139 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.673898587 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.370879689 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.865460624 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.999100777 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.342822601 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.398566518 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.490583991 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.378957238 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.675233358 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.258461844 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.589302793 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.535468548 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.658866042 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.621226415 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.562305767 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.763532111 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.88560204 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.73299422 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.312716466 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.539055141 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.472472903 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.661903758 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.370069638 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.630079482 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.011805453 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.962797618 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.00763106 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.683891456 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.384930521 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.772513937 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.575830098 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.637174774 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.842293731 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.409135227 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.10950496 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.41283477 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.470008561 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.293314439 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.119455424 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.6503218 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.717644015 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.784114091 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.374350084 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.870997955 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.710545209 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.422630247 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.494701169 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.59959983 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.334765265 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.644862802 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.335090968 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.456021123 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.725765056 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.342310034 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.881146576 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.489239033 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688705534 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.439073397 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.795018564 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.273881753 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.337145422 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.982377773 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.396787337 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385824511 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.553913213 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.285184471 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.263027593 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.203258705 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.185599871 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.700080574 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.578650741 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.70927094 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.670748648 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.491759042 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.779423962 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065678702 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.277688025 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.215618666 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.71318609 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233206731 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.440005396 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.066551319 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.290680384 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.363785434 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.156165465 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.574653464 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.019635032 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.642453561 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.224662645 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.544111451 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.655271845 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.813189837 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.775566874 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.720829281 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.016249362 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.452324947 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.611994821 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.908242367 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.304696257 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397913595 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.303987958 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.268880351 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.639215145 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.87733826 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.587342054 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.200828381 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.629819386 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.70896711 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.681416826 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.603697449 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.434969858 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.010224829 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.223864171 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.776994879 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.629291309 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.678969043 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.638642404 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.834033758 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997866661 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.778636425 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.199934484 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.933095073 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.701089779 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.437547889 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.467172679 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.732045419 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.633648037 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.552685171 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.790430633 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.892672247 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.529744489 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.497515553 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.774655219 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.024007427 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.223657787 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.186313482 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.787846456 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.97797724 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.058192505 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.483652757 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.198870782 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.690555725 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.900131083 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.856123404 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.362956553 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.845330057 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.77311893 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.613354828 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.431739829 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.682169847 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.483612551 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.536411534 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.331784455 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.78447174 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.572473002 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.303485944 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061962456 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.692337488 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.505413863 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.70081169 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.700634673 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.681700897 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.490420217 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 3.007639302 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.87076312 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.638343026 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.442739568 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.229732217 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.431368467 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.694575261 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.696543626 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.656587877 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.316653226 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.59004695 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 4.10160991 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143452988 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.797086013 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.660881494 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.429666992 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.283328724 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.466686149 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.203319495 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.230147756 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.723848554 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 3.987072648 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.691518063 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.472189069 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.802891269 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.605465131 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.783858439 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.755859033 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.949881954 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.900979982 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.829529501 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.760457755 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.996645302 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.586382297 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.715628679 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.43198305 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.48123987 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.548788262 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.847413726 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.844047752 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.492167995 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.969172747 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.589960192 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.394926327 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.496662805 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.527128494 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.966830134 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.63175837 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.587434055 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.512614028 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.618606077 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.719138442 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.410981528 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.658547823 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.378136409 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.409607435 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.613412791 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.639491721 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.767930293 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.698954551 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.990161021 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.53614945 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.859315397 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.328108209 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.897788906 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385738885 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.48802096 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.736362768 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.387324869 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.856339363 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.079123401 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.579667419 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.071461773 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.465967195 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.608718013 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.55485199 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.889232521 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.429783388 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.005944049 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.78301481 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.387217677 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.865814524 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.456570547 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.551508365 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.119064281 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.879540451 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.382343315 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.179079194 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.433578929 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.846039512 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.966267418 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.408209476 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.515207363 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169377307 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.349138112 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.471066745 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.400099483 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.950643917 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.375043165 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.946975244 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.566583392 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.54817687 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.397601273 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.534003226 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.383909666 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.595959623 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.010896516 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.63019533 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.678998263 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.593184195 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.380292028 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.933120742 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.060089488 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.704864908 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.598936462 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.570297092 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.723015134 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.115519561 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.603748368 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.944540197 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.621602236 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.592668687 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.812267409 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.626665163 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.449709734 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.639494548 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.401110604 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.75319161 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.502138631 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.924712526 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.635749766 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.684109389 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.541372141 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.392503052 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.915628155 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.851480803 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.261744174 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.389853832 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.6906447 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.392397714 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.505445277 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.978827115 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.587895065 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.572454761 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.32001455 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.915021075 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.681921791 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.507952294 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.419467444 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.619581132 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 3.917487471 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.30768863 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204460186 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.225996613 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.551233606 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.700390628 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.383324742 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.58017979 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.361535792 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.409143706 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.844356148 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414228511 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.697514827 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.31918764 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.971092158 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.344181365 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.5430893 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.523104816 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.771679441 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.394086356 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.370596093 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.538070368 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.38570245 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.426234663 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.733532236 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.468729428 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.659189455 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.853784175 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.663212575 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.710252953 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.306916772 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.21554085 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.352318426 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68654375 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.414250879 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.957394046 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.510826013 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.892860974 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.20508341 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.370546391 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.954572162 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.627336305 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.117147587 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.528564757 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.903943279 seconds)
  done (took 2716.555841187 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.419101646 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.519175128 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.404123031 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.471620933 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.488840834 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.456691801 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.487679595 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.449135737 seconds)
  done (took 62.018599556 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.390971799 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.381483415 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.933512339 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.568569012 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.413682311 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.606022957 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.733690909 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.997671518 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.554546496 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.458003196 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.419339118 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.418901472 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.635663424 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.412309469 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 7.101825998 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.882294624 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.437475547 seconds)
  done (took 114.697673725 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.481760196 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.09158359 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.403182367 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.673531316 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.442874372 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.644059709 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.385803541 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.428914474 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 8.088989413 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.100118052 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.447705975 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.411820209 seconds)
  done (took 94.936667327 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.42702094 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.410840788 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.449114387 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.444505952 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.410897505 seconds)
  done (took 14.483900938 seconds)
done (took 3372.788470988 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.651348683 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.898269819 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.942840974 seconds)
  done (took 8.173432924 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.468351263 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.550971286 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.627321972 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.535655886 seconds)
  done (took 12.528278619 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.681320963 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.853362892 seconds)
  done (took 7.853643484 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.859469849 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.41983924 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.940148299 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.390896273 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.404277273 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.382946511 seconds)
  done (took 24.520953325 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.418870878 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.413880427 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.423283409 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.452119532 seconds)
  done (took 12.03337205 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.373892152 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.436568898 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.40749982 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.454186625 seconds)
  done (took 25.008103014 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.763360406 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.642301758 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.137468955 seconds)
  done (took 10.883083054 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.226585789 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.768939747 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.216641136 seconds)
  done (took 11.547960352 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.68904266 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.297261364 seconds)
  done (took 9.320073736 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.546783709 seconds)
  done (took 4.868035266 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.916147661 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.902244824 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.2304461 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.242987636 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.389463672 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.713160285 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.782449404 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.804136154 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.048945507 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.933761672 seconds)
  done (took 32.287622929 seconds)
done (took 177.231703852 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.249967705 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.823950556 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.580771252 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.083138749 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.507861106 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.564522539 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.477374708 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.874098726 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.977495165 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.975881358 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.089298973 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.488998977 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.487817319 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.79814719 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.45546197 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.775049216 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.806332342 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.215551692 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.01389646 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.95597861 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.484892411 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.685889683 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.748891219 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.688913602 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.840948968 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.520013757 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.501724542 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.745083355 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.26648495 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.490330751 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.545404987 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.209454804 seconds)
  done (took 193.285243963 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.421047036 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.412569552 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.436870029 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.406641081 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.251512748 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.387538003 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.423932915 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.387449597 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.207725496 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.193406577 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.406392602 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.247094566 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.419009422 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.39940938 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.412490154 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.410972362 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.357038175 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.386740187 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.402878319 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.418963707 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.413481136 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.99363223 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.41008963 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.024384724 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.332055071 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.431863961 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.407842326 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.400388285 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.429928217 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.421833648 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.434354986 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.427600823 seconds)
  done (took 229.849830549 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.402918087 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.400860025 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.405094462 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.38880933 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.433024299 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.389473003 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.412688614 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.410246082 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.358280349 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.365870663 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.334726079 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.28155157 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.187500405 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.186902634 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.143003523 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.531921555 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.520235938 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.49262275 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.391493689 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.368075009 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.350985793 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.402745753 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.374131024 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.333759099 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.400903161 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.377797978 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.35419765 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.389961141 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.377571813 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.383337663 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.386718823 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.356925187 seconds)
  done (took 238.2155796 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.631212002 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.443948125 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.355713374 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.720822715 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.350970317 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.393634426 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.712831239 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.692048889 seconds)
  done (took 26.595494011 seconds)
done (took 690.298537287 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.082182965 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.228029671 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.552484845 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.572844241 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.988776926 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.525815542 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.461301481 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.741583044 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.083616561 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.744463292 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.800305442 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.469905302 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.143375271 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.473742186 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.418412937 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.714957696 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.71016086 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.978427425 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.474658831 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.092736022 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.504080622 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.262744884 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.756307572 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.095791236 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.76226087 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.319595979 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.324373549 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.587654278 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.353700388 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.467467615 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.213734347 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.565297949 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.383889002 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.408805174 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.56809325 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.559098072 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.444995205 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.62909636 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.26311108 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.925999165 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.001579457 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.815376574 seconds)
  done (took 123.77008065 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.11811822 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.148806102 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.35456913 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.216262266 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.724155483 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.272792629 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.316118291 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.308506283 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.196244629 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.32988226 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.34763776 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.811360212 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.331113139 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.748415832 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.335835632 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.374472275 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.185058387 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.71494676 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.334814394 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.307140374 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.152352872 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.287854599 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.143179132 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.307926191 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.143403724 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.169764838 seconds)
  done (took 62.78379038 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.170858807 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.280521605 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.461736035 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.486765246 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.335503801 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.172984014 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.512215113 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.331470554 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.045119721 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.378063017 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.227840333 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.221349113 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.289305784 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.476975399 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 5.632317896 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.253421877 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.278140616 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.253734006 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.286386466 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.350930422 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.334419997 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.200382016 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.516791706 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.260580506 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.783903574 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.256478745 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.448578605 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.777202757 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 5.601725084 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.260834895 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.255927357 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.507258609 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.518138032 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.466893851 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.28506665 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.150128114 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.14659505 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.277876614 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.231983587 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.255022413 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.510917532 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.167077665 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.56742591 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.737796612 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.086386954 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.337921668 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.649243641 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.290552227 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.265690782 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 4.669060571 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.49690986 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.086683477 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.258963978 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.333721777 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.244785993 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.542430296 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.307766602 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.449664242 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.318444091 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.709926513 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.201024784 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.514943259 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.293582419 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.089765622 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.401210139 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.337065714 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.329378928 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.335250004 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.569536298 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.382676855 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.87879699 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.218318844 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.159353494 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.229427313 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.287816932 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.687808665 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 5.110877837 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.329236787 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.538295083 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.510714362 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.434878671 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.791826308 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.172592959 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.31386297 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.249236749 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.14757333 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.217939449 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.45209527 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.497833648 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.649816069 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.739730259 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.477098207 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.640765143 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.542567791 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.425982053 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.552887076 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.135620563 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.147787607 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.469736008 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.766948361 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.216824233 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.395639989 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.828713365 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.627794905 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.487246607 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.185651589 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.547207069 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.105446647 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.527045409 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.125968252 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.305796687 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.358997431 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.45999636 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.481408266 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.129696713 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.708008321 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.307229779 seconds)
  done (took 346.069016364 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.107435456 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.105788014 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.102782579 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.10547325 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.102723851 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.677484366 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.163886761 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.10183066 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.677840906 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.16344686 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.102436021 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.104148422 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.105590984 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.113233825 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.627469478 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 4.609508496 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.726467747 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.104304487 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.10273078 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.108295504 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.937309043 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.111540134 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.103850466 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.107796228 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.106044059 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.102466266 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.110488042 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.131094947 seconds)
  done (took 180.763540899 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.148703952 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.638959641 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.190871028 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.24620081 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.48728029 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.180816257 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.449547776 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.249852729 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.225160645 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.165648913 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.160397762 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.392445056 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.447079717 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.638511352 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.261215838 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.711982633 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.769604594 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.300661 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.164161812 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.165493973 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.319905007 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.393387963 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.281991382 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.437430676 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.335887257 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.451785576 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.519917816 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.17783835 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.292013178 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.98690696 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.19832537 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 3.10463717 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.2898719 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.15898469 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.414724583 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.54911886 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.841951094 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.802978802 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.365473183 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.12144272 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.124916784 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.44545484 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.477415759 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.207990957 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.15915227 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.57361249 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.151503013 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.311552718 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.327370149 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.12243786 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.251916894 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.271961843 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.698216119 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.934575754 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.355411827 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.306678119 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.758171693 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.498572777 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.143968771 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.529190791 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.139612692 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.990629084 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.290483676 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.226570737 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.174044916 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.014562717 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.255930764 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.576400805 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.537945411 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.171854171 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.574685079 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.358485049 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.13838939 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.302436061 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.314155964 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.779240643 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.844717758 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.291265458 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.275981385 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.247653814 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.318371518 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.130258401 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.469211184 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.232909951 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.136062762 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.519691988 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.59216895 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.139205295 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.170860206 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.287623024 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.33945121 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.36800727 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.467271914 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.233153455 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.782023057 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.376855696 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.530754509 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.171708016 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.274585147 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.147748526 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.344373715 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.366506886 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.146497739 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.475405112 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.693022214 seconds)
  done (took 257.944187246 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.866474972 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.220171452 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.415283116 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.728024858 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.522054181 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.112585996 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.379349316 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.236129832 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.446700533 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.378012176 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.347169212 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.248320425 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.895596488 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.937094547 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.205559966 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.342259534 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.225224186 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.772801017 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.512646675 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 5.049101303 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.546879866 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.005476688 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.493157097 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.545523801 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.604848368 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.681389362 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.817143018 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.294805609 seconds)
  done (took 78.880514276 seconds)
done (took 1052.473424561 seconds)
SAVING RESULT...
DONE!
