cset: moving following pidspec: 3573067
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.515493651 seconds)
loading group "shootout"... done (took 1.091398919 seconds)
loading group "string"... done (took 0.680327229 seconds)
loading group "linalg"... done (took 8.677381757 seconds)
loading group "parallel"... done (took 0.021056137 seconds)
loading group "find"... done (took 3.531461427 seconds)
loading group "tuple"... done (took 2.219263622 seconds)
loading group "union"... done (took 13.247178712 seconds)
loading group "dates"... done (took 1.7317307 seconds)
loading group "micro"... done (took 0.212194512 seconds)
loading group "simd"... done (took 6.399903859 seconds)
loading group "io"... done (took 1.671980663 seconds)
loading group "random"... done (took 12.276650326 seconds)
loading group "problem"... done (took 1.79592608 seconds)
loading group "array"... done (took 34.172152841 seconds)
loading group "misc"... done (took 2.101033803 seconds)
loading group "scalar"... done (took 62.881419466 seconds)
loading group "sort"... done (took 5.038486247 seconds)
loading group "sparse"... done (took 18.280918748 seconds)
loading group "collection"... done (took 23.542295622 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.510282192 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115222341 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.149138662 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118858037 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.268353972 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.126347781 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130345665 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.113707303 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.030314793 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.162552024 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.139018371 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.432866439 seconds)
done (took 5.721910438 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.309143799 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.244596527 seconds)
    (2/2) benchmarking "String"...
    done (took 0.181661241 seconds)
  done (took 1.582963062 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.12607272 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058865628 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065850571 seconds)
  done (took 1.402553335 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064394528 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.141475536 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064788568 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067903378 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065402371 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064685395 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064535488 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064445321 seconds)
  done (took 1.688392718 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072662389 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06631321 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064222267 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065524891 seconds)
  done (took 1.422113002 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065896295 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125055354 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062881892 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062497619 seconds)
  done (took 1.466894271 seconds)
done (took 9.107160884 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.194564561 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.819499561 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.885040957 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.167624675 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.331973009 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.34575489 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121335054 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.229172344 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.135390793 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075541834 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.166459746 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.081261479 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.51036687 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.49113578 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071741774 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187498894 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.619336162 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085495944 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.114756839 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.247548083 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.083038504 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.083899484 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.088897658 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.074842171 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.162315422 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.2883692 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.616520589 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097210897 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.066961504 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094009632 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070477804 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074251026 seconds)
  done (took 10.870631372 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.134358622 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.131632657 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067128665 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.102772034 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094201567 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068060601 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073420404 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06722746 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086453529 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.131829188 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09028502 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.144188438 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066756724 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068027545 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.132116346 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.161334824 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082723924 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081045203 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067137456 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080451974 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.094167597 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079376125 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077797364 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.077501156 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.112626038 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.135392738 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.087661666 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.109043937 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.070040834 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080512044 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.095300334 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.114678429 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067521395 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065587327 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108780187 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.085375376 seconds)
  done (took 4.579647099 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.039468247 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.099905413 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.124926825 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.116978988 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107548372 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.095139718 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.167891569 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122389292 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100232099 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067577834 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.197153505 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.701605612 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.154106598 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.136253836 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071521855 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.168846926 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365330691 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.950654798 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072904053 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068408266 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.120258847 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070401354 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.160620736 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067461786 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179334841 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.788348854 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070928282 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068283937 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099164199 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.128949461 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064657599 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142214748 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094121848 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068782661 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.583385452 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066325396 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063397951 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.085262982 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.10017095 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065610661 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066436833 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077271984 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064955267 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.118139986 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080468926 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.557404155 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070459308 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.671614504 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.78537942 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074349172 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07247305 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102610074 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064898843 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068505837 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.650964273 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.160878602 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068226263 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.294812484 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071489235 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069105908 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069803548 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102378375 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06824782 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070308228 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.215049645 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091337055 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.013260039 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.142032587 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.086511766 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.066383093 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066000067 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.06470776 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.422191752 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076748782 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06889231 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.063911752 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069603741 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065693798 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065353805 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107893984 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.093176037 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089740116 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069477206 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066605904 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065649622 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.58275855 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.000759973 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069744558 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06730091 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.507841022 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06501277 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066090356 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067855687 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089122134 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067191297 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06388202 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106218686 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070297187 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.119837352 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.589911838 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.07008391 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.064877977 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.533892262 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070817983 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10377263 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.125694165 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068431765 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.111070275 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068481891 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065442715 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074190622 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065261575 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07041256 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066837675 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067315571 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.066229619 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069470979 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069094433 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067982128 seconds)
  done (took 24.345452388 seconds)
done (took 41.989460349 seconds)
(4/20) benchmarking "parallel"...
done (took 1.324980808 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.268590979 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.094139035 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064089965 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.213893998 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.091316399 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.182778743 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.228091565 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.174832746 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.091996821 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.091824461 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.093748169 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.232307176 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.243841824 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.093963955 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.1665168 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.243158452 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.093983284 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065392448 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.092508633 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.095262043 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.096102599 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065617796 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.093344924 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.094785656 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.165885967 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.092642124 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064803454 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.16766688 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.094502876 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.172064838 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.09640738 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.095390007 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.096198294 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.168750147 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.097101528 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.168666401 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065804689 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.096255015 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.096053232 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.097592321 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.244231046 seconds)
  done (took 6.607235215 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.086696858 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081091701 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084486975 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061663844 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070825472 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081051639 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061774083 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080678344 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09782718 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081827108 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081357957 seconds)
  done (took 2.114074061 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.084757656 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082140854 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084158108 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06136245 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072791091 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085076045 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061556371 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081797706 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085926221 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082798664 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082740592 seconds)
  done (took 2.104848681 seconds)
done (took 12.03697819 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.215861684 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.113272515 seconds)
  done (took 1.553787283 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.581837441 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.215798245 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.123480313 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.253860014 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.115879331 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.149015932 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.441525493 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.151116602 seconds)
  done (took 7.320227149 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.125609602 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.137742221 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.069668589 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.06803135 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.068464301 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.067868347 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.072728771 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.06832699 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.067767387 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.070293713 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.069882365 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.068235123 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.068644598 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.070224488 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.068211739 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.068309194 seconds)
  done (took 2.592464683 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.074159461 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.07080492 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.071804864 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.062034585 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.073135242 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.07315389 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.073934727 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.073963092 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.073269656 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.07423712 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.071640463 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.074024745 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.072030032 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.070682171 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.073070143 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.062616996 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.073842093 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.073141153 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.075123103 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.075302123 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.074287748 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.07236431 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.076085221 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.072895129 seconds)
  done (took 3.003523685 seconds)
done (took 15.710680997 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.192459617 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.0762212 seconds)
  done (took 1.509363891 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.121770301 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.121687866 seconds)
  done (took 1.500013738 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.078168464 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060893522 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.08217838 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073189063 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062845422 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061822845 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.081088984 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062273293 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061767379 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062115298 seconds)
  done (took 1.949518412 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06607163 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070102526 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067876202 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065307832 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.0690752 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063568386 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06612749 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06393554 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070808518 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06237815 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.079768983 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080948195 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062778877 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081667298 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.0627214 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063266473 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064906481 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062889265 seconds)
  done (took 2.481735591 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061499707 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059441863 seconds)
  done (took 1.396069569 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064352257 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059409687 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061237303 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060949791 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059269581 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059158919 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059786795 seconds)
  done (took 1.691947578 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.432553348 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.203377215 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.420505795 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06815499 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.08178108 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.269121999 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063320777 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06747551 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067872193 seconds)
  done (took 2.942754448 seconds)
done (took 14.733349025 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083464873 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182232434 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.132045256 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.436531728 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.078025646 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065584011 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.094758593 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.227799655 seconds)
done (took 2.587504655 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.5219037 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.326601121 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.295772975 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.067452623 seconds)
  done (took 2.969335572 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.421715846 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.185907852 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07515211 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065388355 seconds)
  done (took 2.040400388 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065825398 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069712566 seconds)
  done (took 1.423197459 seconds)
done (took 8.247986213 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073590628 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059369268 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.0654812 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060924191 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.06365647 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060887114 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.060672044 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061600939 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.05975854 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.061570802 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.061351662 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061470648 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061127851 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061497027 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.060722752 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061505743 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.059428516 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06119879 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06094451 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061704089 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.06008839 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062079416 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061033644 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06198833 seconds)
  done (took 2.750071076 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079909983 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063553892 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064186483 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063832595 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064356483 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064394379 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064634773 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063873923 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.065166422 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06365605 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064890901 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064896741 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063236876 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064862888 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063429868 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064968059 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064900541 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06389876 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063686669 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065382239 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064593335 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063948053 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065626627 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065580045 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065585467 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066053323 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064476465 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064719218 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065749739 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066069276 seconds)
  done (took 3.2446154 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067183131 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057928755 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058096765 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06789329 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057735397 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057983304 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058156195 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057631259 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058037032 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058932787 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058577819 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.05790785 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058844321 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057972038 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057988936 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058562939 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063106799 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078416047 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058300288 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058028871 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062700017 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058609697 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058132154 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058518143 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058917014 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058332699 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058326418 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058836992 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058642965 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059269921 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058488363 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063306114 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065071031 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058833911 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069094831 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063914883 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058807986 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065539686 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059957907 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058458209 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058515616 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.05852861 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058703294 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058598323 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069173583 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059027804 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060049926 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059386889 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059018508 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058665197 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058904479 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060669584 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064769775 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060216286 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059104563 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060197091 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058689438 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059463997 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058798464 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058606456 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058521297 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062734199 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060145889 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059426661 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080073517 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060427593 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069309175 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058841487 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059314585 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063141752 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060132106 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078577598 seconds)
  done (took 5.683849769 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072710496 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069178961 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076601237 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067814131 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061689014 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059022361 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062277317 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0590414 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068330197 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062678556 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059087593 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062062069 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068101536 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065659762 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060008877 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068321057 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062576203 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061657172 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059273879 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063109741 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060453399 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062633207 seconds)
  done (took 2.727105642 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145071134 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064364241 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105925131 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06828196 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066667117 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067897013 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064419867 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064435129 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064446224 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064916479 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065023135 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064437714 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066826205 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065238072 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06501329 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06482507 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064557808 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065191438 seconds)
  done (took 2.592464292 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077368485 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064062574 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090577637 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063790365 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064082789 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064403382 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06779213 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067901033 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06381445 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064105533 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06797389 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063793843 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063781312 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064286915 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063651506 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064278839 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064123644 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064415642 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067998311 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067745972 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068509742 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068517369 seconds)
  done (took 2.776176919 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078801506 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063041135 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078885 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064504879 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058111967 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058091344 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065089471 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063630418 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06516098 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06336783 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063738026 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058689913 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065732673 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07517738 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06618974 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063611759 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063303229 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063627614 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063149668 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058458835 seconds)
  done (took 2.602263209 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.117217607 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060934328 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060620473 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065556473 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061135999 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061037825 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06558354 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060893678 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060856499 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084932642 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061105831 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061007008 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065725766 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064143908 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061251719 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065801534 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065849174 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066375545 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061702725 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061634429 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085724273 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061628208 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.0665209 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062062912 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061983994 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061937639 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062133039 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065231826 seconds)
  done (took 3.161637553 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06538568 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061732862 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063394845 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061833813 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061667527 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061585175 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061849608 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06178795 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061528095 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061865073 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061623464 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06170025 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061585542 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061586121 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061678149 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061713148 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061725183 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062238528 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061966643 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061909491 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061796205 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061851544 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061981191 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061918398 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061973946 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061512182 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062034379 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062377087 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062065185 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062341595 seconds)
  done (took 3.174216323 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073704958 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069176777 seconds)
  done (took 1.449222198 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062202572 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075631016 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057559095 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070608841 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066580593 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062096591 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067145211 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066837479 seconds)
  done (took 1.828684583 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.111730959 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.134552102 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060463467 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060585458 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.109982334 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126764204 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.120123449 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072270777 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074270765 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062783526 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060221695 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.120300798 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059899302 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073976262 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061490368 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072590737 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068663845 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079925821 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073726803 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058620068 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07339343 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061422662 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059930865 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061469138 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061069126 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06757527 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076820479 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07329968 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069422401 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058245956 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080242039 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059529406 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060807382 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069652895 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.112998122 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059809706 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097520199 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05981494 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064228135 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059144023 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072051406 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080891139 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074232942 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077992776 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061097894 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06140178 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059050505 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06127466 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063539125 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069110392 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058975799 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067184723 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058748732 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060768679 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070742239 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059800838 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06443601 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069550806 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074007081 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071578208 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072697258 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076232041 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069123265 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068570306 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060711569 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080491598 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061684012 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073593359 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075197488 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060730272 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073533467 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059391264 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058721032 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059531593 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09456272 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061598053 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061273725 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060389822 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059897419 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062746698 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071634235 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067052209 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069056122 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064852057 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078016582 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07135799 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061218041 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069725552 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080713445 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065078797 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061382889 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.080137701 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065877943 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061355011 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081582054 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072911481 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064416976 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06362473 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.2237297 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073252665 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.060155399 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.057568689 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067767793 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.060371193 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.108045037 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.062811565 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067438185 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058600025 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069040211 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063938782 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059933519 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057254672 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063218386 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059267804 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05754188 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068840435 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.05891604 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07340509 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06555736 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073708818 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074095741 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.06960161 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074873243 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058514895 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057727704 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076915021 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068324892 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059612825 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07678015 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057852576 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069381189 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057989885 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059768794 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068140723 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057586897 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060024605 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058252675 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064111047 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059776319 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060008794 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064846645 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068435669 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07225114 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.060299226 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.068926373 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060041175 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076044347 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070136791 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064551482 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063140908 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060304366 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072043693 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06679932 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069410596 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059088972 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060392955 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.05999341 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070841 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069874448 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061717089 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068167355 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06473227 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060151284 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059873457 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060852045 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064208135 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063109168 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060368017 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068070067 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068973581 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074350036 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066864905 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069347759 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06190549 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059337282 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061543778 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059261449 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064885149 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069613154 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075931542 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072166434 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081777721 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060422627 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070338139 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061309229 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077549725 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073745057 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060902847 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06461056 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059794471 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063054269 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071327859 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073690674 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076340164 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076979057 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066570533 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066300968 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060937827 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077026248 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061562031 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070353171 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071530295 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068720591 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061747838 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063648147 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071622839 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066896041 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062709465 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078643415 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.230724058 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059269102 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.073781453 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.059032886 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.06981654 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.058135001 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06279959 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.064425078 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.060228426 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.068563398 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074288162 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057422107 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059120679 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07460265 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060373066 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059933273 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067373247 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074285078 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063688936 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066889357 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069564708 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069067433 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063401278 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068771357 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059166947 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068188841 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061206623 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07052263 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058627314 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077293014 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057521709 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074411401 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058858824 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070037114 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059191878 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0684143 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05930407 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07610717 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060197595 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059381803 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070478017 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057269414 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068245786 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058162282 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064104675 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065727989 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068856567 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061133699 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069219808 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061041111 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068861095 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064171771 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067924838 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069219415 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064461619 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059109189 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068433894 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071178543 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068525788 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061035378 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061195677 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060241021 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06971739 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060967154 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060828422 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068560716 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064746843 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065785275 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061117993 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061636296 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061448997 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068671174 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069660265 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078406457 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068862101 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067711033 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06941386 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059121066 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075668607 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059677562 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067621588 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058699271 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066936946 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.06942688 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060029097 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079636491 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061084048 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06820758 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073041054 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069103885 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064167157 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078640338 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063083721 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068659467 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.0683894 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064793244 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067417801 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063043771 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070062557 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.07145244 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072713238 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062353852 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069149917 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070801755 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063073672 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071632314 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063210524 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070489427 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063832582 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060992926 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067255707 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074459715 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067378901 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067653519 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062635317 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060983656 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.223687123 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066012113 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064115508 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068110072 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074868666 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.057846123 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062652201 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058071576 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062617126 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076811711 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068444928 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.066841059 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06363219 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057804645 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059758015 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059985388 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059239908 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061691454 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057998788 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058101405 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06956029 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059999875 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063401732 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058846889 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.05949424 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068959167 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062488823 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059185541 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065607728 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058288058 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064136344 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057612571 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059787875 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063595232 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058173935 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062719334 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069380892 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075370485 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065775372 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067911367 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059543213 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066853347 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074193091 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065935499 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059522894 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068672589 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058884619 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078710616 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070567464 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068805153 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069934853 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060548088 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076905031 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06446111 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.06979531 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07547805 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060998327 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067770222 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059351412 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076133994 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06470549 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059305462 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068377561 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068159948 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.0660476 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07219538 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060309362 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068167042 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064843028 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063443436 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061320094 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061275643 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069024676 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076448656 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060381896 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065141442 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06815312 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068502767 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064671568 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072666518 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068793615 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06134603 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061560845 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063828953 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060588762 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072305768 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060253524 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064848019 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064844046 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059380196 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.067087274 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076883588 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069888883 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070296741 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059899474 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059723028 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079059073 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065413951 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065056221 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070213335 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072372475 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074589704 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071413008 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079231766 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061998319 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067574743 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074329845 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062612381 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061676212 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066227543 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06359599 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071725845 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072817733 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070288205 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064611033 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.229734614 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.073422339 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060080882 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.063823014 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063999271 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.059220833 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.069675486 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067499812 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.067826293 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.059631431 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057983091 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062357463 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.067694419 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06646779 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067759973 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059361507 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065401124 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072482037 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066458369 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061289458 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058034771 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06122144 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068142443 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06391965 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058119477 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063720385 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062783198 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065958471 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.337364841 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064891379 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058211574 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075686852 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066900238 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068177609 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.06044488 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060336702 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059237187 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058255747 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069971806 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058000365 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059614437 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063526241 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059817058 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076364222 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067510044 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075548022 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060260761 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064250092 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058702726 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072260088 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06439014 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059373713 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070197268 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058617059 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075305132 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071487552 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065627676 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058954442 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065068252 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068304589 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075513403 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069859894 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068990761 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062917034 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069840062 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061513703 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071262004 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059494129 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058650411 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070191526 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068728808 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072683433 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059238923 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070187663 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061403981 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068181497 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068023987 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061236707 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061240663 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061442208 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069948951 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064772041 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069406185 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064782336 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07732804 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060789554 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071479941 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069687392 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07145952 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074486562 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072767503 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068371712 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060491522 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067960871 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068465143 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061355232 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065469385 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064400971 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084658489 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063894298 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063477367 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076910884 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070254038 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061666505 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069904933 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066642955 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072952905 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063008109 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072940025 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.068942161 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063248557 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067326816 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.226071187 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.058557679 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.058469468 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.05922124 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069071568 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.063502145 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.059022161 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078150526 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.060050372 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.068427788 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070207598 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066019116 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.060050685 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.057692233 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059784452 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072363582 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074448548 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062231567 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067669612 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059917325 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06809197 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057374182 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067529364 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066883126 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067476211 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058075713 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059055224 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074447997 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074635089 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063742959 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074643731 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067823792 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059772109 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.0806524 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068628716 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059584394 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069847718 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060523527 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057808535 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057502886 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059776556 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070240436 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058141525 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060459087 seconds)
  done (took 42.209293515 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102721007 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059580651 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058105261 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058025624 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065526634 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059661802 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058561619 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060165511 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059745048 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060657676 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058464614 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05848949 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063976564 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073951634 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066561035 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06219111 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.05852021 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059680783 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05875988 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059688701 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065219401 seconds)
  done (took 2.730221913 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064735857 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062508127 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061836359 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062159247 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061256622 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058881105 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062869826 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058752491 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062653817 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059146173 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062716674 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058715716 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059013941 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059067165 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059031185 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060099634 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062445597 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06449115 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058726269 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062194291 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060053393 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062637807 seconds)
  done (took 2.728243475 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063074728 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059357932 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067827911 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057806603 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057712589 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06104808 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057798716 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063211016 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063272492 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063403288 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.06791611 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059007793 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057961681 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064493494 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057928197 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059218075 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103470421 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059558178 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059665214 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058126071 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061167559 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068153952 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.05838916 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058768637 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063683393 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061950183 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058550335 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061258166 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059370585 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063674348 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059846356 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058392928 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068442883 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068022694 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063818703 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063943007 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060536727 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059919077 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058680871 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058768878 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067785754 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060201003 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058885454 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060170721 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068401662 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058670418 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.05863346 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.06872653 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058583857 seconds)
  done (took 4.441833831 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073605606 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116744123 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064592362 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.099920124 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070909656 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063920269 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064510517 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.103229494 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059747843 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059993978 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071547001 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071451992 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061317918 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062401203 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065724024 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061514024 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062286281 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061002165 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064000267 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061208204 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064059762 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06610494 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071583846 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071706594 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062589052 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060854946 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061229887 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063362378 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07133311 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064441991 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062920463 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063326698 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071740612 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066596964 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061038798 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061324737 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072455326 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062328523 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062156702 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060419908 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061696538 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063181374 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066536328 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073308753 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062423332 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066878624 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062000336 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06007098 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072227286 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061748561 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065490677 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073044728 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063074057 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062423825 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063511464 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072426393 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062060639 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060769161 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062176042 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072048116 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060417756 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062664665 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.073070997 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061557426 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065104834 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073112974 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067169601 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063077513 seconds)
  done (took 6.070942138 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071091009 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093153705 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072758476 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072931181 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069026934 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069000303 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068747898 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068753774 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068879218 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071499968 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068945275 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.15200763 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065980499 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070309671 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.06919977 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069626507 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069622319 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069639613 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069708311 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069583851 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069579448 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074535041 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069706662 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074281875 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074324224 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066100036 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069414135 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069710999 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074431323 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.06945958 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074048175 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069481202 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069534122 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077295986 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074196825 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069682985 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060541813 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069804082 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069905492 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069880362 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066565674 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075100096 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069863054 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066963932 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069959022 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069946667 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075055822 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074854636 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071469208 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072990263 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070370492 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075174055 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069975351 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07021417 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075241015 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078093531 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075140296 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075343604 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070285541 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075158422 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075326474 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078659978 seconds)
  done (took 5.945613796 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076301627 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065006375 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077302273 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058169089 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058295752 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067880201 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058388087 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058427025 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064759302 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064842492 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066355421 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068111184 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069750616 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066051697 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067844455 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069589416 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067768129 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068466141 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065571085 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068894512 seconds)
  done (took 2.757578404 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063190548 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063602689 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058848482 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074250984 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058863811 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066481179 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059314276 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059296844 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059171756 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059338708 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063866095 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063693223 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059155917 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067145951 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062719685 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066560554 seconds)
  done (took 2.407773914 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064314765 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066432655 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.1123384 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060253673 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061840777 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059188757 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059827273 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058849362 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061004546 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073429831 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060137554 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061925744 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.05998974 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059227416 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059148607 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061695894 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060860596 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059752788 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059684318 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.115161156 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068694176 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060809535 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062414171 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061076846 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062651846 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068504318 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061785724 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062319432 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060323802 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06263392 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062014715 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070961619 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062253419 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060923424 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059363837 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060091522 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060307326 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062622355 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06257517 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.0607691 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059563009 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062475485 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060745282 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06102502 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061752156 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062701871 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.062173714 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.071013404 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060879959 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062843917 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06081046 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062370704 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061473432 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072394638 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063181208 seconds)
  done (took 4.935122894 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0790664 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063902193 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058237594 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057978284 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063517652 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064079799 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064248953 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06424561 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064640219 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058458394 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064566435 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06373109 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064511124 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064526999 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064590778 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064138135 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058604389 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064301794 seconds)
  done (took 2.578571773 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.071287499 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063543033 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064058386 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060063773 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059907657 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064394262 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058670603 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.05986631 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059831426 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060364437 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060362116 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06017683 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060121737 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060059549 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063968139 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060298268 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059957709 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058980357 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060261908 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.05876685 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064663289 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059211423 seconds)
  done (took 2.756251252 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.136559645 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082502407 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.17791293 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079060497 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089035026 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070441085 seconds)
  done (took 2.045308057 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095141778 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096131015 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064444832 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063935771 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067858348 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066745749 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066824447 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066861555 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069605154 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072361814 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066534609 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069858868 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069637826 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071312471 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068129978 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06819755 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066684817 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067229823 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064543506 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075137599 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067465616 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07102694 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067530108 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067174165 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067222811 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072154879 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070527417 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07354745 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067244017 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070673671 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069005303 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067416446 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070978626 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073489288 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064693906 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07056545 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067650989 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075397211 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069114789 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072921152 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064915683 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07073358 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071480552 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070732175 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071507925 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068005299 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070735389 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067818063 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068042687 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079926962 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070054112 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072956524 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069934545 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071515165 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071306433 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080129962 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074374954 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073277298 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069727906 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074314817 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073186108 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069919461 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073587058 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074674135 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070194464 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073427942 seconds)
  done (took 6.101838416 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104381112 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064224977 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066425543 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07194127 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071341273 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066781964 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066796279 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066924424 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066936622 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064450821 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102336756 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067221512 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071812984 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0716792 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067305516 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067258169 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067215927 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072223775 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064985777 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07935424 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067584742 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072578735 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072375538 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072271048 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073602735 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069215847 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067425849 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067285818 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067377102 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067465257 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070287243 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067460772 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072440667 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064938984 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072415023 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067752905 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06742283 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070427936 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06746531 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069543552 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073199028 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076091701 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067846258 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067655001 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073963272 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067683832 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067636166 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065381158 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067935189 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065262902 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07409052 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076882195 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074273184 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073037999 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068096275 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068005984 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067998417 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067885501 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068198752 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069816257 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073231315 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068305824 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080511542 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068301004 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068276275 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073418976 seconds)
  done (took 6.107384372 seconds)
done (took 127.087907672 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.260095463 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.220893019 seconds)
  done (took 1.879087398 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.124368836 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.121276279 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.142539944 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.093936287 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.1282637 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.221175194 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.173010082 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.073776774 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.070248279 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.072401857 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.069925214 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.072041511 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.072310595 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.069849706 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.133067851 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.073761269 seconds)
  done (took 3.185982226 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121562246 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.226559501 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.105356827 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068699902 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152650953 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07682238 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071609994 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075313595 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076132389 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069104416 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.117137034 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083011671 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073735679 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075014176 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071072888 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073711419 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074661036 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075755855 seconds)
  done (took 3.117352746 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.143666872 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.081499844 seconds)
  done (took 1.66254062 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16389736 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10843166 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147082089 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353327776 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.141144701 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.143214816 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.147105461 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.142332167 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115157695 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.140351677 seconds)
  done (took 3.026978005 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107014865 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.103229673 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.327458884 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10154307 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080533151 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075260217 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072960807 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078090933 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073000469 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075106597 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121001621 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073277674 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070548223 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12282168 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098466627 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105708116 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069845012 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077484351 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078582619 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069363772 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07451238 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07884048 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178384811 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077525402 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100964544 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073733362 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075649106 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072790283 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072639237 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076598988 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077280489 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100641085 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077742312 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083180951 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074997932 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097491775 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070725665 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100605939 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073529681 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071080065 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073749733 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077522845 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071183629 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076999602 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073982459 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076364273 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079456091 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.06984612 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073983225 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073548719 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071589731 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075036913 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074892289 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075920943 seconds)
  done (took 6.174986268 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123529412 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110175387 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068151599 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.118116112 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109731009 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068500944 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124691371 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103947655 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122909246 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068168308 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068931398 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068187134 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075083669 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078949739 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120505 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113764309 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070521548 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068498057 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112938078 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113670902 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06783437 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.12538406 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.116281896 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112607651 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06729155 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068735637 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067128301 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067732543 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076192065 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075512892 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067741849 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078675464 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080437318 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075218304 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066856923 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067160439 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06735948 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075904129 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080523683 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077404736 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074466967 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066901511 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067033287 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067990686 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068365487 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066872119 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077596765 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076168896 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077803572 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068657512 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068184488 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067416432 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068913999 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075266651 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074294973 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075801789 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078890855 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068476615 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06769891 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069184813 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080013969 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07678037 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076600029 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069252751 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07792577 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068019154 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078890864 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081900287 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067844454 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068301323 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06785531 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067853525 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06832643 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074672034 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075013627 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068380192 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.06918042 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068056774 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077754819 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077214802 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069118679 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079300361 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068663685 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069181368 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069742508 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071296346 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.08258402 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079447028 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070966172 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070861182 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070557268 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070757931 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.227439437 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076029071 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074393013 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074364006 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075740495 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067065962 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076352639 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075043139 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067093306 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073133744 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06664358 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06705055 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066823921 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072991642 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07268619 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07450381 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066383497 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066295129 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074475149 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077116259 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066778323 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072836717 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075300382 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073619405 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066139485 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076342036 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066747034 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075966486 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066677464 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075126517 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066756921 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073227282 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066541384 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066000407 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066532304 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076931335 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068188687 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066551055 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066906467 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066654377 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073486207 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077709267 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067764574 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075207718 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074920865 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067832023 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076993606 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067653314 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07720764 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067681768 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068015994 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066744421 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078927676 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067782154 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068669683 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067623648 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076965376 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.0676391 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076989754 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074581895 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067269887 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077893165 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077209257 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07435317 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077622138 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068479247 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067887385 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067609158 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067984002 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077659764 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079082528 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069520544 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068127376 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074352372 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077959107 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067671187 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074611764 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074714131 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075260612 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068202545 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068143479 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078315519 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080708566 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077292063 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080355143 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.0781811 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069481147 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077582673 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.081056002 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070288861 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084994723 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070391383 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081536367 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.082216036 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.234363433 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076725232 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077289344 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075037381 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075157242 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077088519 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066182913 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066376212 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073109463 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066738002 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069451136 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072487431 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06684409 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067613634 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080422699 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06708918 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076049542 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066175834 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073544937 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066065713 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067062251 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078214485 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06682926 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067089716 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073900196 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066603528 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072896609 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075489027 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072709138 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066453173 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066914583 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076665726 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076590579 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066552656 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066440234 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067041584 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075519287 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075050783 seconds)
  done (took 18.552297776 seconds)
done (took 39.047075911 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.198405788 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.116666429 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.204478868 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.135540102 seconds)
  done (took 2.086231871 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101037414 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063287264 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.126622331 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.137881179 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063952773 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.123721104 seconds)
  done (took 2.080396724 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.257196946 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.182467737 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.186420947 seconds)
  done (took 2.094732146 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.177273718 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.315467527 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.574927116 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.174921335 seconds)
  done (took 2.716376904 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.163892039 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.15339871 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.076093086 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.166952601 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08312365 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060373128 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.147544219 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067924779 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.098599874 seconds)
  done (took 2.542054594 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141484957 seconds)
done (took 13.132303322 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.303258276 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.126747629 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.077252029 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.071098317 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.177208963 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.178101986 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.261762938 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.073812191 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.253093237 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.359833983 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.206558081 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.09300482 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.14381808 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.088206506 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.321249116 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.076126789 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.073326785 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.068762105 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.190200011 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.188753548 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.228178424 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.073219598 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.138007558 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.074961818 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.150162733 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.124091582 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.213877304 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.351727496 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.321513249 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.075560518 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.172926914 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.092501251 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.166065427 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.177812953 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.181433931 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.098937731 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.065441349 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.307453685 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.150562055 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.372401908 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.200899336 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.072422695 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.191290391 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.070226344 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.1288733 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.134506863 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.078763647 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.071775995 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.090108669 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.071914502 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08739259 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.072275408 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.188489694 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.068983869 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.140402671 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.191432297 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.377698037 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.207901124 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.069588695 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081512146 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.072835195 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.194027044 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.087192953 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.068619158 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.07479332 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.064968678 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.176725151 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.083364282 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.065182165 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.07316068 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.071522222 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.149875984 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.133621748 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.107778036 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.074459201 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.161708338 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.139774335 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.090199911 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.094843434 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.072209051 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.063911656 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.208267534 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.069211975 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.081860924 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.068863857 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.099004042 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.064373551 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.083101958 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.194660557 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.191800491 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.120691601 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.065190269 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.26714144 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.066212198 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.093621689 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.128832833 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.065998419 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.208840201 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.066055008 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.065382192 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.07363589 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.072189692 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.067043399 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.197231602 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.148947125 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.071853032 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.070560733 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.065062592 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.069380746 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.067099241 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.065005221 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.064459248 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.143107391 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.08499706 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.065712281 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.151723749 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.172562955 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075793445 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.083118975 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.124789297 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.067538505 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.073417767 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.072302356 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.170112613 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.073076802 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.180133837 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.068125803 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.088581407 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.164976577 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.141418595 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.152028464 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.066770611 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.201845233 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.075520083 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.066133974 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.072294864 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.09356551 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.075124534 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.081674296 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.074280987 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.203083681 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077537478 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.071967379 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.167657567 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.067614272 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.16025277 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.323403532 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.175047509 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.070145003 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075219121 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.204173705 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.08838336 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.093644779 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.087416072 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.070134261 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.065527666 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.06494042 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.078637413 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.065632352 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.06578801 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.078121467 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.070317437 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.063803113 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.226353117 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.073740305 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.067565076 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.246591038 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.076135991 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.131157566 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.085527878 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.06588446 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.149300604 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.065832874 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.085462849 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.201148972 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.064547131 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.14039981 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.065774728 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.065012257 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.07110731 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.06662355 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.072200077 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.076715628 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.06596136 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.077156071 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.071231231 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.063827187 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.148648593 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.067709191 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.213106782 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.149509389 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.153126595 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.065183044 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.084050755 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.065927707 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.178924253 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.06625098 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.113338607 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.160745726 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.081199242 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.086239896 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.065749458 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.139785388 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.079844346 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.064476484 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.14744937 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.173641734 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.132402693 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.071949907 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.232907756 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.073896398 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.065338514 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.072311745 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.07274517 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.065348551 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.14217729 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.069578182 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.065806093 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.065585486 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.067658366 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.064947845 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.091004598 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.065440408 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.072001365 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.064591353 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.067329101 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.068152862 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.065266131 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.072534591 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.142435325 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.174732328 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.070381345 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.085763182 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077692984 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075796998 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.188462162 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.071960271 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.187784523 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.066020868 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.075602936 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.089448786 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.067890423 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.072797415 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.06695465 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.086410506 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.253465197 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.06796297 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.075838198 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.066426967 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.06448211 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.0653692 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.065749286 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.07200393 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.06694642 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.064782238 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.064465658 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.063579158 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.068103046 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.06968192 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.073533947 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.083947068 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.436514775 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.065191404 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.067467789 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.063831043 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.063501233 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.065202318 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.064886849 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.064637142 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.065950062 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.065216786 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.064311412 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.090989857 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.069120386 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.06394398 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.085167084 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.063611564 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.072398668 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.169862129 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.081078463 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.069362429 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.063915973 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.247678344 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.147102266 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.08560432 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.083835723 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.06438062 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.073762176 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.064167139 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.065884892 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.064085537 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.089934816 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.070156437 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.064206775 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.064981629 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.065070595 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.186685569 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.072399533 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.065062973 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.071642173 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.068143742 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.065139979 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.090942096 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.0647081 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.065698299 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.083010976 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.076725632 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.142679984 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.076046126 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.066970396 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.189500363 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.065858251 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.065588328 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.064678415 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.156145254 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076377741 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.066910285 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.064989197 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.071136324 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.072646648 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.247713593 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.070489102 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.067753407 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.071955196 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.06483344 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.064905037 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.089564543 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.093245532 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.067438711 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.067783345 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.065995212 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.064878763 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.137760648 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.072162589 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.069274142 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.150464235 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.068137719 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.07212132 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.065646048 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.445155952 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.072723328 seconds)
  done (took 38.581218364 seconds)
done (took 40.074382068 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.148690864 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077941936 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076946326 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07246607 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076334262 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077356949 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078146216 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07389916 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076547193 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075783809 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.128357444 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063447553 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070962732 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078461891 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07258273 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079568332 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.076087198 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078956399 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064602447 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079305813 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.091752385 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077432878 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073543731 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07922126 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064813301 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073105792 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.142496437 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084679553 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069211303 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074115032 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071832904 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.078153396 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071826579 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071417241 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074148835 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069332965 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074487754 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070646006 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.142544324 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069559964 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064662044 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.084552368 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071252863 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07209998 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072975006 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076291592 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06940853 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078269155 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063899267 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077172047 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.142829006 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069759565 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069133132 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072718101 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069594226 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073887223 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.06901267 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076159554 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069336393 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077002629 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074379526 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072412914 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064349123 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072964768 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074465463 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071623238 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063296659 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069767107 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064382401 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064331812 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063826573 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073672219 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071630116 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069470029 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063914781 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064619907 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06408602 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077036915 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0716499 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073578152 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065100696 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070175133 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.0695393 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065117775 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069883492 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076349085 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064483684 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.0652744 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063969586 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.076524376 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071408465 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064742384 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.0768813 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070255446 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070135922 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064794049 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064243483 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070433438 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073911343 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065912189 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064762857 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071507367 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070984025 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075573426 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066822189 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072162874 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072651984 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066130128 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076411518 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.240692488 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073527704 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.076684174 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.072747322 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.075005224 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.064150648 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062533064 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073262989 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063862069 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068978049 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071135872 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068732462 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07142233 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063935095 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062377023 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068593943 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068954149 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063612774 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063942627 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063634015 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07219103 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070394688 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062093168 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063243692 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072150116 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072135335 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062739308 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062459421 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072053688 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063713692 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069293818 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068434402 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072052845 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063026992 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063801919 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062455321 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062869013 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062588708 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068471475 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068685924 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063736122 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071964484 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070439619 seconds)
done (took 12.903150085 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.079139302 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10751064 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.163954682 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.127736611 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077921682 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065546872 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069142748 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084444962 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067669186 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08996089 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089913257 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086138783 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.150922581 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063407164 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064737051 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065587895 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063000628 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077050919 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.133867259 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088639492 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107970158 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064483768 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081613507 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084884635 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.078107612 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084187988 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065814512 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065454364 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067838595 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082716598 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090888383 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064911482 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065924724 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084228952 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081132922 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074085832 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065764989 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071890747 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065945636 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065332243 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066903038 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084052902 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072194472 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072567208 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065792575 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065693655 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065002838 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072712048 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.07966497 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071411747 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078092663 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.082500158 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066945421 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065198875 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06317288 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073108591 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064833725 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065666756 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06587144 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065087741 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065915516 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068305059 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071541974 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076187936 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069430602 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072932973 seconds)
  done (took 6.710329679 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085533337 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092761481 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07860835 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081766896 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063894194 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064336334 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064907067 seconds)
  done (took 2.148034376 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.112802144 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.125595288 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.133278246 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.134275429 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.145773038 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.131588108 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.077701611 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097171661 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064299132 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.146667153 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.142524064 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137767808 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068793351 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077909829 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.098249463 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.140811578 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.07832183 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072361768 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.132402875 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138092164 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07003469 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096178982 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079170002 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066015301 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.136734333 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.129125434 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.068739049 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066293888 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067815745 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065188575 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065227759 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088858532 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.128827356 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080926604 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066294028 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064653161 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.126382363 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066445302 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.128887567 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072689864 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.12931733 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067622338 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067856185 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065554277 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066895201 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.133998408 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067186653 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065859567 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065545735 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.133455271 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06557872 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.131936682 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068625198 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071319053 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073572357 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072637373 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073234657 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066455088 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.135112798 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076822388 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068299597 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.144857218 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.145585106 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.302012557 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.135845658 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.073923725 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.126678439 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.124421596 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.064186382 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.072357074 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.064669115 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.13557821 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.067942259 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066962653 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069327561 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071794136 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.139615571 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.139422378 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.139856818 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078120074 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06717757 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.064439768 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.137253874 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.139888847 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069303613 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064438915 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065472984 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.080256905 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.089315799 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066645161 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069545191 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064422103 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07463106 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067308261 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066433223 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.134417088 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065709493 seconds)
  done (took 10.893976683 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070202221 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066939952 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065726229 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065688012 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065870793 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065864647 seconds)
  done (took 2.053065074 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092405156 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.06586465 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077523766 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065564963 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087522189 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.130124218 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.13033864 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067177502 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082233703 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077317754 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.130999775 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.133005479 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.133197059 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067468575 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.132118939 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.077889829 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.133227433 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071030068 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076933071 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06743672 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079850866 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067241678 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067372617 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.14022956 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068907883 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.077364236 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07547708 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077419493 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077246699 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068208313 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067681088 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.06840425 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075253608 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067728418 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.134025306 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075426634 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066632308 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070881882 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068078194 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068354415 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.136529697 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068042828 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071031701 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070799299 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067345265 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074942727 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070695961 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070295041 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.134329984 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071023949 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070918155 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.06982311 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068704815 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071284097 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07580685 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068008128 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071401721 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.136021609 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068074162 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075973183 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066819937 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068985641 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06824827 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068825758 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072174161 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071579892 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076047719 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068535089 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068618471 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067212117 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071747047 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067323799 seconds)
  done (took 7.527114376 seconds)
done (took 30.925856049 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.55142162 seconds)
  done (took 2.156653731 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.010066413 seconds)
  done (took 2.657084242 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.097262909 seconds)
  done (took 1.748009636 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.338677514 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.438788135 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.770033297 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136432866 seconds)
  done (took 3.315890067 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.885370523 seconds)
  done (took 2.540141058 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.265859392 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22644208 seconds)
  done (took 2.169561263 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.481237865 seconds)
  done (took 2.127440634 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.300605091 seconds)
  done (took 2.955267072 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238531055 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162229313 seconds)
  done (took 2.06109035 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.666014387 seconds)
  done (took 2.318819261 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.614939838 seconds)
  done (took 6.271873047 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.277766993 seconds)
  done (took 1.98731658 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.242260198 seconds)
  done (took 1.89929679 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.753721628 seconds)
  done (took 2.40633148 seconds)
done (took 38.297193082 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.090114052 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084305243 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083887561 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079430597 seconds)
  done (took 1.969368789 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075592652 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068830645 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071564925 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071762101 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069399054 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07114419 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071365937 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067852951 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069327342 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068728584 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066777348 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068364314 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070821529 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067918312 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070396607 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072040453 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068414792 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068812121 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070679871 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068200323 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070992897 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068224933 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.068512887 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069669073 seconds)
  done (took 3.329474362 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079267612 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070336419 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073238164 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.06870779 seconds)
  done (took 1.952198813 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077345935 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07453306 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082887258 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087929263 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.0740005 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074629237 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081472946 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082416307 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.08824717 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085301718 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066087955 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065672523 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064774606 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083579612 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081164946 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060726857 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061582025 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07491585 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074398683 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076931567 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067690351 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063416117 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073984563 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075141469 seconds)
  done (took 3.455232822 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083158448 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063566361 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.086015838 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088663928 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090022352 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063133273 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077383991 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090176877 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126961694 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064109706 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069712293 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063754142 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102711027 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063606977 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.07915892 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108513794 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111523383 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067784926 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096789311 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063739319 seconds)
  done (took 3.33068506 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078410355 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068137337 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068323105 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064533397 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074495078 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071057388 seconds)
  done (took 2.093289048 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069142129 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066886451 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06518432 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070119376 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066218686 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066099368 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065512647 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064091087 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064127011 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065049759 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065123175 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065534236 seconds)
  done (took 2.456514779 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.217100021 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070890667 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068264654 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064043869 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065603564 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064655623 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.0789928 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067144276 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082134264 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065132069 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065309387 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067162726 seconds)
  done (took 2.639171673 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106745029 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11026402 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143368491 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114660258 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113846829 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094595775 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.185513197 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092642786 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165559809 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138151298 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116774559 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09090969 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085413923 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067994573 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0995387 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120190189 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138123941 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071715392 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11270951 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.227952198 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133642062 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136365517 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148044972 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116833937 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093101365 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147894274 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096058565 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103147008 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123089276 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128260418 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119179149 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097541424 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070655584 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070076695 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151512586 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.109584335 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122658909 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09296311 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106725901 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089124084 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109916632 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06934919 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.0835611 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114315867 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086903446 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137016377 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.094044365 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121768166 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.256351566 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137238566 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12600695 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.156871499 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084164612 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103167296 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136008541 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110183977 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132358869 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104127022 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080595959 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117198857 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103836627 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097616113 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106249549 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078104737 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.175637788 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087581599 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109998893 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109898617 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.09473978 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095507382 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10682544 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137660727 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129402208 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.128919892 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141431569 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092696378 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120964211 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101611439 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129010465 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105043589 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072249729 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124619891 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131594307 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101971038 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102041363 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135267972 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093585569 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075800343 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102783318 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121403861 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080776174 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.116810187 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08155847 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.113488328 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146454748 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105392331 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.290208781 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117376445 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076535097 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151840465 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106370265 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070844246 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114381562 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110165039 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153959676 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092880327 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074373599 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098013073 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100794919 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151399173 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105630049 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07809754 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108108251 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139038153 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09277948 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.232645553 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094304694 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139771832 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111762686 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086734866 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074546922 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089623512 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114272878 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108247292 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112243525 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094195607 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083477008 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085907952 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115889691 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093907436 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080628157 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11477571 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.104563336 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074792736 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088790124 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076196059 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143683265 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078458581 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141626325 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128518957 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077300999 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108736817 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096854321 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107889358 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099242601 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121896259 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146960594 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.195209967 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097021627 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.281603147 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10768814 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143705446 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124796423 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090384922 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075132632 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098483932 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109843529 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095822299 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122337234 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09227555 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105217501 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101460297 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139442888 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143945844 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096358103 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098682681 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105542568 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.120051571 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073197963 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154925259 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102535823 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11738937 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087041591 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14261626 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.113253211 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089830643 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086729367 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100234125 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105653754 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107646907 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145941948 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095855793 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071778438 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093060699 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146369201 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077245837 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110093135 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091624022 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092901378 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121326343 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.096542253 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081609924 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067833796 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13219545 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.165012404 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070439201 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115162056 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.113971033 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109578852 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.130666561 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071407455 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.305442731 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135814284 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115081109 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139820792 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165758626 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115912555 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117053731 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111300855 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103800095 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077341963 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.123334757 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13291569 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094316831 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089893248 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133553933 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116437639 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134198385 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115824398 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116527293 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.104626722 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105956855 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102760001 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105760081 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147008496 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124217783 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126223935 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083642206 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106661082 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118887126 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139029637 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081983686 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143558259 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.08590385 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122123826 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07910934 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127077863 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077644962 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.171877413 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079910779 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102061703 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069548579 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074459056 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146894227 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.115188198 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111258793 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104686895 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.144711424 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.14435414 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.263304137 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107201885 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11349996 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099831997 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115353104 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106802146 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087441058 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093008431 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104962653 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083718843 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079586178 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113198799 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09168145 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123171375 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082403187 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0732101 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137465987 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102265979 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094119947 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074533858 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105078132 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121303263 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091184872 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084954332 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113280136 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103563332 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140958575 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090007491 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097208161 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.126725947 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08013269 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092270387 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068660973 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08496983 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075342256 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.130499306 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075431761 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11827691 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068075437 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132653633 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087972217 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092469548 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102397778 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111153358 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129501389 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095127575 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143844289 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091334439 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124889047 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111087213 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096350931 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088504181 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105426597 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102844586 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126037273 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097443335 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132535482 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.333920064 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101984465 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141216437 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089028763 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121047136 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105279957 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121860228 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109649925 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165868473 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137390487 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109895782 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108016359 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073379558 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096681396 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103123102 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110610432 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172248822 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124901624 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070724724 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103471047 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092102038 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107889736 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10326285 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081170772 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146170808 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104303893 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087813794 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113213375 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091992963 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104441417 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075957262 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100659059 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105922483 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096212947 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09976812 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116366518 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131604716 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114147815 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147111482 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10115323 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092321602 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120792609 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112901511 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112055657 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087269609 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08757677 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143231115 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123698019 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129994471 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.103792593 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116499042 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.29519725 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099899084 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123946227 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106413603 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.124810424 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078521237 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074736974 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066431197 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070194895 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12193914 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105525475 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109395843 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096377147 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070236591 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100897519 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101485182 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070399668 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086000709 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091981773 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095906414 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090385908 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105054539 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11084479 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094081501 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102110884 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095939378 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145957469 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100670854 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087929318 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149117676 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153648352 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088499776 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093321867 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07109055 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078977218 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113207354 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1522237 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154513068 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07851845 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086628108 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085992358 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087421647 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07105848 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089270308 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088811582 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107174723 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10015702 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115679277 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106944869 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076064384 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103938876 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100935952 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094063473 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.110286578 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124682155 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132314883 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.327445452 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114964876 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106312982 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074944154 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.079125895 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074297611 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077636808 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099481804 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.076884481 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074248304 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140469342 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089581003 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102482316 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105835927 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085685948 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073714191 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132008431 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06787995 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13297383 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069390091 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079870049 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079967385 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076939145 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091304181 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13552194 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107459365 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109631979 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105401165 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103027513 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16165687 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16067164 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082456411 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143621914 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075991735 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076501127 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075518984 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11194053 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090199646 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114165933 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144216499 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090450862 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101967721 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077882715 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146928821 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100859975 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106265546 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087030276 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079373441 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147969195 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080060432 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082589472 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090648529 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113455364 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072877843 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104433341 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083806675 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080784186 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.352090468 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.708764064 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090512916 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.074231186 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093978533 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142262435 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131060821 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09471934 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106777681 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117458784 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099631509 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092869321 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105846454 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188368135 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072593667 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092426449 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101723002 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095938587 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099570664 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096835871 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.0870874 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09030976 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085062588 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077554356 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105255915 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086230481 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094923909 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1064337 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082171867 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087530989 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130841901 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103977574 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082816821 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088485526 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105364577 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088104739 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103769017 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069309579 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11300267 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089432583 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120223339 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098193236 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108083227 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126848122 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095143568 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140745939 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.110694878 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125621918 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088393653 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079231003 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131880214 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.092655823 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078729589 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154613322 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.102941116 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.287822399 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102954984 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095747764 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112171796 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115327519 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11147181 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094923194 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077189815 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099261919 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099999798 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0852444 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077217668 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.07241159 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074582717 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105241655 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083676082 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084369958 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110536946 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0867475 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101088318 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101319169 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12035796 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085879632 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098795816 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108786243 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089536095 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107499852 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099195123 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128137042 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175176863 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126793035 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130501005 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136262047 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07803562 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075458718 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068153284 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114075799 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079170099 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089334999 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078307154 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13676617 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082233432 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113371259 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243737983 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080686196 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095700663 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098013693 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069299042 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083695641 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109379658 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088076882 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081188581 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123222806 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082657815 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.133195235 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114169827 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10281982 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10201371 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085882631 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.299528559 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104363577 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129218937 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093569409 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.073954573 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121644868 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101714325 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135721401 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071522225 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078858001 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.652842084 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102596206 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128956339 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078057073 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147015955 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14014885 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09848434 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132266853 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069296924 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086338192 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088476969 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124678654 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082653733 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109802375 seconds)
  done (took 69.541527341 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.185644574 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.183349699 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.12173951 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.134011023 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.29009336 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299158564 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15269814 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124414548 seconds)
  done (took 3.312027937 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.073795604 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081991544 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079620472 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.273244717 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.100426741 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066851316 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071367031 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080694027 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072493825 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06614242 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103659239 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066101308 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069779179 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.553031648 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065881528 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072230449 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070573985 seconds)
  done (took 3.808733811 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.353700817 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.685504025 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.338020312 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.765407105 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168734529 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.725047142 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075794608 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083937187 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.956203942 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.402699423 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.16202981 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.225705638 seconds)
  done (took 21.759862746 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077673784 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.141794115 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.140925166 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072919011 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072754331 seconds)
  done (took 2.308157336 seconds)
done (took 123.686001324 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085135403 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176835275 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06761164 seconds)
  done (took 2.084290078 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.143864871 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.140479608 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.140056558 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.14188216 seconds)
  done (took 2.380441887 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076173652 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074902265 seconds)
  done (took 1.972764279 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228780421 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.235389598 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089740618 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085106866 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078600163 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078841897 seconds)
  done (took 2.06717263 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072734864 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069572925 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069708207 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070035651 seconds)
  done (took 2.091114528 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.182717689 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066207202 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068135246 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070031368 seconds)
  done (took 2.198046874 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086730539 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08559677 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114925556 seconds)
  done (took 2.100673007 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08488295 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083370307 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077629409 seconds)
  done (took 2.059353482 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110891752 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095311613 seconds)
  done (took 2.017956776 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08067372 seconds)
  done (took 1.897051261 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093261234 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096741767 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.205676848 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.171674606 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.208559835 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.193666343 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075871335 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076100321 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071763721 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070848013 seconds)
  done (took 3.073065554 seconds)
done (took 26.395082452 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085741582 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.192775683 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.316067332 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085521396 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.653544426 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.313286968 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.723026604 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08956308 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098678154 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067031652 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083347529 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631271971 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.730625707 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.144259456 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.713033104 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.137047909 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.563181394 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068394899 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066471621 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067153669 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.707068236 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067776016 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066944739 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067663944 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558700794 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.332430154 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068622322 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.136665675 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068031303 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070794638 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.314341444 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068248772 seconds)
  done (took 14.148999321 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076758849 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125281817 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071967256 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082033634 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068701308 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06904358 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070539641 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067268323 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109894739 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06732604 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084080615 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066359179 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071322851 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068222112 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.0873567 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066978641 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069124288 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06764774 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067028124 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067724244 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085936903 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066509507 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06739245 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067372966 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067252803 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081684528 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06820607 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066857501 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067166231 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071068409 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071970875 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068229932 seconds)
  done (took 4.206735892 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129045311 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129277384 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072434791 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106848814 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121002424 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069408241 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154781573 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089704895 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113600216 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067502821 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084111227 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066820825 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102954456 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068259927 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087448469 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067028164 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069254967 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067344191 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066941266 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067261392 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086234412 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067049411 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067342714 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067526739 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067343782 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083323421 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067999246 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067104818 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066907059 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071190971 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072982387 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0681879 seconds)
  done (took 4.487990278 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070849423 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069622965 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075490116 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07875784 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064901703 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066904235 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068198239 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064996423 seconds)
  done (took 2.402729005 seconds)
done (took 27.08823264 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079951096 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066374199 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069003062 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085864354 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07236172 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.132377288 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063380407 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072985542 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069624187 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.06962814 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071279569 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065669983 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068212976 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063103159 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070061408 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064134469 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.135667076 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068665463 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.133897127 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.133809581 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067142261 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069887326 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072807416 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.133996499 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.133879751 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.135117168 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074242803 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.0709542 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06513874 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067749049 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.206108621 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.208203467 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074465284 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.130274468 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064717548 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064550763 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068893179 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067097149 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.138365924 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073951863 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066866127 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073470158 seconds)
  done (took 5.585643021 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.212100848 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.217442639 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.210606248 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.0797795 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.09050892 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078865621 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.21707422 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076552335 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074439118 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.216045977 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070494168 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07461847 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.077116191 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067716952 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074196246 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070545141 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075966268 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068544813 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074274345 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074167586 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.21627124 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068333974 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.07884767 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076037267 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070542483 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076773524 seconds)
  done (took 4.656609011 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076261898 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088929957 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091267646 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145877542 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.10947853 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081738354 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081825999 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092460895 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100220064 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066975011 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.088830659 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094247644 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095092427 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07364493 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106716706 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085126954 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.079220677 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.06843947 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073468753 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.101348459 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089790765 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085143895 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099792667 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087431898 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066113745 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.0758033 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074304211 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082735996 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074275735 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079085013 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.123061954 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070425187 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067334131 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078008294 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070908757 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064796674 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089433747 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080318164 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081872049 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107209621 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077353758 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068599585 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094375381 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132311928 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066933334 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069489141 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071029255 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080438764 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068771415 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098002078 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082910711 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067047762 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086409883 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06882387 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068821697 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086346647 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068896238 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069042069 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078947756 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.0732121 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087983206 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072567978 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088250788 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067072546 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078882876 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.06839311 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068745798 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065747797 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101222586 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074463486 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117452106 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068228816 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064838937 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079730135 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.07871196 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074270482 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066991763 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086387255 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079198851 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071114316 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078153225 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069588507 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.07020835 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104056106 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066263899 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064903611 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064820154 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069288009 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070822713 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06806831 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08071284 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067261729 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070842972 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082536328 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067537696 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067970224 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069513532 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068303807 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066995535 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078182302 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071637293 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069744763 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080809216 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068761659 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070849966 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083093476 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077481638 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068213039 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070162162 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071725652 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071291935 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073931493 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072657365 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071648968 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074539154 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077174302 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076038137 seconds)
  done (took 11.149179585 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.23229275 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.218327113 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068284211 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.214800206 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075763399 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.147790945 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.216568531 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.217687411 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.06785408 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068438802 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066348602 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.16191516 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.15762974 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.168541419 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.150082411 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069781374 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094419712 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.168851104 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.222669208 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.21733532 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093698136 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074939943 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070094677 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068977251 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.0682888 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076154752 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082456805 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.0767266 seconds)
  done (took 5.529032588 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076335075 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.110680633 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070694307 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090886795 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083554173 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066871401 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068884661 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067958245 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084005212 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072551695 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066679667 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071437075 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070139231 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.06930772 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068175649 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073360129 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073523877 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.074441171 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072482327 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071450254 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078001563 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155191637 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071489105 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067213531 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070033536 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066931553 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073600474 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075484589 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066644512 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.072532907 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063827277 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070983316 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081648208 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067813232 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066800299 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068025173 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067254626 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067048397 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067459609 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065058319 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065106519 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073162712 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065964434 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072292094 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081770009 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.070348666 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068734259 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069682618 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069506492 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064188678 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070916919 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071052362 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070271494 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076061213 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071126568 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069804928 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068948082 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098773463 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073568242 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066784832 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.130146091 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066205088 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069176374 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075585126 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084237957 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069108567 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065742332 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.06742636 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07806215 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081978469 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066916859 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073036573 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064387202 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067448698 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069794907 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070363196 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069178426 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065749419 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067368587 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067571784 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068388079 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067166454 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067617064 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070223008 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064962343 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065715155 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068200259 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068693425 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073154205 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066308666 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070383401 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069431033 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066601484 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070765814 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074158783 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071212262 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088639358 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076505059 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068534274 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065776576 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082945414 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069728567 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067352595 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071817938 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072476539 seconds)
  done (took 9.568652482 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098536351 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068322564 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087864595 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099652073 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.077129448 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071872651 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081156947 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067045909 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088511404 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065597065 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075235258 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064726374 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080884709 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076105665 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068202957 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077117988 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069071121 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087832913 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081740961 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06519724 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07598705 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079129954 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079128657 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085187779 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084813102 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08584406 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079045808 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069028717 seconds)
  done (took 4.109159221 seconds)
done (took 42.430372453 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.93541669 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.172187543 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.935694198 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.670651707 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.066938918 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.936844458 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.021346153 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.921633816 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.345551474 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.997135455 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.750846431 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.639578259 seconds)
done (took 69.322145192 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.939998527 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.079247441 seconds)
    (2/2) benchmarking "String"...
    done (took 2.163157732 seconds)
  done (took 6.109862254 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.356013921 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.919456949 seconds)
    (3/3) benchmarking "different"...
    done (took 1.957210315 seconds)
  done (took 8.08783117 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.204633236 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.477857592 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.194696585 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.918032783 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.925021868 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.405924955 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.08070319 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.557498452 seconds)
  done (took 33.426907584 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.928442715 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.263266581 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.335150024 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.427556565 seconds)
  done (took 21.894527434 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.373821044 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.345995496 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.34242558 seconds)
    (4/4) benchmarking "different"...
    done (took 2.619699832 seconds)
  done (took 11.644316623 seconds)
done (took 93.318050075 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.919014962 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.178721039 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.932971973 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.104000871 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.946553504 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.980233006 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.934498034 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.948097327 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.93276971 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.92558512 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.934648813 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.921450921 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.920137843 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.964883612 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.921985936 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.967147259 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.543180218 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.930507803 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.95232197 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.754016885 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.293616371 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.928211393 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.931211834 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.008787573 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.343075066 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.008888461 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.342501697 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.929856718 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.537490088 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.931933782 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.924155807 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.925942898 seconds)
  done (took 209.572531428 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.920770693 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.736315308 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.765673238 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.930085934 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.248488824 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.265450175 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.767061995 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.2733007 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.925164552 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.950204549 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.831034946 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.920501421 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.91381834 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.469765782 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.95311668 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.92769762 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.783596906 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.725124046 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.95784009 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.831187254 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.923536949 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.451825926 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.417442725 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.704302798 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.944353467 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.942267694 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.929799259 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.943825879 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.420389362 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.760019323 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.935906038 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.943316698 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.269092202 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.151642512 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.92617698 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.931625044 seconds)
  done (took 182.559350469 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.14870118 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.927978298 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.962817152 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.03027019 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.896434041 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.720046435 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.922185124 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.919064871 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.918891251 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.92682356 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.931033965 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.987595638 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.921669718 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.03757766 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.94460282 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.921499602 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.92170668 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.15467889 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.932881082 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.919004577 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.91836006 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.025951021 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.273680547 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.029946341 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.921984253 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9343988 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.031884283 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.930383013 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.920700768 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.921543041 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.028474633 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.924314715 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.047157778 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.030525487 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.936952851 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.97893146 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.929333415 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.121867772 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.92384726 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.921585638 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.921475607 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.969086988 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.92385151 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.983257406 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.023927098 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.92888914 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.938717289 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.370537104 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.498511036 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.926773692 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.922171124 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.921034798 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.925742777 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.925059816 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.346383888 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.927085152 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.959648563 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.345791979 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.928262718 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.921137104 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.920207406 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.923284089 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.924937014 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.926714098 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.96307417 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.504395946 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.608698629 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.279961087 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.659934916 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.926018616 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.924432051 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.922254805 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.581144684 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.985744756 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.926411822 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.922654767 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.098395594 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.928165397 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.922664275 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.843683169 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.842116696 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.928654283 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.032701444 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.926220694 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.923747356 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.01861437 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.206566631 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.128524597 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.943623398 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994651599 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.927521935 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.924496548 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.953537072 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.091260824 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.928761193 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.940025647 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.602636928 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.926764052 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.923627797 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.940950913 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.309622352 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.925090266 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.007817964 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.34791078 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.803981416 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.941836092 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.924000664 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.942965766 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.927506861 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.938819185 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.946657445 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.930304595 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.926698403 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.930810114 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.926504959 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.922701697 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.936383633 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.942314946 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.923984073 seconds)
  done (took 424.400359947 seconds)
done (took 820.667792944 seconds)
(4/20) benchmarking "parallel"...
done (took 1.860373039 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.308749139 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.043825794 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 7.031654056 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.512806312 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.124196743 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.089729628 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.120595487 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.210014169 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.145882835 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.083232686 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.1449333 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.097780954 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.210392871 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.175686841 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.183470031 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.206424228 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.115417412 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.660218622 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.164929994 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.096931108 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.122684138 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.100164673 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.086375522 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.165947696 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.196009707 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.124388782 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.355673283 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.175104893 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.138565517 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.177141081 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.194638813 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.20674389 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.130721948 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.167598369 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.195536781 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.198902514 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.122917876 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.190686605 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.105850975 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.130278335 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.149477271 seconds)
  done (took 98.025438505 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.277176941 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.08892155 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.231197131 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.214935151 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.975948758 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.197882543 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.302945326 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.08897526 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.089209106 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.203095128 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.229969541 seconds)
  done (took 27.794908704 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.19378293 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.0984673 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.212403808 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.235683116 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.323466553 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.196988748 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.273224511 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.091935104 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.089112907 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.216125162 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.212490407 seconds)
  done (took 27.026369771 seconds)
done (took 154.707766279 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.476683553 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.989650896 seconds)
  done (took 6.332029168 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.950978479 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.931492345 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.932517987 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.935912981 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.933933073 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.932728042 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.109372792 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.934343311 seconds)
  done (took 17.527423715 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.929306464 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.930837257 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.932291079 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.929203613 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.933418682 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.929751978 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.929178535 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.931504419 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.931502185 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.929533979 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.930119178 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.930718917 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.929850253 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.930735181 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.934527236 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.930539768 seconds)
  done (took 32.759798557 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.931270729 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.934713484 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.933190442 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.933148009 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.93221956 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.93100961 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.935535767 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.940747127 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.933387626 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.930403224 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.932113228 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.930035967 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.931800397 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.93471598 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.932879663 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.931848 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.933582674 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.931320747 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.932974582 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.930078963 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.931499451 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.933779642 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.932498914 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.933493557 seconds)
  done (took 48.255835585 seconds)
done (took 106.757837492 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.53203878 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.930878586 seconds)
  done (took 9.32869337 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.936677568 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.932112011 seconds)
  done (took 5.83568783 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.93402203 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.932454539 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.932082836 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.933281679 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.934165838 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.933810013 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.932057845 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.932407697 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.932597896 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.932077792 seconds)
  done (took 21.19784109 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.931596983 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.933661826 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.93283488 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.931544785 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.932056069 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.934244349 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.932732077 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.932846306 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.933685755 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.932160933 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.931580027 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.119448342 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.932296385 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.156826792 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.933398986 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.934171016 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.933378305 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.933244774 seconds)
  done (took 37.070187646 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.934036867 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.933622348 seconds)
  done (took 5.739132055 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.933657271 seconds)
    (2/7) benchmarking "second"...
    done (took 1.93537622 seconds)
    (3/7) benchmarking "month"...
    done (took 1.93550332 seconds)
    (4/7) benchmarking "year"...
    done (took 1.933384486 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.933258363 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.933017847 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.934570607 seconds)
  done (took 15.408225759 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.397342511 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.10174544 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.153544475 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.416858483 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.529467044 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.864187436 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.546122518 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.863407083 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.739267921 seconds)
  done (took 24.481563267 seconds)
done (took 120.924439963 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.60100939 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.947725184 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.557943438 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.046405766 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.010627237 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.263724709 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.94716838 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.464545785 seconds)
done (took 44.727779363 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.21435514 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.931443581 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.97187866 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.972408421 seconds)
  done (took 22.753668285 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.950035722 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.502560327 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.970483468 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.212400103 seconds)
  done (took 23.591361069 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.438628563 seconds)
    (2/2) benchmarking "read"...
    done (took 2.461166778 seconds)
  done (took 6.782136961 seconds)
done (took 62.216439913 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.936340524 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.934915597 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.935064087 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.934533726 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.934775354 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.936387493 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.935318084 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.935922143 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.936336352 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.937629735 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.93452442 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.936248488 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.935693676 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.936344459 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.938577323 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.936170845 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.935840991 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.937110037 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.938877009 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.935521673 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.938094772 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.935449056 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.934972086 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.936571391 seconds)
  done (took 48.338427817 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.012521356 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.995444845 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.013322599 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.009050083 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.02678833 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.007947819 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.008097069 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.981662836 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.006216919 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.980802221 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.969819695 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.020887639 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.970750112 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.022966776 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.973579359 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.022035438 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.015642412 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982751284 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974104824 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.026095225 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.009159345 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981899173 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.024043142 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979442535 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.017913806 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976109187 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.983963359 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.994635503 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.969338667 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.017566528 seconds)
  done (took 61.846425156 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.968414828 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.936051429 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.938972903 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.022283504 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.938078254 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.937801324 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.937913728 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.937173688 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.937579318 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.938421726 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.938075912 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.937665615 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.939090907 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.938723902 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.941014779 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.939832091 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.97547911 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.116241371 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.938155987 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.94044725 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.987489197 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.938881139 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.939003201 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.941749383 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.940346579 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.940149622 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.937016447 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.939101628 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.939568891 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.939655934 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.944601648 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.985273802 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.977868754 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.9396633 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.054758193 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.998756762 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.938907241 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 3.493008323 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.021133012 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.975230949 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.938480789 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.94175374 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.939517869 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.942188213 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.002893415 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.940122573 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.943467405 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.940536367 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.941995273 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.940818877 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.941757862 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.941013497 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.957292762 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.93957762 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.940881356 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.940875737 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.940613469 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.940427866 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.940354424 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.941688358 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.94034159 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.011794097 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.940746609 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.943624633 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.306861028 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.941334974 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.005603089 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.939863116 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.940777219 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.153329865 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.940742726 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.13962563 seconds)
  done (took 146.847838269 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.942873501 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.942383239 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.022386635 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.031559552 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.94161282 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.942109079 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.942181328 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.941504056 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.605669724 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.944801186 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.941865047 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.941052661 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.60382266 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.94251144 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.942441096 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.022200482 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.943880788 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.940877565 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.941850088 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.941043261 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.945089599 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.940803417 seconds)
  done (took 46.182099266 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.982692087 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.95613285 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.979871087 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.957644117 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.956943992 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.957397583 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.991395323 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.95927503 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.985082766 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.988635812 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983118885 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.989583102 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.958815332 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981070815 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987381941 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.032880753 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984604281 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.03491892 seconds)
  done (took 37.545280582 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.119990525 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.108481206 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.022763679 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.982063588 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.198159852 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.169032146 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.046972292 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.113585813 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.989667841 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.107370293 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.114433283 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984584377 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.165876554 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.985288959 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98629377 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.195401737 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.023644946 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983887816 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.05510329 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.047136696 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.118733415 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.054408506 seconds)
  done (took 47.45270233 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985699216 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.993658133 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.012170268 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.013111242 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.942539438 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.943829838 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.001537427 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.985189856 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.95973824 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.985748855 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.991464835 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.946823706 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.028415758 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.99991662 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.028578201 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.990972672 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.995625956 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.999633946 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.985797241 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.944578659 seconds)
  done (took 41.612694845 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.94539916 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.946318395 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.947603013 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.94524752 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.947380141 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.945740948 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.944117674 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.946091109 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.945914515 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.200839083 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.946196688 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.946824665 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.947446702 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.94464056 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.945187755 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.945408434 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.945349014 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.946494231 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.947448958 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.968757833 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.215694225 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.950333098 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.961538597 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.962130532 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.958625827 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.956245948 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.953769491 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.947882606 seconds)
  done (took 56.984472968 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.011021975 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.983532172 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.984543427 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.065892562 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.06374896 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.982822866 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.064306585 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.066473938 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.985352153 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.982201629 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.032624062 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.987587668 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.984088736 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.982216396 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.983540167 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.032347447 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994015624 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.065954921 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.021389808 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988044069 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.032456046 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98370821 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.033142156 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.992623784 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98593564 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.034345206 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.022019252 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.121803415 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.00819729 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.989187207 seconds)
  done (took 62.349860879 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.970527896 seconds)
    (2/2) benchmarking "in"...
    done (took 1.97353388 seconds)
  done (took 5.824749294 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.947709222 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045602551 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.947426353 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.140935895 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.111888456 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.124827003 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.111183585 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036497598 seconds)
  done (took 18.348088723 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.95039309 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.260527796 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.098443705 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.949924864 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.94768613 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.483291347 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.873773606 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.846259795 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.730000898 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.824598169 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.125686258 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.500129187 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 4.003934841 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.282697465 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.061874814 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.79818072 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.179012894 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.510187385 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 4.003995429 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.064189461 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.699000806 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.031206849 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.948682435 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.953018159 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.95224776 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.890213651 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.966554495 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.386643845 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.108274757 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.063521837 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.736671347 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.014165023 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.951833987 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.229161725 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.056677305 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.949471489 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.108449278 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.049151105 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.950712844 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.950858907 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 5.758752435 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.660692053 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.195181671 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.175683317 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.029857859 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.951985098 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.949498505 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.951148471 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.213116103 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.607322683 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 4.003411363 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.948417488 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.08813943 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.952707279 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.530056641 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.089803959 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.951565854 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.896314187 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 6.666552688 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.173263819 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.327536146 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.187258966 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.080849227 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.072882703 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.954612736 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.175644725 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.849940238 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.794080039 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.70148191 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.056697434 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.517788452 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.960087713 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.953124141 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.951491725 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.967750449 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.330316924 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.986885854 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.952850191 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.952503119 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.953050433 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.240563148 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.063794811 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.786063206 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.090020912 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.162366413 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.526864313 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.072988889 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.954570327 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.625119536 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.824043407 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.135643212 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.680050612 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.145972368 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.090888918 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.982071995 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.194727361 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.989391724 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.956652032 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.792015721 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.465382646 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.105120027 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.959828134 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.33028178 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.07000377 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.991791758 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.95703536 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.671767088 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.074214118 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.081714467 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.988974717 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.95814456 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.957578664 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.578087633 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.141429846 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.991228658 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.46586873 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 4.015160761 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.432332343 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.369891893 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.136963817 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.322454782 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.939728503 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.218204872 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.854356661 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.99495926 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.338939137 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.963672633 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.630641097 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.25994191 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.073391818 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.847887134 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.995619255 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.959942775 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.104995485 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.017411918 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.957665741 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.958018711 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.958156737 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.958307098 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.95856469 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.076296494 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.363156065 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.671056412 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.096440957 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.196218854 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.080368769 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.832415816 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.153031757 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.634754298 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.098396964 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.960461343 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.583960728 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.375765713 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.674995616 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.079146297 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.961299066 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.964586802 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.80398489 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.968969699 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.04879007 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.957563972 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.605360273 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.144763085 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.992566477 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.959339026 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.433723482 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.097194124 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.959720906 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.068128174 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.747653462 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.723812096 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.102518989 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.269129198 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.076248343 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.959615809 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.960346454 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.959479969 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.743845798 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.626379681 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.243246464 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.592275449 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.863159328 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.033679004 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.124128725 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.044116757 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.257890998 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.165901938 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.099741854 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.959451297 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.959659572 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.961082837 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.478453058 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.977191696 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.971483321 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.967699443 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.999222665 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 4.033906029 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.136492763 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.823583588 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.967794135 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.698189079 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.923560987 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.058196725 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.961429404 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.961101754 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.110227337 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.127852544 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.102254143 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.399727517 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.113314221 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.961329009 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.64618654 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.081894397 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.642171658 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.061878623 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.789354496 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.062577264 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.080963224 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.120476628 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.649649907 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.068039791 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.965609485 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.710807599 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.087298407 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.963144331 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 4.053497719 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.519433941 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.904065905 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.695381697 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.478133655 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.042832862 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.525992739 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.205208376 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.10306322 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.795874926 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.056865585 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.233599331 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.096189643 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.408329537 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.123254254 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.744922223 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.972546373 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.588927105 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.105427076 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.957055776 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.079715813 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.434236489 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.086964733 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.986464052 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.143392696 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.06080457 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.649792857 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.089872003 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.081428119 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.280850578 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.867686851 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.063700403 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.242141104 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.099898812 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.922252329 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.917039377 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.301262374 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.886327724 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.987064168 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.140902874 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.782062366 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.192793894 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.309899501 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.103750731 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.96685392 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.967745974 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.135407436 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.043221018 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.967363451 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.391751226 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.929124254 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.04107343 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.142548664 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.002806374 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.967077723 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.187512006 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.111946083 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.263893754 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.453111487 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.554958682 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.80141944 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.0877542 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.678070479 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.074694933 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.685554186 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.152064857 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.001185454 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.657359332 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.08810838 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.279410246 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.106415926 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.075559028 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.515517046 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.274018936 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.246089706 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.114694538 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.08316629 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.750759667 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.515498474 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.208648906 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.395406484 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.987878185 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.514526168 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.121693681 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.550268114 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.050032475 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.730247574 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.153954031 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.013699194 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.970545922 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.971286201 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.548061722 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 4.021435061 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.006541836 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.754951418 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.571634635 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 4.02938144 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.728805329 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.1587917 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.006575352 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.970543804 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.97060142 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.909762508 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.176933248 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.348788495 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.088048202 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.971022476 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.970293423 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.937674508 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.328744531 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.777779633 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.859845703 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.941739201 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.109389097 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.975153967 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.972988399 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.973287605 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.973337007 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.97003601 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.970866821 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.349931389 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.126699486 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.606758336 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.164112393 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.007848972 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.230751475 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.02356878 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.971639551 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.1893175 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.035820646 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.080042079 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.037294256 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.971759973 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.390502768 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.110970292 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.968541742 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.365257016 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.259166071 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.190409578 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.545268927 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.992412861 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.403629337 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.312085398 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.829380267 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.010205191 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.918433502 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.14990573 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.813245709 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.976649443 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.558166039 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.600807955 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 4.046949608 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.31174103 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.864345974 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.391687433 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.227548869 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.028566229 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.974090449 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.973607864 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.034726535 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.200360486 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.016202904 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.248029238 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.152484277 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.989524648 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.377367828 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.060141373 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.244523623 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.987829732 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.988530116 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.975497922 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.975858656 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.459627549 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.878114963 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.045860422 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.975189943 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.913215722 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.962870326 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.869890197 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.637254213 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.981824491 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.111778269 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.975488414 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.169804782 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.023233506 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.844786482 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.983445896 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.761256067 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.300999324 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.016948652 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.187265464 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.38357051 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.815638863 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.380050497 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.08146397 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.975900109 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.350120462 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.956046086 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.11749411 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.883836549 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.292151303 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.548009571 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.524442069 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.36235249 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.084256983 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.90637093 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.638392904 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.05124147 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.015628035 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.816420751 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.116313992 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.274853205 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.929345051 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.227622565 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.119694112 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.648305345 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.772331804 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.116635346 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.589129561 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.1156726 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.978605339 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.646747116 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.058388594 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.266375954 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.093968049 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.978192329 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.992475436 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.676474789 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.577797067 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.17714062 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.044189976 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.979168815 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 5.659019993 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.855084937 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.166346538 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.013467817 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.980067065 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.47842736 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.996638075 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.978407373 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.395008414 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.594363805 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.116016955 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.501330512 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.187258664 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.119748094 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.262488297 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.357987014 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.156413864 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.038770912 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.980889962 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.980188568 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.979822747 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.423846516 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.13130821 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.980921641 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.560637763 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.118128509 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.771056439 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.895283424 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.21959216 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.038503713 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.399575206 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.120989514 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.50125436 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.973992893 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.156061794 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.30189029 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.121052278 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.107137484 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.722068861 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.079667219 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.979959944 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.939471431 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.321375731 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.338297243 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.387618353 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.261860639 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.057050044 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.656787352 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.083636476 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.663681642 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.144195346 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.980595334 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.489387052 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.241759232 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.444264387 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.123608928 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.453468206 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.089427833 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.325057385 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.326533643 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.070793699 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.008552429 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.006390775 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.005337513 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.04987143 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.649793593 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.980340555 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.46552265 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.104200805 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.843909561 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 6.629295044 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.675241151 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.338004517 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.267182248 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.459119652 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.998721663 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.947459524 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.350188743 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.047446573 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.143243208 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.075981037 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 4.792367606 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.034791326 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.982756023 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.433388273 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.136247669 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.983234356 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.985055123 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.923177601 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 5.88165468 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.079747739 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.198483679 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.071412566 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.982504011 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.568027376 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.244359015 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.015534282 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.985081223 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.985703137 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.862069677 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.083890273 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.985266039 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.396311103 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.12715521 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.324182904 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.856373342 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.515164682 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.074738814 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.985355305 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.985457833 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.726978044 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.45449427 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.160350916 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.357545229 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.104495919 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.557317208 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.073267206 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.481896166 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.515792659 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.99105197 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.098211335 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.986519878 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.040276519 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.9160523 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 4.040152981 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.752669983 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 6.534346087 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.069081561 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.794210321 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.961276026 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.039333172 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.14870762 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.036028383 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.986871896 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.986962267 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.988564805 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.506635385 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 4.059878074 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.024885207 seconds)
  done (took 1956.272668611 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.25396784 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986866791 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.989274494 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.985491341 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.990465876 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989551082 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986311425 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.987899095 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.985911965 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.986768901 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.987693267 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985677999 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.988091576 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.260929394 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.988637642 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.9882529 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986328528 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985578159 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.986974782 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987587096 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.988791591 seconds)
  done (took 44.196470364 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.98665623 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.98753423 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.990277614 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.98689828 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986920027 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.987773997 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.987578328 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988005969 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.986448342 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988732947 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.986703701 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987704613 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.988148681 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.989770526 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989096074 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.989008251 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.987611712 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.989581095 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.991372211 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.990484853 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.991107036 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.989129942 seconds)
  done (took 45.664993376 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.988988968 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.989892703 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.726628307 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.10122112 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.987826808 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.991233269 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.988754342 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.185355634 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 3.00260542 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.908443795 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.497717895 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.110189552 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.026463239 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.168204916 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.081807939 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.994128181 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.108286223 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.99144614 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.993671789 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.989029542 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.990236731 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.213988791 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.117187399 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.989427122 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.822094938 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.132979396 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.9906425 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.990964553 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.990278568 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.992961333 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.163469657 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.029152672 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.85600891 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.752905312 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.304321437 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.910979439 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.177024998 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.030819666 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.994580345 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.99064047 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.228470422 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.850408339 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.029909142 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.992158844 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.373837318 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.09748848 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.994160235 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.374458028 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.112790912 seconds)
  done (took 133.249507028 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.030113968 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.12396787 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.056074716 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.991698457 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.114953198 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.993094209 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.046560919 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.990558351 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.992763816 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.990438681 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.129460968 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.134495256 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.996126166 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.992862971 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.076650781 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.993013783 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.991780405 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.994166263 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.992758384 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.993379716 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.994322933 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.043989142 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.111426671 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.133883453 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.992053002 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.991848527 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.992696711 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.993764819 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.129408408 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.991434617 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.99232359 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.992821298 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.124259744 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.101210361 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.99315935 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.992800347 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.124626672 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.99338205 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.992232355 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.994797975 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.991794631 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.995549488 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.050065556 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.131636693 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.993542097 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.088083081 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.995970697 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.992527518 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.125946261 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.995768082 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.99806143 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.142191332 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.995936817 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.992102444 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.993320948 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.115339935 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.993881646 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.995320942 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.994069289 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.125492376 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.994552494 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.995641044 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.13650069 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.993469464 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.993825927 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.141645602 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.092267004 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.995110125 seconds)
  done (took 140.281432165 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.994343534 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.130611164 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.171255124 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.173356515 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.133971355 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.11684236 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.135235214 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.132260819 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.132288998 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.135050498 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.132574187 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.096378181 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.105296691 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.095324046 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.134707956 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.114834169 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.116338727 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.117562624 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.137143519 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.134958923 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.114528046 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.17528833 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.133162311 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.172613156 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.351677424 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.102087386 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.132373976 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.136960978 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.174534506 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.132287685 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.351011951 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.136126207 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.133850508 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.177199615 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.34874783 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.131120425 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.998310107 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.134576405 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.139218985 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.131515774 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.104932472 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.174326538 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.130067057 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.105151558 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.116802091 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.12997624 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.17414534 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.349622948 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.099666507 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.137781571 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.135224899 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.175597974 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.132121231 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115170982 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.174249111 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.107860067 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.173384788 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.174542842 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.141419429 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.174792422 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.175114608 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.109882575 seconds)
  done (took 134.988291344 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.997963227 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.996873642 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.080060348 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.998574006 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.997175359 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.080654601 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.999448501 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.997712866 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.997958791 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.996812873 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99777859 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.082812993 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.356328727 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00130015 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.08323439 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.357722872 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.083299419 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.083315416 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998052484 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.081302968 seconds)
  done (took 45.200492968 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.998242377 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.998957401 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.001603239 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.158155099 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.000442792 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.134057408 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.000992737 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.000215354 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.999039809 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001087276 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.001804404 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.000498478 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.99901444 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.157047898 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.999087423 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.133261245 seconds)
  done (took 34.514848293 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.998351588 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.000334462 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.999655637 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.003884915 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.999130398 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.003372531 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.0002564 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.001374301 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.000069748 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.454326062 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.999665866 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.999172898 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.999847288 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.999715109 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.001449953 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.000170099 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.00134344 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.001299121 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.003157381 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.004202359 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.57297727 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.003544995 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.003089425 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.003737249 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.001612056 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.574417001 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.000790794 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.000737503 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.003207064 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.001105251 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.024815614 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.487790804 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.017714439 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.012503215 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.017862867 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.012289221 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.008408545 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.004726366 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.00439977 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.002679703 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.000890197 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.00120834 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.00124558 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.000649908 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.006501132 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.002225201 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.0037843 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.458021742 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.004176823 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.002515307 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.002075358 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.004501359 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.003900623 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.474903912 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.003501777 seconds)
  done (took 115.135049931 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.041594806 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.058637545 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.002794237 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.003024078 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.055397888 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.040383344 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.044298999 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.019640635 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.047124221 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.004762909 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.065535499 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.018994214 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.046186394 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.053701509 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.0683368 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047079317 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.003570967 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.075823287 seconds)
  done (took 38.634085692 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.003804532 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.005796697 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.005055178 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.004662192 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.003408174 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.004594503 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.004844924 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.0051195 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.003856652 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.005123043 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.006216082 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.002896654 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004560999 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.002482405 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.00347636 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003615389 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.004726292 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004029004 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.004316642 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.005598528 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.005263039 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.002807293 seconds)
  done (took 46.03372133 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.620417019 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.60498741 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.773221909 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.187969464 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.247996266 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.801545612 seconds)
  done (took 18.174148843 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091801062 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073001547 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.042794203 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054258596 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083239311 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089669488 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08275274 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088195574 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072637706 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.300611606 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089519065 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089630388 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.077669952 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.157181733 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.073244038 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08047356 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093373555 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0892004 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056670018 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092516496 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.094376989 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083724574 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088676459 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083403494 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08986125 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.160676693 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.075646877 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.303179401 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090184361 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085105771 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.081358247 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088720948 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087068844 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.300003412 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058013537 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076352868 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089532242 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.093838351 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086502713 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.158381594 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.051585502 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07906563 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.07223496 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.105245063 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082971428 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.094915347 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.105019892 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088422362 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094869964 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.303956268 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.077169547 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.155872468 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.075836314 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089287581 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.078999516 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.297544342 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.308232061 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.15719414 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073510909 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.307155364 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.168826971 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083286798 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.160202943 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.310229788 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.077125771 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.163819796 seconds)
  done (took 141.757624459 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131257134 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.054325188 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.093039651 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.311667125 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131779329 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095931152 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095995618 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084202416 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085856943 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062505259 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095451907 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.095388292 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131683141 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137942466 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.097013636 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085550356 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.096036733 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134539662 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06146274 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.300481206 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093460094 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.136227672 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.136381176 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134734364 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.298343855 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.076524664 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093853091 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094840696 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084533313 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093340349 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.097277724 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.095467412 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131804777 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.057863197 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132360175 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.099948494 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09764812 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.099145893 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094335121 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078902275 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.137850714 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09688546 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.096563426 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086361712 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.301552776 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089844204 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089235294 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063794687 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.095281052 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065451009 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.30119566 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.299960612 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.312560511 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134737926 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.098394812 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.094621981 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.096083221 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.09559782 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.098644741 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087251413 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135492665 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093497802 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.304108612 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097779286 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.095942896 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.134200894 seconds)
  done (took 142.156741704 seconds)
done (took 3611.46318733 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.14224229 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.094389364 seconds)
  done (took 16.180311077 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.017993867 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.019628974 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.166642244 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.017869449 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.031928836 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.072624892 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.111563356 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.0220294 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.017020035 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.105380777 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.019047609 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.148508593 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.115429418 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.017826436 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.057857433 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 2.022177535 seconds)
  done (took 54.96749777 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 7.024411412 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.55254578 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.117458108 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.78769146 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.046571553 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.892474145 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.325161978 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.697803753 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.276621692 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.466930167 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.26622321 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.875716734 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.756001654 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.233369562 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.641946994 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.501987621 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.578157723 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.648236274 seconds)
  done (took 77.635703996 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.031104389 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.125862769 seconds)
  done (took 11.115629801 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.045701828 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.034247853 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.043439112 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.029131476 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.024775067 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.032193292 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.018733211 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.023297436 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.045370339 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.029019622 seconds)
  done (took 72.288680139 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.027609966 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.710624561 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.35793602 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.497058393 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 4.637979981 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.462831427 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.165823434 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.376089866 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.098473453 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.026130473 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 6.300018188 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.396128306 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.84319667 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.261274206 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.61813074 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.246209161 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.530380964 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.508188369 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.351133846 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.219237392 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.374798702 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 6.154885458 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.440201093 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.777945334 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.026750826 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 4.615918587 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.252893575 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.125158346 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.101079034 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.172518188 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 6.207534118 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.204251281 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 6.161918659 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.195550348 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.073490665 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 3.629845214 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.746540373 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.201101767 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.459166541 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.335101245 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.404576914 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 4.686308941 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.079337046 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 4.656318825 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.137727011 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.374663769 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.915976984 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.242878735 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.105426687 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.143753829 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.45130496 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.195278899 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.163629043 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.138566745 seconds)
  done (took 203.545640006 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.015274174 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.407265799 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.159655 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.018956733 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.424067625 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.251498773 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.799376036 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.455888496 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.029648161 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.245528397 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.185298555 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.146235893 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.021396828 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.02236141 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.02119631 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.01915259 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.201786438 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.427418648 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.024794406 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.021681167 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.224812062 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.262279176 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.146619045 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.020481162 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.187928451 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.267628959 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.41549053 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.149838507 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.396976478 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.020043059 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.423298583 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.028773508 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.022465757 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.886420788 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.394595545 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.34475158 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.457982423 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.021253106 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.711202806 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.005600049 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.65431038 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.219709667 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.350756634 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.160674148 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.17098032 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.250378512 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.647675959 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.018439242 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.752968412 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.195622358 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.242996829 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.250824385 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.303198189 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.029021775 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.46511767 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.025158292 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.022532391 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.270541504 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.162913973 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.145582348 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.025288303 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.024862708 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.021676762 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.260476663 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.024617594 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.137684199 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023578938 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.025198903 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.135885164 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.146547783 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.166749737 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.261621389 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.268218185 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.930113017 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.312328902 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.253764772 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.411665361 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.252825187 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.025441336 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.024115856 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.440631327 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.448870596 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.181074412 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.261961637 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.332247066 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.307879315 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.569518797 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.021407132 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.238804937 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.184489615 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.250794282 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.169889998 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.39292625 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.868509218 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.023808997 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.023129092 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.048164439 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.148850093 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.027641176 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.508264579 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.282505099 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.734523992 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.190870181 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.507455348 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.127535416 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.027118903 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.600655645 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.025069434 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.235558051 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.337136769 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.034992945 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.025280387 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.174006859 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.787007086 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.027795524 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.42495747 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.408542419 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.033366828 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.18338351 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.026095292 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.272623008 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.802896547 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.253680818 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.028125604 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.295750057 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.206904383 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.173029998 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.030044716 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.368752693 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.287533088 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.424911521 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.35333856 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.028387201 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.027621931 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.330904897 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.027633352 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.024689544 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.201530737 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.946467224 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.198202264 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.02877449 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.281733325 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.189021474 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.414633488 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.026028072 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.302327989 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.270179748 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.42361109 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.027254899 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.155334198 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.03177222 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.097206249 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.190981157 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.030111174 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.026889085 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.855938591 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.0317583 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.174782985 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.254125443 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.729636716 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.40652168 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.372365588 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.025955232 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.476545803 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.220880599 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.466249768 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.491152683 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.189603206 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.716269805 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.236289292 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.026440356 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.262927868 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.326186927 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.028389786 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.028054337 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.748361444 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.118334054 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.031687183 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.189863181 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.61587409 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.443484677 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237693323 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.032054406 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.406563491 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.028035355 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.174437673 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.498222761 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.415546493 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.031448024 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.029675964 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.031122335 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.02876871 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.231297352 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.27459946 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.678495144 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.178720477 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.320078963 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.245606983 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.339853606 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.490340912 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.041585911 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.342692127 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.032221393 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.424256662 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.036267975 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.226691266 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.277093524 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.030506862 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.334695905 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.380038172 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.214453122 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.453598376 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.03717731 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.031526299 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.603568767 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.199339456 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.482135672 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.030276946 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.153685722 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.405296322 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.152278877 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.232207029 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.29868617 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.00966792 seconds)
  done (took 932.312067561 seconds)
done (took 1369.987157795 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.038108619 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.030974763 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.030377059 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.032665161 seconds)
  done (took 30.103374402 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.988568665 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.081260752 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.195904822 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.039993482 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.371768133 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.068635787 seconds)
  done (took 17.717286287 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.030522414 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.034156646 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.03705356 seconds)
  done (took 23.063798869 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.319011411 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.506716501 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.18912071 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.132194982 seconds)
  done (took 11.119913733 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.070176618 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.058302963 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.032604331 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.056410927 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.035979884 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.031429991 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.069475465 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.054106109 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.04169117 seconds)
  done (took 20.417273445 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.541557573 seconds)
done (took 110.947454617 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.301611993 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.321090088 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.039981207 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.307188053 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.160777233 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.370235756 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.145175377 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.052448911 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.331617467 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.424105845 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.521909957 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.156181182 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.417636917 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.449688643 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.247784091 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.047979438 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.046216934 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.093413396 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.681801188 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.198810791 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.844098301 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.163118265 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 7.034894722 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.054988617 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.940628529 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.182166034 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.284194559 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 8.470682777 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.028511961 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.045458119 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.124753894 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.515635515 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.278871166 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.362383321 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.124900844 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.89655028 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.467603521 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.040392049 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.290587688 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.549775904 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.296652925 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.12890422 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.171910795 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.189216059 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.384196684 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.048132745 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 3.036899101 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.198776399 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 3.499096418 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.18679643 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.555223691 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.03722561 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.65450512 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.099533225 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.122112692 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.143686251 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.94179832 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.578189726 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.187529091 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.345540581 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.04705635 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.034213203 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 3.000954224 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.054141995 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.033167617 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.780336917 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.450410569 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.126908836 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.446144937 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.051099268 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.050802026 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.063111038 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.719705501 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.179804362 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.037925204 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.157067016 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.335770604 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.203767042 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.20463531 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.043686707 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.842988266 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.044823241 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.353103325 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.347178277 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.18971665 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.42412302 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.525587266 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.36827185 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.421186852 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.0507318 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 8.830138235 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 9.021306117 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 8.638479908 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.042376888 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.172285867 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 8.695831939 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.908287282 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.486854637 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.171072576 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.569038051 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.056967916 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.055482944 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.39362777 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.32717497 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.856633194 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.068687306 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.150173944 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.036251712 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.295680876 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 8.414995883 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.168992406 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.553344718 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.049967066 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.093695958 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.485995375 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.03787962 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.380862044 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.471578507 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.174151975 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.049378205 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.296314351 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.041332691 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.156963073 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.576367241 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.411949451 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.251133778 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.040264777 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.911335133 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.049014821 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.262740516 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.052780414 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.592375602 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.543489375 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.059976743 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.298485375 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.167550666 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.038545413 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.363419267 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.088991174 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.261617569 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.380103298 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.345807421 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.158115074 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.037295583 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.393828526 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.046118935 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.287707681 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.380305567 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.194133324 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.352169448 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.173412258 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.054340493 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.013736461 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.441518107 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.648532507 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.564518687 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.27710368 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.173188968 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.550368673 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.385000393 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.89273187 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.150840413 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.092387896 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.046989983 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.050269393 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.110545246 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.039380163 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.042507044 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.297730195 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.305734483 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.585136607 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.819299765 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 7.050929683 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.345113822 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.191500816 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.884783269 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.594069369 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.04379811 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.331787793 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.500420723 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.302326124 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.075432838 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.044220223 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.066115201 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.730619286 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.074085079 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.355001647 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.578018961 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.357318258 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.405842116 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.236640801 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.076899274 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.374448112 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.259454161 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.302512137 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.256105619 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.422328408 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.194836387 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.421628211 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.104587327 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.322164513 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.048262862 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.66895817 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.325204819 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.490402288 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.401219504 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.270977123 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.212529328 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.352778738 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.051321216 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.048413569 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 9.279845599 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.345477402 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.06479295 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.042153341 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.30832736 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.694823854 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.983636733 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.155960237 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.368116608 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.230782556 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.215006282 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.529805155 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.080299914 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.357734671 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.21603329 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.249993439 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.288217963 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.078261644 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.176754434 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.254434619 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.180216537 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.272371129 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.836655836 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.368636333 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.062153901 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 4.481905872 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.07936933 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.071619157 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.066600221 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.054575635 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.325534314 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.213943768 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.359858039 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.278009706 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.213935405 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.043828069 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.190991173 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.551306297 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.851647227 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.590360414 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.938116402 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.062469105 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.045753083 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.42832002 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.406388713 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.112605196 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.176578423 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.59473532 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.066818084 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.2168623 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.055918788 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.054443779 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.79835921 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.176991155 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.291738705 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.586299346 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.050665301 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.836167302 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.155403641 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.465906964 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.508242206 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.090062178 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.174164368 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.050401229 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.426034907 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.454275693 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.064307534 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.228706419 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.418432796 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.164178001 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.17760572 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.049617944 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.078817962 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 3.537892217 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.260289064 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.527645298 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.072810887 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.380853231 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.054583466 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.783549285 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.065874776 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.180012582 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.443712594 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.208631412 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.395345452 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.057049875 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.168371681 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.304448701 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.070991709 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.05356297 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.302188277 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.122321183 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.118185339 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 4.067278 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.278733267 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.040665035 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.292021941 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.179427636 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 4.022183309 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.226664575 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.18266233 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.655954345 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.523333248 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.05585525 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.211006643 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.073774861 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.385213107 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.065911789 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.057207223 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.205833628 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.130034719 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.065767101 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.880634404 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.267873053 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.518567622 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.149898987 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.935218542 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.060924405 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.67306728 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.205414512 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.327162665 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 7.060834963 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.063974456 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.186537673 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 5.70232653 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.273286521 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.081269303 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.275163611 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.052477124 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.607766466 seconds)
  done (took 1193.143883652 seconds)
done (took 1195.23825329 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.242285643 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.42933239 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.2991129 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.948328336 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.854049621 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.692248778 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.315277603 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.304653548 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.127130325 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.319071993 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.011511157 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.865991224 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.148581798 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.166426099 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.128609124 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.165608091 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.230288253 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.292189964 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.16805399 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.990149044 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.458926753 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.992910948 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.479514827 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.34642302 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.429946369 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.160063218 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.298602504 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.486356949 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.488448881 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.03527294 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.275506292 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.30164174 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.879225298 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.29759045 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.134129826 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.137271933 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.912885147 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.150277715 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.29924316 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.13460786 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.425659176 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.178292298 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.764048317 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.891104803 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.832953737 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.467475765 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.938143815 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.157992622 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.161314056 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.270678873 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.25294117 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.301430333 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.490133469 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.058466125 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.902120318 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.887614049 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.488909896 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.905730615 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.786817697 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.271508248 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.584810556 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.153723907 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.271501046 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.290584159 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.17364405 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.34993047 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.473837602 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.301120309 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.305244211 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.328743815 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.319139908 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.28263281 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.167469962 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.234850981 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.192238012 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.320409811 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.803160629 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.305010364 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.863907489 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.161399831 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.005161308 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.985987286 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.010103682 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.133239854 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.244264855 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.83057184 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.871500638 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.008666449 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.18002197 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.308343393 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.99884487 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.305397678 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.539017689 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.301546755 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.243125693 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.302955403 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.900144653 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.245185132 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.021016977 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.306789286 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.843466578 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.305123503 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.074308555 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.137199883 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.159821174 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.303623852 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.303999361 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.483464259 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.282454417 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.223351869 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.434887876 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.193531695 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.28103438 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.172942419 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.13079608 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.835379703 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.342184294 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.915278767 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.245939075 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.717945876 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.330446458 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.137029206 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.429872663 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.356957158 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.24310262 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.149334577 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.161735745 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.000847964 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.160714911 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.153604919 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.238525679 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.520854449 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.276672494 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.948274808 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.285864065 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.841707403 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.294626322 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.282433023 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.132930934 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.960840299 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.152433176 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.01287642 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.355447933 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.43160238 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.297933022 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.354492922 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.184953712 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.314652073 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.249338862 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.173075008 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.281862635 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.18183507 seconds)
done (took 389.733800593 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.381005523 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.202581004 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.34188216 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.339467435 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.437266081 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.421927328 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.123693844 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.476514222 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.165575229 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.466883661 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.298906944 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.906662234 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.163709275 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.259209607 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.429895629 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.297870118 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.166438887 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.312563801 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.498162835 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.480767897 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.781820175 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.300945847 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.202084168 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.465863055 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.058051376 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.777822271 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.412026384 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.183749433 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.332732409 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.777294924 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.79480602 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.342596774 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.425517651 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 5.77688753 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 4.458838403 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 3.750693958 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.425577293 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.845949895 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.386832776 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.383274095 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.342822189 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.950024064 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.784967477 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.805728437 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.215318572 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.40093043 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.114449367 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.956682686 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.060827029 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 3.753245593 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.3189419 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.84246737 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.903251609 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.384076129 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.25960926 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 5.663609263 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.537401988 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.547393173 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.479885663 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.364429298 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.382864623 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.501165633 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.47386899 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.245204022 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.811213346 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.336426369 seconds)
  done (took 210.482344217 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.489589625 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.383253774 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.459408654 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.529604793 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.632437941 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.515310567 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.572801994 seconds)
  done (took 21.573114638 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.127019653 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.103514401 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.301810038 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.349135134 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.109568624 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.226681519 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.194774626 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.830755551 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.354969127 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.153057126 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.431208323 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.323623607 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 3.759351083 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.806950735 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.197014292 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.34572141 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.076908121 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.179793358 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.170920206 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.362178218 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.82697636 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.816765708 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.404609668 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.194089623 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.117211403 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.155514284 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.109739171 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.080480127 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.147952915 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.096403016 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.119684399 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.218587978 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.106457363 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.778629754 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.131837487 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.436280811 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.11444073 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.158070603 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.243947034 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.063724844 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.096978102 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.11573965 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.249942302 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.119973271 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.09323034 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.296498466 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.09485585 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.118135448 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.091335135 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.111612601 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.402342397 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.10424235 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.130465328 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 3.747124653 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.316181704 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.806281368 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.182504579 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.101009144 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.104341913 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.160409101 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.106841885 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.367860944 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.326271967 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.089522243 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.326142089 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.388720413 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.106158714 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.098704095 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.089963386 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.352712047 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.100574242 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.350996472 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.111755021 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.159378474 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.160626656 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.238490938 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.299895316 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.894477267 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.878858176 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.737481643 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.082911033 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.099244985 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.408622613 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.042827599 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 3.776616331 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.095989871 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.158332639 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.750306696 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.030640377 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.108394323 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.423337593 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.094931526 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.165124387 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.15713959 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.137350501 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.175495363 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.355355336 seconds)
  done (took 245.584466741 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.482687803 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 4.707644815 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.311376115 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.357443941 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.519235809 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.609561033 seconds)
  done (took 22.987130809 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.46853482 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.96981553 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.164823939 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.120132066 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.165331688 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.106699978 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.105347821 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.319142033 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.310108802 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.150085812 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.107106741 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.138035286 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.109010189 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.235792518 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.109101256 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.115293594 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.105473356 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.132562741 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.118693407 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.176904115 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.406936385 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.167496804 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.17721993 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.052267458 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.231596342 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.153042353 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.047827934 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.118198171 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.11986621 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.502683568 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.306291615 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.108913735 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.998553229 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.580654243 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.926962005 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.082475804 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.322671474 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.179801937 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.168139278 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.112107588 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.140961084 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.178836495 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.131194464 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.142084506 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.489741473 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 4.069459954 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.265910653 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.399856271 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.109934339 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.143237488 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.144475401 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.133026063 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.109818957 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.140381643 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.904999617 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.539942491 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.166195867 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.142325659 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.167565924 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.051902497 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.249396575 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.149833611 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.478746846 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.129040915 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.807526596 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.144266346 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.058456454 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.311797578 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.214301188 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.133672348 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.141662992 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.12568745 seconds)
  done (took 189.595144082 seconds)
done (took 692.208819917 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.089486241 seconds)
  done (took 9.087028572 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.149863293 seconds)
  done (took 9.272057494 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.071676695 seconds)
  done (took 9.080254787 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.090650035 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.128117648 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.091394182 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.080397623 seconds)
  done (took 30.398808935 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.297072076 seconds)
  done (took 9.307745506 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.080781792 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.072335841 seconds)
  done (took 16.649532383 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.127534856 seconds)
  done (took 9.136073966 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.467719064 seconds)
  done (took 9.49059186 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.087364217 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.085857378 seconds)
  done (took 16.211391959 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.073504974 seconds)
  done (took 9.082212914 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.574996997 seconds)
  done (took 10.657835714 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.076585969 seconds)
  done (took 9.104900248 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.13424986 seconds)
  done (took 9.14861366 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.297692753 seconds)
  done (took 9.305997145 seconds)
done (took 167.932069584 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.091055951 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.073653332 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.07171644 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.074320943 seconds)
  done (took 30.310486087 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.3927524 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.392882656 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.373159082 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.446094974 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.339345024 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.340289694 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.393853168 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.392868903 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.339860568 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.440440723 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.39460503 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.440755899 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.546675458 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.372034538 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.373412192 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.439387825 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.444894024 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.397897875 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.338464346 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.374434051 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.439426959 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.446329177 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.814596685 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.807729286 seconds)
  done (took 60.492047859 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.282422657 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.516283856 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.227675237 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.390944259 seconds)
  done (took 11.420427796 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.109032063 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.443984296 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.428872058 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.488699275 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.428781315 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.243560089 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.430359272 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.255925818 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.221777051 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.210518155 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.683503962 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.224103717 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.236248886 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.41422221 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.252149422 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.085859612 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.090094281 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.223381963 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.456617849 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.295479303 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.344174257 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.428611891 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.427921015 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.434605973 seconds)
  done (took 57.864541875 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.833626852 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 3.005112939 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.432273682 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.98063592 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.773044831 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.875851203 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.352477246 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.574212537 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.341510445 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.314296989 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.798329158 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.832119132 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.216871945 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.967173733 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.83552623 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.251733458 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.253996366 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.909853453 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.687003474 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.37270639 seconds)
  done (took 58.617330151 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.074549486 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.31505732 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.284440034 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.238891193 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.076241407 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.075095023 seconds)
  done (took 33.076877735 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.181724607 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.213716971 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.634470781 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.36340036 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.231069254 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.210974298 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.715384069 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.273901439 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.861041717 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.858078954 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 3.726817212 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.531239367 seconds)
  done (took 34.817454585 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.087877832 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.076521499 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.080612421 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.200934145 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.951126313 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.923760087 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.391000119 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.07792572 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.199963654 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.266366128 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.944470047 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.247231024 seconds)
  done (took 52.477133707 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282233692 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.327811652 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.412838179 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.815463042 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.573383959 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.144058215 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.486368955 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.587070119 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.852095882 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.880436651 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.56361272 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.112217851 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.586076467 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.03091017 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.080317799 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391870942 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.899522786 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.556802356 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.507931416 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.150093559 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.037228577 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.219302178 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08275326 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.603170746 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.394193776 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084779442 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.275797611 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.315965905 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.079397434 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.271499403 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.196832591 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.527645216 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.258168354 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.375084448 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.592143356 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.154354426 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.159272471 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.127904288 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.651142039 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.371764567 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213799086 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.233492519 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.60343616 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.188474373 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.327144767 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.855966934 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.089195031 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.667182712 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.035883647 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.236531743 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.927414205 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.946546063 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.52586375 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.722718395 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216926592 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.394161906 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.24154352 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.113235617 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357674314 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.14992793 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.250412129 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.16045607 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275769745 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.034613942 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.601957483 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38315432 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.400973877 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.377261011 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.342402558 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.404311339 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.451443905 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.224838309 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.808275861 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.210988476 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.58455558 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.965775467 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.429477881 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.079983029 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.791614819 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.593305979 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.03677868 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.186694133 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.773055534 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.039541026 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.083665402 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.23992531 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.927812889 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.034285321 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.167580261 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.158345104 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.436125099 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.205602289 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.219963635 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.345466391 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.773964187 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.040266784 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.723115629 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.364299011 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.033440814 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.640907632 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.199677249 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.033400622 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.193763034 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.619335358 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480967291 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.127788483 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.830545654 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.665561941 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.4076715 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.656050069 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.239519541 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.085865243 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.450355704 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40431467 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08212878 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.772389659 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.132925547 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.203586499 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.393829623 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.082423125 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.035339414 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.467301251 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.260545739 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085133975 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395036522 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085924066 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.225247634 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.087059817 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.890642228 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.343187554 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.320945361 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.60074608 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.28470264 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.161400591 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.026895478 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.222436766 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.573377483 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.16704292 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.446959837 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.514389617 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.674541875 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.629043515 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.048238946 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.9194551 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.54721427 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.345605464 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.413349177 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.217612443 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243779325 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.168721508 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085176786 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.235665749 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.093924091 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.611453905 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.086926889 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.788798012 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.729189523 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.379189549 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.086211719 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.043390057 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.123987196 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29750469 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734359079 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114687338 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.238877313 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.363203108 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338131753 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.112475811 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.052751648 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453818226 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.331199276 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.592987706 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.31302188 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.729212318 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.426807317 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.561675437 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.284127743 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.459346275 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.756629048 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.690815995 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.419392324 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.598750865 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.076535934 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092127876 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.178772653 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.463330239 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30406909 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.770629054 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.131409838 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.605597364 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.117137578 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.542526866 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.038868725 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.229124614 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.553773055 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.089805668 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.632402407 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.184082246 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442651146 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.342720226 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.112598287 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.7864779 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.906909455 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.481778127 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452243307 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394121064 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.043812793 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.092001622 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.553590729 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.579173268 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.213003632 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.513009727 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.303539261 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.099716051 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.090718436 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.42756592 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.098150662 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.699186101 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.364221446 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.92341412 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.585160657 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.215816709 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.607036634 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.092546458 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.255630618 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.216762614 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.152037265 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.188666844 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.609645055 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.345952269 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.412637367 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.089653079 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.093879405 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.364876487 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.388170828 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.35698901 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.582677068 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.692659359 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.776330961 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.186627465 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.670468681 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.247064383 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.120605037 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.666318694 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.379394697 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.007058745 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.262899204 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.785215239 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.25347292 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.11142381 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.377425315 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.091233932 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.551224138 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.676211606 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.093280208 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.10649442 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.194417446 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.092105835 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.349183073 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.976815983 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.318088767 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.787628413 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.367422153 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.316124737 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.263821053 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481546668 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.59291437 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.429003945 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.043435675 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.241727232 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.185374238 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.411163397 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.091106879 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.358987731 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.746367458 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.758473384 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.864839363 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.615943991 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.347024612 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.795163116 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.543483831 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.327695622 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.419831128 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.019983048 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.767568567 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.054103241 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22420063 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.042665551 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.879006466 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432990508 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.471823627 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.552311978 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.127080014 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.608922527 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.488808526 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.172255408 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.177564085 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.349042869 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.093732532 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37882997 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.093134894 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.188524441 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.493512244 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.094481107 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.593044237 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.26118851 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410170242 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.239134046 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.677595863 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117125802 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.229372342 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.630569297 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.268452907 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22384439 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421295601 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.171924709 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.117519076 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.167038667 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.199547437 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.666572168 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.555535568 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.686121991 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.675360526 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.420977997 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.840233194 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.096927932 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.292010199 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.244542718 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.752644496 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257641948 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.483007315 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.097463113 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.288971885 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409836364 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.187640969 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.608100655 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.049866176 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.667594094 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.158057013 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.573600702 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.618370182 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.853944835 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.588327845 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.171014037 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.622056381 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.083717232 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.236568953 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.409854478 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.759533392 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.826895439 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.939382848 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.879556653 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.264325251 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.489953464 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.220245171 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.798548569 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.248004277 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.336401032 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.286519921 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222126435 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.036565718 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.624721219 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84381485 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.369018255 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.254010583 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.269635477 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.253189476 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.279559901 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621148387 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.399499171 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.839207448 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.555693285 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.315290822 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.045902146 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.100897467 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.784028333 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.250736919 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.18194757 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.417787865 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.521204609 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.146471954 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.128643501 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.225395313 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.648714757 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.796115737 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788794947 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452819583 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.612369388 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.569876173 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110190656 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.842510263 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.290730171 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445647491 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.493749136 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.988520079 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.48546281 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.417349901 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.240495894 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.048617333 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.27314837 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.113783959 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.169548436 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.882530331 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.387369309 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.186311534 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.86312777 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.685022673 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.149480028 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.119840744 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.131155513 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.317618499 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.292834363 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.098784984 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.627090626 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.482748171 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248877092 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.056096248 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.85512018 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.054509931 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.294111357 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.157850633 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.269227269 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.902579356 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.197779083 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 3.718260207 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.623978393 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.232763363 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.286815706 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.051330937 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.178710496 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.076665902 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.771573793 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.869095496 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340429044 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 3.608199869 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275211569 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.083744756 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.413186834 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.228879505 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.41345984 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.760531493 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.564578726 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.503592824 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456395801 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379925992 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.84823682 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19103319 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.328934386 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.054754258 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102382881 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.169035257 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.469795722 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.472098567 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099398594 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.625212421 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342418257 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.259739775 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.241142469 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.173310923 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.703418265 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.304030261 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262750718 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.230855351 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.334548387 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.445896872 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.101540041 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.364202582 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.146012704 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.056396425 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.2969512 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340668769 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.486242889 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408516651 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.693678895 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.253038179 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.859679594 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020630703 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.608498161 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105293293 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.910927905 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.442279598 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.102756706 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.565733698 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.736790609 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.276377958 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.356911678 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.156970167 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.163249854 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.265212322 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.593400424 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.11376642 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.698353847 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.519255772 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.104344123 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.562513274 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.175286187 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.257032633 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.820805021 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.582918082 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.103353119 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.171790386 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.097403815 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.5756249 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.360272197 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.114831829 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.225749133 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.920663201 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.062883523 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.146740443 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.094310068 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.613477925 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.108010699 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.630705237 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.254886743 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232825261 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111089952 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.238777846 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.112392857 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.297868765 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.694850491 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343578848 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.366971583 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.277500454 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.115404595 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.635228375 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.793699053 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.258759688 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.29020758 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.150570022 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459425967 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.798518721 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.153937109 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.638894415 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35976109 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.291414883 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.520019913 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.35545853 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.136794023 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.30212498 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105150072 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445831801 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.245005414 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.652006387 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.35331661 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.20814662 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.252155073 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.115225376 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.63370138 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.558317932 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.971797845 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.106717974 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.408991221 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.106255739 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.186437393 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.703167249 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283907526 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.260993851 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.309987685 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.613068109 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.416733957 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.194463105 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.108996979 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.314997289 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 3.615543217 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.058150657 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.177280944 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.95573315 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.281004812 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.430004024 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.057139193 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285321156 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.094744455 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.061747627 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.585607465 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.107350877 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.441443458 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.058070642 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.616566669 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.062816174 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.217714298 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.235145193 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.512668907 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.109116683 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.806005161 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.270427085 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.110873909 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.108684367 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.487520035 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.182587621 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.353171877 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.563100313 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.357772953 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.400292827 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937208799 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.184552958 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.06968713 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.406475591 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.922073772 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.659541144 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.246525611 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.579037178 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.185595079 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.077441397 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.633653715 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347628861 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.815361194 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249320148 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.587669631 seconds)
  done (took 2536.922572829 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.176055765 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.188060477 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.175084698 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.153645061 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.187707594 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.203209588 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.137062283 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.145728641 seconds)
  done (took 59.410806256 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.109399496 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.866883087 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.805235694 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.259553473 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.112523156 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.324820146 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.222015724 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.661593399 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.283156915 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.140490872 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.150766051 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.11364985 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.331046222 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.112407078 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.835524849 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.373002969 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.112116909 seconds)
  done (took 108.863854366 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.148424234 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.818717269 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.115423029 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.337151418 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.161547714 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.315508991 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.114532943 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.115248767 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.142853473 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.768034813 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.11796124 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.262092239 seconds)
  done (took 90.492879628 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.148118253 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.140894842 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.139664001 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.141458517 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.141185387 seconds)
  done (took 12.759656203 seconds)
done (took 3149.647759183 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.389839674 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.592036923 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.65684254 seconds)
  done (took 7.2877479 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.186070847 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.234965063 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.305227164 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.249894525 seconds)
  done (took 11.042046794 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.392498605 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.589931678 seconds)
  done (took 7.02557302 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.564755644 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.120694792 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.65819087 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.112986887 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.113767142 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.116188761 seconds)
  done (took 23.398496933 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.133005424 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.135298802 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.133248229 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.132315314 seconds)
  done (took 10.587340814 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.110923361 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.095126116 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.116408623 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.078423511 seconds)
  done (took 23.440836266 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.487892489 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.349902846 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.862768824 seconds)
  done (took 9.746273938 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.923339397 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.490865244 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.905682751 seconds)
  done (took 10.363581766 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.380812571 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.052286454 seconds)
  done (took 8.475309327 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.260275587 seconds)
  done (took 4.303789363 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.590976321 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.594528855 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.964482809 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.987935137 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.116601232 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.424169834 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.4790513 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.51253733 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.800445412 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.631371961 seconds)
  done (took 29.146296788 seconds)
done (took 161.587402608 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.962053413 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.531514798 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.265559603 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.798629075 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.208132319 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.263472879 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.734237621 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.56565278 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.695402151 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.693598706 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.800041931 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.210189273 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.143818766 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.511949379 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.145468086 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.472211077 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.522314685 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.941119697 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.822177045 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.628619103 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.739090479 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.676447715 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.480004104 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.676079251 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.525993298 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.264751619 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.206264234 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.464048944 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.096151509 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.209071872 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.272156137 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.913596419 seconds)
  done (took 185.481932822 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.11525827 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.11932982 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.120183106 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.120316329 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.252954249 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.119675936 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.11976927 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.118718235 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.938524305 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.939777775 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.119722854 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.256252379 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.123149208 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.119746354 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.119278986 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.118642291 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.065853416 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.122464693 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.122670425 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.117923709 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.120032188 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.975653077 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.119414185 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.97708112 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.065131137 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.122890616 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.122517283 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121711163 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.118854081 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.119988024 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.122461516 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.122383323 seconds)
  done (took 221.415383837 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.116958066 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.117306375 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.120958886 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.138441893 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.128687351 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.11880472 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.126111501 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.119730716 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.120013036 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.118907778 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.119401018 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.11910931 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.120505075 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.121922714 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.124870941 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.121926622 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.122994764 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.119638212 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.118631833 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.121923739 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.120077827 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.120201017 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.121033599 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.122527892 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.122097572 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.123125853 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.120527746 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121232057 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.121834301 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.120493396 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.124552051 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.122869413 seconds)
  done (took 229.954264332 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.413132668 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.167728728 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.067597222 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.499278172 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.071413409 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.144429154 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.47416044 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.422926031 seconds)
  done (took 24.317869805 seconds)
done (took 663.226995127 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.798039007 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.050979613 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.291557657 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.337899072 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.710620576 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.418457227 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.331136922 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.623986561 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.841634757 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.591403301 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.622152692 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.339848103 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.954423791 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.35925692 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.303373048 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.606101556 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.520011943 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.81155258 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.324488984 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.984532406 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.330010371 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.965247943 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.639566313 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.898575586 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.615879165 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.016311277 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.191732975 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.514486381 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.329335056 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.324376371 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.110835764 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.490259491 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.353406709 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.35350793 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.607244025 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.579593536 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.424528932 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.689804023 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.294397039 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.777200686 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.972940665 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.688287956 seconds)
  done (took 118.037258906 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.148064802 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.16652645 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.311399671 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.216155423 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.761714487 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.216159235 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.36972249 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.341050424 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.235936417 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.350327149 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.392421715 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.783313725 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.378355105 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.754409238 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.36551444 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.382361831 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.215423682 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.737366267 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.365610429 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.336020569 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.181917792 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.307606482 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.171504477 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.339893701 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.172294655 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.197652683 seconds)
  done (took 63.27167794 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.192502139 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.325384248 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.416549574 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.529184856 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.364018554 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.167890542 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.547503495 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.261244661 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.064620485 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.367214491 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.249657689 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.249555785 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.319591082 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.442969593 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 5.809858898 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.279137073 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.307934908 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.306775766 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.335570809 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.378045874 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.3564669 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.228294408 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.550506644 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.272566865 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.810026616 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.44179545 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.462431661 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.707910029 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 5.737807668 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.279686426 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.284560446 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.542705314 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.545235105 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.426582994 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.302485463 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.176648249 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.174858367 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.250042845 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.221434501 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.316754783 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.543254657 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.299103067 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.528819318 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.729337226 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.351109943 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.369196307 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.585432624 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.268629658 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.28424413 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.981998548 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.456605868 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.218187681 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.285652221 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.357354497 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.272894874 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.582098029 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.33505224 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.434463013 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.335122762 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.573813958 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.226937253 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.548002248 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.343124279 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.187953745 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.448527109 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.360431967 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.346618353 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.500347973 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.530118236 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.478994783 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.879142662 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.238275166 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.190177029 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.250971299 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.336391974 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.616461993 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.603728771 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.403306074 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.56779336 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.545998102 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.493852478 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.724777973 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.208696852 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.866261178 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.201683964 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.163833278 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.237843982 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.4710452 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.534131569 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.645688296 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.737863533 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.456026075 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.475652965 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.570198283 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.532495142 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.53453423 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.167197 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.177710243 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.410993446 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.743589194 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.242871536 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.409211578 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.834989147 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.685517278 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.394540151 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.414665631 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.556737273 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.196613511 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.550315328 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.149147333 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.358911576 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.46824017 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.448119101 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.521534898 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.1533194 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.705509507 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.280992041 seconds)
  done (took 348.181726278 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.131379401 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.13098161 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.131855345 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.131055967 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.132527965 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.735211644 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.194235201 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.131432423 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.73254074 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.192526077 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.131989635 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.133333358 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.134201476 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.129163848 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.742432049 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 4.710614433 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.936100576 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.135283919 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.134356891 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.133168722 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.83022924 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.155302689 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.147067786 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.138394338 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.130628229 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.134091283 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.137761385 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.171055997 seconds)
  done (took 181.874111796 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.1748411 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.599520565 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.213217295 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.272323832 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.22144952 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.1997139 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.675083627 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.303711699 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.250338749 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.190338375 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.187560582 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.413555385 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.404931042 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.754440521 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.315196094 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.226933775 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.825940746 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.327113556 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.194971093 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.18454331 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.348201108 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.524094185 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.436776248 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.477678223 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.350396529 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.481718359 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.267767815 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.187108096 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.311831392 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.670610557 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.213200225 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.544346448 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.324435221 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.191013765 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.677386501 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.545932782 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.754380588 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.717515449 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.365354696 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.149263764 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.149743319 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.411137591 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.511838249 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.241455643 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.185258473 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.846086283 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.214171429 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.571793549 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.214177435 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.147775682 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.273370689 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.287821678 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.429924165 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.618904489 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.372110166 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.336892044 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.673582177 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.170437307 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.229178581 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.502373419 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.171130318 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.664526341 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.701863736 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.256348384 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.19846883 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.047610497 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.281023303 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.693081423 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.785338126 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.233871847 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.591988255 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.37305974 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.166315582 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.4306483 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.352960175 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.6706131 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.751345598 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.321889855 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.290903335 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.266559579 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.450338612 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.168354449 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.722873488 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.280594413 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.167589212 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.67162104 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.593288642 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.167930973 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.18102413 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.310947252 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.354948724 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.372465656 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.496314237 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.265915165 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.067415962 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.447131503 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.514856458 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.200604821 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.299471282 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.174387584 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.150252366 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.375659256 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.174055166 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.491366548 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.598881665 seconds)
  done (took 264.885905564 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.916313733 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.238281441 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.388380711 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.702274351 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.538759 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.066020093 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.463734918 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.271342574 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.461101603 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.405907288 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.393928163 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.277117465 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.15041232 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.925309033 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.247424853 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.374942887 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.254139091 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.755728605 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.500690375 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.878287785 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 3.631817607 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.909634539 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.498055947 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.611242865 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.576672306 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.685689114 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.812621654 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.321230398 seconds)
  done (took 79.336487674 seconds)
done (took 1057.633143522 seconds)
SAVING RESULT...
DONE!
