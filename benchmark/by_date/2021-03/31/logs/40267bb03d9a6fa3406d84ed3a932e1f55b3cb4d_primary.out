cset: moving following pidspec: 3592354
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.749589397 seconds)
loading group "shootout"... done (took 0.786107259 seconds)
loading group "string"... done (took 0.22372737 seconds)
loading group "linalg"... done (took 3.067844814 seconds)
loading group "parallel"... done (took 0.021302441 seconds)
loading group "find"... done (took 1.158770976 seconds)
loading group "tuple"... done (took 0.673480802 seconds)
loading group "union"... done (took 3.044101728 seconds)
loading group "dates"... done (took 0.152879317 seconds)
loading group "micro"... done (took 0.056085993 seconds)
loading group "simd"... done (took 0.358951727 seconds)
loading group "io"... done (took 1.369574584 seconds)
loading group "random"... done (took 2.334838361 seconds)
loading group "problem"... done (took 1.185910043 seconds)
loading group "array"... done (took 4.583352981 seconds)
loading group "misc"... done (took 0.957804625 seconds)
loading group "scalar"... done (took 3.42503564 seconds)
loading group "sort"... done (took 0.303585564 seconds)
loading group "sparse"... done (took 3.487670016 seconds)
loading group "collection"... done (took 5.915081878 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.542012062 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.071478916 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.25058591 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.075894455 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.277542152 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081477197 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087119355 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.069682289 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.989300165 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.160798204 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.208862969 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.389225696 seconds)
done (took 5.086397334 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.263111235 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032787429 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122488604 seconds)
  done (took 0.760182368 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.135600305 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015101569 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021871034 seconds)
  done (took 0.770213043 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.019949733 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.09660109 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021108464 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021586372 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021583705 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.020919827 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020766725 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020712026 seconds)
  done (took 0.823695896 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028042859 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.0224801 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020535577 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021920484 seconds)
  done (took 0.691735087 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022012018 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.081426171 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019573307 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019421031 seconds)
  done (took 0.737829832 seconds)
done (took 4.681301562 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.193583473 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.780094318 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.817199417 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.179073303 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.34840172 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.296740503 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.075805922 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.240641563 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.145491443 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030983792 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.180066658 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.036071564 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.447888055 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.44050544 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026607272 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.142213279 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.577218713 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038979197 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.069750222 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.194414912 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.037189262 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038932191 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043454068 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026140508 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.114355592 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.134397559 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.582528386 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.053907758 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.02412139 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.05008922 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026929347 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.032369803 seconds)
  done (took 9.062746088 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.149318431 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.141918843 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023273333 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059252746 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049617945 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024307346 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029678135 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022615108 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.04220702 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087651112 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045129071 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.155946652 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021002831 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.02384236 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.13806213 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116260724 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037346196 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036483027 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021867828 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035853797 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048782444 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.03405794 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032697287 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032305045 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.068043672 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.092393525 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.041190327 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.063687217 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02204086 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034359411 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051315777 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06343512 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022289179 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020830914 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064657609 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041226651 seconds)
  done (took 2.659103801 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.98215892 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049695579 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.13578499 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.1288305 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063197926 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050436946 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.177310389 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07678536 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054620806 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023389858 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.204214476 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.642232696 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.166013153 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.975992285 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02824764 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.178714528 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.31488575 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.93250671 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023084613 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023280537 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.132116547 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025719305 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.176161627 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021289171 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.134939847 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.68435111 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026091155 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024573201 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052346927 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.146587285 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021341252 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.102397541 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051281613 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025393992 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.52652424 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021910445 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020052342 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.042599791 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050715231 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022816052 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.024011188 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034882938 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.022054907 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.078299908 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036797692 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.535798825 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025633113 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.690705678 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.726735225 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.029468581 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027778675 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056266602 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019628289 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023219142 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.612052421 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.11494049 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.02243585 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.253746766 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025055094 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023822917 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023875889 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05628008 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022762925 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023970518 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026145064 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.044885091 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.97031772 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032282904 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.046218584 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021088894 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022255616 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020490602 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.391221555 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029039958 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024690598 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.02026425 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026576938 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022340724 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021827759 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067325963 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.049680186 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046108994 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.028614651 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022954614 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021965525 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.543989998 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.964010364 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02464634 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023904408 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.711782067 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020267749 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02215676 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0238798 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043879327 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023468403 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019711405 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058170112 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024807752 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.12703429 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.538316812 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024310076 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019920389 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.442945972 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024302466 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05457401 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076673818 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022250709 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.059847274 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022751921 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019865605 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02624808 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019677362 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024008401 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020901403 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021712171 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020617487 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022514863 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023521319 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022490132 seconds)
  done (took 18.956631786 seconds)
done (took 32.262709617 seconds)
(4/20) benchmarking "parallel"...
done (took 0.78838887 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.21199084 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048219583 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019254966 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.16264898 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.04379127 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.134903796 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.17610676 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.127867258 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045530546 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.04544658 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045335223 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.18177703 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.25474598 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047446118 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.120111202 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.192535033 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.047351312 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019701464 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.046061057 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046988223 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.047499075 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019689198 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.046014684 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046988361 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.11908198 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.045612857 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019386597 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.120356797 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.047905639 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.123343726 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.048011064 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.047011611 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047744567 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.120381288 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.048359222 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.120128933 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019534683 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.047933604 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048681469 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.05034324 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049515393 seconds)
  done (took 4.026597168 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.045060654 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036877792 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039361562 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017572073 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.026824717 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036861173 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017544553 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036274581 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040518357 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.036850648 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03684893 seconds)
  done (took 1.127872925 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039686136 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037839685 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039156945 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017627605 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028480127 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037725624 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017530175 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037501724 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.04005197 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037893702 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037772187 seconds)
  done (took 1.07582942 seconds)
done (took 6.91453055 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.151709863 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.120044745 seconds)
  done (took 0.967472968 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.5524849 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.218250087 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.128481248 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.252090557 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.121668761 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.153518885 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.170244626 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.157873671 seconds)
  done (took 6.503069398 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073121549 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.139009225 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023540663 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022094247 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022223365 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022178091 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024203037 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022636928 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021933819 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024432472 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024088125 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02215372 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022830235 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024206627 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022288729 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022495149 seconds)
  done (took 1.369122714 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028194462 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024979697 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025917939 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016703296 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027040491 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025904507 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026865049 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027233623 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026223006 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026125771 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023978428 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026654644 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025725202 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024437151 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026568694 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016635433 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027006764 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026098694 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027978936 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027328817 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026251474 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023953558 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028466094 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025338111 seconds)
  done (took 1.329915713 seconds)
done (took 10.875140816 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.137868214 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029066513 seconds)
  done (took 0.870927225 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.124960819 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.12315495 seconds)
  done (took 0.964234044 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028218392 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015578427 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031575426 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023502623 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015577405 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015365134 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030470864 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015740919 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.01549417 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015726482 seconds)
  done (took 0.929907962 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018868328 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022473827 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020502798 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018733695 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020376007 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016454272 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018560485 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016808876 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022309649 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015909836 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019621082 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037117864 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019021833 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037387166 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.018964371 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019565152 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021025586 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018790479 seconds)
  done (took 1.099401583 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017296082 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016431178 seconds)
  done (took 0.753888235 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020139471 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016605637 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018191676 seconds)
    (4/7) benchmarking "year"...
    done (took 0.01806611 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016143352 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015537182 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016052994 seconds)
  done (took 0.834681269 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.383642407 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.084420018 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.308908059 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023778431 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037318104 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.223359315 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019106497 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023548021 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023450518 seconds)
  done (took 1.844440253 seconds)
done (took 8.013473317 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039338189 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.138503411 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145172381 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.448688356 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033117202 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021806402 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.060009452 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.241987579 seconds)
done (took 1.857286124 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.496700459 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.210657335 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.253574352 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023326878 seconds)
  done (took 2.210970438 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.31030917 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.138211994 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029712786 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022066964 seconds)
  done (took 1.237514134 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021535459 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026502894 seconds)
  done (took 0.782613965 seconds)
done (took 5.462298314 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029178287 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016325354 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.02220976 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017775676 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017533492 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016978952 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016931741 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017695445 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01581881 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.017941201 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018046623 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017924014 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017703083 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017696307 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017141066 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017955732 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016052441 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017685676 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017673406 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017635405 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016005652 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01794967 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017179504 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017620694 seconds)
  done (took 1.151922106 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035258335 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.02035865 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020976183 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020803643 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021345283 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020829245 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020869391 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.02003551 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020912986 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019763731 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0212941 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021424262 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019779916 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.0214942 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019908794 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021583367 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021133938 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020224739 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01986124 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021509434 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.021045373 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020283599 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021408572 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020954341 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021412996 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021379708 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019901272 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020204428 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020998468 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021399486 seconds)
  done (took 1.369979468 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022364694 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014731755 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015009945 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024729345 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014673324 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.0149062 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015232651 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01437214 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014785596 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015520656 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015081072 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014495822 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015295644 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014443334 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014595803 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015036181 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019535465 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.03488945 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014871773 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014640566 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019119021 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014875614 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014659078 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014680756 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015039572 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014669597 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014462026 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014977022 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014642596 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015268994 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014641644 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019060738 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.02054622 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014618387 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024700488 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019592213 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014616542 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.02110994 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015675632 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014506604 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014420815 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014525959 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014666834 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014582539 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024828176 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.01488945 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015774663 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015108241 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014809169 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014486005 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014636265 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.01631249 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020320522 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015901682 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014603426 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015884001 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014534952 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015335789 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014791499 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014543034 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014594911 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018558579 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.015998145 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015367664 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.035411881 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016024416 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.02500153 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014770659 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.01514658 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.0187501 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015283392 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.033667075 seconds)
  done (took 1.958080417 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.026816341 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025996912 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033350464 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024222148 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018113026 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015479742 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018354944 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015417185 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024606903 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019072742 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015619951 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018599258 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024657187 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019115974 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016583881 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024623681 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019132016 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018285832 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015596904 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018977813 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016619854 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018670346 seconds)
  done (took 1.186244962 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.099287039 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020858888 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062394372 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023964724 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022652465 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024113306 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020695639 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020636672 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020853641 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021402604 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021394018 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020904522 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022805611 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021384487 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021370863 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021161797 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020841922 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02117602 seconds)
  done (took 1.242729301 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033055369 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020600079 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047239768 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020206034 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020320968 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020014743 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023703413 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023938832 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020109826 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020615137 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024222597 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020303964 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020237781 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020606955 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020293174 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020460995 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020260769 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020640594 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024220243 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024195287 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.02406746 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024164904 seconds)
  done (took 1.247354871 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034345856 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019744906 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035627082 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021148235 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01507012 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015067029 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021249369 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019854536 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021097827 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.01945506 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019960402 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015038847 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021929527 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020082053 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.02215536 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02008737 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019632748 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020051242 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019658107 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015188286 seconds)
  done (took 1.150273807 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.12889987 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017269114 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016917327 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021287184 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01682845 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.01685194 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021226639 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.01698542 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.016999706 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.040842542 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017292246 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017177121 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021681568 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019881886 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017065036 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021660154 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021544083 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021572254 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017034972 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017047689 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040658669 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017310472 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021973935 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017187972 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017223329 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017298315 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017259095 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020217909 seconds)
  done (took 1.40890711 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.02094701 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018590332 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018683634 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018564814 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01845479 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018362316 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018416445 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018452455 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018152414 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.01844164 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018099494 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.018066588 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.018130209 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.018005108 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018129752 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018110628 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018122709 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018450194 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018369015 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018398417 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018127124 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018178192 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018143551 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018512975 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018551986 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018178385 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018595915 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018576273 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018150345 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018573464 seconds)
  done (took 1.290614392 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029340774 seconds)
    (2/2) benchmarking "in"...
    done (took 0.02612777 seconds)
  done (took 0.789466177 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018064306 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032750287 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014489421 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027478477 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023125246 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018637966 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023248583 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023027073 seconds)
  done (took 0.911660128 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.123484478 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.147189292 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016542265 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.01666965 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.120819053 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.08245618 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.13183543 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028183919 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030103805 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019498689 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016565676 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.132562547 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016032391 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029556931 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017711924 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025892034 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023488636 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034293593 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029330614 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015211469 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029004883 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016892977 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016127634 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017027679 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017285928 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023109085 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032151108 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028631188 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02508656 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014557081 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035025236 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015341464 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016039195 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024605406 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.123508556 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015731177 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053120459 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015611601 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020012238 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015255079 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027533739 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036726935 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029869082 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033688478 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016923676 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017336759 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015297907 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017087571 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019567851 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024749566 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015618262 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0229 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015208197 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016880922 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026094694 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.01561613 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02032183 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024817707 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029234677 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026035148 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027827726 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031133768 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024401571 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024317169 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016272151 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035573239 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017135319 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028804274 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030444103 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.0168057 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028813334 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015489005 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014706669 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015569499 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049570598 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016905679 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016454963 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015712913 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015783386 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016952841 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025173965 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020412901 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022931597 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018682401 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031696379 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024786506 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015406633 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023019808 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034209133 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019670559 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015613638 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032753496 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019621154 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015455464 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033785552 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026036416 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017060694 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016283657 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019528914 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029259929 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016939035 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014738238 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024200951 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017177018 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.124656694 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020079137 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023854241 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015423468 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025987122 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021505145 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017031568 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014738794 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020451861 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016314835 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.014728638 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02505076 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015640793 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030568141 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022997092 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.03072489 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031263406 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026841632 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032411873 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015872846 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015017106 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035040279 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025567465 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017305728 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034691954 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015919468 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026717606 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016057257 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017497186 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025440817 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015298908 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017672589 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016160368 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022574209 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017573361 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017741464 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022294282 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024552254 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028533173 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017031212 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024966126 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016273376 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032244471 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025860956 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020922384 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019432384 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016696145 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028279139 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022952755 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025301582 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015837109 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016708422 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.015948548 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027071787 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025671896 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017607481 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.02536155 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020905754 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016691543 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016015156 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016936289 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019944176 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019438796 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016537485 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023751211 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024808455 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030595735 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023583087 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025133061 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015327557 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.015881637 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017631025 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015770524 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020835705 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025513411 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032076004 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028151792 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037766692 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016291411 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025904848 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017854486 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033424934 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029507845 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017133653 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021238694 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.01532834 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018065108 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025688917 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027966105 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030831315 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031523846 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021289726 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021275989 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016196781 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.03184078 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016727912 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024842564 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025838903 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023159889 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016281393 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018199407 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025572853 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02127716 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017417468 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032548745 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024639037 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016185627 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030928118 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016583613 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027249609 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016189369 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020189423 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.02188857 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018398567 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.02610034 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032012054 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015468062 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016720847 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032497695 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.01831292 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018130005 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024551606 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031861794 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021321611 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024261126 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027191295 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027047366 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021213012 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.168509201 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.016303966 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.024651233 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.017998754 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.026903545 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015257913 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033341926 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014551965 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030592884 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.015894937 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.02614937 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015614444 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024563583 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.015920205 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032153367 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.01651189 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.015866499 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026761726 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014406621 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024264046 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015011082 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020720191 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022136961 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024383852 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.016619424 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024464562 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016514675 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024169097 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02024907 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.023844659 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.02426709 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020065902 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.014917877 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023371356 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025664087 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023155045 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016327344 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016319059 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015367221 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024266253 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016364223 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.01595318 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023218209 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020163621 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021215146 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016312493 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016501022 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016348752 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02340997 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024331515 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.032867247 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023490569 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022396233 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024051759 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014842868 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030308742 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014870031 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022418511 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014261952 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021263937 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024107384 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015115996 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033820935 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016329188 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022807009 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026723198 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023507518 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019221631 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.03270301 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.01784457 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023368116 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022783345 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.02002104 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022085531 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016513673 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02343662 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024419203 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025361273 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015620351 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022463696 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023918571 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016410779 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022788575 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016327925 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023307767 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016638593 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014532827 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020169245 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026322955 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020496991 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020728629 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015581898 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.0144946 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015498106 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022388513 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020410969 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024017612 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031080026 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014653909 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016142963 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015261364 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019402914 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03349893 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025007706 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023372954 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020585766 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014816414 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.01678544 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016907263 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015491622 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018447977 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014912974 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015286927 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026194316 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017061058 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020347808 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015723296 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016559709 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025534851 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019792097 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015913819 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022626695 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015324717 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021078103 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014910684 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.0169731 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020607842 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015268466 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019721888 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026024882 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032190856 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022636403 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024397693 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016374783 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.02338735 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031066345 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02384333 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016426903 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024891944 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015129822 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03444104 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024839598 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024102812 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025275616 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016402161 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032531652 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020432825 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025473953 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031210404 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01650384 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.023587706 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.01544475 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031406619 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020522748 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015421148 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024150957 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023404912 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021806838 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.02737656 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016380811 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024629643 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021282686 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019911997 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017709886 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017656413 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024874466 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032286107 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.01679265 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021908465 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024057214 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024419638 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.02090531 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028383809 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024193129 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016971082 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017685579 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020002855 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016697621 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028315921 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016312325 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020857801 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020874532 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015854783 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023164583 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032706368 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025398687 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026073876 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015994663 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015341382 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034430465 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.0200158 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019492427 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024118261 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025995544 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028491293 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025458947 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033233229 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016443376 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022305631 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028306282 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016898162 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015778882 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020041767 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017612704 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025334544 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025889524 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023518099 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017873861 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023209946 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029601915 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017352807 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020936422 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022194469 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016759433 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026704089 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024003186 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024720713 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017729614 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015980792 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019772519 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025000316 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023593708 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025249133 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017082294 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025308669 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030563303 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023645417 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019798347 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.015994603 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019673458 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025281728 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.022948319 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016008994 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021141155 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020040546 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025422828 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025621426 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021050812 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015940113 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033506006 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02479899 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025231584 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017898019 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.01799707 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016423411 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015975138 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027541515 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016146462 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017904944 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021247409 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018052915 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034727734 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024420685 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032629325 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017365655 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021130591 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016185464 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026017783 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021221463 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016197785 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027095804 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01570665 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032152945 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028594404 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024465906 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016197366 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021780532 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02513221 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031697355 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026120693 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025339488 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020035723 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02603 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.018116649 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.171397741 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.01529999 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014728109 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.025224062 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02385761 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027250241 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015087776 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025346214 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.016673696 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023441799 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023578692 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.01645932 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.016500321 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016437047 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024493816 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020206542 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024255936 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020272213 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.031866461 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015771526 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.025821967 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024025145 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.025682839 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029031526 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026976958 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023429273 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015422251 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022476212 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023343954 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.015851677 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020539525 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017708647 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036475722 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.01642152 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016321816 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02867565 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021681 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.014982713 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021422809 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020087468 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.024910145 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015736546 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025254098 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019523362 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015702812 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020060593 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020097388 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014292282 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.01480507 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015104993 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024441387 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019802623 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015055145 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033623035 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016173161 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023693659 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025625937 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021948151 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016160283 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014264393 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015647337 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028202819 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030301873 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.01904847 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023535456 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016414026 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024142659 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014317506 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02361024 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02287681 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02340955 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014893511 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015202426 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029848636 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030351127 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020050883 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031217723 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023882344 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016282416 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036388614 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023965279 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015835255 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025635015 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016892508 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.01453038 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01443964 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.01636918 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026183906 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015155284 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017254788 seconds)
  done (took 14.906306706 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058053093 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016149772 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014867231 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.01482284 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021680958 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015843941 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014844651 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015931578 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016026339 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.01708614 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.014945068 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015017786 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020410462 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029764352 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022645297 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018572138 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014952818 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016137047 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015010743 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016103417 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020818803 seconds)
  done (took 1.196516001 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020335259 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019282133 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018557458 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018776323 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018064214 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015057816 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018382337 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015102192 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018684799 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015455321 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.01892212 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015289802 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015607278 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015579545 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015585335 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016590202 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019009248 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018290025 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015272728 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01869265 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016600005 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01860145 seconds)
  done (took 1.154115857 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017777801 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015736975 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023622449 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014579037 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014489781 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017206067 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014477443 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019263357 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.01930746 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.01929253 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023501307 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015231813 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014418864 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020615741 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014336954 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015128377 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058339479 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.01542349 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015474106 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014705756 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016940464 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023802948 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014813448 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014946865 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019467294 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017449953 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014700831 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016971429 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015297344 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.01949459 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015519246 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014540354 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02363719 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022853629 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019506862 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019421338 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015935656 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015384646 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014774087 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014743745 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.022944644 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015975502 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015095828 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015818869 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023688247 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.014951386 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014679961 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023867513 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.01474028 seconds)
  done (took 1.666799684 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.02786811 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.066944593 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020865826 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050281785 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026273329 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.02007576 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020728964 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053255873 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016070694 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016565656 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027685418 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027619014 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017496552 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.01874226 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.020825691 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017497719 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018034101 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016710839 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019679232 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017156925 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020058029 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022157274 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027065788 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.02757756 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.0185701 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016992439 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017213071 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018743085 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027133406 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020451044 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019073221 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019498605 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027611284 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.021353672 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017280042 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017358536 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028100282 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017841457 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017536116 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016161424 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017329738 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018702467 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.02216789 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028300635 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017826225 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022646012 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017751379 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015813735 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.027446079 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017623472 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021215026 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028657156 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018806159 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018043691 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019162248 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027824593 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017906849 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016692511 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017973798 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027556623 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016199647 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018646826 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028291731 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017342685 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020794791 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028534573 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022746872 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018749496 seconds)
  done (took 2.427512329 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024609891 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.049809874 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028566935 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028560705 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024121139 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.024182275 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024168719 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024450904 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024311709 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027100088 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0245353 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.163219118 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021879937 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026197513 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024705015 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024655061 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024559619 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024833827 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024937452 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024837428 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024856012 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029428808 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024980761 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029486843 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029197834 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021614347 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02459796 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024774433 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029450731 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024716346 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0292008 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024894002 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.02489663 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029638358 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.02926692 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024760446 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015637913 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024705132 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024904548 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.02476115 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021576562 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029738172 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024737236 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021635078 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.025085294 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024960559 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029941629 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029685208 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.02689983 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028078337 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025199891 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.030113426 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024964865 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025357138 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030187406 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.03330616 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030157869 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030188194 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025372671 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030086708 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030258523 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033321902 seconds)
  done (took 2.578864416 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030061599 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020674892 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033372154 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014773748 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014637672 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023492006 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014577406 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014649318 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020482077 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020562232 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021952292 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023831862 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0255571 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022053652 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023776632 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025565175 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023857438 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023785012 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020616763 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02376919 seconds)
  done (took 1.233083127 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018551609 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020114248 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.0154534 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.030619331 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015451084 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022567233 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015428186 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015369014 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015400004 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015410059 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019682327 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.01995804 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015610678 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02329375 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019032314 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022894975 seconds)
  done (took 1.081934467 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019845825 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023225812 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124028829 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016137239 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017761655 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015354705 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016033494 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015115793 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017377743 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028785199 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016229501 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018222816 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016205917 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.014987883 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.01555473 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018192104 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017343471 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016295415 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016209964 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.125302842 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024514442 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016947269 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018391081 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017132891 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018229323 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.02434558 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01781641 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018108658 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016419077 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018495072 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018114135 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.026908951 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018140314 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016988823 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015157891 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016088862 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016443318 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018532725 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018533695 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016494709 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015362832 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018161328 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016510102 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016909535 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017648153 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018447153 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017603008 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026244957 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016336459 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018250381 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016414098 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017616921 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016900089 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027398743 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018528675 seconds)
  done (took 1.994462723 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03387093 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020334426 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014718519 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014625017 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019867945 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020514982 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020026712 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020172169 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020512637 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01456226 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020528481 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019532218 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020572558 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020102266 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020694653 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020290104 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014739082 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020436334 seconds)
  done (took 1.142070255 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023865371 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020396257 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020551921 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016610382 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016551122 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.02036602 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.014982148 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016088148 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016091914 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016429603 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016646345 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016257953 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016277072 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016251557 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020134442 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016672562 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016277342 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015250658 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016727094 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015092709 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020629414 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015187052 seconds)
  done (took 1.162697556 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.185993045 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.145551254 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038784852 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034369484 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026252174 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050768847 seconds)
  done (took 1.261285488 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050663661 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052255516 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.02010448 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019984845 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023943201 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022354922 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022233711 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022453881 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025168644 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028213002 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022701823 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025794402 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025645729 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027326894 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02420949 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024337862 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022795331 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02272252 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020127939 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030013792 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02296619 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026144304 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023122689 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022917711 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023062234 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027742714 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026172012 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028755939 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02293469 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026260127 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024612622 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023004604 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026337657 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028724683 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020346784 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026056902 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02308552 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03054036 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02455209 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027708495 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020189464 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024689806 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026278542 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025844316 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026366076 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02321012 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026027574 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023257524 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023416749 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03473278 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025098779 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028018957 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024951689 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026682253 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026451587 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034555497 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029167245 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028221307 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025089601 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02919199 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02843543 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025242649 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02827629 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029456589 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025190647 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028357555 seconds)
  done (took 2.519284871 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058963698 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020426801 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022572355 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027730112 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026790119 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022412098 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022445966 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022617231 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022704295 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0204695 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057963553 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022911208 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027212997 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02727872 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022781068 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02270001 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022748078 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027127227 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020411662 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033579407 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022980819 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027761267 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027776633 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027652365 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028727676 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024712112 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023097548 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023066912 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02295402 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022965517 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025868494 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023099704 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027656021 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020590865 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027675974 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023140434 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022959716 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025788144 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023052798 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024794436 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027839514 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030743446 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023088701 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022958753 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02882618 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023155763 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023189414 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020721803 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023287348 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020832987 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02918285 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029114547 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029135261 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028122308 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023398874 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023366856 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023253665 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023243525 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023390831 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025080852 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028107104 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023342155 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035026146 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023395876 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023445791 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028321795 seconds)
  done (took 2.506773785 seconds)
done (took 51.266929733 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.204512552 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176551791 seconds)
  done (took 1.150734502 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.136070431 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.133735519 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.155176733 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02341467 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.082220484 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174347173 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125081251 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026096408 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023785253 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025893234 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023382216 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025680896 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025767403 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023310449 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.08638364 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025960602 seconds)
  done (took 1.903040334 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073742422 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.237228537 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058766021 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022491338 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.104210254 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028842231 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02457091 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028548629 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028583037 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022787161 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.070225553 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035897758 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027250087 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.02836367 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024130096 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027244059 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028168008 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028652737 seconds)
  done (took 1.689591994 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.068399845 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033010241 seconds)
  done (took 0.889842561 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.12347712 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.069691734 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.108437978 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.306710116 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.099518046 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.098428766 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.109902998 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.108624525 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.07606558 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.094428031 seconds)
  done (took 1.976163862 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060234335 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057311144 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.279973176 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054524107 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034151472 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029123656 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.028922487 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031605468 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029116575 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028893499 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.074415868 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027447105 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024273322 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.076852762 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050775039 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059477287 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023454407 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030056134 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032392112 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023318457 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028297383 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031879605 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.131084967 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030626987 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052706719 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027729022 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029513605 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028345418 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028228623 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030426229 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030949567 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054086332 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030448244 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03727962 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028754515 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049743549 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024171029 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051697083 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027157354 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024323742 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027538831 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031160737 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024722627 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.03052468 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029282319 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029997012 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.032226257 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023463798 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029255488 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027165754 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024409673 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028604631 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028504592 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029561795 seconds)
  done (took 3.028730883 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.077470713 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.06728328 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023902463 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.073013833 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06462204 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023905423 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079305629 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.059978636 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077956017 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023505187 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023520811 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023210251 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030820633 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034739656 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075427723 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069019691 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025265597 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023775499 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068039383 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068566367 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022655817 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079747928 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070753841 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067795773 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022458209 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023937519 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022708294 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023237831 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031436732 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.03112469 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022992717 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.150504122 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035779526 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030461331 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022441934 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022762267 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022655184 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031226145 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033028702 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032632902 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029762799 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022389983 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022636511 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023239639 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023719883 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02226195 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032634104 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030672221 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032460383 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023440507 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023787856 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022828844 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02345677 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030136329 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029138493 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030544005 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033633964 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023070718 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022996048 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024384499 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034393844 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031299536 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031008427 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023952956 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032427961 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023068596 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033577496 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.03622673 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022923631 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023442593 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023093295 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023038223 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023368862 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029757658 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029880147 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02350301 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02332399 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022859072 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031683565 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029927551 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022825817 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031875925 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022480634 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023095045 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023423424 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023654755 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033044 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031591945 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02360085 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023176209 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023198336 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023055549 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022421326 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032257233 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031141924 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031163417 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033077925 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02349419 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033713023 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03153399 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024088645 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031416656 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023587901 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023955026 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02389448 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031407587 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.030947392 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.032739332 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023586761 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023202209 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032257206 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034581395 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023594593 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031105007 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033884264 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031668192 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022959564 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034474947 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023510406 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034338748 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02361218 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033843394 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023765216 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031705002 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023583566 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022840999 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02355141 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.03529912 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024042748 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02353271 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023852973 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023536526 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031662826 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035801912 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024100349 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032005132 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031829357 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023975179 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034090851 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023861045 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034696764 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023863895 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024231655 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02300365 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036786256 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023748632 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02415586 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023749864 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034268926 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023789557 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034026867 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031230261 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023183349 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035424311 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033712479 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031450505 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034434383 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02450066 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023926414 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023615026 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023892048 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.034967865 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03650415 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0247716 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023904411 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031399162 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035349614 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023342587 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031780857 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031721627 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032289293 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024106503 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023933478 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.169806703 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033283971 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029126409 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031513546 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030269053 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.0228883 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.028767501 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031552271 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022767095 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035455644 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022625048 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032340192 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031756358 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028290259 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031496966 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032600694 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031305596 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031115027 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032988974 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02233802 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022525902 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.028953888 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022553577 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022757557 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028633708 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023092507 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023620328 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035541045 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022799753 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.03192398 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022211376 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029563013 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022120629 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023074118 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033486403 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022555506 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02303104 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029065287 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022588487 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028659641 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031563303 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028919194 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022505491 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023001762 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032163277 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031350031 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022503851 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022437935 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022953566 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031180643 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030538508 seconds)
  done (took 7.859957363 seconds)
done (took 19.29181353 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.151594021 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071469044 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.156522784 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.089920052 seconds)
  done (took 1.252267058 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055788514 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019098831 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.138875557 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.149988147 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019314562 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133534861 seconds)
  done (took 1.319855949 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.209803538 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136350435 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140000136 seconds)
  done (took 1.292752686 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.128067596 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.264002414 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.522729355 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.125150303 seconds)
  done (took 1.852882063 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.170736475 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.161994871 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030513299 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.178746572 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.037939831 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015588948 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100796512 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.02217344 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.051834795 seconds)
  done (took 1.634958249 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095265037 seconds)
done (took 8.256918204 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.178630925 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.137077619 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.037406196 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026480213 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.130119553 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.129305155 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.138280759 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028911851 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.128786323 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.296060721 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.159857192 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047484637 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.15412166 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.0426616 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.255714676 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.030684285 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028584011 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024179376 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.142858909 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.126060149 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.237343697 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027644684 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.09205671 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029781666 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.102729469 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.07741555 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.166598222 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.287733851 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.270970045 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030077565 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.125151576 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041893034 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.118295648 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.130132851 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.132676853 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048009789 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019682184 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.239013682 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.102728414 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.302244044 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.150874219 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026571317 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.141549786 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.02426504 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018889399 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.141386075 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032557693 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025485902 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043105551 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025661288 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.040463943 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025822678 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.138221229 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022953429 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.091029255 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.135887953 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.161694146 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.097946901 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025087382 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038250551 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.02892727 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.150416868 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038146284 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024944831 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031688308 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019752617 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.13631594 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.038854981 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020071651 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029953622 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027877874 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.106742539 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.154565623 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.063715353 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031394665 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.117866832 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.09481275 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.04720583 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048275892 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028976251 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019140185 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.166270291 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.024856957 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.037509093 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.025654196 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.051964957 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019403634 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034938365 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.155111245 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.149888952 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.07912378 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020630865 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.22845944 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021938556 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045657722 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020771314 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020132935 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.314129005 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019785646 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019754789 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029338803 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028033955 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021315854 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.150457624 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102312431 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027037606 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025768421 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019728402 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024795082 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020753291 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019718007 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019542499 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093185348 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034595269 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.01874958 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.105797205 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.12389548 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030138161 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037119028 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076973808 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022190687 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027797656 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026082577 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.121395786 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027061124 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.130719295 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020564342 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041692592 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.117320659 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.092353119 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.104982776 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.01926747 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.152444913 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029208338 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.018725051 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02603724 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046493834 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028568268 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034536036 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027115695 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.152664027 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029734516 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024480512 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.116980606 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018631205 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.109980502 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.092991725 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.125362606 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024062836 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029271983 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.09120191 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042452439 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.047719028 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041778428 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023457434 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019369794 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019019007 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033847848 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018423236 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019198498 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033280123 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025356269 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019034923 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.236106796 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.02915018 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023402598 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.257609684 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031454681 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.086461571 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.040912543 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019870768 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.103596431 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021544578 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039597639 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.080917014 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020107348 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.094938449 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019906948 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019647713 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.02703845 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021262711 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028481898 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032952917 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020122793 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033492669 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027185666 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019755762 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.103839849 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021505939 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.166824409 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.102962158 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.107027538 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020257903 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.037831866 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.01952336 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.132376041 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019844311 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067390824 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.113909766 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035940043 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.039650785 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.02079415 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092972216 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034594013 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019338616 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.099947688 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.126652493 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.086321488 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.0269595 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.241567392 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028416691 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020110216 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026677674 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027577795 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020020848 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.094568896 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.023848561 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018928413 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.01925627 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021168455 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018528984 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045141546 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018806326 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.026968476 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019291446 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.021876613 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021175008 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018767643 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027096398 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.094716084 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.126651664 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025093934 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.038632791 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032024925 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030520142 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065986226 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.025927279 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.138535155 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019148458 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028941565 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.041634168 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.0192765 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.02446778 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019659082 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038546208 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022813774 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021028259 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027941576 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019922521 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.02001738 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.019705255 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.019882949 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027817892 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021104772 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019257707 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019192054 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019600821 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024106462 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.024888506 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030356103 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039131714 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.453353058 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.02192866 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021906107 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.019829609 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019754379 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020093304 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021352717 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019708587 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021619077 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019973588 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019345407 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048383011 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.024693845 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020494997 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.04191602 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.019776388 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029065261 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.127232078 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036553584 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.024762092 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019307845 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.267526558 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.103924099 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043097404 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040861103 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020393369 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.03049382 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020314292 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020625624 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019282867 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047238854 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025148095 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.181030627 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.020326863 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019275218 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065902195 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027214729 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018966369 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027185743 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019085379 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019328634 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046391474 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020206768 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.01927282 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037935482 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.031532536 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.09586467 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030595874 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.021958486 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068403194 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018495947 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019251736 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019543698 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.109831266 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031453362 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.02020321 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019029572 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026071838 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027525498 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.069650473 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.024634026 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.021977185 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.02671007 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018306875 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019487962 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043611327 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046572477 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020129721 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02244219 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.018890083 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019395284 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.091075629 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026634565 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023475785 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.101143456 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.020981907 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.026682158 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.01836523 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.448141954 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023655281 seconds)
  done (took 21.661313976 seconds)
done (took 22.484355051 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.160766874 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033181446 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032519851 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027790056 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031514973 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031644542 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032853621 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028574 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.036881159 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030971454 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.139451254 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.01903875 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026588064 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034074888 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027796554 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035069271 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031482881 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034256596 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019810056 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034584796 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029675852 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032166449 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.027908376 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033936487 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019743537 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027715607 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154271528 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.037970708 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022891798 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028964822 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.026884498 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032977022 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027036591 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026665066 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028822397 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024607342 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029378104 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025800861 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.154851749 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.024955646 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019927814 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.03226913 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026501248 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027238682 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.027914222 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031243125 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024577167 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033011326 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019130885 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.0321183 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154368489 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02410367 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022907844 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027880327 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024644574 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028728418 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022756991 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031096415 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024500822 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03159877 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027506031 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027410515 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019330249 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027957672 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026646134 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027426222 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.01836011 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024008354 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.01929163 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019245995 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018816787 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027984004 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026142906 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024277526 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018653848 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019278523 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018862144 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031605076 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026380138 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028158665 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019690684 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024677115 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024285989 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019793292 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024119266 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.03119861 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018816439 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019873438 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018716338 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.030956849 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025826651 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019333876 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031160424 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024024775 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023689919 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019306298 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018744429 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023884336 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027389589 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019315747 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.01834269 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023945419 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024522752 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028061265 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019720037 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023887893 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023728776 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018420086 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027963456 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026513033 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028304148 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032141662 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028001533 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030639073 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019903549 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018347168 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029008176 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019679994 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02405758 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027185461 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024527312 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027200356 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019832144 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018681661 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023921698 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025252099 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019678877 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019783347 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019624828 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.027989693 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026533064 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018440658 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.01933822 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028082127 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028071934 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018862201 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.01873441 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028072348 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019851097 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025332162 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024660384 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028147357 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019092164 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019644611 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018678998 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019121615 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018775089 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.02464297 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024132058 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019919243 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028190866 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026677105 seconds)
done (took 5.422507885 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034588432 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.062743907 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.174324632 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.137917899 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032815989 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020530371 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024302612 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039589591 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023002749 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.044832571 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044543904 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041178063 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.16099473 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018664302 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019694262 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020453897 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018074691 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031748208 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143017543 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043572057 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062137513 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019509245 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.03629894 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039704626 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032935596 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.038799768 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.02100259 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020572059 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022566462 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.03739444 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045582851 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019555088 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020841818 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039151995 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03592697 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028837979 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020489861 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026692984 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020657144 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019645136 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021667031 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038120766 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026853416 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027074375 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020880222 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020320029 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020216819 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.02788106 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034172451 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026145944 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032563214 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036865437 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021920719 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020251376 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018536314 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027592141 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.0201196 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020237396 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020536828 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019416873 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020538503 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022600108 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025740044 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030606193 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023963152 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027462031 seconds)
  done (took 3.276778048 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.039079171 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.047934009 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033829365 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034054132 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019276034 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019910789 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.01992435 seconds)
  done (took 1.122706788 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067133892 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.13500185 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.142528802 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.143413353 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.155214981 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.142066215 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03287087 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.052443275 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019460139 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155667697 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.153359904 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.147352112 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023969326 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032643868 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052601415 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.149985717 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033004342 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026991773 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.141911209 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.147879962 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024980937 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.050641544 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033787217 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021016766 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.145282098 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.138260206 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023786431 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021196297 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022937156 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020242291 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020176603 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043285675 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.13769765 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035358377 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021318741 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019477928 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.1356906 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021486607 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.138502325 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027935185 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.138259729 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022672331 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022736085 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020464159 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021578629 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.141689113 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.02158035 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020381529 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.01996023 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.140324605 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019963687 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138676335 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023306858 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025770064 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027451269 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026936918 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027273333 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020977677 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.142581094 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030283227 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022061875 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.15023978 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.149365175 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.140141377 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.149823727 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.0293904 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139700173 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.138665173 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020428944 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028408689 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020918608 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.150497453 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023793887 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022683933 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025352511 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027338578 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.155303294 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.157426327 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.15828592 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035213329 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023488522 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020955451 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.155748602 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.158930511 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026458262 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020772948 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021766841 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036953559 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046022933 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022817228 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025604484 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020880026 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030999005 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023299878 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023343214 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.152032852 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021280916 seconds)
  done (took 7.581463644 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028481364 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.02282259 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021486864 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021418667 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021636219 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021359466 seconds)
  done (took 1.135096413 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.047867077 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021519406 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033137918 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021205726 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.042933935 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.139863154 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.139587362 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022524298 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.036904808 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.032701965 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.140138582 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.144435821 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.142912287 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022496142 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141643551 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032742521 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.14235052 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026115356 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.031965133 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022532729 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034710083 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022118407 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022340172 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.152034928 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023468314 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032397399 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030402274 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032182759 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031679715 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022469846 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022030387 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022920892 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.027935287 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022345491 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.143385529 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028477826 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021713966 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025227164 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023281363 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022945753 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.146911259 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022792819 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026108729 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025149497 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022482727 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028250737 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025325316 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025238231 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.143855415 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025498276 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025116642 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.021976648 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023036168 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.02510001 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.02809237 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022465273 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025121932 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.144838895 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022518156 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028267879 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021671396 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023113894 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022562039 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.02307749 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026414716 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025090712 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028112162 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022649611 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022600735 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021593122 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025227986 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021573724 seconds)
  done (took 4.212294885 seconds)
done (took 18.240755116 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.511042333 seconds)
  done (took 1.424279892 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.009526996 seconds)
  done (took 1.954589108 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.05147895 seconds)
  done (took 0.995296558 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.283261149 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.403620439 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.713621818 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.093203618 seconds)
  done (took 2.424805596 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.835151441 seconds)
  done (took 1.786058503 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.217775243 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.1796239 seconds)
  done (took 1.372908885 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.496220608 seconds)
  done (took 1.436115108 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.313573864 seconds)
  done (took 2.262645223 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.187937412 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.115354156 seconds)
  done (took 1.251367305 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.592674373 seconds)
  done (took 1.536730336 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.74350629 seconds)
  done (took 5.689764207 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.193561647 seconds)
  done (took 1.197401918 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.194783165 seconds)
  done (took 1.144574706 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.703876889 seconds)
  done (took 1.652371246 seconds)
done (took 27.081600167 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042855733 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038772077 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038443339 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033712519 seconds)
  done (took 1.090913926 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.029838403 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024041221 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026422027 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026850761 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024323982 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026039083 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026432066 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022791646 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024169194 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023425852 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02170605 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023243706 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025762943 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022914298 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025392397 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026751026 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023415346 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.023841438 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025426818 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022963126 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025938356 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023330983 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.023328308 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024820067 seconds)
  done (took 1.548368498 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033371672 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025289655 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028333195 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.02415475 seconds)
  done (took 1.066833879 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.03206292 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.02980353 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038240386 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043016275 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029254486 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030003074 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036508496 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036680647 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042744702 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039379851 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021015336 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020711612 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.019948578 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038613088 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036076134 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015610425 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017013972 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030268874 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029374955 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032239279 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023209952 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018945763 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029520369 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030223134 seconds)
  done (took 1.67010431 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037285605 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019098908 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035169972 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043945434 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.04494991 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018721819 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032362631 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044830801 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081066544 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018763021 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024642998 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018703313 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057035429 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018823482 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033890967 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.063373575 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066455142 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022707414 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051743518 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018874197 seconds)
  done (took 1.70892733 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027986535 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023832102 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023612679 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019005298 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029886486 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025937452 seconds)
  done (took 1.107624069 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023915032 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021754657 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020797887 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025571072 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021357101 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.02126584 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.02063731 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019502916 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019495819 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020216857 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020197354 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.02058969 seconds)
  done (took 1.209859724 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.168877366 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.02676406 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023799843 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019470697 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021234036 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.02008312 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033995061 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021959742 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.036960736 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02016795 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020217147 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022305855 seconds)
  done (took 1.390024966 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060708075 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06482631 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098517973 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069250562 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068305988 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049159983 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.195847676 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031949808 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.117623387 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091581355 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070165603 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044983049 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039656985 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.022957456 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054191525 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073601762 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091386102 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026277781 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067747595 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.2378313 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088442683 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.09096373 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103203088 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071474805 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047030661 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103042373 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050450228 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057786028 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077853127 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083393744 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074262003 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.05212808 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024825932 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024423903 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106257497 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062178425 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074886541 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.046662295 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059595528 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042549647 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063285506 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023275507 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.03575786 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065913437 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040635691 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088731098 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047097891 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070782604 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035029189 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094993402 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086892549 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175054986 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041307257 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06179109 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100524614 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072898117 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099196376 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063938037 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03912011 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.219470719 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.063963047 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053517322 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061000729 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033428053 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130315394 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042378497 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.06515285 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063811138 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.048879328 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049149428 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060077435 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089371939 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079165438 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.078724069 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090866799 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044766496 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07294588 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053643414 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.080901953 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056880098 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.02605492 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076572882 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082809282 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053668716 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054819063 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085836093 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046336814 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029659299 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.055660617 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074689325 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034022944 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.068628713 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03439829 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.064672956 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095008748 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053180278 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066042965 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073536905 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032289153 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112386629 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063467814 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02653765 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072189184 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068941243 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113835422 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051460781 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029983864 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055242078 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059380634 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.107500713 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065095196 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034882476 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068200278 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102525278 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051025061 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.258167356 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052377093 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104026633 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072791738 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042393271 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030187172 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046526183 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.220150629 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061044929 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064924625 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047304818 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.036920187 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039833924 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067499497 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045803782 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034111465 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.067433261 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056092233 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028247889 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041355797 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029963184 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093979837 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031283851 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087916461 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077759799 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028435252 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059584962 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048205163 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058486203 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050311293 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07039878 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091991678 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.134947845 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043563425 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.047550347 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060612627 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097116759 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08149169 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046662714 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.030785808 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055014053 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06649362 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052808131 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080077472 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048280548 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062217193 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057647221 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098103449 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102041116 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054123078 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056029569 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063820851 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.078320346 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028881111 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114300897 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05988211 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074240337 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041161468 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099407799 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.065684501 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044927602 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041433818 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055014362 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.061292533 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062135103 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102200827 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051273401 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.02680463 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050489102 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108115616 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03332733 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069096141 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046763557 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048464542 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077753167 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.053955217 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037603358 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022816575 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.243798413 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111435768 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023354824 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065299236 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.059835465 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055143485 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.073483391 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022714725 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070985963 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088780697 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068958346 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092831388 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118038354 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070816154 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071472752 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.066156638 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058299883 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032449571 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.077987426 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087584347 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048991404 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04463124 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087961251 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071435836 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.090908836 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.07272556 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073931409 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.061108397 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061611101 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059431416 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060618808 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102401684 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07755764 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.082355424 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037672728 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061714489 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073067981 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093377059 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036002739 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099298717 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040262423 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07644168 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.03264425 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080896535 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029736029 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.122221097 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033352327 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055335065 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023580276 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.028839425 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101401979 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.069919429 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066355563 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05907668 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.098049909 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097836888 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03214298 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066201053 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073247691 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058806987 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.228080539 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062603327 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.04237061 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048275624 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.059798337 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038122868 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034244152 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.068413931 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047026412 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078223427 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037204008 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028079753 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091563571 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056912764 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047834347 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029273389 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059382537 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.07642402 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.04580498 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039723646 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067324385 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057660426 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09357122 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043702365 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050387544 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077655322 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033190763 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045187313 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022674694 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038617395 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029213741 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081326007 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029108131 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069694557 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022171381 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084939055 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041427016 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047190326 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057110077 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065089999 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083032931 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.048726765 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097742696 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044322361 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076224509 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063426643 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049445971 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041299368 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057623271 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055488849 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078401061 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050437304 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079350019 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101511414 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058460864 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09907209 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045330176 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077854716 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062011945 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080501329 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068316757 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125801275 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099094083 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069884352 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067274407 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029571537 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052545518 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063685114 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072418781 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143733372 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.234938514 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026020898 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057838242 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047205582 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.061630299 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056834405 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03512007 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097003931 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055056542 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041080877 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064170629 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.043617697 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056852951 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02921437 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053084058 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056584108 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048322257 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05014049 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066729588 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081109843 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065069971 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095919718 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05422317 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045108856 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.071553842 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063299209 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062041743 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038557604 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039163227 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091093779 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0728221 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080388303 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054375884 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063707809 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065670722 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05511191 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081516644 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062810274 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.083249846 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034405767 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.030894272 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.021901677 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025791532 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080257779 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063138476 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066895769 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05397753 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026066022 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058670258 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059140234 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026007809 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042543351 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050032339 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052748879 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.047342463 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06344442 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065534806 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.050804994 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059600953 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052559567 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10628843 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055993314 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043595456 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101797473 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113162714 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045103343 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051172199 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025703567 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033798298 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072551518 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11359026 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.262381252 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.031830446 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040756618 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039316669 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039734035 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.024840143 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.041329502 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042141586 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058770925 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051343895 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066367297 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057455355 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028535947 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055175935 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051540875 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04509599 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059764395 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072159361 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078035645 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.09325795 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066459625 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059661028 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029254395 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.03343758 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028947185 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032635793 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05434686 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.031842575 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029378131 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09563782 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044532519 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057636595 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06057362 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040707471 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028784427 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088982412 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.022969264 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090389031 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02485669 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035811815 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.035783341 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032474402 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048319858 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095466406 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065381833 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067935058 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061796722 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059758379 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118119573 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11575952 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036746372 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098409243 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029831346 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030505436 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029869651 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066942644 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044953671 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068861822 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099826869 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045083141 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05704825 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03229786 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101952872 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.058618341 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060056593 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040660184 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033241859 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101578761 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033654153 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.038072127 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045412075 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.068524235 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026904381 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058659205 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038492543 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034493766 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127393023 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.811147888 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044783725 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029131928 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049295327 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093624363 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084365157 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049271407 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061050626 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071699761 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053302764 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046503679 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060527552 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.142567105 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02734403 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047444323 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056574738 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050225658 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054310763 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051480571 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.039910844 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045172909 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039847124 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032167978 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060029946 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041246836 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049527611 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060058444 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035979957 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.040844268 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083596499 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056576029 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.036370333 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041832876 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.05708179 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041536898 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057443684 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023006596 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065855922 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042247564 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074415794 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054551215 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063026992 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081729386 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048871513 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094200886 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.063117327 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078632232 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041602442 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032325696 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083599091 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045252639 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031841014 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103132411 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.052636626 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057739329 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05903624 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.0507299 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06870046 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074338725 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067919007 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051834573 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033218559 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059373603 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.06093308 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043568414 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034896791 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029524892 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030662457 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065577091 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043638314 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04086972 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069630681 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045769435 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060023278 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.061949074 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.225841774 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040995202 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055129338 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064123446 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045015383 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063047572 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053966023 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081728001 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126312518 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077366008 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082232675 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08689715 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.030861597 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028664176 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022020887 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066194332 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032630431 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042318037 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031928674 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086905524 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.036409196 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064798792 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.195041074 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034096196 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047683342 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049260217 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022982124 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0363843 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060414413 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040285112 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033380919 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072469559 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034725879 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083439261 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065350058 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05361703 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050075208 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03509925 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069404208 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.057499855 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.084587289 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049449162 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029229495 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079509352 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058547769 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095985974 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026948115 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035418376 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086961602 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059314883 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088802384 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03419974 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108737294 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099701051 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055706647 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092309324 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024919737 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041875822 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045256176 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.081698157 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039389482 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068160258 seconds)
  done (took 40.071280133 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.10340471 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.132022143 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075987695 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.088706075 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.244452754 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253005404 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105814504 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078083156 seconds)
  done (took 2.181548192 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024174131 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036742802 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034604745 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.27922597 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.050673592 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020514064 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025363428 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035182264 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020679393 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020101758 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.055036171 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021115549 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021108885 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.427868858 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019762315 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025325804 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020822575 seconds)
  done (took 2.213557776 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.307349559 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.480930292 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.266890316 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.55745263 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.118227939 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.675059472 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028891561 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034964434 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.770253842 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.35279117 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.113669347 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180143282 seconds)
  done (took 19.952792928 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031232961 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.154564378 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.152839401 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.0274626 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026984187 seconds)
  done (took 1.519729652 seconds)
done (took 77.750258819 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040832302 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123162623 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020374204 seconds)
  done (took 1.238897963 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.157645398 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.152087756 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.15224111 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.154900287 seconds)
  done (took 1.686646648 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030213529 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029668811 seconds)
  done (took 1.129958692 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.447004644 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.251427751 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.043684425 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038727326 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033444837 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034341135 seconds)
  done (took 1.17988486 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026662114 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024414102 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024442358 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024726571 seconds)
  done (took 1.167157848 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.134293052 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019212541 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021701968 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023371561 seconds)
  done (took 1.262961482 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040234653 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.0396698 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068519389 seconds)
  done (took 1.218152869 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.038899796 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03823219 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.032423362 seconds)
  done (took 1.179532506 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.06479141 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049730744 seconds)
  done (took 1.181836875 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03504883 seconds)
  done (took 1.102238666 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046908224 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050725065 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.218256132 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183817441 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.221116865 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.205646204 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030018332 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030429383 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026097907 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025071827 seconds)
  done (took 2.10149273 seconds)
done (took 16.299282369 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.040239817 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.146985492 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.393692349 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040509746 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.6084606 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.390060376 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.677649956 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045291233 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053078682 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021528768 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037895335 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.58609631 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.682593637 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.103584783 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.676666628 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.097041191 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.516539111 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022558361 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02107764 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021553422 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660277338 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021840208 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021633854 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02194848 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512846907 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.410253827 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023015508 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.090972843 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02209851 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025564138 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.392590892 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022518149 seconds)
  done (took 12.467973947 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.030435833 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.079926872 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026475256 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037044072 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023370112 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023293089 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025203059 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021833684 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063476423 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02143126 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038221224 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.02090287 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025588645 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022356706 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041222645 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021281875 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023432031 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022001858 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021385879 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021782799 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.04007734 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021018632 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021691682 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02192589 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02158767 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035599022 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022720839 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021710683 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021994444 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025690628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026748196 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02289154 seconds)
  done (took 1.991689823 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08341452 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.083426272 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027659524 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061759276 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073603453 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024348298 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.104297499 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043569695 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066759307 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021902363 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038469018 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021626351 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057335019 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022955076 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042102036 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021823662 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024236659 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022311184 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021406559 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021929792 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040419548 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02150671 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021890577 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022381532 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022211831 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037515688 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022594257 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02158758 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021615796 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025656121 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027267952 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022773972 seconds)
  done (took 2.270841079 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024770664 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024916349 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030815112 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033630776 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019831032 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.021956477 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.022905174 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.01983217 seconds)
  done (took 1.279890855 seconds)
done (took 19.095455953 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035260549 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021968154 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025004173 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041322636 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027880234 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.143038443 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018820708 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028429087 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025024972 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025047325 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026576609 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019946996 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023532137 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018470635 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025336164 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019729325 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145614239 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024015182 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.14329844 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.146612196 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022363832 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025303815 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028319409 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.144042505 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.14376924 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.143796652 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028914584 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025696952 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.0201586 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02273382 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.142086291 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.143826448 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022921422 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140565928 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020231846 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019958678 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024262394 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021730807 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.148231165 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029020485 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022368252 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028677609 seconds)
  done (took 3.417457198 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.147603184 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.152492951 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.145188292 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031854327 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028395267 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031416067 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.151603087 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.02876048 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027069458 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.150578996 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.022986461 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02728723 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029475767 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020491713 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027039145 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023382097 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028980749 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021658326 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.02713128 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027310507 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.151551832 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020914932 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028034231 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028547296 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022919945 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028656896 seconds)
  done (took 2.529953258 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030004123 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042876132 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.04547396 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098786872 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063388428 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035736997 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036155492 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047013459 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054081362 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021057785 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042681288 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048505827 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049360109 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027894221 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060237359 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039248313 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033455014 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022662997 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027509991 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054990383 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043603938 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039675291 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054528357 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040911125 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02014488 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030257031 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.02823146 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.037320244 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028319592 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033138992 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025078861 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.0244089 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021727896 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032268492 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024916464 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019104383 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043535907 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033651284 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035560261 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060304958 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030989118 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022529353 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048221625 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085551189 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020681551 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023550723 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025213998 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033259284 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022343261 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050979064 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035894993 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020664769 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039942621 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022279044 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022318942 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036439801 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022565617 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023026593 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032542179 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026891462 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041888912 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026083126 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041250451 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020719241 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032108072 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.02250415 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.02261833 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019690474 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055166031 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028328091 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070193058 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022144147 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019222466 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033159012 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032274061 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028094392 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.02069081 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039660521 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033289463 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024702582 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031819002 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02380385 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024108 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057065257 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.019954061 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019081891 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019051239 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023263096 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024144145 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021502032 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033160596 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020446345 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024316277 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.03538325 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021110786 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021881649 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023552797 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022350652 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020717854 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031374739 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025166377 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022808321 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033908544 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022288568 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024513514 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036021471 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030116744 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020511197 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022177591 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023621912 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022812388 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025648742 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024634572 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02285468 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025941142 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028495065 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027208221 seconds)
  done (took 4.89249376 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.238662694 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.226670924 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022050674 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.223803927 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029670667 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.157556563 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.230669295 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.226909661 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021651508 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022403523 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020878155 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171413564 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.166213372 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.17906499 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.158417282 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.02378331 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048640076 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.17870099 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.233753552 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.228623629 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047526457 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028825874 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023967415 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022973214 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022347928 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030159134 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038392449 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030216386 seconds)
  done (took 4.15957813 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029919342 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065077252 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024647362 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045303764 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037957955 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021371887 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023091444 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022260212 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037902108 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026672696 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021115926 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025299032 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024611541 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023410325 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022043004 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.02779458 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.02772757 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028947412 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024889902 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025843388 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031995226 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045212178 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025423428 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021314376 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024573365 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021253169 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026614606 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029800298 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021103156 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021142946 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018463074 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025661782 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035537766 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022325654 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021214013 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021928721 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021568838 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021473824 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021726179 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019573525 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019465696 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026543061 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020281644 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026332708 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035416816 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023577723 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02282939 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023992402 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.02372997 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018381136 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024788034 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024488769 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023909481 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029669512 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02515155 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023782011 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022686474 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035275649 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026649076 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020910933 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020490178 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019943002 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022988112 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.027958195 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038022925 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023067031 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019845086 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021679514 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023003246 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035341931 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020766256 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026922212 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018578547 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021654725 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023982697 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024515733 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022988378 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.01993276 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021236473 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021559972 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021542545 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021295911 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020895419 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024221096 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019365176 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019998821 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022037145 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023010224 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026992899 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020455665 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024145466 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022823887 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020382599 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024071081 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026666124 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024297442 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041406715 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029313146 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022033253 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01944811 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036138573 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023386932 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020894264 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023315665 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025920525 seconds)
  done (took 3.782797873 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.050357791 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023415975 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.040918889 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.05232124 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031039758 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027100987 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035068438 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022579712 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042260099 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020774508 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.0305623 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019949324 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034109356 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029927896 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02314637 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031045184 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024154293 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.04163613 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.03538898 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020335334 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030069333 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033137458 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033331839 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038966246 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038544645 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039698849 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033186542 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024474162 seconds)
  done (took 2.02061604 seconds)
done (took 21.878975452 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.17901572 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.358003874 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.143658426 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.883381017 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.21828819 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.267007242 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.243272608 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.118980641 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.632314248 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.215091084 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.935308511 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.015751 seconds)
done (took 59.381466924 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.222416782 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.25056836 seconds)
    (2/2) benchmarking "String"...
    done (took 1.349847084 seconds)
  done (took 3.709218096 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.539936061 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.101044665 seconds)
    (3/3) benchmarking "different"...
    done (took 1.140302426 seconds)
  done (took 4.873088135 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.427148846 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.756093563 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.385763474 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.091945441 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.10436851 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.595553068 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.269432757 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.762336297 seconds)
  done (took 27.068056819 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.104809885 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.43510048 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.483566447 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.594279523 seconds)
  done (took 17.795504004 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.545774663 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.496683479 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.497175933 seconds)
    (4/4) benchmarking "different"...
    done (took 1.803104895 seconds)
  done (took 7.560810435 seconds)
done (took 70.757359583 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.088663212 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.358777081 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.113500538 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.27974931 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.118262921 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.187254536 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.106898668 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.10626017 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.10004423 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.10437367 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.10105262 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.100697119 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.111592886 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.147568015 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.102879904 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.134719412 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.352555314 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.108347787 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.115048525 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.90086076 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.434030623 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.1050318 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.111131506 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.177075467 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.481888219 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.122032591 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.514018858 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.108839018 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.701108759 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.109032591 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.109981365 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.100281786 seconds)
  done (took 181.907184024 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.094936615 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.000168159 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.002783873 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.105314851 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.471941691 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.457700158 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.960884097 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.492819092 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.101654584 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.103607107 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.363046252 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.099943429 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.141496919 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.657619868 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.137505558 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.120221736 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.013936997 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.932516902 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.151954705 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.014470489 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.10008423 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.746776387 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.737141921 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.949751499 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.112313569 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.161856021 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.116635986 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.138890199 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.601432762 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.997496545 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.121943084 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.12342975 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.289659691 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.33796814 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.100394087 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.102220758 seconds)
  done (took 153.262817961 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.383625823 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.098667085 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.136890746 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.254781038 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.100262076 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.970754413 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.101816989 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.088441544 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.089489564 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.098692407 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.094139564 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.159757503 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.09970068 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.231344895 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.13230715 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.090289468 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.090333768 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.244571669 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.111282319 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.091016585 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.093243305 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.19462158 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.440579333 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.249680541 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.101448365 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.099222136 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.223599325 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.107562704 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.096623129 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.089774411 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.222787738 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.103263467 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.223483194 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.234564355 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.10784343 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.147438036 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.10609679 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.35448253 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.102330467 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.091173449 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.091269711 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.137183134 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.09930151 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.191511202 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.208305973 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.10428077 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.111064926 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.551402535 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.690198585 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.101298412 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.091660628 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.093250735 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.09470498 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.091678439 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.136816762 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.104103326 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.126680516 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.709166991 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.112551286 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.089421052 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.09172599 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.089579124 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.091757368 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.097621299 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.125943672 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.794277648 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.867412403 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.452471726 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.865164405 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.101601223 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.08972201 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.096232012 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.973900785 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.167190378 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.09582162 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.090821902 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.265644226 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.098741161 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.089507042 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.016659599 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.01628962 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.101855672 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.244386324 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.101530715 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.088157458 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.565241341 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.242688593 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.111803465 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.111926116 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.146479543 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.093631451 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.088697645 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.096262842 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.015961154 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.100810125 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.101991006 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.517221329 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.105492362 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.089932963 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.111333964 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.458577322 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.099071425 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.170316125 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.499466094 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.082376282 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.101547133 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.089573687 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.107994102 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.090695704 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.100560302 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.101895437 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.093533563 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.089534867 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.094422753 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.092054694 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.089772564 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.091593413 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.108030987 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.092949374 seconds)
  done (took 326.005995539 seconds)
done (took 663.782362596 seconds)
(4/20) benchmarking "parallel"...
done (took 1.089431822 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.350352467 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.228543877 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.215669816 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.342404803 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.302038044 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.273053305 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.301777769 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.392223872 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.328764414 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.269093867 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.325351722 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.274973031 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.392503868 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.357537884 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.394374744 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.367397412 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.303914273 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.78358577 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.315039322 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.275437683 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.305340484 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.280767444 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.256323569 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.333249089 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.397847932 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.27223133 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.494942472 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.337554675 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.312553822 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.348283174 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.368094185 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.385555758 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.313783688 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.393222446 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.351104332 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.401819387 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.272831955 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.362281617 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.288478761 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.309003279 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.32637209 seconds)
  done (took 62.996834436 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.467759194 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.29024811 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.395668436 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.399678514 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.165516471 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.4174952 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.485749987 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.279498839 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.291335599 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.40657615 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.415540921 seconds)
  done (took 18.133310484 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.340523463 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.286521261 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.400212328 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.419120911 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.504598952 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.393318041 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.456207748 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.280615087 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.28578922 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.420437123 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.431782746 seconds)
  done (took 17.331633244 seconds)
done (took 99.551328003 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.662177829 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.169495529 seconds)
  done (took 3.922692614 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.123419273 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.111597835 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.104394086 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.104665818 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.105997228 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.103863988 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.153607188 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.115111275 seconds)
  done (took 10.013060176 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.103494922 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.102590978 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.101383937 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.103846978 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.10327296 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.103857389 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.102451398 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.102374751 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.102487163 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.103364978 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.103827642 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.102177635 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.10219674 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.103660783 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.101963263 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.101165405 seconds)
  done (took 18.738613793 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.103154529 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.103736052 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.102119507 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.10375407 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.103482819 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.103795874 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.101882536 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.111383419 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.103219178 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.103027204 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.106330721 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.103826462 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.102147063 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.101920652 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.105789728 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.104593714 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.104630953 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.102769872 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.104982905 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.102752014 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.103032055 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.104333294 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.103353294 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.106458824 seconds)
  done (took 27.587339795 seconds)
done (took 61.374192188 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.696159464 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.163568397 seconds)
  done (took 6.949918992 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.10973868 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.102802637 seconds)
  done (took 3.413008423 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.10311981 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.100756516 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.101161772 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.107641041 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.101771534 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.10189984 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.103289005 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.102905615 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.101853513 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.102917177 seconds)
  done (took 12.119824653 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.101633178 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.102257448 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.101570803 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.101370571 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.102843462 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.103183946 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.101796876 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.102456896 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.102581368 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.10101123 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.104381876 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.292008837 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.10251137 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.329649742 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.104890548 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.10185557 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.10302925 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.102220826 seconds)
  done (took 21.35259019 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.104114006 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.102570425 seconds)
  done (took 3.300465841 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.105259829 seconds)
    (2/7) benchmarking "second"...
    done (took 1.10409043 seconds)
    (3/7) benchmarking "month"...
    done (took 1.102094866 seconds)
    (4/7) benchmarking "year"...
    done (took 1.101860882 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.106838441 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.101624987 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.101466008 seconds)
  done (took 8.812717934 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.550271368 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.275229287 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.324019722 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.565256123 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.691074162 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.022179047 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.697757613 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.018823818 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.979618618 seconds)
  done (took 16.215824855 seconds)
done (took 73.257774223 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.818097321 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.125552103 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.807353868 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.232517105 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.132532083 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.490119995 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.142863094 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.665805484 seconds)
done (took 37.53455032 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.126738261 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.090867271 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.135988975 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.137795641 seconds)
  done (took 19.464228089 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.090789462 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.683661644 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.137627847 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.183217052 seconds)
  done (took 19.286149878 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.604746562 seconds)
    (2/2) benchmarking "read"...
    done (took 1.634342443 seconds)
  done (took 4.347555121 seconds)
done (took 50.324516044 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.101993508 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.103276821 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.104085999 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.102407615 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.102522781 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.104665001 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.106583581 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.102611374 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.101895055 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.102311518 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.105948567 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.104156668 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.104039365 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.102286847 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.103182636 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.103104256 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.101558229 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.102542736 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.103093487 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.102147863 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.104330948 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.103610869 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.102880892 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.103615831 seconds)
  done (took 27.572598237 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.176823906 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.160720725 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.181424839 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.176867396 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.194921095 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.173595735 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.173815633 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.14147478 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.175630911 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.150566394 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.13816516 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.189477622 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.137931053 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.193988935 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.140456467 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.19029213 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.179724341 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.14194471 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.140101468 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.191190707 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.17477362 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.142473305 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.189109236 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.137035853 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.184242037 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.136194893 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.152291323 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.16014459 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.136460815 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.185453377 seconds)
  done (took 36.042124857 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.132923463 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.10215443 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.106090033 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.191286181 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.102494695 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.102421327 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.1016527 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.102931184 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.10194849 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.104443973 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.101977199 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.103538554 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.106474502 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.101846659 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.102113846 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.103112525 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.136844992 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.276927991 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.105431771 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.102931809 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.152564449 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.103504962 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.100612989 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.104439071 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.101200791 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.104863443 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.106314752 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.102276791 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.104961344 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.102823798 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.103417538 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.157678496 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.141418904 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.10221082 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.218329673 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.16201463 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.103296539 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.656951734 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.078520163 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.105906244 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.103999004 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.103040991 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.103031559 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.101738217 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.168708085 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.102525992 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.104349322 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.104005603 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.101312845 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.107678501 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.103445442 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.103301355 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.118401651 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.10508321 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.103228597 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.103411378 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.102937894 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.103918652 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.104089158 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.1034427 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.10327836 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.168702256 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.10670178 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.103594591 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.469504911 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.103996879 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.168753001 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.103754516 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.102230805 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.316287929 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.107510939 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.316555436 seconds)
  done (took 85.720295109 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.103835096 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.103649445 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.181941483 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.182850555 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.104475194 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.102471594 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.104513144 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.103572069 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.791284582 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.117108061 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.104464924 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.106070611 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.788283517 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.11421994 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.120224131 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.194566659 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.112147652 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.112034359 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.111901739 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.102848349 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.103573741 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.102799002 seconds)
  done (took 27.062335468 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.137835608 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.116552284 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.14641914 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.118936325 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.11747065 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.120827058 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.137910319 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.117439224 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.146359611 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.15023633 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.149241523 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.145520657 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.118395375 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.145277499 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.143287 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.197593064 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.145456401 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.194585599 seconds)
  done (took 21.640483975 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.281439619 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.2687644 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.188927399 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.146032078 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.356670087 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.326651545 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.210454961 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.274326548 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.144500275 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.26960612 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.273939251 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.146778083 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.3265406 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.148425584 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.144666222 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.356288581 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.1832919 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.147540503 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.211237135 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.206475882 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.282535279 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.211364793 seconds)
  done (took 28.201056539 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.138704678 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.153399011 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.171011163 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.171744188 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.103466658 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.101585686 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.160369969 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.144839663 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.119313601 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.138830129 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.138698088 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.103791798 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.188874229 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.158086115 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.193209458 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.142066185 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.154936111 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.16239455 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.141035609 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.104266105 seconds)
  done (took 23.982095404 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.102432851 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.10963419 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.102911809 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.103116308 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.10249316 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.101941999 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.105057519 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.102457178 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.104493723 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.340806926 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.103736942 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.102508243 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.106135767 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.103414683 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.107962827 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.104050984 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.103093961 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.105039557 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.103445873 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.103260352 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.34625091 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.10443972 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.103420913 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.10385665 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.103706752 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103119984 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.102646591 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.102578176 seconds)
  done (took 32.480237447 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.168049264 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.141885154 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.143543743 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.223547216 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.22563438 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.144512896 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.220915967 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.225545645 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.141847891 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.141426677 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.189038019 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.141463101 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.143503114 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.138452653 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.143114587 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.189967018 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.138978338 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.227921542 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.178866434 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.146502375 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.193448127 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.140124583 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.190683953 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.146415986 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.145477667 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.192305818 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.181519644 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.266279031 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.162910761 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.142195549 seconds)
  done (took 36.268367386 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.123981555 seconds)
    (2/2) benchmarking "in"...
    done (took 1.124534817 seconds)
  done (took 3.343415549 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.144424198 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.235441801 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.133904527 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.313484871 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.286495668 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.308920046 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.311508757 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.226724844 seconds)
  done (took 11.072056158 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.117047914 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.607767894 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.127008839 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.115801632 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.165644819 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.609851723 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.063547335 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.026665869 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.972182204 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.992533032 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.189569385 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.607803329 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.071089993 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.427595977 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.225417867 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.958772266 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.387982477 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.711725317 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.22548948 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.249037251 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.905741657 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.213309271 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.106574166 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.104789285 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.106780047 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.049209137 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.995832477 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.591599784 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.311876955 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.235230988 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.907861919 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.193420268 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.106257326 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.411443803 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.228614808 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.105208289 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.300923376 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.218341503 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.106535102 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.108960017 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.903131351 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.907128396 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.410180205 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.360020031 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.197546169 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.106008875 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.106497842 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.106201566 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.379553708 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.745187472 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.058217295 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.086776585 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.249508378 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.107585548 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.852528753 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.1208162 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.10390695 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.035098654 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.7204021 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.370914745 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.493547425 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.18669316 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.189052741 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.240908256 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.105596076 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.314037165 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.903545191 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.942068251 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.923628751 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.22366829 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.623826554 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.125582135 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.104425421 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.105143592 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.043864101 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.423616683 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.104174802 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.103445707 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.103245451 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.102692891 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.417255624 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.228367039 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.95260492 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.247911201 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.300963199 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.597455301 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.238109519 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.105336605 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.823239448 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.990918529 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.189944193 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.848283479 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.334017581 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.24818028 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.19774051 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.37471362 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.144168469 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.107651965 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.954932066 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.752982437 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.118165668 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.107633791 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.461328143 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.115094087 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.112875462 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.106243736 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.842680631 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.238249365 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.229358913 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.150015222 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.106624014 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.10395258 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.699222863 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.194679058 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.108464625 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.616037836 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.060412632 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.654262793 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.403748218 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.335154823 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.521106512 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.141290394 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.389250649 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.902290851 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.107449323 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.67934369 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.003231814 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.668907417 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.414532045 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.237979181 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.038806054 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.17751867 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.105280625 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.322401023 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.191032162 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.103034882 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.108398257 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.102971321 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.103956514 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.103950206 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.237358994 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.533164292 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.000338807 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.120880896 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.359045789 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.23330562 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.044151594 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.335684038 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.831047271 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.250042104 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.105074076 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.904483594 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.411491793 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.883965504 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.241416173 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.105650603 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.105569145 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.968082001 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.169854634 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.211080364 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.108727104 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.722931724 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.196859748 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.108591361 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.105138081 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.600303482 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.249731418 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.107874698 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.263698587 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.962696509 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.031881083 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.118813155 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.429568009 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.230132467 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.105325795 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.105190038 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.107311566 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.908667335 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.760006692 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.292866578 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.769314331 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.937295384 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.205511184 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.270273384 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.20657909 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.457256649 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.35783117 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.251359224 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.103813146 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.106940077 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.104180259 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.601081596 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.921844071 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.196911763 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.013469569 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.129412521 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.075916858 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.188851215 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.927536408 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.123977352 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.864420249 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.14066047 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.217904854 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.104220026 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.105867315 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.285102828 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.301806391 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.252947394 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.725037385 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.121560252 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.105886901 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.841321351 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.242771638 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.817654745 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.222071275 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.950390011 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.234142395 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.23953385 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.251189517 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.905429674 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.243799376 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.107969062 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.974873235 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.26155276 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.104917196 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.213917324 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.855880586 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.926264395 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.877171356 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.776549849 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.05920045 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.679715605 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.373780537 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.253104254 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.993547569 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.216571361 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.36976076 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.136193818 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.691812409 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.128693889 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.876149614 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.128111423 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.893783444 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.120256246 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.181286694 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.237465743 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.630280565 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.232551076 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.106589624 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.287606164 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.2111303 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.839967339 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.2414658 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.236671503 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.469361478 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.076704246 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.215503925 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.361153495 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.137054069 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.037135116 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.101080421 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.459123111 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.099692474 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.138164067 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.187140516 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.917668444 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.273113484 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.372333754 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.249618229 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.105154519 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.106218254 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.370445432 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.201951954 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.107204954 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.452177819 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.112929807 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.173370923 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.18722725 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.111213017 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.105311209 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.351919373 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.31748463 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.481053173 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.63652996 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.732242427 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.98799423 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.242052497 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.876498909 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.24757572 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.801057048 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.197255796 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.109684477 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.841024459 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.240406218 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.416946623 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.259247567 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.233627553 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.792284474 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.263999784 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.402860707 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.3439212 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.238369955 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.909578218 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.692850518 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.385365654 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.550020507 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.15729129 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.738322365 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.199861193 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.695439517 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.082116309 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.808412646 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.170672115 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.167306261 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.107036432 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.105425412 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.703458277 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.057051959 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.111522923 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.909656339 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.84061044 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.049757272 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.845166015 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.198092075 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.109613101 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.105322647 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.106278846 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.017326247 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.235406973 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.540183985 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.24981901 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.107539095 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.105976121 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.091371987 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.526065275 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.979948816 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.032514437 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.100221071 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.251740415 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.111369354 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.104533125 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.106966348 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.104695227 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.10581646 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.106134832 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.634344712 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.122231283 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.760459971 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.201125556 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.110514184 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.319035746 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.177615827 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.10663559 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.379534975 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.199875278 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.229248488 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.182288688 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.105936813 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.518405577 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.252341831 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.097259621 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.391934665 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.425908381 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.36198029 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.707319318 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.16498674 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.544935698 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.439262202 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.862450778 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.10955619 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.034871189 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.188291897 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.93482892 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.119923823 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.570853495 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.750877865 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.077022373 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.466011963 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.040192585 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.506618433 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.26064499 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.181983601 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.106583664 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.105959085 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.214928764 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.365203541 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.158350548 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.42364916 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.325510844 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.117395115 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.400910526 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.213041249 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.363468595 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.140084882 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.12238738 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.107200809 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.108128638 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.623458871 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.097891982 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.205787909 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.109081245 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.032982169 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.993365275 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.046260165 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.776686429 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.992637504 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.251633831 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.107039007 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.320514178 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.165238066 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.950770215 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.129414306 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.909061313 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.449454936 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.158915416 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.362553381 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.524582057 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.867920993 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.580438361 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.231642108 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.10932147 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.521061888 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.115075863 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.254251389 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.029349601 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.455841081 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.696222074 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.536358043 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.425912062 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.231757148 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.028164471 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.686427625 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.077569588 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.110927551 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.964486265 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.255475365 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.47808699 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.135494728 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.398083739 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.255403026 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.754573126 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.813162206 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.253274988 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.726204158 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.2536462 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.106576488 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.969552084 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.048662965 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.315786809 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.237581221 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.106844789 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.121785999 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.84565627 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.749905424 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.380360385 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.19235501 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.106751685 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.951402978 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.821046699 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.197953541 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.110933894 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.107940156 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.629322821 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.160847281 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.111564666 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.523283259 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.749243959 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.252220961 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.610773429 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.224526858 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.257431901 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.473570219 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.542355181 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.343678553 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.175921529 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.105609173 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.106078584 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.106411404 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.704085539 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.122763363 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.105389668 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.722148325 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.253599143 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.887638103 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.046089776 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.40770602 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.183593292 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.542816589 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.255354729 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.632840641 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.967512452 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.187465643 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.397461414 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.143027792 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.267045208 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.920241986 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.22217979 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.10763477 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.093314469 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.519000811 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.521696037 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.574655145 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.483120472 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.20332074 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.860714166 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.228022252 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.953371291 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.127768239 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.108862094 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.620534014 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.279205318 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.58715317 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.267023874 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.636154938 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.230913275 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.450723863 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.331638097 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.206752537 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.107520403 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.107740314 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.191603388 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.147947745 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.659187372 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.993435413 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.630022197 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.247303392 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.987362479 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.62220536 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.028209121 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.345071911 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.399409308 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.457944986 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.145009593 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.093347688 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.540098375 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.199471499 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.291525673 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.208507585 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.936784169 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.187030274 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.111544603 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.71106918 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.122825357 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.107002066 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.109611349 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.030170627 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.924072585 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.224401042 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.330780677 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.212393046 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.110008317 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.730093376 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.391838052 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.149606501 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.107806026 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.107070962 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.007834291 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.229143668 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.106810331 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.487145179 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.268471818 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.468106582 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.942317605 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.556305388 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.208751646 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.108520618 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.111151661 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.833373988 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.783349167 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.142975501 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.460894111 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.12848636 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.62491606 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.065477977 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.637999135 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.653912387 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.162315178 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.240462541 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.107735623 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.141587388 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.117302061 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.044856322 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.856026056 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.612749302 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.207649845 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.94844209 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.124697044 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.175426948 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.34520696 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.184841458 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.109137217 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.10937422 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.107078861 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.636463271 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.074274045 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.1147205 seconds)
  done (took 1443.204208178 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.375750051 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.110492996 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.108610168 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.108106271 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.107611393 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.109269778 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.10913374 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.109094273 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.107556946 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.107973082 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.107729401 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.108261225 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.109937574 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.380858574 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.110378361 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.106588431 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.107482891 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.10962642 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.10709167 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.107014173 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.109076055 seconds)
  done (took 24.915058039 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.108135697 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.111906213 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.108661274 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.109448343 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.110096676 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.110130682 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.106907593 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.108776359 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.109783747 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.107526816 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.10732708 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.107387436 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.108464744 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.107181976 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.107773175 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.110110838 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.106656103 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.112026442 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.108489121 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.108285535 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.107884893 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.108095724 seconds)
  done (took 25.488436494 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.107837273 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.106985976 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.882193088 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.242578829 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.108714353 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.10911382 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.108246305 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.318657984 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.153706846 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.01197807 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.515462809 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.126855147 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.11731097 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.29958967 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.21324688 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.109902377 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.228567412 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.107730398 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.106568988 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.112740851 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.107871717 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.364944528 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.253158192 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.109470383 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.956996816 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.256729666 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.110350577 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.10904152 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.108250477 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.101048943 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.185003378 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.113552756 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.018333839 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.944555753 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.473148803 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.00985921 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.198415569 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.112105229 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.10830966 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.113779607 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.360916097 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.864858702 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.112506444 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.107913899 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.423681635 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.234627047 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.107809652 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.479555341 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.12665837 seconds)
  done (took 88.761386744 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.107836608 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.228978613 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.164764332 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.113219654 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.22502343 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.109937962 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.167019683 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.108131555 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.109232124 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.111123248 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.242502906 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.251603079 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.110334906 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.107294257 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.174541971 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.109048534 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.108776559 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.109638031 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.109464877 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.108485029 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.111017276 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.165084942 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.217081809 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.25374396 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.108227583 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.109667987 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.114611013 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.109333355 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.245095082 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.113550203 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.108829968 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.108564707 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.230493524 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.184160044 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.11121537 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.109059097 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.232642174 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.131273575 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.116020117 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.124467867 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.108473143 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.109926619 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.170813138 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.253557628 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.118298928 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.215496472 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.118660206 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.122651128 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.253735092 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.113754094 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.108076911 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.25780916 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.108300165 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.109138387 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.107316934 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.226719738 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.109378495 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.108968906 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.10804868 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.239573571 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.10949121 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.108872146 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.253164064 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.107722186 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.109661962 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.25705124 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.203302911 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.107831539 seconds)
  done (took 79.311104137 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.109609284 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.250082223 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.284672917 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.287596336 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.248392225 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.228233784 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.248101635 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.244572542 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.249157507 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.253314459 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.246304318 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.209631649 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.215471707 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.209745011 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.249931451 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.231334533 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.228160628 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.23064162 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.24828347 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.249994313 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.226359383 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.283473824 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.245577159 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.286900723 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.463434176 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.215077452 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.245440249 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.248407976 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.291255009 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.244608498 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.46196093 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.249213667 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.24618143 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.288484437 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.459362224 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.249404727 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.109289406 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.246003326 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.248753317 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.245813687 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.216914952 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.292280114 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.243003924 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.216451294 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.226361303 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.242089394 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.288811078 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.462377019 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.211953815 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.24826174 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.243865408 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.289263573 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.243660751 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.227747401 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.286531372 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.21542961 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.285151174 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.285927778 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.247943584 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.287037661 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.286387911 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.213526562 seconds)
  done (took 79.138275251 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.108674896 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.108122517 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.192776858 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.10788359 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.108203058 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.191709001 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.108315471 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.108243274 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.108263817 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.107817865 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.107568198 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.190108968 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.469715832 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.112834505 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.193010457 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.47022557 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.194962054 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.193179526 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.109571157 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.193627332 seconds)
  done (took 26.587559156 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.108832645 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.111116139 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.107877624 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.26736042 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.111432876 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.245850484 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.107630921 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.109808787 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.109213612 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.110334209 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.10814419 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.107639388 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.109576592 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.267571215 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.108858925 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.242646614 seconds)
  done (took 19.432291223 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.108562075 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.109781903 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.107377401 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.111105691 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.11029292 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.109736098 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.10844063 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.108798032 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.109786367 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.565160058 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.109173118 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.110400302 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.110273967 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.109390889 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.108900422 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.107236982 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.110416866 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.108252707 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.107922087 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.108865438 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.682812946 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.108856196 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.108505559 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.109305247 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.108423695 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.680142638 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.116238328 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.109506935 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.109356297 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.109120873 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.10952296 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.582021396 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.111284238 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.112364879 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.109947243 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.110122157 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.108645718 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.109041137 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.109183681 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.109859652 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.110354349 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.1120816 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.109528419 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.108228155 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.108155385 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.108044217 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.11042144 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.56233211 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.114933618 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.109721321 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.107768367 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.110324961 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.108638392 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.580447371 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.11274248 seconds)
  done (took 65.129983495 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.148420961 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.165781927 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.110521264 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.108967535 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.160715206 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.147116999 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.149116337 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.127763589 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.147064301 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.1098763 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.174603446 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.12414258 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.150450467 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.163409895 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.175884236 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.14708529 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.111210657 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.173900322 seconds)
  done (took 21.694266764 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.109761958 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.109335181 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.112560845 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.111631628 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.108325708 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.108335807 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.110989742 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.108284621 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.110336722 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.109824494 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.110485738 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.11045819 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.109147757 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.109664192 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.108743349 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.110786219 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.109548966 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.110722532 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.110891373 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.109731789 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.109379355 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.108894513 seconds)
  done (took 25.515570406 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.140493549 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.154639188 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.110451166 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.109678798 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.111018036 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.132604012 seconds)
  done (took 7.856204693 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.167526623 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.177127536 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.1544973 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.163615335 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.184891954 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.202480131 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186868673 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.191509981 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177646094 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.40600198 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.196004247 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188753276 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.17780624 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.241504427 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177481946 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.184100348 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19323848 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193679946 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.159457232 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.200680183 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198482715 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.187348785 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197784868 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186354782 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.196322051 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240520611 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.178540771 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.407729996 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.204590047 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.190118146 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.18299336 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.192091309 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.191546942 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.400112277 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.158083129 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.180157643 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193614242 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.197928234 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189982966 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.235206127 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.150095376 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.177496046 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.180342526 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.196479677 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.186492742 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201496397 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197599429 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198293903 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.199484565 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.405391398 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18789047 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232082424 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.178402308 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.188528637 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.182498263 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.399072103 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.405814694 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.241163997 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.177094676 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.407835907 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.23653864 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184235416 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2357884 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.409461643 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.177809214 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.235388678 seconds)
  done (took 81.5280651 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.234368731 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.145700012 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.195881114 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.413182035 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.23490288 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194679858 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197874443 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190368043 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.191723003 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.163779552 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.200195104 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.199106785 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236926083 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.239641367 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200618233 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187863983 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.197234765 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.231883044 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.165597624 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.401911664 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.198913156 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.234494972 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.236708104 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.235253245 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.399700672 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185511945 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.196969705 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.196074466 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187269025 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.196535685 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.20699406 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.198929159 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.238544574 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.146032376 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.234410427 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.195619645 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.198377902 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.204969169 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197543413 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.184815319 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.240178589 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.199601921 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201651377 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187322659 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.405976958 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.191015257 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.193102791 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.163440014 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.197478898 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.163752165 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.402521793 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.400298235 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.412916651 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.235172513 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195780929 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.196172729 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.201548029 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.198456081 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.19560596 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195117001 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.235104489 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.187407227 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.404211652 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.198055899 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.198298948 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.237830761 seconds)
  done (took 82.035735416 seconds)
done (took 2405.076085537 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.187085994 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.144682696 seconds)
  done (took 13.429884894 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.11073463 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.1133085 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.263836409 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.110847223 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.097595904 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.190228993 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.190956617 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.120139307 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.110848174 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.196899356 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.109734174 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.245775956 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.210889541 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.111894873 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.139075798 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.118570378 seconds)
  done (took 39.555768909 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.218111109 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.663938906 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.124575883 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.926837102 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.144674672 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.90840271 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.462470999 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.83896176 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.419882459 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.566246492 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.371373739 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.996640591 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.939861359 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.279888641 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.618332215 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.654012211 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.736237505 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.808722794 seconds)
  done (took 60.777651342 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.11072986 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.262322425 seconds)
  done (took 8.500865458 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.126459053 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.129992335 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.136178405 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.123435363 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.146353414 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.164158456 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.12339151 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.135806359 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.16043159 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.133503456 seconds)
  done (took 62.498990297 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.197799136 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.578371962 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.439858801 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.574231645 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.745696228 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.595708274 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.274573943 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.458680242 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.199744289 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.098855674 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.381769194 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.517333903 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.946270015 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.374189286 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.744197825 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.390090419 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.880013754 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.475468775 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.447274865 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.535267918 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.396176625 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.260971542 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.560844588 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.957535245 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.115590654 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.746195761 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.371658437 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.24358748 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.182451859 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.25590552 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.484209698 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.127896248 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.402376463 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.121561711 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.242681175 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.780032185 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.846033097 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.311139666 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.678988795 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.456747308 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.537863385 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.808202261 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.177680317 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.788498241 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.270395739 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.465783369 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.126034031 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.351108662 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.202897913 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.22404239 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.73110253 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.283749749 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.243146844 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.224156338 seconds)
  done (took 154.954326359 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.097071773 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.506416053 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.284478132 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.101665551 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.49905124 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.315172218 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.89708622 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.576654085 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.118996321 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.326008325 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.276606144 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.233477839 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.100289648 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.108906378 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.110977219 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.107779663 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.29519133 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.605969461 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.118448454 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.106567607 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.329170143 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.350114486 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.234618339 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.101961709 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.277118836 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.350547021 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.506300596 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.23537975 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.489696023 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.101453607 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.554341277 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.117671002 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.108144978 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.008770826 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.497493345 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.442425731 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.557480186 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.124235988 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.8499281 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.107258774 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.727527397 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.311519435 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.426767141 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.25194259 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.36407996 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.338534539 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.714102112 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.100572739 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.849718533 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.283227184 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.323974978 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.328471435 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.385849838 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.109066815 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.657663466 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.107584461 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.108460793 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.398087937 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.260434101 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.230012717 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.101129625 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.107643426 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.109123536 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.354751264 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.101764762 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.224814635 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.104789636 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.11098008 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.227542173 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.230126656 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.267704638 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.348966946 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.349402526 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.365143489 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.087766601 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.345993389 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.519801636 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.368037973 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.104033237 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.108650122 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.533292707 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.549928897 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.264530983 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.347329901 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.418591155 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.391542383 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.653558838 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.101412122 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.33772176 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.275914336 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.329345816 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.372431521 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.46644657 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.985358562 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.103363474 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.107140854 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.359320955 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.237605759 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.103383582 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.618079383 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.397096976 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.714327899 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.296583079 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.549716392 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.214199274 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.101922704 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.67665685 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.1015579 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.327881828 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.401172693 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.108304297 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.107098821 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.266558763 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.829851164 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.106237122 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.257719992 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.525655763 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.112980503 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.270852033 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.101820502 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.361421091 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.902016213 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.346965194 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.102278665 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.38571745 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.299352866 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.382043963 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.103026263 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.369924723 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.376097471 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.507090289 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.33974132 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.964443529 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.108787047 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.417320371 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.104743703 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.106949004 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.301848319 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.206640344 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.291853442 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.10532448 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.368296857 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.268324019 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.480690186 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.10084635 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.365544749 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.35410883 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.476454904 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.102699038 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.245682179 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.100054729 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.07778211 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.272215569 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.10053586 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.108261054 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.951949654 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.110126461 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.282507674 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.339423085 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.797561585 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.477570369 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.460483708 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.09999302 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.538058398 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.308756797 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.589731576 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.648098196 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.279328504 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.105209062 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.108042226 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.106023718 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.361512215 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.296167076 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.102127328 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.10916595 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.822785701 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.228238767 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.106404855 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.301611552 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.355549551 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.547774845 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.320755858 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.106894706 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.475184967 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.103085268 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.304231169 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.610333246 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.335608785 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.108921395 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.10841372 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.109297855 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.108012285 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.329390901 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.359140864 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.664278802 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.258863014 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.402163951 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.339658679 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.425002762 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.564419813 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.117524343 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.370348233 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.102409835 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.505509188 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.10970609 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.275365999 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.378121354 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.102214855 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.329313279 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.465090211 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.207446349 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.503744371 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.10474104 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.110953489 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.107974749 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.288551903 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.54350122 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.103231784 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.215645196 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.474493315 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.231710227 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.300158542 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.346986079 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.104894381 seconds)
  done (took 728.453115397 seconds)
done (took 1069.270159913 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.098168137 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.10860062 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.111971335 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.11168079 seconds)
  done (took 25.530001521 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.115063343 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.195870102 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.285191198 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.113588863 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.498809452 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.168767467 seconds)
  done (took 11.486528844 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.098586782 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.107292353 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.110852543 seconds)
  done (took 19.416527812 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.38803921 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.513439866 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.263340415 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.197566886 seconds)
  done (took 6.470834232 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.131450487 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.132455635 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.110723973 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.133256214 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.115119395 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.111243203 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.145394566 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.129627855 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.113613806 seconds)
  done (took 11.225974047 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.647314543 seconds)
done (took 80.879839424 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.370740391 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.403148595 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.266205676 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.276984872 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.240391759 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.431313328 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.226268331 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.125189111 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.457882673 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.532856143 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.605451613 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.224426953 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.423333187 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.511050492 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.355938241 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.137779756 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.120370065 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.171236911 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.749214343 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.275133349 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.759047562 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.243550208 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.847728975 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.136801653 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.006696205 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.248005615 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.3579296 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.924088596 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.158993168 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.133359186 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.193086445 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.595845007 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.338259448 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.445513792 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.210964879 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.989863645 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.535930516 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.112879448 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.407902093 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.614846095 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.403432816 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.204137327 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.101181649 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.27865776 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.50061933 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.127385981 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.072656371 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.269628159 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.633042878 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.274742965 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.585678826 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.116092775 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.727096311 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.185575693 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.195528171 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.104191767 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.010529444 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.856645092 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.270298584 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.422093261 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.120218874 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.224957718 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.009842632 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.140967838 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.255338378 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.38290471 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.523984708 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.201330179 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.647060048 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.138984965 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.120416868 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.136503666 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.780238052 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.253823933 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.098483212 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.255298859 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.390109206 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.264077926 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.110763471 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.260501486 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.333776768 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.101187572 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.249810948 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.46685047 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.275001735 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.439953919 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.59572595 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.451688385 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.483853006 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.107576685 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.666376772 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.29182557 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.740890775 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.153228251 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.514991539 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.224480082 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.404579671 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.630461514 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.246121062 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.650780136 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.137976981 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.1216208 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.434823892 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.412910212 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.908848819 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.142686012 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.271828832 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.099419388 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.39988754 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.951863834 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.213009863 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.671205216 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.115492299 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.172459762 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.694896222 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.114079147 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.449290372 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.543705778 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.230252506 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.107322047 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.402407578 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.117502929 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.231682159 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.639942426 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.48638701 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.323666731 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.105501023 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.35592106 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.113435575 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.324053644 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.115741488 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.697423112 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.650508465 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.141581678 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.405280297 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.236517613 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.101626925 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.461576657 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.163196893 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.332790868 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.417544528 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.42195305 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.235537915 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.101683201 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.463131058 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.110980352 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.35254686 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.450836962 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.274838562 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.419062922 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.194260461 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.126283689 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.040198094 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.523286574 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.726430769 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.661684169 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.379766429 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.241755887 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.650501989 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.460050201 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.983059634 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.203606617 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.160759357 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.113518749 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.127037854 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.172494128 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.101814121 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.109867625 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.406075848 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.31328425 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.609672609 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.917975438 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.116007497 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.391434776 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.262836492 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.992893562 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.695502094 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.114794856 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.420598299 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.606398098 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.195023039 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.142749216 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.101849104 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.165492388 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.841298529 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.144610102 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.428830492 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.58842329 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.36692762 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.528000863 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.267430249 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.14774873 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.427222752 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.382831923 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.379292247 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.324690595 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.490355774 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.253724136 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.401087383 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.148442101 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.383504914 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.111792764 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.122416042 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.337959423 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.613250525 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.444848519 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.343984175 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.277381899 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.448859167 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.111296528 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.375193822 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.206846202 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.49031368 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.138899288 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.373328239 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.207273645 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.418897982 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.00046204 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.228248384 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.413241641 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.261867 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.207871894 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.612836711 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.12876735 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.416901216 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.272658432 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.28607524 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.356091538 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.140900546 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.240245117 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.307619463 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.244457699 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.365244671 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.929006023 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.44078932 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.664215047 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.236135622 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.099878965 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.523667038 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.137762155 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.121571236 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.355252349 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.275155623 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.428307879 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.232803313 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.27929051 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.176816685 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.137064734 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.607286519 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.956248518 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.681114144 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.103162457 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.137726758 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.100528586 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.539980549 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.519989292 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.176497421 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.246541215 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.691092386 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.147019607 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.274346657 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.114915864 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.114918864 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.877098394 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.242876677 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.356091667 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.595468846 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.114877986 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.309465468 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.147925663 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.53551811 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.584753151 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.16306142 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.233093373 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.401488842 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.088691553 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.506640907 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.132191434 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.292351331 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.443060212 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.230815638 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.222288365 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.103817266 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.149076155 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.63466447 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.311659078 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.596001674 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.139801387 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.445701579 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.233783787 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.362442445 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.132697852 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.197452724 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.506142806 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.266236295 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.503397178 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.115757786 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.268353353 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.361375033 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.131799626 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.12622166 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.248769598 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.709002216 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.528007497 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.389783922 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.271326973 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.071733515 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.353089185 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.110324819 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.6499208 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.252090779 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.237953871 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.728968077 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.613515401 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.11445484 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.288615059 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.110058464 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.475823416 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.14071686 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.121007498 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.265679313 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.196903444 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.101435679 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.641265282 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.295803204 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.607913834 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.214633985 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.975381342 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.232605079 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.285639858 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.22403524 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.389402782 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.892600337 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.127201359 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.249201458 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.782751437 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.301712689 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.143556881 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.38557912 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.114622462 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.723532793 seconds)
  done (took 867.330213245 seconds)
done (took 868.598462505 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.320466439 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.505768207 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.371520676 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.019618273 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.933188301 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.777316413 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.39027466 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.364376472 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.207345913 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.387425114 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.076905208 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.971417619 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.227613664 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.245648877 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.221176741 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.233189489 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.341286515 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.375215065 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.249471004 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.074110981 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.521145335 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.078791223 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.562690486 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.428466205 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.505829304 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.230922394 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.338806471 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.646068592 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.648546451 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.321104635 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.346168109 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.360471309 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.968599316 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.376051718 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.22470951 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.212880019 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.011929443 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.22712966 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.327089342 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.214343353 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.508467433 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.258221815 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.850964109 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.074105036 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.912406684 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.560939071 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.974127824 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.237960483 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.238336605 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.335802984 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.390002389 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.327871869 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.647065644 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.341513235 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.025540634 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.069737007 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.649506221 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.014991146 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.863924082 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.338288891 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.654026162 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.235775265 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.337226329 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.363606183 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.25608286 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.425736794 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.557777883 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.338811894 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.356679267 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.394232294 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.376416368 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.356811222 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.248864474 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.265973703 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.253637955 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.386435013 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.999067236 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.376980432 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.921093965 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.229171508 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.090324345 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.043887962 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.087471461 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.210856807 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.320835299 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.905173367 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.231339587 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.096677934 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.256702969 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.355040281 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.093852833 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.376071659 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.589228648 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.340212678 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.322225199 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.373755174 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.234509526 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.382158143 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.297725228 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.36110686 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.912680864 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.340634382 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.125831763 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.212689527 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.233385078 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.323398132 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.338205664 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.56211611 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.357178196 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.288345496 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.508281821 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.25265514 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.356309768 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.250583735 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.206044945 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.908492231 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.418026523 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.012063086 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.384607174 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.80403687 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.395819027 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.213180167 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.50838381 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.434281679 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.324853915 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.230174331 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.234061765 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.08186585 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.23784049 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.236857809 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.319754444 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.584566025 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.341061458 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.017321712 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.357733104 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.88298735 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.372645005 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.356976722 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.208881703 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.971368079 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.228854723 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.280308638 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.432291248 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.511198206 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.406674376 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.439740599 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.267601426 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.427642042 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.406030208 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.260333751 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.368049514 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.26268715 seconds)
done (took 250.290050885 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.449619013 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.312791673 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.414190917 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.399453343 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.477656805 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.48732193 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.182736055 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.566842477 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.227812863 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.526883581 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.411312865 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.008345127 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.328104081 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.335774145 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.478712481 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.376005137 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.228970898 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.371083221 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.563281572 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.46603131 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.909181652 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.414380234 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.258773527 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.530553009 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.102299589 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.914237626 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.469494303 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.257754913 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.375849302 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.944898454 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.91208681 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.382143942 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.467315991 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.93351543 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.689073841 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.883559962 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.481503782 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.041670857 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.456612003 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.477786159 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.413024256 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.064253617 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.949463724 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.936740444 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.281003821 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.460457758 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.177856596 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.121715306 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.106795835 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.889464883 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.376726125 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.930120321 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.013560718 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.446482271 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.325633587 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.827019736 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.611758742 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.604753888 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.466588703 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.417798227 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.450346076 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.531094197 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.526773085 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.297527375 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.907528377 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.414316565 seconds)
  done (took 149.174712274 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.540041127 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.405127333 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.548834912 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.506427858 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.671287113 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.515082468 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.655831908 seconds)
  done (took 13.943817621 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.168376583 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.162312257 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.401373337 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.402977789 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.168146754 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.286164099 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.244281498 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.917527 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.385608036 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.202079298 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.480550257 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.403491121 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.842418943 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.893073071 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.251522012 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.397641713 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.13281925 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.235500311 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.220316437 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.418718698 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.911801854 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.892228723 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.461673188 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.247240202 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.167690273 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.200260233 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.154377781 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.130942407 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.216712055 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.144433483 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.170948811 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.268866332 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.159144653 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.868986841 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.203772008 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.488065434 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.165901618 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.218516874 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.299278454 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.104429671 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.148292115 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.164711846 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.293575526 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.169434711 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.137933609 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.346415418 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.14610363 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.168910892 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.14047353 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.158928883 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.455234582 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.155890104 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.199421964 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.843928073 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.372997733 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.885924016 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.234249604 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.153155418 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.157898279 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.211780215 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.157302219 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.417643131 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.375866752 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.146016081 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.4007301 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.438156544 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.154632487 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.144695265 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.141931096 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.403361435 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.158351278 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.400654593 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.161890491 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.207730967 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.214959015 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.292654444 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.350018734 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.948897053 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.929606558 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.817959562 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.12822404 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.149925239 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.479993801 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.09173946 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.844980926 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.150110066 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.218112386 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.802862931 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.069643881 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.160612252 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.473179821 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.14732895 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.212092183 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.211509389 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.202331442 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.223104328 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.379019931 seconds)
  done (took 153.125348692 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.506838661 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.738032812 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.384084178 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.422030981 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.562584185 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.659433817 seconds)
  done (took 16.376262382 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.474442571 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.957022179 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.181423097 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.177691628 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.218822129 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.153103721 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.152158947 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.350774211 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.273892053 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.166028466 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.152552143 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.174749608 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.152733374 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.285280965 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.154771855 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.161798357 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.15235226 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.178819648 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.164294482 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.223784662 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.475618241 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.21295516 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.223515594 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.066202925 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.192601561 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.170249921 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.166504294 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.169542843 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.16260587 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.495572053 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.352770252 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.151392909 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.021939087 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.488716512 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.911704564 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.074838318 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.287650496 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.179598588 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.225539353 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.152187892 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.174927492 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.226426803 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.174537573 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.174862903 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.514107552 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.986124294 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.215488067 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.446839314 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.15520859 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.173240805 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.173999752 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.176587648 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.154203005 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.174828883 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.669283049 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.588707996 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.112829227 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.157936356 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.214270006 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.075554101 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.216447916 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.15865372 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.502965938 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.086335066 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.886006691 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.180116578 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.0831753 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.274358413 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.22976277 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.176869178 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.174772618 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.176946654 seconds)
  done (took 118.173550024 seconds)
done (took 451.906552887 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.159908428 seconds)
  done (took 7.259718762 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.190211856 seconds)
  done (took 7.434195517 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.103861512 seconds)
  done (took 7.217269322 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.122114824 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.142814342 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.123137517 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.131692784 seconds)
  done (took 25.662571633 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.273069213 seconds)
  done (took 7.38341269 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.099596638 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.123107879 seconds)
  done (took 13.432949652 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.338553272 seconds)
  done (took 7.463913341 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.470074258 seconds)
  done (took 7.589133536 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.10693641 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.143147893 seconds)
  done (took 13.392643989 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.099995375 seconds)
  done (took 7.210192365 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.980478619 seconds)
  done (took 9.184686771 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.104888529 seconds)
  done (took 7.251987283 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.159092853 seconds)
  done (took 7.269879041 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.238147596 seconds)
  done (took 7.348129467 seconds)
done (took 136.201143736 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.101889581 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.112379883 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.11366615 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.11075721 seconds)
  done (took 25.538557334 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.436283882 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.436687976 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.414886252 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.48949776 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.382426108 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.381082267 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.435929211 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.438196069 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.384393936 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.494488956 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.437238879 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.589380519 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.488651738 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.418400101 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.413775209 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.487565233 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.591749403 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.438971919 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.382963969 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.416172938 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.590310524 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.587846449 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.873948734 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.860977823 seconds)
  done (took 36.985522981 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.322229577 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.476088941 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.281951545 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.435876291 seconds)
  done (took 6.621485093 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.14283748 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.486897108 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.471727595 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.430282176 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.470075769 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.283794171 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.473233152 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.322120684 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.293828799 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.293026239 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.742015341 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.269776602 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.276815443 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.528376537 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.283956853 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.112576304 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.113687747 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.29018727 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.488116883 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.312441091 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.363863276 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.474092786 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.470799231 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.470567877 seconds)
  done (took 33.967308511 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.927439406 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.048842999 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.4728177 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.036758043 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.830991558 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.918484065 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.39450601 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.618464055 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.380555792 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.35649634 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.869170932 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.845658893 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.260461654 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.008201212 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.892749258 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.293530591 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.290482279 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.964589924 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.728944979 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.415226506 seconds)
  done (took 38.656426315 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.101123051 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.111172734 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.327466783 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.279413838 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.102115894 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.110887286 seconds)
  done (took 28.138364473 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.171180683 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.259047172 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.424150235 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.390235386 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.268029852 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.24786663 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.785659355 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.334060163 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.889740879 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.92264728 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.769715452 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.572095127 seconds)
  done (took 22.1481043 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.101959786 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.144606015 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.122111154 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.277766407 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.939523313 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.995745441 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.433837758 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.103382347 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.190860821 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.307722099 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.971686719 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.282594635 seconds)
  done (took 39.993809886 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.317619166 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.395996612 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.462326747 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.983269963 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.643611797 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.196233842 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.543870482 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.619278709 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.169867805 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.231880147 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.643993024 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.167715999 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.640210468 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.081077907 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109375489 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.462756975 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.931698948 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.606334397 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.552504732 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.184272375 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073473416 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.258201419 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.128071168 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.6619738 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.443021422 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114758788 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.317288021 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.351147243 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.103460518 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.311324606 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.16470304 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.579635073 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.304697759 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.41246298 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.641753551 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.193754955 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.22331744 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.273833423 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.702273266 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.405175731 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.248296194 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.267650989 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.63259341 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.22309288 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.368585569 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.887216866 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.108643834 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.753616845 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090252779 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.25320287 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.008045105 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.986567166 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.435263291 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.090764112 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.25234861 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.454418432 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.262436237 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.285990614 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.40774808 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.170101995 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.29814973 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.222141511 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.323303905 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073245383 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.367438255 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.446956147 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.450382925 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430881086 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.383718599 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.448251858 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.488733341 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.257328906 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.882799724 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.246569534 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.616844825 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.018317319 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.470849419 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.10759877 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.842653299 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.638960923 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.086918305 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.222870321 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.783420996 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07164236 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.109397597 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279794321 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.981941121 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079834061 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.20331234 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.179208726 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.493784922 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.238870633 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.257056068 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.373611844 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.804643572 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090096459 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.877773966 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.417548569 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.073313052 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.673483678 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.159578092 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.080271547 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.167091871 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.665130879 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520367069 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.156910472 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.874567093 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.807573023 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.442032407 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.67548635 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.27153694 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.109403982 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.495906767 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.436378123 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10197854 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.885820216 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.27045034 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.246333874 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462083367 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.106356582 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.08227521 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.525961377 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.30466632 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168221936 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.331114175 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106183524 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.26198055 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.105254689 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.891105797 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.377495998 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.355969046 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.651177387 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.429850972 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.195297132 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070710982 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.255015073 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.615749666 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.196503236 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.445012049 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.550803984 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.707106608 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.874765407 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.100003009 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.971619187 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.597124467 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.385761273 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.443399377 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.73011338 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.285162409 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.19713979 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103687978 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.272854293 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.11820469 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.658710434 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.106234586 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.832480656 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.91444916 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.410315406 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.102465332 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.091434563 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.049166577 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.353692776 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.773675797 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.162371758 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.277868882 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.391836618 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.394384018 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.10308317 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.083250822 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486004541 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.361170747 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.634688775 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.364489742 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.77355876 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.481725767 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.597254015 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.304476213 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.466433769 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.906411911 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.772105164 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.458281423 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.576327005 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.131458942 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109465232 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.203836472 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.529616257 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.332453921 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.833551395 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.088854804 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.60001243 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.158699555 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.585756821 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.083776111 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259270149 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.600045646 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.138264584 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.674049066 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.27581151 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.353205552 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.406633446 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.134717202 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.820632945 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.917815345 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.542230659 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.493958682 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.419176086 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083599489 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.543740878 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.636732263 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.603763676 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.245351979 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.515352226 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.343259541 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16392437 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109687916 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.460256194 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.220797332 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.797497852 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.414912182 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.919163812 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.785039831 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.263406247 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106050365 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.115426637 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.289018163 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275953956 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.163674508 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.275391121 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.653379573 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.378515692 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.434319445 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.102883442 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114012202 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.391603806 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419741297 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.384128188 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.624388184 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.72031979 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.818084653 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.21335128 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.801117426 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.276236675 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.141567508 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.751403548 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.413154428 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056484338 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.295851983 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.791912201 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.249514902 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.278717216 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.42416125 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.103499036 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.595976543 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.725142255 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.110272314 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.070235839 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.249495828 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.109567474 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.426162523 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.868632349 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.344199666 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.279902072 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456733584 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.355762322 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.296751578 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.509792386 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.635264084 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.895386829 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079924765 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269209114 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.224129454 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.437586169 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.104695125 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.400683759 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.776079223 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.773345024 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.922895199 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.653565301 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.358925563 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.864879666 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.582789697 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.357908934 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.46669374 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.060911418 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.732574974 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.087481759 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.250272165 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.076086466 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.877425205 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.432542733 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.486360692 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.595292999 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176901404 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.643453289 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.525696155 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.179376244 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.255290862 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.384176872 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103905953 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.44835887 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.107671615 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.048387274 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.548327959 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.115568117 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.542758663 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.312231993 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.442939019 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.261630038 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.761462834 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148302873 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231658567 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.572007929 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.296159922 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.247822377 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.44411176 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.190626603 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.150032847 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.120719038 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.227617904 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.695831787 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.593981616 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.705739591 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.708881574 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.464630999 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.870532015 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.105561262 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.314312008 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.267694364 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.716334918 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.299919626 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508891673 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.140749116 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.326113107 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.433509034 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.284130698 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.653223033 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089801364 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.71148999 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.336727645 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.619880175 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.652760446 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.885668388 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.599528336 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.133014836 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.638418948 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.116345111 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.264943717 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.515092228 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.823952224 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.780730575 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.952878397 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.901860007 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.263518664 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.54907114 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.207893651 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.897136121 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.268613483 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.361238772 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.303234023 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.245131942 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074555385 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.718875504 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.884342174 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.386818099 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.276445373 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.293958797 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.242105163 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.259850571 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.666387749 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.420850088 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.868616252 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.593888005 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.349500896 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077283667 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.109237281 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.817973778 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.292404601 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.207006414 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.443704286 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.566371984 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.162692874 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.124390915 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.09051121 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.420827428 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.858444989 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.82316976 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.454848932 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.649204174 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.707241907 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108952971 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.877796298 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.310048368 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.470096255 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516872581 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.039578428 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.490093212 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.443549916 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.258699248 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.077853447 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.302698378 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.116537433 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.150874064 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.892930373 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.409677658 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.18787954 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.983932537 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.746338708 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.111901709 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.151404668 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.170247921 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.338719179 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.310512409 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.104878026 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.719329409 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.522230385 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.282891938 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087050768 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.873457101 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.080169101 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.313070223 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.086104267 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.312000833 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.930286443 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.194200258 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.765679792 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.648231859 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.149944312 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.313362808 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077690341 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168347715 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.123047207 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.77199132 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.919148418 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.357465987 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.631308003 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.296313962 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.106922155 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.436856915 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.241817498 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.442029655 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.58269781 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.598867178 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.525193189 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.479115521 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.405364919 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.81654019 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.250199541 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.354543769 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.074033109 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10894561 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.188355399 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.493788865 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481588479 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103860357 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.655886022 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.363542423 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.247379574 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.27399813 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.211359328 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.671570191 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.317651665 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.238835511 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.270646479 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.353042482 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.459417308 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.106132651 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.336262847 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.107010054 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.110254964 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.314472275 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.357423432 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.490143439 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.430070698 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.706884623 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.2648816 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.835045911 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.060305626 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.637901596 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.11017051 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.936525126 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.499418192 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.105154766 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.604742401 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.792395285 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.298916456 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.384906729 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.184870993 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.926959287 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.307097469 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.610840749 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.118022748 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.758811647 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.544769052 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.105921835 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.590603351 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.182997624 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.278369103 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.859422777 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.606771548 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.109053695 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.888919482 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.227856705 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.659320869 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.813385691 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.282638177 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.118271792 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.910728304 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.08746007 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.111870225 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.188625901 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.644486309 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.123026262 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.689612944 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.248742071 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.270323646 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120070268 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.254904171 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.104675564 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.31464946 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.706300813 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.352840021 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.382277029 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.300300471 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.115074399 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.694626423 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.818213367 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.043174623 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.318550523 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.908182976 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.49454332 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.887740671 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.902676467 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.682903265 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.403892311 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.308152996 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.543332116 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.36862146 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.144847424 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.31601897 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108314112 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.396733067 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.267965257 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.674293557 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.363928488 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.959077837 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.382541914 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.125034024 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.666328706 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.580814954 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.987345137 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109529839 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422951468 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.10977551 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.883202029 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.756146787 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.298609032 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.244310111 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.330326735 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.70871507 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.419000883 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.23438779 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.11597196 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.32471598 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.615256156 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079760081 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162539159 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.001079988 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.307095814 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.441802919 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.074944641 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.299978067 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119660599 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.090996854 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.609101451 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.112354765 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.486506633 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078574145 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.631161544 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.08707112 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.219619962 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.274125029 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.441612805 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106338517 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.832487946 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.288840847 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.119520594 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.112974008 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.498393193 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.197312407 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.35996223 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.582682216 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.345056364 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.443926271 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.999177411 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.161584216 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.119082456 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.420862092 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.938727985 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.676499018 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.21767986 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.621570467 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.159754462 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.121907677 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.663916605 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.353252776 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.838435248 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.255287029 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.610436682 seconds)
  done (took 1945.00728856 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.176336663 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.224779108 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.174448382 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.192193525 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.255732462 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.272919297 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.175979838 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.139076529 seconds)
  done (took 50.719408736 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.103442379 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.084291026 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.548748852 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.28773876 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.131008552 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.309910487 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.261083652 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.604217978 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.304026802 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.141687146 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.175099758 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.159558672 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.11939363 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.143095501 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.97538268 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.195760177 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.109811273 seconds)
  done (took 90.777324122 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.134128845 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.406950447 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.117967279 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.639909369 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.161298685 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.362065652 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.120488681 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.111568986 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.787052881 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.770655196 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.186725942 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.257973254 seconds)
  done (took 79.197854413 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.143645141 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.143472791 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.144674938 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.145949725 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.143733684 seconds)
  done (took 6.835838597 seconds)
done (took 2405.718823411 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.357248457 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.621954995 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.657634593 seconds)
  done (took 4.384178537 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.204647541 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.239556982 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.314842907 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.254781392 seconds)
  done (took 6.143234462 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.393263174 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.593209541 seconds)
  done (took 4.091483075 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.592130769 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.148028144 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.666253096 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.106893412 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.112720435 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.118216129 seconds)
  done (took 19.457659694 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.135421294 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.13665729 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.136638412 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.132261784 seconds)
  done (took 5.654619944 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.104671428 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.124805268 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.115341309 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.095447796 seconds)
  done (took 18.544920503 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.490007387 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.366303677 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.865952572 seconds)
  done (took 5.839476083 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.95412069 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.492021333 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.913381403 seconds)
  done (took 6.465511379 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.061903934 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.050941264 seconds)
  done (took 5.217045706 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.268794909 seconds)
  done (took 2.375071787 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.589113942 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.59543678 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.967080149 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.00146484 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.138538795 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.432986356 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.432922501 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.479830891 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.798158137 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.624022145 seconds)
  done (took 18.163772568 seconds)
done (took 108.203916192 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.123557016 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.57067853 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.279399184 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.188727336 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.217849087 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.279403389 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.138717198 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.957596178 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.423147362 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.420502362 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.327991016 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.214561472 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.170864613 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.56438146 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.172768952 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.529367139 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.539752332 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.143248891 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.022458108 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.677065101 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.144215646 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.709431728 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.015755041 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.718623841 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.545035351 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.273834069 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.303629546 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.536558498 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.288634831 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.312026125 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.281377026 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.954198179 seconds)
  done (took 154.149295552 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.102919306 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.117087777 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.12070086 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.114996148 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.206810297 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.119703806 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.115750637 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.113829894 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.866607418 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.871264493 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.118832586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.209109163 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.119860806 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.117918506 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.120217154 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.112826533 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.075181863 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.119134851 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.118630117 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.117674649 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.117663489 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.99276148 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.118739959 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.996872224 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.074397245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.117531719 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.117715043 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.118835917 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.118801509 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.119385542 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.11888695 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.113839969 seconds)
  done (took 188.22421897 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.103722087 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.121325997 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.120394229 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.114476741 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.119723049 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.12217628 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.11653382 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.112645936 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.117989252 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.117155911 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.116406109 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.121894491 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.12116903 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.113690443 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.118481693 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.115267955 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.11867181 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.118754703 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.119532986 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.117600913 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.117104671 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.114640784 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.118229082 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.133497232 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.119914639 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.125718759 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.113163567 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.117218497 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.117388491 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.117226316 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.120184694 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.112753008 seconds)
  done (took 196.895008234 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.413226745 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.15605811 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.060921585 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.44663166 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.036800344 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.141719622 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.442893261 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.419108049 seconds)
  done (took 15.236138158 seconds)
done (took 555.622724155 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.813523323 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.043609422 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.296467566 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.370040097 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.745213026 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.406504944 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.369841554 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.603154285 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.854750358 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.568082779 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.637331741 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.325308863 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.028180291 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.383468897 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.306478193 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.623949042 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.543057764 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.829863902 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.317597116 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.991087903 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.333731894 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.958081684 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.588329358 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.907838643 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.641351121 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.008416689 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.237021552 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.542394277 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.371886662 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.322430829 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.206134127 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.494167622 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.349943752 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.343128179 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.562419536 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.571899524 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.454734215 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.555898975 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.29454403 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.76670874 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.017591875 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.722566698 seconds)
  done (took 75.412354472 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.135662964 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.151408201 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.305194162 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.208387581 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.826366709 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.214432899 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.363719733 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.346318627 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.229407044 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.349645288 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.378071554 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.846778954 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.37953836 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.762183088 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.368561655 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.390568951 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.216900783 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.741362703 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.371644587 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.343883633 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.1777591 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.307036388 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.182791303 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.327301017 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.168208099 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.188549795 seconds)
  done (took 36.41808138 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.186808544 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.298816255 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.394966893 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.658101445 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.366159978 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.258179563 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.483242893 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.264115632 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.034767107 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.343719194 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.229734928 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.260157857 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.312736244 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.425461487 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.683895441 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.303825612 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.300960019 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.298484689 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.30285213 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.374326927 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.324085861 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.233099151 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.487295924 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.342162129 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.822818913 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.541211923 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.482541689 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.740283648 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.672343394 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.286789693 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.268873242 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.462647364 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.516936583 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.399113577 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.282546011 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.168822348 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.186985898 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.225383658 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.201915921 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.312399551 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.477425242 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.359327787 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.536973535 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.680154547 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.234473967 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.403945006 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.600952862 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.232695993 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.26933859 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.957307383 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.4472263 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.105494264 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.309056791 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.34944061 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.267372143 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.573911138 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.341977537 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.416232811 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.359086497 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.883520515 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.235321846 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.533560638 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.308526723 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.229605599 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.448618266 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.361267301 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.326690144 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.588107428 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.537357939 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.603464678 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.695303831 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.223644156 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.189514845 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.221284569 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.302008485 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.637818161 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.633358888 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.39796442 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.538952073 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.47039958 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.769502466 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.603353964 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.186664517 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.817750443 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.207325647 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.157467051 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.252454103 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.475914472 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.465052377 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.613278125 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.688576706 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.440396316 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.603823534 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.606571523 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.550798249 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.549873058 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.145639971 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.187890473 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.383364995 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.695989003 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.232504335 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.423127799 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.8020109 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.681904107 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.591913035 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.425822798 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.546671046 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.25321507 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.578446239 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.138922837 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.370097895 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.416098453 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.474008916 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.815474219 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.143762165 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.65869955 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.242739699 seconds)
  done (took 230.337071006 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.105190792 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.118314136 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.11493512 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.119330247 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.11348778 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.751809866 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.185593959 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.113834712 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.75507149 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.181438779 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.114207063 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.116031502 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.114128634 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.117339698 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.72671247 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.704002174 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.759370444 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.111035442 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.114061032 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.117214322 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.948307283 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.114575188 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.11359069 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.11517257 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.114253725 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.116988506 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.119136966 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.163238523 seconds)
  done (took 152.473555088 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.170432586 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.594509352 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.204218985 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.255090245 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.214271436 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.189115915 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.732245077 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.30268891 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.239939499 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.183986818 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.183222671 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.448550885 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.421851313 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.788379112 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.300862619 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.27436958 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.863045253 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.313466867 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.176065844 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.169774657 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.333162274 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.523318162 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.461920275 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.492210181 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.359723427 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.462737741 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.264069071 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.17591398 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.312215443 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.689208391 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.188444611 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.58506798 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.315177302 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.179206939 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.705537025 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.564633104 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.776736174 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.753757147 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.368579039 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.133061732 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.133920271 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.417176436 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.495736342 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.227678032 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.190427315 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.90622571 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.188144168 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.578850632 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.211497459 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.130493727 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.269935435 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.274616078 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.447561297 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.703265858 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.342236958 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.322942732 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.702686759 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.151700733 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.233059946 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.484168498 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.143511231 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.686197199 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.680362086 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.258105904 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.194958187 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.026307161 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.254312749 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.721616879 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.810872387 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.23883142 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.51983435 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.353066661 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.146738662 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.442013947 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.37356058 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.694322352 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.774381698 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.303927424 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.267898591 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.255656967 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.457312944 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.156480749 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.732190245 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.272783328 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.149513272 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.690738095 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.559000902 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.145847796 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.172670771 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.284523075 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.331931195 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.373991947 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.49581537 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.243325821 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.073721577 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.439935423 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.512737291 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.19243911 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.293414532 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.160834837 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.136370886 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.352354753 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.154214624 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.483160633 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.585756315 seconds)
  done (took 158.800031365 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.855185496 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.229416379 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.433060093 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.711852864 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.489360188 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.052292414 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.387775014 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.243037066 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.468542038 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.412409604 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.354596546 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.261743592 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.850236075 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.921817696 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.216039999 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.34971177 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.234343945 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.802634214 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.455816892 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.897661718 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.469986321 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.839313974 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.488691749 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.629414778 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.576855536 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.655392673 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.817427707 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.306664914 seconds)
  done (took 49.532045149 seconds)
done (took 704.077886222 seconds)
SAVING RESULT...
DONE!
