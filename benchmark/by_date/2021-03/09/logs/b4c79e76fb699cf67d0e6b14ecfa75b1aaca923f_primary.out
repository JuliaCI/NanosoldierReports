cset: moving following pidspec: 2740468
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.184792225 seconds)
loading group "shootout"... done (took 1.077766451 seconds)
loading group "string"... done (took 0.681760607 seconds)
loading group "linalg"... done (took 8.8581502 seconds)
loading group "parallel"... done (took 0.221016019 seconds)
loading group "find"... done (took 3.463108172 seconds)
loading group "tuple"... done (took 2.231055864 seconds)
loading group "union"... done (took 13.368925628 seconds)
loading group "dates"... done (took 1.893418834 seconds)
loading group "micro"... done (took 0.220027256 seconds)
loading group "simd"... done (took 6.544077333 seconds)
loading group "io"... done (took 1.431607291 seconds)
loading group "random"... done (took 12.201008504 seconds)
loading group "problem"... done (took 1.769561465 seconds)
loading group "array"... done (took 34.313810056 seconds)
loading group "misc"... done (took 2.03293741 seconds)
loading group "scalar"... done (took 69.975294644 seconds)
loading group "sort"... done (took 6.274573674 seconds)
loading group "sparse"... done (took 22.546798074 seconds)
loading group "collection"... done (took 29.390689403 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.465045222 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124498615 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.17685775 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.140425478 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.2578389 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.134917929 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134096428 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.118894647 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.093431114 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.148079505 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.141332212 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439054138 seconds)
done (took 5.9034444 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.30936582 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.245933232 seconds)
    (2/2) benchmarking "String"...
    done (took 0.163882904 seconds)
  done (took 1.609766454 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091873592 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058426349 seconds)
    (3/3) benchmarking "different"...
    done (took 0.065118825 seconds)
  done (took 1.38889958 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064145683 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.141636883 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064638758 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064970691 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067654183 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064179296 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064316758 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064453657 seconds)
  done (took 1.693929803 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072596053 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065885758 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063903045 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065205597 seconds)
  done (took 1.424505155 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066031222 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.12514646 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062771192 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062520168 seconds)
  done (took 1.476280277 seconds)
done (took 9.166943752 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.17514383 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.792217478 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.860958587 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.146513129 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.31943224 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.348075909 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12194446 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208501275 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.118717139 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077900278 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.165609748 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.081839428 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.489597604 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.496844401 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072412252 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.186419093 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.625094959 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085123002 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.114756432 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.24891849 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.082146742 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.083590353 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08890916 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071480588 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.161278506 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.184161594 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.629022881 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098866941 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.169903704 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.090569066 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070088635 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074623532 seconds)
  done (took 10.730399687 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115957911 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.111954781 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066748098 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.102871634 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095207008 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068350959 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073363471 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066739549 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086356041 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.13245638 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09035097 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.123468654 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066489138 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067827065 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.098423074 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.163109881 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.084026128 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084089197 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.073096245 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083428996 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.095692439 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.0804713 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078726881 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078498441 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.114184985 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.13864445 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.090330783 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.110113664 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067715501 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.08844451 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.096451804 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.109533865 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068577442 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066933179 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.111836685 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.086959485 seconds)
  done (took 4.529585168 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.046450319 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.099676879 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.10612567 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096999363 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108077579 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.094811712 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148272725 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122215272 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099968416 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067493963 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.176160151 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.698481761 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.134677401 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.108004481 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070926888 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146141359 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365988552 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.92089814 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072501057 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067894552 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.09831467 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070430662 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.141058923 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066937708 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178485899 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.648522851 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.193605245 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068172035 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096252545 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.111399846 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064261137 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141099839 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093479673 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068512369 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.581400453 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065971885 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063355696 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.085071166 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.100350243 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065701016 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06658878 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077369542 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064598579 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.117919382 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079837554 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.55530101 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069445978 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.645506128 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.337098326 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073000322 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071617521 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101438835 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063856281 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06726643 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.627308265 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.155974121 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06701761 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.291691751 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070404305 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068030164 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068782737 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.10062601 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067168878 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068319088 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072739405 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.085237338 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.021363619 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.152594628 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.086770143 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.06590022 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066382471 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.06501263 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.434223618 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077001939 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069550902 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.064596801 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070791058 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067250928 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066855191 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112444037 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.231351126 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089702937 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069327685 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066297964 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065324625 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.535268948 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.991427799 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069889424 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067032226 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.50613038 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064631511 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065720829 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067254603 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088246357 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066305013 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06312998 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101495722 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068419878 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.095223909 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.596327995 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067964346 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.063765168 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.519015991 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070228105 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099691752 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.124053006 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067368101 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.107597946 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.067657572 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064839243 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073205857 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064402293 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069116968 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065576718 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06646761 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.065189342 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068560354 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067951898 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067104419 seconds)
  done (took 23.454879886 seconds)
done (took 40.918275451 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.403068511 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078189947 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078341816 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078254658 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078275671 seconds)
  done (took 1.918212509 seconds)
done (took 3.218145701 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.264900201 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.093043215 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063344928 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.210558891 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.089810043 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.18152828 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.22502919 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.173554451 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.091334605 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.091118965 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.092296702 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.22924446 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.240805614 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.093224337 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.165199172 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.241897131 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.0953335 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066100965 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.093503745 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.094202016 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.094118361 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066080277 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.094317784 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.094336612 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.165570997 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.092384068 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064502498 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.167357335 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.093703779 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.170997812 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.095624863 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.094758128 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.095522915 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.168423095 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.09587128 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.168513901 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065441578 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.095676549 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.095552825 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.096931615 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.095478529 seconds)
  done (took 6.411479935 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.090896957 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080835404 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084022804 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061188146 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07028758 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08041731 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06101821 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.080344743 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098170584 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081144342 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080787443 seconds)
  done (took 2.16444046 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.084394321 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084629786 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083223248 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060845287 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071947057 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081387578 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060898717 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081166483 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.084721835 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.081837486 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081867151 seconds)
  done (took 2.09273591 seconds)
done (took 11.889067668 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.19385614 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090595623 seconds)
  done (took 1.504347101 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.562263104 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.19430576 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.100028474 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.225774069 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.096620732 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.125815528 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.298116805 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.124614808 seconds)
  done (took 7.009303839 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.124972643 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.099109044 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.068168245 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.066501556 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.067013258 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.067114041 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.071906262 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.06743204 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.066899627 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.069304601 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.069083218 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.067118552 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.0682518 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.070592651 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.068732441 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.069702738 seconds)
  done (took 2.526744785 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.072948315 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.06956383 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.07071417 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.061840453 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.073508391 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.073006147 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.073939872 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.073929036 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.073532948 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.074363778 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.072254879 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.074063571 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.072235669 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.070647216 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.073218034 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.062388387 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.073208124 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.072714736 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.074645367 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.07475238 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.072965192 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.071097573 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.076483218 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.073028708 seconds)
  done (took 2.990429599 seconds)
done (took 15.279218163 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.195261695 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076353256 seconds)
  done (took 1.504780958 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.10156328 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.100127164 seconds)
  done (took 1.450771393 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.077590093 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061336167 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080141956 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071587852 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062346211 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061969043 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079473714 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06259622 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062192152 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062414805 seconds)
  done (took 1.929206245 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.066341525 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069852292 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067798359 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065101131 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067896769 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063079863 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065956918 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063676405 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070047858 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062546239 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066666185 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085576148 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06616108 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085857189 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06625697 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066812482 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068752836 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06680447 seconds)
  done (took 2.488132644 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.064839984 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062578248 seconds)
  done (took 1.379127852 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.068009179 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062515474 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06473163 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064519283 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062281903 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062246961 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062827226 seconds)
  done (took 1.692418751 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.461890735 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.197438109 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.449143396 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072049083 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.094402388 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.287310566 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066877003 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.07196058 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.072086307 seconds)
  done (took 3.02168952 seconds)
done (took 14.715666124 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.088037346 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.19184559 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.123013071 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.450016954 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.082683479 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069672444 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.09924678 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.231516713 seconds)
done (took 2.598038342 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.331639215 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.427327933 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.332373884 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.071830303 seconds)
  done (took 3.094049201 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.444234872 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.177755428 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07821058 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069624536 seconds)
  done (took 2.04273523 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.070279833 seconds)
    (2/2) benchmarking "read"...
    done (took 0.074265563 seconds)
  done (took 1.41121987 seconds)
done (took 8.147592353 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080975731 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063930644 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.071351087 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065835422 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.068310817 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065244529 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.065209613 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066467592 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064200731 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.066558458 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066551089 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066924726 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067224265 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06634731 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.065762056 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066823579 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.064559605 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066222816 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06617833 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066699377 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.065072646 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067752717 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066333582 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066923879 seconds)
  done (took 2.858142089 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.086303412 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068563468 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069552871 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.069325957 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069359971 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069588833 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069791811 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068443603 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.070057571 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06857477 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069792086 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069921848 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068476559 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070635973 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06915511 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070405604 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.070104426 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068623433 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068783397 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070368857 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.070369364 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069215717 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070855051 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071112769 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.071085706 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07112082 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.069867673 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.069706624 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.07128578 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.071247228 seconds)
  done (took 3.382331345 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.072766184 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.062491144 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062939279 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.073285197 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062488581 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062761156 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.063132929 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062370471 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063057107 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064444365 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063676248 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062928806 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06430966 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062805231 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.063043587 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063696246 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.068325091 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.085127547 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.063571181 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.063001893 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067885595 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.063210267 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.063303896 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.063100915 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063654819 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.063797426 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.063382725 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.0641156 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.063572858 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.064647563 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063900944 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.068725467 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.070669792 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.063851676 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.074561822 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.069255509 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063969915 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.07164802 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.065090449 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.064460747 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.063931429 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.063980009 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.064176836 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.063794455 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.074909291 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.064399355 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.065473992 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.064721964 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06440461 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.063857924 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.064135208 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.065985429 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070304996 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.065544971 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.076989214 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060182701 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058569348 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059249454 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058520477 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058420153 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.05847128 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062555641 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.059889886 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059091527 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079563082 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059953398 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069086041 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058596472 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059081555 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062850682 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059193078 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077957252 seconds)
  done (took 5.960826415 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072245862 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068571602 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076362299 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06727174 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061233622 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058600225 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061736652 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058697146 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067819054 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06285123 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058637402 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06173901 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067649048 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06515832 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062691937 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069199746 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06282576 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061688385 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059128583 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062830175 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.0602186 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062239407 seconds)
  done (took 2.717234005 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144159036 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063978787 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105748457 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068146337 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066457474 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067727031 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064119209 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064154373 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064241528 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064727519 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06475809 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06434753 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066419367 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065026412 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06475002 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064572952 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064544724 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065001201 seconds)
  done (took 2.582261831 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076981429 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063562954 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090183445 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063167997 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063159775 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06340888 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067187728 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067474724 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063400962 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063816248 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.06747228 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063635115 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063590215 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063922222 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063461325 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063776739 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063421134 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063747585 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067411819 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068121783 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068303064 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06992284 seconds)
  done (took 2.759619135 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078348749 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062706853 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078634713 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064304412 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057690278 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057772316 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.076219596 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063037208 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06442636 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062847481 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063138918 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058084614 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.064993187 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063181806 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065308906 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063327575 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062805699 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063247699 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06280144 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.05819469 seconds)
  done (took 2.58695561 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09667441 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060593628 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060232084 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06448794 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060143735 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060507132 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06507299 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060587962 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060501326 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084493708 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060754247 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060598347 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065210274 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063602632 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061163368 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065606498 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06573774 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066231182 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061417586 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061229265 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085399891 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06136238 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068036217 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061485547 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061535595 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061788842 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061611185 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064691003 seconds)
  done (took 3.122275775 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065376774 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061304902 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061525461 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061394028 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061299748 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061140603 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061125896 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061260163 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061296319 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061549874 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061316272 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061345516 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061282759 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06120774 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06152774 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061393134 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061346512 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06163964 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061645927 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061573941 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061563075 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06156005 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061461179 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061804262 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061770631 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06147917 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061999002 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062114767 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061674704 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062172283 seconds)
  done (took 3.153899319 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073281579 seconds)
    (2/2) benchmarking "in"...
    done (took 0.068904294 seconds)
  done (took 1.441140165 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061982409 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075165538 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057198342 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070399274 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065990989 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061699401 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066975057 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06661557 seconds)
  done (took 1.819432583 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.091465016 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.1135741 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059311083 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059580339 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.08856499 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126564197 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099810697 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072894271 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073882526 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062552917 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059854093 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.098942913 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.05921782 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073215598 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060591416 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071990265 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067568377 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078434568 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073824786 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058559787 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07314081 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060738873 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059607321 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061001095 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060830707 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067427912 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076633062 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07306114 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.0690114 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05798641 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079461453 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058724626 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059847792 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068813586 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.090849966 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059216872 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096995593 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059741357 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064011299 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058858291 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071950549 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080662652 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073838003 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077532085 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060566638 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06081402 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058491084 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060741483 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06310075 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068739265 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058595945 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06689863 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058360377 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060244543 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070051572 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059325946 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064045371 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068829731 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073151423 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070107452 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.07189348 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075274545 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068537645 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067947946 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06013805 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079593418 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.060759171 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.072908795 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074416895 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060197453 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072876129 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.058644477 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058034014 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.05881732 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09379247 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060748643 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060251576 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.05939606 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059159889 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060965632 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069657194 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064699169 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067404124 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062985458 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076153499 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069479101 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059989477 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069280761 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079953466 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064744248 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061032173 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078872706 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06562831 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060496379 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.07981541 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071397466 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063295884 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062386962 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065233571 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076226276 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063220305 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060395072 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070839606 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063460506 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.248145483 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063128713 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067429692 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058368766 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069156831 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063643071 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059702564 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057073037 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062981771 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.058833451 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056921653 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067939796 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058141441 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072844215 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.06515728 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073107005 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073520343 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069085176 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074453535 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058261398 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056957139 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076759725 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068042781 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059258139 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076493228 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057646446 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.068932876 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05769641 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.05940022 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067660717 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057037789 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.05959495 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057844233 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063383836 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059168533 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059625837 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064209342 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067202611 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070535298 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059109391 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067418019 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.05841628 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074321104 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068835061 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06361475 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061733226 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059510493 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071400393 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066397584 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069227759 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058894163 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060130191 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059419021 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07047476 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069282431 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060958158 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06748785 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064259705 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059736952 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059494452 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060242439 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063311041 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06272541 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060361568 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067887854 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068491732 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073634648 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06636801 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068829002 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061074807 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058651649 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060682421 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058532267 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064007937 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068808438 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075383336 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071395461 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.080982697 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059393962 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069652872 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060735402 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076726841 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073101562 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06036668 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06440794 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058479605 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060851732 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069157277 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071246869 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07376983 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074822113 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064385695 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064645885 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059063667 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075267644 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060002001 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069465238 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070658321 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067220513 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060776131 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062486058 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070546723 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065978636 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061596943 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077357218 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069054152 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060957423 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076350235 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061601459 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072857221 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06089298 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065574893 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067332551 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063785387 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.231767534 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074997266 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05750392 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059025917 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074483362 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059836227 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059466304 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.06670871 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073883849 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063239987 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066597137 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069211206 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068633091 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063257981 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068421686 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058855134 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.067873471 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060729649 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069989889 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058033921 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076449532 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057376234 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073915012 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058566653 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069669414 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058899822 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068130689 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059017076 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075493074 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059604228 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058791688 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070080142 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056919297 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06777298 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057584041 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063720473 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065184506 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067814134 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059777047 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068154414 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.05982017 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067765687 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063407164 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066835314 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.067786648 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063369663 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058301236 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067883691 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070385357 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067679633 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060248315 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060408349 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059619433 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068894256 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060820719 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060581522 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068057657 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06454808 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065871521 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060978936 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061234856 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061231579 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068354509 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069281424 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078555138 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069051728 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067368045 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068899931 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058705538 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075477264 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059252139 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067164302 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058063284 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066138944 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.068849596 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059372925 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078997931 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060573025 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067656645 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072137537 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068335376 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063373181 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077867242 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062413225 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068415242 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067820387 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064525147 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066491066 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.0610817 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068232283 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06942205 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070565745 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060367399 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067290914 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068841255 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061057634 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068566482 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061432723 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068931543 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062705724 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060017332 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066000721 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073148192 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066086861 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066383029 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061336226 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059877902 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061277217 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069720301 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06646125 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070706216 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077802826 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06039553 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.065553122 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061286478 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065797798 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08117149 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.231504032 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067266263 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06375587 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057724185 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.05975028 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059886236 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058495714 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061046511 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057190817 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057584631 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069103568 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.05964517 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062942157 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058315847 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.058980214 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068436536 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062176925 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.05866706 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065227003 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057772611 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063727108 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057271127 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059348254 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063173458 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.0575754 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062307948 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068955715 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075043393 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065308448 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067658467 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059242511 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06763522 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07430444 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065646731 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059295381 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067994178 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057450122 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077110985 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067934788 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067285279 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068254508 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059203906 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075337069 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063260132 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068468104 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075003943 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060297179 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066762623 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058693395 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075369567 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064009274 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058818049 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067542432 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067302438 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065155059 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071653594 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059950023 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068154512 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064473139 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063195185 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.060859494 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060760147 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068558962 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076012696 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060128145 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064884406 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067752442 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068135183 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064170479 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07223368 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067922731 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060571262 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061027998 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063351316 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060106931 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07165953 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059928217 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064294901 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064246933 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058847565 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066447488 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076486157 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069201137 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069391965 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058933055 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058614537 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078038277 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063721468 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062977836 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068128083 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070087174 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07235627 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069389989 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.076966835 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060240569 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065861469 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07242683 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060601072 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059774971 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06433017 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062627056 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070845438 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071600631 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069048917 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063208049 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068433259 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075156015 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062662916 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066245569 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.0685124 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062304691 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072646222 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070230992 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070920334 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063316545 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061218385 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.223750508 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068464351 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066710794 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067920345 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059182338 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065052405 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072145208 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066242761 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060908771 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057676262 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060806568 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067757277 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063374887 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058044567 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063435093 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062457897 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065182104 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067935018 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063153406 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05783639 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075386259 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066622547 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067851962 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059818616 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059887821 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058772642 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057731321 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069672935 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057629778 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.328558748 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065100936 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060169518 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076381372 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066966055 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074692603 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059168135 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06315821 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057592396 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071186317 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063344409 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058530248 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069274334 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05755696 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073995821 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070525908 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065289987 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058584361 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06466213 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067419881 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074624393 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069030063 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068371526 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062284007 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.068929499 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060621997 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070268429 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058731016 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058026304 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069338105 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068137263 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072013352 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058754014 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069671692 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.060973264 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.067948567 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067766514 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.060909225 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060918352 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061065823 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069196798 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06433758 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069101886 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064503045 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076753744 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060176494 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070659179 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068729096 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070579858 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0737517 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072093215 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.06779549 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.0599957 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067295627 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067970522 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060742223 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065436512 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063103676 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082354687 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061458852 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060985354 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074594474 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.0670795 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059537688 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067124323 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.064764396 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070177837 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060664192 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.070785219 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066183026 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.061699333 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065882413 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065995632 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059846026 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060643048 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060937517 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071387112 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065588822 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.0614501 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081749475 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063209848 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070821023 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073793637 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069202105 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.222084613 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058268416 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.05944869 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072218276 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074202793 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062048814 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067328151 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059467433 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.067876074 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057174016 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067455803 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066854869 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067268914 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057565356 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058376593 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073431879 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074350429 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063789223 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074620183 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068116255 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059412388 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08023029 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067732409 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059205211 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069276025 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060136685 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057456139 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057288668 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059562364 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069963123 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057679918 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.0602431 seconds)
  done (took 41.789430252 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101978462 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059363613 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.057793364 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.057810261 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064772354 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05921953 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058235734 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059340008 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059262618 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060343124 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058165439 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058081604 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06367259 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073457274 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066348411 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062262261 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058321577 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059519169 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058350792 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05965734 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065063767 seconds)
  done (took 2.712741868 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064649867 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062030341 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061378272 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063801778 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066427124 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060411315 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062474963 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058716198 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062333602 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058878472 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062427557 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058503318 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058813475 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058876173 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058748031 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060048901 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062299981 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064317079 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.05840577 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061947465 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060086691 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062435763 seconds)
  done (took 2.722840722 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06262211 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058851685 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067381262 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05767551 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060585335 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062397015 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.05810123 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063775232 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063789946 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064167629 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068273523 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059028235 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058099093 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064497856 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057708365 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.058880843 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102428181 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059691736 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059707712 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058118009 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060874192 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067855993 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058208821 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058702986 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063576296 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061802294 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058613188 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061247182 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059206268 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063418868 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059674876 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058113962 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.067980917 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067339745 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063252065 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063392716 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060045443 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059571793 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058383946 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058290765 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067409759 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.059903442 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058622595 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.059829552 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.067975219 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058309907 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058064551 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068105925 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058155893 seconds)
  done (took 4.436713526 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072997317 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116181592 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064119137 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.099191372 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070442358 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063834337 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.063986857 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.102603367 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059459257 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.05965525 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071047384 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071024163 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060628132 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.061955481 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065336584 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060757021 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061936721 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060581259 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063538921 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060900413 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063428178 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065641326 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070725651 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071212312 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06215301 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060476227 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06079263 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062390052 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.070985179 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064048222 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062596743 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063010091 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071314465 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066134316 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060849018 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.060964648 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072227656 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061689314 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061509295 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060138307 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061206669 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062647543 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066112066 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072618191 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061642867 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066423637 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06164682 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059622306 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071838881 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061326024 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065090495 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073093188 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062644922 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.061767618 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063013589 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071873376 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.0616479 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06049545 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061985206 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071427294 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060096028 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062588527 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072603718 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061251567 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064850379 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072718663 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066799125 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062761839 seconds)
  done (took 6.032208929 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070585651 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.092701791 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072322211 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072300157 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06812211 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.06840033 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068286705 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068316975 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068371974 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071218325 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068646042 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.130719775 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065332749 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069791941 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068447792 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069024756 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069119841 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069083875 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069059987 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069025742 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069011626 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073613408 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069538461 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073930638 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073972415 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065930348 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068959192 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069008472 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073960189 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069084575 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073536513 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069028633 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069060267 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076793583 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073623066 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069104674 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059913955 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069471082 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069796022 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069571878 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065967131 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074524102 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069300435 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.065988085 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069480796 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069217803 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074308171 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074217409 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071095319 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07249169 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.06996158 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07481943 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069506245 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069731125 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074494211 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077602321 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07469588 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074908679 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069963735 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074667441 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074689268 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077804629 seconds)
  done (took 5.883873308 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075740983 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06386084 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076559809 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.057670774 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.057812665 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067360444 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.05803777 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.057953267 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064002996 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064012314 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065458329 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067608261 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069289163 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066139082 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067401134 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069160153 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067309693 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067975631 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064812354 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068029701 seconds)
  done (took 2.737056122 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063007077 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063142946 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058552088 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07367106 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.05844692 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065891456 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.058875245 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058730851 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058797029 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059040636 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063435765 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063242879 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.058758028 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066514407 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062199169 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065974706 seconds)
  done (took 2.389311662 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064129919 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066043529 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.091516517 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.05934431 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.060775185 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058729448 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059512004 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058462672 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060558675 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072568271 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059680158 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061633396 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059439418 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058694049 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058777471 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061365983 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06050967 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059547379 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059404191 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093172804 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068093412 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.0610057 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.061992135 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060571226 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061631758 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067866391 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061343537 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061697698 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059860759 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.061928389 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06172675 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070707668 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061574912 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060433289 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058941268 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059534332 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.059919448 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062146293 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062124889 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.059892149 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.058865615 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061986479 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060103987 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060438749 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061311443 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062274084 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061136137 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070188417 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060250581 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062006162 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060388129 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.061865401 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.060967785 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071772554 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062710163 seconds)
  done (took 4.853316791 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078766024 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063469189 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057696838 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057634095 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063043838 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.063521261 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063272582 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06364292 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06411368 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.05789516 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064072972 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063071169 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064098962 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063719748 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064154477 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063688031 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057929439 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063739101 seconds)
  done (took 2.556139386 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.071057637 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063097129 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064455518 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060136072 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059780533 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064028611 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058453058 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059531589 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05965165 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.059908196 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059935956 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059511761 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059521808 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059809087 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063498427 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059897571 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059462737 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058414031 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059623651 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058120226 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064362457 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058885694 seconds)
  done (took 2.737908051 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.116910247 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081803116 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.156386065 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.077925634 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088141587 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.069991506 seconds)
  done (took 1.991432696 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0946864 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095250045 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063293491 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063141159 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067275271 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065823515 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066502309 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066430404 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069276589 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071754323 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066127089 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069384216 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068997344 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070681024 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067627658 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067616154 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066403582 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066869797 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.063942955 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07449174 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066753113 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070006025 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067204882 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066834056 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066936137 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071667411 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070185241 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072791092 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066759253 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070117676 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068430386 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066798388 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070214071 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072733535 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064076203 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070173059 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067058644 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07479242 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068799058 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072192298 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064326584 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068964293 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070575158 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070310367 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070818911 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067498969 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070184249 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067399989 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067547482 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079064233 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069402758 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072321839 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069280663 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070929961 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070687873 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078960128 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073768113 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072737334 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069570323 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073808665 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072695537 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069483257 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072549615 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073903264 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069670076 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073002339 seconds)
  done (took 6.045051572 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104713391 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063999409 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06612057 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071407961 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070569252 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066276409 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066527121 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066502861 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066364478 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064043055 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101687218 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066613926 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071013441 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071022023 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066515335 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066258168 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066978372 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07167214 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06455457 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078271431 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06707045 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071812119 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071729121 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071847338 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073281861 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068878843 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067132418 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066995803 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066990506 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066967578 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070000342 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067117245 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071822174 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064437422 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071814456 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067184382 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066849188 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069922744 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067183462 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069173591 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072293051 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075468762 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06731722 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067127062 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073520597 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067360584 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067387516 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064874011 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067447427 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064901844 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073568693 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07646529 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073583712 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072434119 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067576985 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067634891 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06756112 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067804916 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067847731 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069497491 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072620026 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067666019 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080175513 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06805505 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067916085 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.097170814 seconds)
  done (took 6.089396455 seconds)
done (took 126.620743859 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.251553586 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221366511 seconds)
  done (took 1.858981458 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.103560114 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.100636169 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.121212093 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.069162549 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.127445385 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.221953834 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.172192939 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.073502092 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.069842435 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.072019051 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.06956304 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.071730813 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.071990028 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.069401133 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.132390733 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.073522361 seconds)
  done (took 3.034337863 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121904586 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.209055536 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.104424192 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067612118 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150614853 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075864142 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.070770123 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074377007 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075572722 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068618305 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116980741 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083027269 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073263248 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074541465 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070877797 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073043464 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074247899 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075163376 seconds)
  done (took 3.076226322 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.136403131 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.079740566 seconds)
  done (took 1.635294268 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160620243 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108141269 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146083942 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.350836971 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139763504 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.142427372 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145850168 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.14450951 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114110041 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139322535 seconds)
  done (took 3.00403553 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106292169 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102454763 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.326664261 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100777992 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079860635 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074676911 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072450195 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077495747 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072524345 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074107766 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119838124 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072802514 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070077382 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122179397 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097904729 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105313799 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069557113 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076830472 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078241029 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069048484 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073918743 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078134645 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177122152 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077126283 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.1002078 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073292331 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075107163 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072330301 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072140851 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076174044 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076882246 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100265637 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076781945 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08262899 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074472888 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096170289 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070142305 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099129632 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072626613 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070626315 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073123724 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076893826 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070512126 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.07623809 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073190938 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075776887 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078847703 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069458517 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074083249 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073210685 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071088218 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074663285 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074508779 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07545516 seconds)
  done (took 6.132051831 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123005578 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109656531 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067761185 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11694099 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108672362 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068123249 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124025528 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103423687 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.12170307 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067549614 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067591842 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066769652 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074581561 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078774507 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119971287 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113001858 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069747107 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068210464 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112352786 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.112864409 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066987302 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124416315 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115490253 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112204864 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066793597 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068123804 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066761128 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067316623 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075465611 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075229634 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067176556 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077724068 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079403498 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074401111 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066458725 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067166912 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066858246 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075309891 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07992817 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076767525 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073964847 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066535532 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066948408 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067355292 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067939083 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066294448 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076794483 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075707425 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077201072 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068312008 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067696811 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067051657 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068478602 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074691523 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.073626435 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07520361 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07826984 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068281263 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067484916 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068997671 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078856635 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076261231 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075727269 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068499771 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077282491 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067636626 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078186351 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080513128 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067379407 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068048018 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067572814 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067443343 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067905544 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074061747 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074346142 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06797591 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068283522 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067351209 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076805295 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074898682 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069007987 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078791484 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068366158 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069031927 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069439285 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070520236 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080577446 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078965633 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070260359 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070342395 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069674088 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069510414 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068953954 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.234402026 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074496588 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.073996107 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075337947 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066694065 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07560058 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074257448 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066732457 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072612042 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066585451 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066713125 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066793578 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07366278 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072574627 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074259571 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066182673 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06594149 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073935518 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076117967 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066274139 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072365682 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075237739 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072827131 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065801867 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075830909 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06675267 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075337267 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06635405 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074779573 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06650827 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073098589 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066326416 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065620988 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066097796 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075696189 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067433663 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066154521 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066459203 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066237591 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073251329 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076888744 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067375248 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073931185 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074371224 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067487079 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076271029 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067238882 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076380336 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067260768 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06731423 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066310437 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078374653 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066901035 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069058643 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068110882 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076642486 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067206661 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076363819 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073744709 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06676304 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077355849 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076270811 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.073824227 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076978773 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068203927 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067409625 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06717494 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067511427 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076810382 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078341963 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06895675 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06748234 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073817821 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077097646 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067015393 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074086107 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074018337 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074448454 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067628039 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067680056 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078123777 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079185448 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074757534 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07800121 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07755251 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068962032 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076371528 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080281204 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0690335 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082807539 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069518514 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081254642 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.08111451 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076836812 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.237333878 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077103608 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075386809 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074860318 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076683646 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065728054 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065975961 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072386453 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066009992 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069000398 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071993785 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06638846 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067438304 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079427731 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066639317 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075274161 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065857962 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073109709 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065756581 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066603886 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077206524 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066303335 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066610106 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073360229 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066164591 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072326729 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075362523 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072437418 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066172112 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066736915 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075769275 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076593127 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066947489 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065960315 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066589898 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074931211 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074229161 seconds)
  done (took 18.41500018 seconds)
done (took 38.5894953 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.197299255 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.115798593 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.203049172 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.134588099 seconds)
  done (took 2.069765851 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10092184 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063176652 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.105254115 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.114498413 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063359482 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101168317 seconds)
  done (took 1.999139899 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.256421477 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.181039873 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.184811835 seconds)
  done (took 2.075873308 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.175978883 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.312627627 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.571342836 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.17306241 seconds)
  done (took 2.696321477 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.142334603 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.130263521 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075129856 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.144641617 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082337355 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060080306 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.145018519 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06744868 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097418508 seconds)
  done (took 2.45879997 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140416403 seconds)
done (took 12.894795649 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.309307611 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.106659277 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.077191949 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.070511409 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.189929524 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.15649824 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.24673423 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.07317834 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.247336705 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.337754181 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.206078268 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.09188759 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.122684652 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.087337098 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.282668747 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.075268703 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.072980604 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.068430283 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.188911159 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.172530477 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.204803923 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.072522197 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.136969844 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.074470938 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.149056742 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.122826202 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.225999594 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.327313742 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.296842724 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.074767786 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.1728558 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.092025843 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.164349845 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.191777972 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.158353093 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.097732436 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.064388612 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.265644467 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.14858478 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.329155775 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.197240233 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.071100526 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.187275973 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.069342077 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.127652289 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.10990121 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.077492808 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.070764217 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.088550496 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.070813618 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085747644 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.070995574 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.200947409 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.067875078 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.137834372 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.161942489 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.209459535 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.206507212 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.07046646 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083329862 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.074187746 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.213803751 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.090112543 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.070462777 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.077538819 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.066847766 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.327003867 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.083477128 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.065247255 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.073511086 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.071736201 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.149623766 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.114384603 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.108203463 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.074403761 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.161062489 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.138608958 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.089719795 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.094840624 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.072116833 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.063632536 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.208570333 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.067644447 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.081057822 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.068539064 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.09885727 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.063755588 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.083228655 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.193249173 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.189948798 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.119657728 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.064589385 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.264617371 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.064795851 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.092234331 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.127299172 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.064420578 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.206878595 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.064137814 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.06415097 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.072434055 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.071223849 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.0657977 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.192710434 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.146300086 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.071100534 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.070111091 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.064155658 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.068962002 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.066040455 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.064111614 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.064000565 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.142543239 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.08478128 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.0656251 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.153642984 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.172103722 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074840505 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.082107265 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.12274238 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.067169416 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.07287995 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.071684603 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.169582696 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.072071501 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.179455782 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.066720639 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.087532031 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.162841077 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.139055745 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.150874953 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.065327814 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.201813373 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.075446897 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.065256314 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.071693401 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.092735769 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.074018581 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.079747565 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.072555196 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.201870461 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075291733 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.069838725 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.163718312 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.065339095 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.156471661 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.140545695 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.175618405 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.070208891 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076488776 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.202992907 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.100054555 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.097653194 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.089376925 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.07024877 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.066689228 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.066908063 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.081237248 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.066830581 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.067221728 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.081879204 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.250160619 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.066284316 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.206947743 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.074040748 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.067891107 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.226794167 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.076835636 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.131567494 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.085238634 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.065206747 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.148404662 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.065704338 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.083574472 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.200407523 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.064208919 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.139606498 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.065963133 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.065270058 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.071028701 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.066052656 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.071810249 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.076216354 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.064967793 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.0769053 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.070782254 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.063577899 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.146972796 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.066210466 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.224881628 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.14640289 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.150515247 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.064382776 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.082178347 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.06422286 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.177567096 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.064735896 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.111700728 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.158101656 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.079566884 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.083341988 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.064697101 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.137670896 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.0784406 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.063597351 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.145030466 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.173995131 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.131440355 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.071698687 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.208997947 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.07343177 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.064393883 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.071476966 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.0720807 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.064617615 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.140509188 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.068956462 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.064816091 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.064641337 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.066424326 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.064096007 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.089538395 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.064308407 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.071047046 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.063868253 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.06621719 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.066469152 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.064261198 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.071442186 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.140703388 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.174206193 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.069785562 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.083546858 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076658782 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075080844 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.186769402 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.071016275 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.1864906 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.064869413 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.073279963 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.086142944 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.065350434 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.068816016 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.064327746 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.083088657 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.067570588 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.066117409 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.075953161 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.065817016 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.064904543 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.065564771 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.065823173 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.072472167 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.066951687 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.065229807 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.064994958 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.064608685 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.069096291 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.069254201 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.075034905 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.084630749 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.222628675 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.068302383 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.069257339 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.066806295 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.249043715 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.067173745 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.065952195 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.064526774 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.06621529 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.064527023 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.064014225 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.090885796 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.067880382 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.063916413 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.087619146 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.073196456 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.078875677 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.186711957 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.082938371 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.069118079 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.064232434 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.227488053 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.14623923 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.086034508 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.084342023 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.064960347 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.073465146 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.063821769 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.065154619 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.06363557 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.091603723 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.068197751 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.063644373 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.063858086 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.064025923 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.184502214 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.070977437 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.064061063 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.070602596 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.064267016 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.064151284 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.089670013 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.06388799 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.063961312 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.081644091 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.075281942 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.140261782 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.074836435 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.065669441 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.187955645 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.064447517 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.06428139 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.064108479 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.155193222 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076036006 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.066082683 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.064672436 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.070681198 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.072174907 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.246218575 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.069935838 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.067172703 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.071362544 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.064332701 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.064235908 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.08851587 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.091833321 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.066045325 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.066921175 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.064650015 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.064038433 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.136658907 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.071557078 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.068539653 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.148784605 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.067367849 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.071448318 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.064674426 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.214878191 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.069299371 seconds)
  done (took 37.519431145 seconds)
done (took 38.991034448 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12748602 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077669327 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075156714 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072169757 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075679532 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075802004 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.0761444 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073657712 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076222702 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075164081 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.105460684 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063321276 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070886489 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.078421738 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.0722665 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079177077 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07581666 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078418998 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064190893 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.07862476 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089074653 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076969963 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072734926 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078671351 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064558822 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.07262744 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.118805591 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083905304 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.06877408 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073626192 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071400719 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079714804 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07124426 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071441824 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.083699436 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.07026353 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074148818 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070648261 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119967413 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069242829 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064530572 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07648675 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070843972 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071811992 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072307326 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075998225 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069394083 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078821226 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066486017 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076681756 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120034197 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069588098 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068831468 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072349808 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069223097 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073510018 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068543202 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075515523 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068955134 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075485697 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073458316 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072169559 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.0671754 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075493463 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076092351 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07263692 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063787518 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070961855 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065648268 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065144999 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064535908 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073893632 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073109727 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071702796 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065002525 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065841167 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064493752 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076364112 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071425541 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073330336 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064588729 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.06962176 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069196375 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065058091 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069912395 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075889505 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063608153 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064814104 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063442346 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079132396 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071011218 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06436993 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076226623 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069747945 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069733611 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064544833 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064127433 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069988313 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072682406 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064622402 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063380661 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070077259 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069549014 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073674254 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065157792 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071042897 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071057143 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064682579 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07470916 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073117328 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075518469 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07918987 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075415264 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077832656 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.06706823 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065311222 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.239572963 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064705193 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068967929 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071294814 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068472215 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071227553 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063867646 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062537602 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068553786 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068919782 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063510865 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063644979 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06349422 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071952087 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070373752 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06219596 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063114242 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071823884 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07168587 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062496017 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062496368 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071717616 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063518136 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068856751 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068314261 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071762414 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062924997 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063467523 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062100167 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06253071 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062246922 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068177136 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06834201 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063460492 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071715609 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070275628 seconds)
done (took 12.732138956 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068349594 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106989766 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114546695 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.107410641 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077358113 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065249988 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067785834 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083799056 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067445042 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089301871 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089376246 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085545826 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.127890678 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062894905 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064281212 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064868178 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062402549 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076132458 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.112586327 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088250105 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107162588 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064146357 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078007266 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084659573 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077628155 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083773894 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065777844 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065169318 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067465649 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082060934 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090449825 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064546548 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065537619 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.0836151 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080692138 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073301815 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065323791 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071411349 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065255993 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06429431 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066455091 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083293957 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071585454 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071911425 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065543086 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065474532 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064642066 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07215861 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078528798 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070628126 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077272141 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081500261 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066096465 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064578764 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062848616 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072584853 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064540043 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065337302 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065201385 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064509357 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065268668 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067330324 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070364756 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075537684 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068917439 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072311006 seconds)
  done (took 6.524022899 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083828774 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092264568 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078122617 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081220308 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063593213 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064243567 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064375072 seconds)
  done (took 2.117611227 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068187343 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.103505659 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110577334 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.110574254 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.119904524 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.1089951 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065403931 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097464676 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063890433 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105175853 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.118250934 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.113168814 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067708151 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076840591 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06511312 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.113292225 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065706057 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071947598 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109587677 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.114936847 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069427601 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09546756 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07869405 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065775205 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.113494473 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.10569104 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067638805 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065704898 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067328574 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064743636 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064590631 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087804084 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.105321496 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079816785 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065520502 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064234451 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.103179358 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065908285 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.102333761 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072227855 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.102425985 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066920263 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067260383 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064849849 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065891859 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.107948145 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066070218 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064681272 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064775065 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.106911603 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06433288 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.105679481 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067606446 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070164401 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072226015 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071853485 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072638651 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065680552 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.108380161 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075271855 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06691252 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117498411 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116882311 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104666941 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117370954 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074749778 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.1086617 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105377994 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06558675 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065424751 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066001977 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118687521 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069274355 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068270298 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070809356 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073169103 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.111984264 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.123985542 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.123966751 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081909645 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070124034 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06729882 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.237401508 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.118581664 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069336927 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064367194 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065272887 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06389068 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069002238 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066112308 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069134407 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064061341 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074179469 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066704667 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066092508 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111069325 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06445904 seconds)
  done (took 9.847071299 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069442934 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066638595 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065365726 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065340095 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065540839 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065817478 seconds)
  done (took 2.005227266 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092288016 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065524889 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077041919 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065259575 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087018319 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.106534751 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.106513697 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067279775 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081547533 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07655148 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.107274845 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.10873872 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.10909306 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066721491 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.106531107 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066676901 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.107790288 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069191311 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076717532 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067380156 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079550476 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067076361 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067288648 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.11565399 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068426811 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067064778 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066894732 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077219669 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076573498 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067285192 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066996639 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068213782 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074920865 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067275411 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.10940993 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07519698 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066328973 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070563013 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067919027 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068006004 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.111226865 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067527152 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07031071 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070534492 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067209323 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074763236 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070499715 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069951364 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.109326921 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070554567 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070525955 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069333672 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068014977 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070301913 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074679433 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067061139 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070325489 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.109308512 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067327604 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075172653 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066392473 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068413369 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067547208 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068223635 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071636665 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070973301 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075408651 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067727955 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067794539 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066593934 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071046572 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066662173 seconds)
  done (took 7.13639651 seconds)
done (took 29.194693123 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543860411 seconds)
  done (took 2.110742655 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.942083254 seconds)
  done (took 2.552459969 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.250539127 seconds)
  done (took 11.873379272 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.389804739 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.477895373 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.766210428 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.135561833 seconds)
  done (took 3.414641531 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.880138772 seconds)
  done (took 2.499778096 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238322391 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224543731 seconds)
  done (took 2.102711281 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.44671437 seconds)
  done (took 2.05461505 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.266410117 seconds)
  done (took 2.882395927 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235578728 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160319895 seconds)
  done (took 2.017386572 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.639346265 seconds)
  done (took 2.252403826 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.740139511 seconds)
  done (took 6.359278894 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.253943001 seconds)
  done (took 1.926997875 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.241343398 seconds)
  done (took 1.857068614 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.615088391 seconds)
  done (took 4.226735026 seconds)
done (took 49.758582059 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086185429 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083745715 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083390338 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078826616 seconds)
  done (took 1.92278797 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07550216 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068686139 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071055567 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071326391 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068678708 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070485967 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070781439 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067539019 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068915306 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068091937 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066413631 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068051392 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070552283 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067570959 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070194974 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071536687 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068030323 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068211402 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070013237 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067513391 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07049765 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067905603 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067764812 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069130073 seconds)
  done (took 3.281343352 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079045034 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069827992 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.072792541 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068612097 seconds)
  done (took 1.915563451 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077273546 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07415633 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082372556 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087212967 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073566373 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074316441 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08091444 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081529604 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.087490472 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084590269 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065775235 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065465792 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064664424 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083223338 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080593268 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.05992562 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061254956 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074794121 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.073934362 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076735368 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067516402 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063153565 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073930741 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075102825 seconds)
  done (took 3.410315839 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082989615 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063386832 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079559181 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088451517 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089680897 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06312709 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077054337 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.089891965 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126351761 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063621287 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069527694 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063483977 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102721894 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063470194 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078647208 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.107999684 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111067752 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067458685 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096488047 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06331153 seconds)
  done (took 3.281731487 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078185764 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068387832 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068036162 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063348116 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073921517 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070332632 seconds)
  done (took 2.058130622 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06892512 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065925643 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.064998936 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.06988328 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06550718 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065555533 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.064867824 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06354495 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063607217 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.0647508 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06466047 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065139273 seconds)
  done (took 2.414342425 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215659735 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070524346 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068223041 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063642542 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065312138 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064318883 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078623159 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066487698 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081847915 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.0647729 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064935082 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066889073 seconds)
  done (took 2.598828789 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106142451 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109078754 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14160057 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113569096 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112939849 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093649359 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163154065 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092360275 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165541818 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13679745 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116091654 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090744586 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085303217 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068112421 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099404872 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119668125 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137634087 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071448637 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112269615 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209984539 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132447279 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134932131 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146977379 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115862913 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091532992 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146743816 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095723877 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101890289 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12217644 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127434519 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118260245 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096993392 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070507941 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069414989 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150412643 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10761176 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120610555 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09234207 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106161759 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088522924 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108858881 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06905843 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083008234 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113231258 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085943164 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134429078 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093058609 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117526989 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081991631 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.313055009 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125349727 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134125873 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0835925 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102228194 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134837521 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109477324 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131746317 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103548865 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079910899 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115833053 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103140337 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097185504 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105470904 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077481426 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174018129 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086843117 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109177521 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109046708 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093338176 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093501405 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10428742 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135120828 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126919858 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127054115 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140174844 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091835228 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120003729 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100961974 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128494986 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104032175 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071520327 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122586568 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129321455 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099788207 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100809208 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133323132 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092837674 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075377986 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.10212684 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120830179 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080066775 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115510654 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080859958 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111352649 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140819572 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101179082 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115052043 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.300083942 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076638827 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150535169 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105836041 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070461438 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113732347 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109502469 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152874684 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092193974 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073918411 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097299247 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099980166 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14979672 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105066839 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077141716 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106117807 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137003103 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091303136 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.208466792 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092945818 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137593885 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107934716 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085013373 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073147352 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088409669 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112848126 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107047151 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111104106 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093391766 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083223129 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085408856 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114705138 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092884809 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079913495 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113640631 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103666342 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074177314 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08735172 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075283457 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142207329 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077398569 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138524143 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12637914 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.07620154 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107567044 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096361698 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107147522 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097967917 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12093489 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144656591 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.187352713 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092021937 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097273676 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113302413 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.155264074 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.30421873 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090623663 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075055878 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098677544 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109127969 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095287672 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121061537 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091225858 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104475865 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100252258 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138147828 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142568485 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09583434 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097820727 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104337621 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119235826 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072584762 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153176495 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101256331 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115995037 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085210773 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138588654 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111039819 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088013053 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086146526 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099291706 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105089678 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106672821 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144311969 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.094897774 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071495459 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092285232 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144568429 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076675934 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109175825 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090604752 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091799542 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11896874 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095248325 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080874918 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067445767 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129081034 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162185874 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069759601 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113946762 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11169483 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105362361 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.127027013 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070547722 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124705406 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1445239 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124146091 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.319695765 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164552188 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117025142 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116165626 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111492098 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102869793 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076881458 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122394029 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131733189 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093338312 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089294767 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132487704 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115702837 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132751894 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114202012 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116204883 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.104204376 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104252749 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100793418 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103038852 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143753679 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121611899 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124821423 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082758697 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105375675 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118098496 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136934144 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080975738 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141968003 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084679556 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120344557 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077505379 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124009858 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076496716 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.16943367 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079119904 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100984051 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068777214 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073539751 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145268261 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114382482 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109804568 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102820501 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141297207 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139746168 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078731699 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10967238 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117971164 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104072941 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.298706529 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107367928 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087206399 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092685357 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104624619 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083048564 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079203251 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112281742 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091089625 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121847445 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081728901 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072595487 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136232494 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101492419 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092471138 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073838872 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104931241 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120528497 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090518068 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084429714 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11230574 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102716589 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138541227 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088672912 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094939175 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122554714 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078471904 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090757006 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067738323 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083789481 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074866347 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129284494 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075932407 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117142448 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067698871 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131248669 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087120734 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091942399 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101549338 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109627906 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127655675 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094011488 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141776718 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089421671 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121586874 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108270561 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094806302 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087181414 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104306164 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101637485 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124882545 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096830268 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126787153 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1485845 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105361258 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.149489082 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096016355 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.302854471 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106129362 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121880917 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109244465 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163982021 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136662098 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108976653 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107379971 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072951125 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096070774 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102181728 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109679113 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170374054 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123079695 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070250942 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102401433 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09152499 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106194999 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101232159 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079742538 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142221117 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101254569 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086574341 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110744196 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090698546 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103905821 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075308366 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099759445 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104330671 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094742209 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09695405 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11473775 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129822424 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112711485 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145014152 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099875313 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091210498 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118698256 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111106733 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110471026 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085649168 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086266425 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141291989 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122733224 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129538626 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10219591 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111448525 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113573639 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102217557 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13153962 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115229146 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.30557657 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07895689 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074838498 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066433139 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.069977969 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120738476 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104805563 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108995261 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095953615 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070207119 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100517491 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100772901 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069729129 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085477028 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091251743 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095819849 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089916312 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10812398 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109542698 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093597676 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101338165 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095068474 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144011053 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.09874138 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085769948 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141386532 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148517061 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086281416 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091023731 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07039813 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078028291 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112153122 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150440515 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153035931 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077906043 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08610901 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085638708 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08603561 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070411617 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088085955 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087768088 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105268361 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098244633 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.1134704 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105569079 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074988843 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102894217 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100051827 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093384391 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.110353255 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123501147 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.130278738 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145752635 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116753038 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110186612 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076872756 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081909472 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077480126 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.257694474 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100781225 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.077300202 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074438386 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140271073 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089710871 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102103519 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105253712 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08523238 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073168451 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13086591 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067338558 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13168636 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069064991 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079425535 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079672728 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076444033 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090812485 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13444023 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106398676 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109146932 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104667334 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101496516 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158243365 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15419624 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079935274 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140261708 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074221358 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075007902 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074817577 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110700354 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089150467 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113667947 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142903661 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090079278 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101522888 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077390799 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144484453 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099134836 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104196063 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085214184 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078373138 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144878364 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078826547 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.08145022 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089710839 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112517495 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07237372 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103085374 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083578854 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079526314 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168089334 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.709588937 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091115848 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075869652 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097198507 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.149694742 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.312847847 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094515731 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106235347 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116559191 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098453885 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091825 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104881147 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187696764 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072120976 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091772794 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101130499 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095006099 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098825478 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096429983 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086114328 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089855048 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084753661 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077014115 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104740055 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085793087 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094203808 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105419999 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080971919 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085930939 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128242954 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101395217 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080304145 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086099473 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103738896 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086155265 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101756956 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068370843 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111773691 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088093759 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119297762 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098079832 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107701112 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125931673 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093853661 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13804298 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107586646 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122579759 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086952573 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077698379 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128305839 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091069046 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077877986 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148242547 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098559217 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.105361295 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104971983 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097348499 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1159761 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122471489 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117148326 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.276921226 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078302589 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099182921 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099992277 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08444868 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077162579 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072216107 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074199496 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104484694 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083480104 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084112636 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110140494 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086570688 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10047314 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10063492 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119732351 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08535036 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09906377 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10824021 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089150413 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107286421 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098508176 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126062336 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170986857 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121703169 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127953699 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133226821 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076386708 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074166934 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067296514 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112592339 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078604043 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088595022 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077595015 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134581982 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081402626 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112921361 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.242658678 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080080953 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094410533 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096673149 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068801283 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082709631 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107610985 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086437538 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079390057 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120029741 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081504237 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130276897 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112361484 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100747373 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097424232 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081656364 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117086551 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105509617 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131698349 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096067861 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076220886 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13034031 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109222886 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.318487388 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071887162 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079095579 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127529247 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101145382 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127886398 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077541896 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145548849 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139023802 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097695974 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131109949 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06893192 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.614530524 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08879323 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.123583666 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08151545 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108322277 seconds)
  done (took 68.888751641 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.187536574 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.185737993 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.121691483 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132566114 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.289419351 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.298351814 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.151378182 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.122906618 seconds)
  done (took 3.278440837 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069866741 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081559982 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079291948 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.244761826 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.099001732 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06634866 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071317555 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080161184 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072018446 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065872426 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103061143 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066021617 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069476223 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.527227756 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065404873 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070831061 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069235453 seconds)
  done (took 3.686740617 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.346130391 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.508874222 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.319650439 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.744508142 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166144589 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.721865907 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074287534 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08146195 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.930750015 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.210353331 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.158735018 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087318213 seconds)
  done (took 21.12689062 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077494872 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.118164107 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.116778347 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072565316 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072176563 seconds)
  done (took 2.234802249 seconds)
done (took 121.742695681 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085762305 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174583152 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066904483 seconds)
  done (took 2.0442334 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.119993003 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.115703675 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.115208133 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.11588201 seconds)
  done (took 2.243346323 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075896994 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.0745594 seconds)
  done (took 1.925308766 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226423846 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.21105013 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088804249 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084655032 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078505243 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078640479 seconds)
  done (took 2.027976763 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072629938 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069253193 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069304723 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069451367 seconds)
  done (took 2.053157536 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.168949395 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065189146 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067431464 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.06928539 seconds)
  done (took 2.144397896 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085993726 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084362994 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113973156 seconds)
  done (took 2.063451098 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084445905 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082982728 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076907701 seconds)
  done (took 2.025616747 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110230506 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094461855 seconds)
  done (took 1.981384378 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080232657 seconds)
  done (took 1.861355305 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092450283 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096133597 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.180813856 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.146510526 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.182933301 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.168788132 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075060249 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075381287 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071334838 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070113361 seconds)
  done (took 2.934239773 seconds)
done (took 25.686558366 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084892053 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.191841036 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.314643531 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08431485 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.823815767 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.311739592 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.729883625 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.087968743 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.097926871 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066248175 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082701644 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.802707576 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.729590763 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.143554285 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.715019431 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.138366833 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.559764402 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066609118 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065731478 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066301653 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715025109 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065968423 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06641133 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066673105 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.557872341 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.329198067 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067208675 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.139817194 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066133718 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07007836 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.312597786 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067096833 seconds)
  done (took 14.441863447 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076168538 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124073835 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071558442 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081546488 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068039261 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068186117 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069813956 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066619184 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108946911 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066531918 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083259252 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065914685 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070690791 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067734449 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08639034 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06655468 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068782606 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067399032 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066441691 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066963752 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085227072 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066112503 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066900414 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066994897 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066703506 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080474943 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067726798 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066461438 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066570236 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07059983 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071777348 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067871383 seconds)
  done (took 4.147006722 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127975558 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.184789995 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072100301 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106074362 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115072038 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068625229 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152115798 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.08872309 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112659493 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066993404 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083417223 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066534785 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101882181 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067840879 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087065082 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066735588 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068870708 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066988343 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066278989 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066700838 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085499231 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066295461 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066840493 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067194263 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067099096 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082414379 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067754196 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066682817 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066712464 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070817454 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072657769 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067856145 seconds)
  done (took 4.479459024 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070641898 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069424195 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075197983 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078045238 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06430065 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066413057 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067420153 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06435139 seconds)
  done (took 2.352249797 seconds)
done (took 27.215560506 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079833217 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065916114 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068621 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085288014 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071665745 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.10811189 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062648447 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072587419 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069167289 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069504345 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070950908 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06555118 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.067907826 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062664178 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069705591 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063807457 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.111022364 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.067972124 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.108759291 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.109578802 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066363266 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069341785 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072323755 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.109220933 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.108955251 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.108420123 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072676543 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.06969124 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064259488 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067044773 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.168312946 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.18219115 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074088484 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.1157529 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.0645562 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06426072 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06850986 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.066895482 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.11291416 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073459018 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066489874 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073097899 seconds)
  done (took 5.249512172 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.188717029 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.191527193 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.184051544 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078618598 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.090042684 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078033679 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.190395565 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.075657721 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.073675465 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.189657411 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.069864509 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074037071 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076354388 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067100949 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.073806027 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070096313 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075695339 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068166958 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.073700819 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07363037 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.189696937 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067530259 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078389168 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075263423 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069377217 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075050395 seconds)
  done (took 4.438038107 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075676369 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088203921 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090337855 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144578957 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108802369 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081109224 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081425787 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091978728 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099862343 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066429381 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.088185403 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.093280476 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094632277 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.072969938 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105450496 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084119781 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.07812845 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067726814 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072783001 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100257818 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088759608 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084463623 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.148340468 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086396157 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065386077 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07527326 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073470001 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08202301 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073466151 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078302621 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070047875 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069719839 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066625756 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077533849 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070474472 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064155464 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088921375 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079371597 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081199727 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106243276 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076564927 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068074342 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.093626001 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131427381 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066298476 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068882083 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070476572 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079288638 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067901992 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096996989 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082218129 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.0662529 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08540873 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067944615 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.067886336 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085543319 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068383589 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068594836 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078482363 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072811265 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087531442 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072119657 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087615165 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066531759 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078131043 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068016571 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.06830328 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065292869 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100622756 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.073970153 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116772762 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067979096 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064438871 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078964336 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.077902228 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073436963 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066221765 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085885278 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078735816 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070275723 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077592704 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069401856 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.06993994 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103122798 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065428356 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064522682 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064481298 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068933017 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070171285 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067670983 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079702113 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066376692 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070289214 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081704559 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066947749 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067349456 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069126898 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06796118 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066184716 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077283373 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070751389 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068705247 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079765519 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068162298 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070316738 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08193256 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076343612 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067235894 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.06882113 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070695182 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070686442 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073511535 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072450296 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070707602 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073467695 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076410663 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075412768 seconds)
  done (took 11.016328333 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.207709795 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.192586773 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067350839 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189705792 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075025742 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.12275083 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.19065813 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.191909704 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067253512 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067731751 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065915785 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.136974295 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.131228445 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.1419723 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.122854591 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068933507 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093063425 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.142906261 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.195795937 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.189825793 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092642725 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074781731 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069404363 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068271021 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068444173 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076257884 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082796799 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075722553 seconds)
  done (took 5.138650357 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075648498 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.110281159 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070119568 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090297872 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083028538 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066090449 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068449763 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067440425 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083307797 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072102258 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066198775 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.070871777 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069664695 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067121785 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06721366 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072781044 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072936747 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.073733835 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.075102597 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070869556 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077405875 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154359752 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071015878 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.066627492 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069552639 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066561422 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073121299 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074775058 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066229781 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.072136268 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063410592 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070696184 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081055328 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067545669 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06673125 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067577117 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066831667 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066793958 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067148998 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064739914 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064789192 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.072885363 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06552898 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.071975441 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081228666 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.069988064 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068205825 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069182697 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069171237 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063765117 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070354128 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070041559 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069608288 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075585067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070604723 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069308612 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068594181 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09791028 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072979658 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066452675 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066872018 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065216922 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068438048 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075047975 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083651102 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.06857871 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065348107 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066903967 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077326938 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081324427 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066462596 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072382453 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06376975 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066971878 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069211041 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069893981 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068593899 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065330701 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066868669 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067057316 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067859541 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066692694 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067089624 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069784691 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064635754 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065316335 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067948051 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.0685581 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072725586 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065949617 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069904743 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068983088 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066314452 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070376184 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07369134 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070522711 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087874468 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075692234 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067774794 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065163117 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08260249 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069061939 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066316296 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.070861711 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071980413 seconds)
  done (took 9.398380789 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098005378 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067710269 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086534228 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.09798855 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07630663 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071176393 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08020916 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066640825 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087615381 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065165835 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074962585 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064247017 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079740923 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075442758 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067736339 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.076569008 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068568973 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087122202 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081071618 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064694077 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075331788 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078689537 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.07893669 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08446812 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084188354 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085063016 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078627711 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068496856 seconds)
  done (took 4.042505394 seconds)
done (took 41.066371402 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.869527074 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.077834611 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.878354372 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.371081715 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.94554934 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.990392131 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.966899134 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.864804256 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.448789981 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.998933769 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.654387265 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.59322694 seconds)
done (took 68.535986126 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.961697307 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.035261386 seconds)
    (2/2) benchmarking "String"...
    done (took 2.129624664 seconds)
  done (took 6.013033446 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.309221061 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.866523973 seconds)
    (3/3) benchmarking "different"...
    done (took 1.905160525 seconds)
  done (took 7.885617308 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.190029708 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.711851014 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.145445086 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.865032342 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.873285133 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.354476186 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.04883366 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.514763617 seconds)
  done (took 33.328165865 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.894182909 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.310941377 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.33686207 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.392128976 seconds)
  done (took 21.830016932 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.405197098 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.527891148 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.599216882 seconds)
    (4/4) benchmarking "different"...
    done (took 2.819502373 seconds)
  done (took 12.253867651 seconds)
done (took 93.424977326 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.986317512 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.298945316 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.920931074 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.04694472 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.893820949 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.895955765 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.876545095 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.90110724 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.908914965 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.238056141 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.87859166 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.879791846 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.899325416 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.982057706 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.917383104 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.962737194 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.285324638 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.882189691 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.882261141 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.631783921 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.061160446 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.873424607 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.879815893 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.933291919 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.339860028 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.941634129 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.42252681 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.927411955 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.497999769 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.159063353 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.098224174 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.134140852 seconds)
  done (took 209.358065217 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.125525833 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.989764847 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.026830437 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.144962885 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.528846399 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.503209859 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.98429866 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.580014943 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.111509438 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.196717856 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.137281677 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.162256365 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.164426984 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.685328199 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.158704355 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.177238024 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.997783101 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.925005596 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.218702281 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.050829228 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.129752353 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.660250621 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.584044743 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.964400893 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.134136306 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.178012826 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.151916921 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.134131893 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.6295068 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.974744178 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.164626241 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.173779895 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.305078432 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.37089062 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.162112545 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.122584629 seconds)
  done (took 190.794347574 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.255959287 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.056793512 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.064095703 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.461195263 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.115810224 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.879627415 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.924037314 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.897387979 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.901997528 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.915030341 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.910730521 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.952482491 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.902775584 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.279329695 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.910280197 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.882625059 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.882591556 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.14244482 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.886636984 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.874998229 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.871652149 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.979058812 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.223200938 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.98379315 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.876304189 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.88572885 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.980189308 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.881032662 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.872432436 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.872980948 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.980604658 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.874215399 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.005601353 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.984005636 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.882767071 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.931149217 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.881114692 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.061784102 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.876523212 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.870681319 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.876075082 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.921161186 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.875755757 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.948671759 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.982421695 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.909108024 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.890604592 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.346983009 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.437761298 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.880483292 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.876709052 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.873177 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.886092359 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.875758445 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.426505047 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.880018991 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.905603907 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.306812054 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.876259547 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.881535959 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.876308429 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.873273293 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.874086484 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.87969631 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.915900777 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.49213245 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.684552906 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.232250715 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.617823003 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.876242002 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.872848984 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.872608776 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.612312196 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.961490461 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.885062314 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.874561384 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.051446808 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.876761083 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.877442672 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.957124255 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.889922657 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.878999349 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.982787287 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.877047676 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.874782058 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.998847069 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.995416875 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.884746524 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.893649496 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.977782865 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.884202943 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.874373715 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.880563513 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.880033725 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.887026319 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.912048583 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.03963957 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.878026614 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.872810118 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.075283569 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.237876275 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.876368982 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.962694167 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.275596315 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.639110332 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.882201318 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.873674727 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.891451972 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.875020948 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.886337511 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.891489739 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.875949035 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.875775901 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.878603947 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.874057027 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.873784506 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.875953487 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.892683347 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.875047055 seconds)
  done (took 420.531779169 seconds)
done (took 825.012749273 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.533556689 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.623492961 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.446068601 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.506980649 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.455701291 seconds)
  done (took 14.379500045 seconds)
done (took 16.188472393 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.243853234 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.239048657 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.967481668 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.460546179 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.075713863 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.038220283 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.071578414 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.160572919 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.095111761 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.031357774 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.086296528 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.048027273 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.143740362 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.125712261 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.137618396 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.162759766 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.075386807 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.545799111 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.115385015 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.04784386 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.063874562 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.078213137 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.033157568 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.103940084 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.136152357 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.069120015 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.288148781 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.111069998 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.090199079 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.122409714 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.171549542 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.163649007 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.08260744 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.126611812 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.160215531 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.172643889 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.125006717 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.163731595 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.096418875 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.102244519 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.119846208 seconds)
  done (took 96.267932022 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.129161925 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.058405122 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.210215234 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.1740073 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.606669546 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.180183529 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.262093137 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.057858751 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.059633696 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.181224983 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.188249443 seconds)
  done (took 26.968211358 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.041629763 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.122164287 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.167983361 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.19852743 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.426454145 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.212848012 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.326063048 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.244209937 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.236432768 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.274287266 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.236638564 seconds)
  done (took 27.328388172 seconds)
done (took 152.376330836 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.431533181 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.941368725 seconds)
  done (took 6.201165097 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.901824629 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.881099393 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.880271554 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.885677408 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.880701007 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.880521047 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.057196228 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.886454955 seconds)
  done (took 17.078822979 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.882075003 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.897815771 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.883652207 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.881336731 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.881525865 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.880991726 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.88231054 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.882117502 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.881958689 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.881431061 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.88376486 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.882411163 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.882164488 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.882176247 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.88117166 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.882101863 seconds)
  done (took 31.947487525 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.881499738 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.882396401 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.881859057 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.88143816 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.882035498 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.882595852 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.881841878 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.890113513 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.881375604 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.881948035 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.88214703 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.882528926 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.884011628 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.882343627 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.882500743 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.882459909 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.884009691 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.882068848 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.882906006 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.882824943 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.881937779 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.882496941 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.882361956 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.886034048 seconds)
  done (took 47.011943114 seconds)
done (took 104.141669659 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.474043572 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.075537864 seconds)
  done (took 9.37358301 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.887469847 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.882740364 seconds)
  done (took 5.698457205 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.883499593 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.882990361 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.883184215 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.882889711 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.883053606 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.885302127 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.883637394 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.883201014 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.883207504 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.883504614 seconds)
  done (took 20.654335171 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.882567735 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.928999847 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.971798817 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.03992697 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.103026703 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.949332328 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.943036311 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.941991251 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.958535104 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.983372915 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.982510274 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.171699593 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.976738705 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.203100585 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.973877442 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.973224725 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.967422382 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.94406375 seconds)
  done (took 37.715710258 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.953973734 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.96680744 seconds)
  done (took 5.811211796 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.995440156 seconds)
    (2/7) benchmarking "second"...
    done (took 1.997144831 seconds)
    (3/7) benchmarking "month"...
    done (took 1.998023679 seconds)
    (4/7) benchmarking "year"...
    done (took 1.95919643 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.946614038 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.945112998 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.951236265 seconds)
  done (took 15.712152669 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.425510356 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.13914981 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.193731951 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.426200378 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.568211743 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.902366651 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.593848949 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.937552699 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.819231143 seconds)
  done (took 24.888010214 seconds)
done (took 121.667401849 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.739984765 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.933663305 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.513133412 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.030677329 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.176655681 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.383847393 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.965806007 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.603181241 seconds)
done (took 45.271609312 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.05339081 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.91363194 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.059807123 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.180410899 seconds)
  done (took 23.002623778 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.939472977 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.634301638 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.026797805 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.311788647 seconds)
  done (took 23.927905131 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.656915297 seconds)
    (2/2) benchmarking "read"...
    done (took 2.562330771 seconds)
  done (took 7.296048798 seconds)
done (took 63.132407174 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.142571101 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.126539822 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.154738109 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.135725259 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.145538825 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.153161275 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.15852629 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.149181009 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.162512175 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.1548632 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.155651888 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.148649279 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.162701107 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.159766515 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.146910318 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.168427731 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.151716322 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.159383643 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.158008077 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.150862118 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.157309808 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.154013702 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.1580793 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.170281952 seconds)
  done (took 53.79224898 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.222233317 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.199718459 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.217711239 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.226582001 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.256574517 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.221011097 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.236398892 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.21491765 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.216268732 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.210447716 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.185367336 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.244787978 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.198671523 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.255670826 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.202510236 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.2537028 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.238855737 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.209260932 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.167231178 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.249131055 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.21802034 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.200715119 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.23808016 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.199934211 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.281566122 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.192534005 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.219386042 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.234459594 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.179089736 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.258327962 seconds)
  done (took 68.741100182 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.201921224 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.163499528 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.165882709 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.239189413 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.155713914 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.162550801 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.149668412 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.153574134 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.147022663 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.136949337 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.17099307 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.153353645 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.155100955 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.170997485 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.152757154 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.150241734 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.20848122 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.341033367 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.164903804 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.169621328 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.236767541 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.154766857 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.15905928 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.145705365 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.146043368 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.16645793 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.153334417 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.16392551 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.180677573 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.162330583 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.180245539 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.241809007 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.208977656 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.172183097 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.276076187 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.207631188 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.164935933 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 3.711435527 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.258217836 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.218340534 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.176917866 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.17598862 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.166610802 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.174464683 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.25291999 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.148948381 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.951998689 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.960369996 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.033335196 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.983425422 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.994000996 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.978279514 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.994664312 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.974258673 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.122389469 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.071869481 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.098031937 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.067211161 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.065733613 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.063035793 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.003964282 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.019836265 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.947109395 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.972382629 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.327200859 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.981710647 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.023448163 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.949554371 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.988340356 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.150257334 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.95457893 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.15377483 seconds)
  done (took 158.866252536 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.903084556 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.959350131 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.024918495 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.058721471 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.938970578 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.966053729 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.966732246 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965162698 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.636286405 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.966222762 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96601498 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.966413713 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.632180391 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.968829044 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.948148149 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.394049423 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.331331588 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.942693549 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.037409464 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.322043954 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.320540299 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.31342719 seconds)
  done (took 48.45290253 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.343384634 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.405253698 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.370597929 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.327344916 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.381643153 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.302657222 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.367471391 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.339061831 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.366198867 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.38690855 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.375375636 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.385787646 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.3617927 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.358139755 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.385141236 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.428067539 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.333147106 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.390383155 seconds)
  done (took 44.878937821 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.490260304 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.505663236 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.419943763 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.364246087 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.495707987 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.51283537 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.436574056 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.513322587 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.339025325 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.454330506 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.492504455 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.360873346 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.43690491 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.107010057 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079053633 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.3027889 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.1193914 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.09053885 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.13396832 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.155673839 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.226326178 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.166853347 seconds)
  done (took 53.413892254 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.149136194 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.278840893 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.262979682 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.265699597 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.206194858 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.341026571 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.325824979 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.311491016 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.301538201 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.3155796 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.34480047 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.934522683 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.11770185 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.022532219 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.031757149 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993002238 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.992925749 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.011943096 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.968996901 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.938881654 seconds)
  done (took 45.067866767 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.331758758 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.338480482 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.337316114 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.341788788 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.33932741 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.308507789 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.328010548 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.350987112 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.342297483 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.590936234 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.315695737 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.333918783 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.314104567 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.346658684 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.344374845 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.34870866 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.343991424 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.300966592 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.341679197 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.336587687 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.591129472 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.334305491 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.333371484 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.334149492 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.334822365 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.336127365 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.336510591 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.33691049 seconds)
  done (took 67.838343739 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.397806673 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.375579706 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.375220852 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.453614938 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.453764567 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.3750427 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.455020019 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.455495704 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.373965546 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.373758721 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.422889439 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.375765408 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.376321164 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.384792423 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.376483014 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.424047245 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.37191203 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.454759688 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.411199638 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.375724294 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.423242555 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.383378857 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.42166362 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.375040522 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.374230687 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.423429327 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.413440766 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.498264645 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.396794394 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.376664811 seconds)
  done (took 74.419672717 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.358258302 seconds)
    (2/2) benchmarking "in"...
    done (took 2.362339916 seconds)
  done (took 6.992233133 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.339992128 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.43289472 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.336044646 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.53214649 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.501195473 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.514384078 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.485261051 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.427772138 seconds)
  done (took 21.840587155 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.338094745 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.848773474 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.343111076 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.337604465 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.335019954 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.896459213 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.260378483 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 4.241909808 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.128047872 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.226208641 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.510291979 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.875925613 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 4.424369979 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.683567532 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.429363851 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 4.177535094 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.579317357 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.891438939 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 4.380639759 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.448368433 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.091874834 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.416480971 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.333691817 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.332970476 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.332614862 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.300194033 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 5.393025 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.74271214 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.487459736 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.436895948 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 4.917574795 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.301724106 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.335241128 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.598812626 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.437613264 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.332618177 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.531560335 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.402744847 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.303738065 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.289676971 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 6.086258128 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 6.000159315 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.546108697 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.522453442 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.367458428 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.284689638 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.28649454 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.284078872 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.550804255 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.981128938 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 4.361090372 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.301043336 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.426725717 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.294222675 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 5.87892612 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.434779646 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.302448989 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.27123349 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 7.112318851 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.568034429 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.731829883 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.654910926 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.509891758 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.45247414 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.334784407 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.586804752 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 4.269265911 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 5.187423766 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.073793718 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.435340191 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.926928068 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.339784196 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.332563935 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.332776447 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.344878367 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.740495737 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.37389176 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.334211231 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.334593555 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.334726871 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.607357178 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.441410632 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 3.184602199 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.424544605 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.246501768 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.473729479 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.041082396 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.929637123 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.55869694 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.779952917 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.171336342 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 5.629586282 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.10559323 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.055754017 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.913158147 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.156186165 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.953005054 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.921043158 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.8437911 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.414616183 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.064327007 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.915162445 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.290137873 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.021313659 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.955666949 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.914127162 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.618009501 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.035891363 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.015013396 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.957456934 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.930791138 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.915228457 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.552352506 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.111024062 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.943224994 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.463143984 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.96252836 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.345537958 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.359299387 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.090328306 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.256055477 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.856488359 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.171286838 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.801810813 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.944373928 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.274952751 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.975116193 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.573984169 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.17563383 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.026142031 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.76700489 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.948108614 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.909027549 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.028846811 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.970388817 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.909780363 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.908817862 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.909441729 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.909226407 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.909764362 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.024412647 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.27199087 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.566808082 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.049881013 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.142722765 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.030379791 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.764501293 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.090691526 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.588826838 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05015889 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.909754739 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 5.518222286 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.29372251 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.600452195 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.03076521 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.910896718 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.911361723 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.731155933 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.879717169 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.001530315 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.911216786 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.559741224 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.089201967 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.946170961 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.911882268 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.374698022 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.049405723 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.912047584 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.019387894 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.685097202 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.626783996 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.057640956 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.215268262 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.028268598 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.911065086 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.911865443 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.912085229 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.691745107 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.595696196 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.153992009 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.574574419 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 6.765719116 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.99070158 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.053917599 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.997043369 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.169974782 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.125525612 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.054563734 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.912728256 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.912406826 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.913481092 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.457442633 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.884038079 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.878652199 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.880081899 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.955323426 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.983842869 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.083328983 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.766133775 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.921239471 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.629966021 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.858397174 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.009789217 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.914309855 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.914276685 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.060841467 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.08357585 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.053178018 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.32398164 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.066972223 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.913830079 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.583026804 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.034897259 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.556293749 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.013869304 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.743982668 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.992483447 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.034589545 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.034120992 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 5.55777858 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.021585158 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.915679746 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 5.620298207 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.040315848 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.914800054 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.985014144 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.452130122 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.844895495 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.643320749 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.456582955 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.007334138 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.455752316 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.165197298 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.055940243 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.727319086 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.009300945 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.18188139 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.035001513 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.533346876 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.923832933 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.691158472 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.923842217 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 5.505374374 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.058683562 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.901547006 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.033193392 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.359005858 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.027918497 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.915910707 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.073727513 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.00362978 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.580833462 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.035987378 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.034723164 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.230659461 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.786961882 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.010631611 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.184606738 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.044866939 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.863776937 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.847299646 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.252293001 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.816340094 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.946943881 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.084936072 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.711324919 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.095878976 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.235420701 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.053578678 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.917498605 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.917829568 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.091604698 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.996615806 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.918494804 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.246778851 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.872200532 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.994279969 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.085817778 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.002701569 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.943346313 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.17128801 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.261920992 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.272222482 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.474026192 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.58244466 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.822494233 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.112058842 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.642218739 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.098284218 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.750479657 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.199265931 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.05777979 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.694608765 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.0974322 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.255651457 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.117933143 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.097108536 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.766580023 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.103810739 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.283249401 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.165738504 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.127701878 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.776590794 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.437246658 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.198789658 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.31019246 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.952366681 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.462569758 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.130325022 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.670918124 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.102210503 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.819519981 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.284412777 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.987478726 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.925299473 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.95212139 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.478959261 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.968466934 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.958823721 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.697209475 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.48620222 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.958946133 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.674932177 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.112093769 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.955934872 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.921851816 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.921584202 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.86356767 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.115271384 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.2459223 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.040911864 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.923154439 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.926710997 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.877933294 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.247193834 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.715110017 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.785666717 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.858686501 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.058961421 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.922958386 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.926463417 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.923450368 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.922938789 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.921715281 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.921998591 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.315586905 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.081211724 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.563110002 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.109228049 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.958486612 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.123546308 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.977749528 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.923559794 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.088653858 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.988868752 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.030438465 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.98906545 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.924011834 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.311214575 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.064394982 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.915800051 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.297976069 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.186839602 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.142480605 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 5.459830795 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.947052619 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.325944661 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.260964575 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.768140926 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.960627515 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.868718299 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.09344966 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.745276521 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.930244592 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.479342684 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.579391593 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.992180128 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.208074825 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.815183959 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.334454406 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.158550569 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.983605206 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.925533371 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.925255476 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.973643922 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.145055755 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.967500371 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.193419411 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.102603988 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.940877765 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.308216935 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.013449168 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.15393473 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940184521 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.940913641 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.92658381 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.925792668 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.349761706 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.80823076 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.999424238 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.926535389 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.868856028 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.902043005 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.817712232 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.619689581 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.895985018 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.06291154 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.927718746 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.117937346 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.975718319 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 5.752339438 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.936396418 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.702404572 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.244317666 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.969684115 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.090252496 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.333183759 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 5.74222753 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.304015971 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.036250436 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.927832405 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.312803166 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.904540616 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.069192845 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.858617806 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.24056445 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.528830457 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.498093352 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.348653651 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.211974294 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.991290869 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.65191937 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.025803502 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.985873524 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.828536512 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.192635917 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.311689851 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.985585816 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.435664741 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.341335488 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.893504894 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.025820779 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.343532303 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.810492511 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.319665641 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.218093966 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 5.841713887 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.289917936 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.513070632 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.331088262 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.21502734 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.241667829 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.90801033 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.770526082 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.408686374 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.226007018 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.181527775 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 6.029217118 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.927371223 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.396136658 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.235101849 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.213687924 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.692708406 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.225539498 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.183909269 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.613997398 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.811293672 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.342660966 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.775546348 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.44377726 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.336916991 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.461669621 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.578556225 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.397450118 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.24417815 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.183188479 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.195366187 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.197794661 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.646134556 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.350360516 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.192854636 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.775580526 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.338145524 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.985310732 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 4.071125133 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.416561117 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.24482533 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.598940194 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.32308276 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.763673537 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 5.207257652 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.383504837 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.503408998 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.32832852 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.331995116 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.912034145 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.2749363 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.190944973 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 4.129642254 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.525370561 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.513378327 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.571967568 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.498616686 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.269370632 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.870489766 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.300312309 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 5.862394101 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.421952568 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.22159541 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.779422538 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.443002274 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.632197057 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.338691705 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.676060081 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.294563945 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.537522934 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.541978535 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.258890831 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.186516503 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.195035645 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.187016228 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.252578475 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.898296242 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 6.167567035 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.657206083 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.315971082 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 4.130317591 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 6.834983838 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.886677002 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.545150405 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.505471816 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.625760829 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.209482614 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.164132056 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.56049008 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.257594316 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.375218142 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.282679061 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.001537718 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.258199672 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.192851683 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.616218887 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.339371355 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.196899616 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.198032729 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.159485897 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 6.084389451 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.318253512 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.398940567 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.151119011 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.99620457 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.716040083 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.285999314 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.076147938 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.044569895 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.02956222 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.981554196 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.260855479 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.151503071 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.494683428 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.26057527 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.309638497 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.832795647 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.520656571 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.069362169 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.993808027 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.058350712 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.72824493 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.454904976 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.194175824 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.365299937 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.084170087 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.586199324 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.057599656 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.466794581 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.497770873 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.949280656 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.144019436 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.028735338 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.074347649 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.929940824 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 4.053467396 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.799233657 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 6.540285929 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.080268784 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 4.782846354 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.952432927 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.043358223 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.11537483 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.990747641 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.937637334 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.938108381 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.938254423 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.485130071 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.995360333 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.976466384 seconds)
  done (took 1997.678195917 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.205942882 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.938600533 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.941246138 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.939681452 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.938998029 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.938015224 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.938605957 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.938346736 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.938471491 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.938879529 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.938984374 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.938781815 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.938916545 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.212831664 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.938989578 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.941047851 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.939131009 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.938800056 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.93989396 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.938927307 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.939153285 seconds)
  done (took 43.136038718 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.939328507 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.939352555 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.938778982 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.939726865 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.93933765 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.939209042 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.941631671 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.939061458 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.940036936 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.939533021 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.939156436 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.939679156 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.941356024 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.942286427 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.940255438 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.939354621 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.939849918 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.939360141 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.939952506 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.942536244 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.940326829 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.939785927 seconds)
  done (took 44.55403253 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.940126224 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.9414334 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.665693613 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.054757421 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.941191905 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.941794601 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.940195673 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.12875866 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.942973818 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.859478699 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.448213944 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.047775968 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.978528791 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.115250619 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.034876925 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.942285535 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.061014742 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.942684609 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.942343366 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.941414317 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.944319904 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.191370155 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.068707735 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.941784637 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.773969843 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.082586753 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.942397443 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.942645962 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.941742855 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.935112079 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.115694067 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.977367751 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.784053785 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 4.684933946 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.239466637 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.862651064 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.125487903 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.979925753 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.944117821 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.948732563 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.162907305 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.788651821 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.980132276 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.943233126 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.234243411 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.0500269 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.943584064 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.328818819 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.051346279 seconds)
  done (took 130.597266803 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.983427524 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.059076523 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.005330671 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.943106656 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.056080523 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.943046563 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.005915335 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.943477308 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.943269547 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.943753175 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.074942225 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.08858113 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.943555618 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.993753105 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.066320922 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.944694082 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.944146886 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.973867006 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.94774439 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.943795028 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.969665258 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.00026863 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.048656728 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.106865908 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.067580716 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.012771413 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.002446908 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.11141398 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.266023345 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.127954294 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.067192351 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.992881573 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.097709578 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.081344578 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.974637775 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.973100199 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.123396539 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.021001562 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.966476872 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.961808473 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.96310498 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.962428449 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.012157689 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.085918556 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.964343051 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.080456567 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.991985486 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.994000776 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.120600972 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.981354016 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.970801725 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.147901094 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.988358264 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.969084151 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.954741184 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.059674353 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.989239576 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.99562284 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.994181178 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.165123935 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.950422497 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.956455826 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.146803096 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.004355875 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.01883802 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.26441791 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.407744894 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.996240293 seconds)
  done (took 139.740928544 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.973945691 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.222190509 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.269691195 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.187473026 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.123690004 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.183023909 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.173074603 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.136042012 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.150784356 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.141405459 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.104574951 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.054974849 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.072548374 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.031255769 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.092140884 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.073199817 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.090063463 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.071631639 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.087573916 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.095234002 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.072727529 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.148654831 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.084980507 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.141661723 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.353179592 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.093657799 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.140629774 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.185084494 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.238293107 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.181377638 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.411100689 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.170390411 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.177317332 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.241760096 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.406583226 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.178441438 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.047286576 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.189144717 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.183168256 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.188887933 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.153970254 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.229053099 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.173375359 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.157861876 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.179171229 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.18462088 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.245605521 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.425137369 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.138019813 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.211633626 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.187283023 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.247852683 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.183999512 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.183935387 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.246313212 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.126417009 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.236886719 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.216430288 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.156599872 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.211946506 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.161795576 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.098448603 seconds)
  done (took 136.487958633 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.978190493 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.95965792 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.044144621 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.958619327 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.966742839 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.036308023 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980996618 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.967208009 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.964333203 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.957449515 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977015697 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.050370827 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.327799903 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.97401363 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.059172356 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.321456487 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.044592029 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.058252657 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.976140783 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.078858858 seconds)
  done (took 44.574872712 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.965003679 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.969448669 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.957982821 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.145956579 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.970473759 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.087816946 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.950814773 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.95089975 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.949869186 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.949899666 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.950244135 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.950984046 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950489951 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.107523842 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.95170543 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.085148815 seconds)
  done (took 33.794474656 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.955693631 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.951553047 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.951959601 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.952145587 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.95096094 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.950981177 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.951255707 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.950940107 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.9514181 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.410678506 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.951701263 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.95160924 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.952995754 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.952961021 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.951300602 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.95209725 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.952475559 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.952324612 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.952627168 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.952282608 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.522102799 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.95219916 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.952091136 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.952214103 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.952240759 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.523989902 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.952439724 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.952529126 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.951993656 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.952734425 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.952296065 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.425276536 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.952196348 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.952302917 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.953291579 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.952566536 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.953233957 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.95741835 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.953251288 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.952759893 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.952952977 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.952983995 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.953357234 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.953251441 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.953148749 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.95306558 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.954906918 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.410073663 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.953134019 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.953443977 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.956032898 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.954537368 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.953766968 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.430313023 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.954170408 seconds)
  done (took 112.29597508 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.99747738 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.004233712 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.953594122 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.954703423 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.008187043 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.992967109 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.000297244 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.969317672 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.995146183 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.954398919 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.025190822 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.970287134 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993458341 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.007843667 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.019596636 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.99826308 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.954837082 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.018659732 seconds)
  done (took 37.706644842 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.958059053 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.956141782 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.954407573 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.954073868 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.954609696 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.954489946 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.954200911 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.954899767 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954785119 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.954728548 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.954891742 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.954406762 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955129011 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.957187934 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.954970102 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954461178 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.955299291 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95523321 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.954413931 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.95590079 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.955590205 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.955264508 seconds)
  done (took 44.902187718 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.577105826 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.558522265 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.71838984 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.138411498 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.196112881 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.75641242 seconds)
  done (took 17.835703773 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03948109 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018109501 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.997122236 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.003802061 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021217317 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032309506 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036863293 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04123391 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018472577 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.256646229 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040878669 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021316996 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016600412 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086076325 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018209512 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021440639 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047813324 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038879809 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.00484669 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039337494 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045943333 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023299565 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04779427 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033442823 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04733075 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085527633 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016059357 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.258996646 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03403784 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022886116 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019052006 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057535534 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023490675 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.249807188 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.005592312 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019537037 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044149528 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04005388 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01687806 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.081379465 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.999541013 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020963829 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020340054 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05469201 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.026367005 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0470026 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046581888 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057144304 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049975267 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.254696968 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.026401163 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080679092 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023594641 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.026180357 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022895377 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.251767286 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.255965362 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081400125 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023698612 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.260762087 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083906811 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020580703 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080769853 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.261485002 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023796185 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083515017 seconds)
  done (took 138.051074249 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086724685 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.995861925 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047913534 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.263537799 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.082446812 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04244863 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044975432 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048267068 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048964554 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02039259 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050040288 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048467701 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087465667 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088442113 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051039721 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042958859 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045621057 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080968372 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021572927 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.252486056 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.044434301 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084798092 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085011734 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084519715 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.253927947 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039915864 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049987253 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042836879 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042213535 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043246344 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052223605 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047668742 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085807883 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.998253344 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082971101 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051832465 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049175858 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052037564 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043331909 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037226041 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089416331 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05090668 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043221274 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043937362 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.253639644 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049417296 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050806278 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023347454 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050998735 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024094982 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.254398384 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.251829781 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.266316642 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.085143969 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052388535 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049125825 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047274403 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050451353 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053394441 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045225798 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088788486 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045233011 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.255175922 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044286404 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050339671 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.085914022 seconds)
  done (took 139.02272228 seconds)
done (took 3706.785004911 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.092604067 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.06369729 seconds)
  done (took 16.111413227 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.965155607 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.965852522 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.14197235 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.090854286 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.073845107 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.106000165 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.086473069 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.997843543 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.002306529 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.120368629 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.039681164 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.139677772 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.091813912 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.004208488 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.995916086 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.994428518 seconds)
  done (took 54.76845287 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.969445209 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.566452284 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.062296595 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 4.140152074 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.467293668 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.00052283 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.192158733 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 6.727953718 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.554966545 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.763025864 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.569502961 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 6.199500265 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.252207907 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.303790834 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.666754621 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.769597476 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.915392154 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.022811696 seconds)
  done (took 81.056219698 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.391304557 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.47531513 seconds)
  done (took 12.158136803 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.360127085 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.367725481 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.394091066 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.350709118 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.33375977 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.415632065 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.401311637 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.351605104 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.370175783 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.356476028 seconds)
  done (took 75.986041831 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.3644711 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 4.699720939 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.796246528 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 4.516348439 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 5.273921269 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.849615062 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.521906887 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.705306925 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.432301359 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.374715886 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.365546259 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.983821467 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 4.340700404 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.426262765 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.938219194 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 4.264252318 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 4.388151847 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.783296076 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.710579969 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.801563008 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.063795967 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 7.312444573 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.73602768 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.126982585 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.346547156 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 4.988507276 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.877018165 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.555322159 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.463583523 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.313209885 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.455934752 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.566987416 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 7.283424289 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.50013926 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.817453736 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 4.019856037 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.075388703 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.573874362 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.880418238 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.761614273 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.808119566 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 5.236821648 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.495195933 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.193115537 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.551237982 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.561515281 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.242149442 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.595602683 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.46655566 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.509498031 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.973573002 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.541774163 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.525792055 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.505857386 seconds)
  done (took 230.751083528 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.359327909 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.859783176 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.50825799 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.335683954 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.6969118 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.582240462 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.148686643 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.802160101 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.357920671 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.570283635 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.49785665 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.472086532 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.370433688 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.304631979 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.354050496 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.35438003 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.536397452 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.785012509 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.375533918 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.358669747 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.5712097 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.609040915 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.464427551 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.370103141 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.569895072 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.612609362 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.782025081 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.473061822 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.762713003 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.351618346 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.76377879 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.375572296 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.345050949 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.345878548 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.739561431 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.696967945 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.804055534 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.365693384 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.005308899 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.367217909 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.96747285 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.582881961 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.689986191 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.506283292 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.619487437 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.582263155 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 3.025590911 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.350845888 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.039871745 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.505413131 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.547799951 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.561496272 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.612207968 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.361509339 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.856334795 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.362933737 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.369685288 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.644653206 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.527664463 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.466397663 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.374180527 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.345259222 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.375350428 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.579159328 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.365492945 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.476008065 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.363728993 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.372905857 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.478078057 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.44697809 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.507183459 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.585975239 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.610663986 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.657423149 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.338589636 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.571835577 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.755374042 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.633839729 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.354733834 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.357351256 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.743681052 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.826438581 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.509285183 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.621046371 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.676532044 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.668316597 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.87646201 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.335630811 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.551042882 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.476402482 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.559611469 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.628915215 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.766334676 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.210312879 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.36459396 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.356532197 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.25590049 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.504452002 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.44229361 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.995105035 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.678080474 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.987102619 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.574781059 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.854444676 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.524311823 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.430717807 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 3.011483804 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.405157224 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.599263203 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.71131245 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.39774821 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.380061955 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.510098618 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.071319837 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.339050584 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.480161078 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.614934215 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.214741574 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237889775 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.277122199 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.537124359 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.969372595 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.302855222 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.075465414 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.356026412 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.288723876 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.377522281 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.08362571 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.2787518 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.284478956 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.41276836 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.250030219 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.522581526 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.022434029 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.32979164 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.04318356 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.04560473 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.221396743 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.939929832 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.229414835 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.060493018 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.283312735 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.210460872 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.442949777 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.054375798 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.276232367 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.298234794 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.451948094 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.038544435 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.178017758 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048531484 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.080471928 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.20938913 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.048336356 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.049535151 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.950670026 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.040753242 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.224316733 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.279552097 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.759862006 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.427021884 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.441417878 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.046981771 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.465559689 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.239348689 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.524262019 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.532909511 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.195306495 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.048756588 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.050139636 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.040660637 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.289981828 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.220285836 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.045290772 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.099694357 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.813785336 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.500141013 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.029032459 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.226971018 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.299229574 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.427158953 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.249087137 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.04710987 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.436031083 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.047692515 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.360747676 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.571285815 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.244772807 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.044855952 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.052386716 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.075572796 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.083030388 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.255419807 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.307336826 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.711199891 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.205356705 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.335292691 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.307881091 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.471394582 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.692995682 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.318581536 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.474192171 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.125652661 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.647651456 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.187883541 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.411685909 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.323478707 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.049446228 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.531191121 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.717789136 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.112166041 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.679118364 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.240455168 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.21456145 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.144183722 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.167013387 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.443107103 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.988059053 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.29683723 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.341861443 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.130727612 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.212769913 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.303503794 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.033441603 seconds)
  done (took 979.805319782 seconds)
done (took 1452.52751933 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.068751065 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.080021778 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.075193275 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.07194989 seconds)
  done (took 30.297787761 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 3.049220586 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.131434066 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.254612675 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.08495398 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.453250202 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.125428778 seconds)
  done (took 18.119796534 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.08341045 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.073505722 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.075181609 seconds)
  done (took 23.248513604 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.290635574 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.512852349 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.187242085 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.1147785 seconds)
  done (took 11.04255397 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.021600581 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.02445999 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.991436356 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.031088453 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.997415924 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.101720595 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.125455214 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.038827666 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.016825812 seconds)
  done (took 20.292881762 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.470253328 seconds)
done (took 111.479260432 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.316240187 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.297099507 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.997350608 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.281708691 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.141276818 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.336644722 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.110339129 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.011146353 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.33969076 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.431333834 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.45470923 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.101175115 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.441411002 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.418934847 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.209108312 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.017308188 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.016210599 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.06319604 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 3.787902692 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.192830197 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.587457152 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.133314682 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.764472337 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.023766802 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.927505373 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.157290916 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.247805646 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 8.147211186 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.961633832 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.996950089 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.083996912 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.468157867 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.26835502 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.315848359 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.122076451 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.879025221 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.399902252 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.993791514 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.262690965 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.508489431 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.248607883 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.078405169 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.029958492 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.14125676 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.407262611 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.002134299 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.998691595 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.15102301 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 3.578144376 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.140503241 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.50636612 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.987534505 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.625932869 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.0616703 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.119629285 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.041924419 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.885408081 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.5530786 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.140276236 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.297798291 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.996986221 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.985682893 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.99416862 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.00610405 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.986873262 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.220708763 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.411418066 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.227583781 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.48643679 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.040189581 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.083191131 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.206773064 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.840923606 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.200257347 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.062226835 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.216993652 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.33265309 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.234211678 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.110756975 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.399188836 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.458693451 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.234728331 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.326999856 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.729660065 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.562051968 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.783035829 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.818244671 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.702955832 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.754471382 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 8.618079738 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.431437869 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.454352789 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.442251538 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.460325333 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.32632068 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 9.252461184 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 4.269895865 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.888463663 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.5414746 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 3.020588794 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.442720209 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.433945831 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.876514213 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.735654788 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.20569869 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.423289815 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.563863545 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.42245068 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.649083248 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 8.419148153 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.262650617 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.589957056 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.068921854 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.141894325 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.538337853 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.028169437 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.371552514 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.428895162 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.112700071 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.060883618 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.310257008 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.041165191 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.144673447 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.550553018 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.518184067 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.361444414 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.167594916 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 4.167240744 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.233646706 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.396111097 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.188634991 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.724055429 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.694261831 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.212664065 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.466631885 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.320879907 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.183356333 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.523860537 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.224971132 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.387688133 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.534479654 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.498643989 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.341559481 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.18854657 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.481256565 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.129534391 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.364842193 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.473213429 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.280449756 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.443225502 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.214894712 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.140412843 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.056381161 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.543028675 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.694505863 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.652146193 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.386705307 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.259689148 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.640340374 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.471638405 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.9338016 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.231765713 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.171964235 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.117530401 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.132979807 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.18705918 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.123115739 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.100490555 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.473970242 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.438971596 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.663686398 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.989810377 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.661116963 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.388817304 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.261795132 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.944120595 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.652264512 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.073120735 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.341849442 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.634975803 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.529502619 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.096158072 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.139181677 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.269811574 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.953547306 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.285969699 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.515807762 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.710016289 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.511376701 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.505544348 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.341745588 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.055333702 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.375770952 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.30501333 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.327323273 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.227276561 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.39354776 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.180685606 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.395584258 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.055357319 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.340551614 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.014487659 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.822825036 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.343650787 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.447798899 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.358746013 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.25306451 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.171454899 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.312033811 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.009242707 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.003090255 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.881619688 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.331994275 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.019771269 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.99462685 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.933339776 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.049373641 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.920249008 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.109877089 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.445866267 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.166521834 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.173070821 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.50623114 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.017539236 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.325671985 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.155792843 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.169460418 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.268500594 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.030464904 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.133482531 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.227616464 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.169812792 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.26872073 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.870655917 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.404565733 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.006170936 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.840645098 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.041991807 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.224960148 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.031406543 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.021166773 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.272773973 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.191287663 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.349455374 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.236476179 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.18739198 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.029797729 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.162194192 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.525710673 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.820480669 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.539305872 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.915931116 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.042466676 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.02009886 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.431530915 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.432599933 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.079577453 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.138329868 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.536288617 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.049677045 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.202106379 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.008131143 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.004535403 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.925668213 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.116523531 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.238561702 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.474642084 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.004242247 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.972030987 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.117188602 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.423836426 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.475312912 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.040183761 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.124885825 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.000157226 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.075137633 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.368583511 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.024141922 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.197113742 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.36802322 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.113775083 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.131879645 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.003281854 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.028388921 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 3.601606789 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.352686879 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.489192175 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.02449946 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.336554383 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.00562718 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.918666592 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.016532944 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.086031469 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.338082385 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.167649523 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.41922624 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.008793061 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.122310633 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.266743729 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.021253287 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.997706554 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.259375801 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.004298446 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.795732029 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 4.193073499 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.121452508 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.03882775 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.248770026 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.004864339 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.443226577 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.175368608 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.122594506 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.613782965 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.529291847 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.124725545 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.314912537 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.026433571 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.356833175 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.038028413 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.04574492 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.264406425 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.216648734 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.115126294 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.790006121 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.543980969 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.784423007 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.42021552 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 3.207891318 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.311936306 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.99476237 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.40259474 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.556048745 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 7.274816391 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.286034303 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.425117801 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 5.892974136 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.498606598 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.285570121 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.50196864 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.259246674 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.84146267 seconds)
  done (took 1205.076693726 seconds)
done (took 1207.1315525 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.444195319 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.631618021 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.836218076 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 3.158843311 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 3.085300778 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.914543465 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.825013155 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.505192654 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.31845089 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.827040416 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.169049142 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 3.053276269 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.314948564 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.342230772 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.337024155 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.378679705 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.472837364 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.478102581 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.316197121 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 3.035646476 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.730777156 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 3.071272428 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.671417921 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.566757475 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.638143061 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.399708995 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.454089349 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.686821192 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.685958432 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.18031687 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.4705554 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.677089064 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 3.106711874 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.454768902 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.322374433 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.28279303 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 3.057972709 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.311121047 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.426098951 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.342719543 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.624860151 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.318642467 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.91382238 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 3.047234379 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.961553319 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.654387892 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 3.022238293 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.343455277 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.398178262 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.684273921 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.499699082 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.303994195 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.520732753 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.066275954 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.999960085 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 3.015696069 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.631857856 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.899246354 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.850911563 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.502921287 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.614409658 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.135552121 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.90311429 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.78914467 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.616238064 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.764429492 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.57788986 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.427095445 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.743017232 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 3.099172747 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.710636703 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.749946128 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.702656361 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.669700337 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.588591891 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 3.031242844 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 3.146825012 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 3.277317786 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 3.287742538 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.600602146 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.484399549 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 3.758325866 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.646537382 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.655431602 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.682071824 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 3.256540297 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 3.487099071 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.443093249 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.620045078 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.944465452 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 3.470825368 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 3.112824086 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 3.013296301 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.669903584 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.696307319 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 3.221447051 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 3.482256973 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.681846443 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.491966991 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.907143984 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 3.338730756 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.704176003 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.520889968 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.534464111 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.593469819 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.679893996 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.701887633 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.92100944 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.725675537 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.569677132 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.804960646 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.674254145 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.60517212 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.669627523 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.69693087 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 3.297497115 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.792079299 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 3.381885666 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.714476894 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 3.178650663 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.819911399 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.621802192 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.911615219 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.828091465 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.676248429 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.595997797 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.609686458 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.467880259 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.557226246 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.487650009 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.635236486 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.889542627 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.845293754 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 3.419130889 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.698478402 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 3.200554052 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.8238338 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.932827994 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.695015682 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 3.428472825 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.58803283 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.374281392 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.739727828 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.826430535 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.741487062 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.788187 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.568352126 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.753515297 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.598085334 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.413647396 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.441674205 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.31283447 seconds)
done (took 443.013916057 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.538719069 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.615006081 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.475714694 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.490979284 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.618747919 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.856288586 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.541585243 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.923309711 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.57575476 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.677706111 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.564828613 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.546556075 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.088093685 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.578631918 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.733444151 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.618980005 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.449533435 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.597206671 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.85564442 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.768961361 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.454645457 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.69529839 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.548569381 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.807467953 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.425361489 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.462661982 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.764842028 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.545488246 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.49112154 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.101694998 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.127057732 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.362228519 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.425779653 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.272397857 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.621935987 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 3.08988141 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.457295164 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 3.138061172 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.431926289 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.46966872 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.381701318 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 4.844901013 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.540554108 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.566047932 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.674596852 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.865043311 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.585401557 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.792038918 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.531098243 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 3.546388517 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.791848149 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 3.614950013 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.697682711 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.882245325 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.732188434 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.663569797 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 3.009976236 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 3.037558911 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.890108692 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.839119457 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.891437941 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.949673061 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.954910024 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.724565574 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.560816414 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.828858507 seconds)
  done (took 211.299819203 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.967226343 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.830936547 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.980889545 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.922654715 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 3.103252771 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.943868944 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 4.0560642 seconds)
  done (took 25.273723158 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.574857063 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.585352042 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.816965631 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.780155853 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.553815347 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.686226264 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.671658842 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 3.564624986 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.830129464 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.627981414 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.899273997 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.751680671 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 3.424652609 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.549102172 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.670122341 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.960201837 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.941237402 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.994992668 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.987983235 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 3.178583706 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 3.57378997 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 3.548390309 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.861912828 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.679598218 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.595274788 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.634988449 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.592056585 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.564505975 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.632045722 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.570951162 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.599300817 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.703770446 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.58490647 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.540875732 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.614292196 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.910905864 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.275807902 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.132495164 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.224418819 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.041672405 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.049697295 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.068217402 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.198452455 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.072017635 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.046744192 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.253135843 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.05102257 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.072493745 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.046881448 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.066403466 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.334249026 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.06395644 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.091574027 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 3.006426295 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.291081917 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 3.019093018 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.143684285 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.073376411 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.059126189 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.113146816 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.058790491 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.314120688 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.302336665 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.046410323 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.302168145 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.360119175 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.059322899 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.040378206 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.039898463 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.268585322 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.054039054 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.275751053 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.062732149 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.106855757 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.107137848 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.194387594 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.248214489 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.845241848 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.818641735 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.979444701 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.028754275 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.046910612 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.374373964 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.994453863 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.982318316 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.046967463 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.10934977 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.748057076 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.970706862 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.064428088 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.371359798 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.04759149 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.116272814 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.111414766 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.088011974 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.124178605 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.307295451 seconds)
  done (took 254.698353183 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.447241469 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 4.659084901 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.254577175 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.294298081 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.439876884 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.590706538 seconds)
  done (took 22.634702102 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.401460867 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.916407977 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.113421105 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.0747755 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.116041407 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.058319469 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.055052586 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.271369197 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.252914382 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.103181989 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.05630733 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.078595457 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.058926058 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.205309349 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.058739065 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.063026227 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.056080244 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.084630329 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.066363637 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.12580625 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.216499917 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.115902012 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.126670485 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.97381809 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.159558369 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.099043665 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.066798858 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.067883649 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.063728507 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.460054809 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.259110874 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.058537635 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.925499353 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 4.478938952 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.879185089 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.010352295 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.239898755 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.114465654 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.114354515 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.058393661 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.080056748 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.127195039 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.082439786 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.080761187 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.45034148 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.964690934 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.17575741 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.357946906 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.061236117 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.081027747 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.081031135 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.085837894 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.058168958 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.080564771 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 4.8285148 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.495313631 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.080026816 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.095971023 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.118868327 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.981491476 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.173103679 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.094438454 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.463036212 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.04847057 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 3.053145645 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.081226403 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.986193579 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.23976509 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.163913354 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.078963024 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.081974843 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.080525505 seconds)
  done (took 184.659241307 seconds)
done (took 700.692713947 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.415520737 seconds)
  done (took 9.368761102 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.06433916 seconds)
  done (took 9.165848093 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.367486429 seconds)
  done (took 14.329632626 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.081041325 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.040739013 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.053117236 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.02313782 seconds)
  done (took 30.168360876 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.2363247 seconds)
  done (took 9.195642963 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.062669095 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.258351611 seconds)
  done (took 16.380488117 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.131460584 seconds)
  done (took 9.158880095 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.273268202 seconds)
  done (took 9.270202649 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.117524362 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.209232274 seconds)
  done (took 16.315908006 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.068320071 seconds)
  done (took 9.086188116 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.893793734 seconds)
  done (took 12.403765377 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.492475576 seconds)
  done (took 9.927102897 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.549578138 seconds)
  done (took 9.963633318 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.486137338 seconds)
  done (took 10.911731218 seconds)
done (took 177.596706606 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.518770018 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.478871394 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.48061476 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.48241813 seconds)
  done (took 32.377829721 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.582126492 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.538966704 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.433947024 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.457403651 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.355523982 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.367938771 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.422480696 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.422891506 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.479414453 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.658472454 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.634695241 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.831060223 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.703528801 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.40293808 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.386021448 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.465885743 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.453559676 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.400784018 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.381919289 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.740094542 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.864890129 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.88875329 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 3.166644386 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.076212179 seconds)
  done (took 64.296678707 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.3872341 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.515843291 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.250930088 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.405097118 seconds)
  done (took 11.687350383 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.122193537 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.460882997 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.430880573 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.393845102 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.440446172 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.251744668 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.442166001 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.305875737 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.309646321 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.433657117 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.975951909 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.387055825 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.285823484 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.605707684 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.394068862 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.225229247 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.165067852 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.430542613 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.542790489 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.443278566 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.482202826 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.524189354 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.509695181 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.464749131 seconds)
  done (took 60.047276889 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.884329607 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.953914613 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.383450224 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.938720453 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.724945419 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.947705152 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.303977533 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.52378743 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.289296556 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.268848088 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.750556472 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.75744315 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.167223693 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.916911048 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.786720289 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.200375143 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.201336263 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.870172577 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.633295173 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.323254042 seconds)
  done (took 57.911315125 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.02856955 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.024664174 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.238851575 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.189109737 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.024097133 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.029768299 seconds)
  done (took 34.492142422 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.086740607 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.166788113 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.349217572 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.320338259 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.186486366 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.165870147 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.642435045 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.236962456 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.818713859 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.787169599 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 3.642280056 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.48506396 seconds)
  done (took 33.850713536 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.035250113 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.031907827 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.028816991 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.150115469 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.85007242 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.878102996 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.338926461 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.026522892 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.111935747 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.213505965 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.878193464 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.194335302 seconds)
  done (took 51.718341 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.206110275 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.164966842 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352926258 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.67183448 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.51907297 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.093023455 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.421787503 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.536058238 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.061208019 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.086128581 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.506711553 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.058461896 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.532874547 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.978339519 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.031901957 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.297405266 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.838803865 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.946395957 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447159128 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098510142 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.980626929 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.168350573 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029247827 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.544525113 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.336269872 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.029797693 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.198683822 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267370336 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.026925916 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216882199 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.101414707 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.478303592 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.178066551 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.323656408 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.537985328 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.102998154 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.111231715 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.013924774 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.580567556 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.315513093 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.162160108 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.182290788 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.552641866 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.133808114 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.271678274 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.800252914 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.038688587 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.617098103 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.983953727 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.124950675 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.897035005 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.896223462 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.472579621 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.68591214 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162638948 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.298506722 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.183752348 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.988446437 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.31009787 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.052266003 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.18068187 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.110837376 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.198541805 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.980121847 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.512137561 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331365389 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.339309462 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.324286807 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.282845965 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.297943702 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.366504159 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.125593374 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.759268513 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.15433581 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.538121529 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.916561773 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369760141 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.029233875 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.755879197 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.538675688 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.984445782 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.131681393 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.689843398 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.982038957 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.02893722 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.190960973 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.879750954 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.982703291 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.118731707 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.058777865 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.359995551 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.15471031 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.169606245 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.288951042 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.733759095 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.984674724 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.628564389 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.316293353 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.982035027 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.58217012 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.136748036 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.984127946 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.127755895 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.565633905 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.426370752 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07550676 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.78365334 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.617899992 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313733633 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.603154737 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.187716465 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.84740127 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360968265 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354914635 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.030618755 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.855314103 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.037383401 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.11119471 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.349043787 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.033816579 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.038492344 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.387596908 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182530089 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132263428 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.24237152 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.032616244 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.175312209 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.037786949 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.796956193 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.289344558 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269265824 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.532971428 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.352562637 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.10949206 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.980290759 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.167082553 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.512505493 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.180950953 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339551607 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455469698 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.624653866 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.51550751 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.998497449 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.844937553 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.4842095 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.296259402 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.371097826 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.634443479 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191842394 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.118870744 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.035770379 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.185779937 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.04358119 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.533895617 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.036725128 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.73479724 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.738957561 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.339957282 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.03591188 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.993989368 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.015776258 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.223257873 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.673813095 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.071182043 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.196310884 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291164317 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17691936 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.040997113 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.987766775 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392621966 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.257127513 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.535976902 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.259728709 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.66831205 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.374657364 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509589551 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207438121 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.37036183 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.678935334 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.236341668 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.367199714 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.558376769 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.03111972 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039783505 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.093356563 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.426336993 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.250553812 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.803033266 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.013675051 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.503758316 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.070282319 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.492158646 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.989704966 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.177059847 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.494614246 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.042188177 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.580551673 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.135313401 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.409042591 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.29307038 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.063437314 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.742023637 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.828886557 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.395394152 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41724407 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342450571 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.992679862 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.478893464 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.524719728 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 4.512134023 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.164259759 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.265542492 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.948795556 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.054914783 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.03964642 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380983118 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.909819319 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.741107816 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.309311955 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.824152537 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.499383682 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.166328248 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.039520777 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.050351882 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.914496699 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.184157513 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.071448911 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.153183239 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.556571127 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.307188005 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362100854 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.039908306 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.040365857 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.317315762 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.338928794 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.308530015 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.521365509 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.645447034 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.719693128 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.139030789 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.635833018 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.201013097 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.072923085 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.590707096 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.326640907 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.958262455 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.185583094 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.735571716 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.156185387 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.073772746 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.293652806 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.041417572 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.49023873 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.629024399 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.043788754 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.051046287 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.146716189 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.04239205 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.212778497 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.7998255 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.256414301 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.207320594 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.35848707 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.242594723 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.186139042 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.42806534 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.541310186 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.732076895 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.99633831 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.190961331 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.125472352 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.318896707 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.04245649 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.302221122 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.588486272 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.674987469 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.822940689 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.566477286 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.228913845 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.168622058 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.485922941 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.278426929 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.302062839 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.965901331 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.664345234 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.003055379 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174241051 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.996487236 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.083494947 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339037004 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.41433476 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.494103178 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.078683104 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.557389993 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.404222184 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.065987405 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.16409536 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.303708065 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.043266609 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.320623934 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.047266741 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.126738454 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.413817126 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.046177879 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.564590255 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.219295746 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.360799128 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.19235406 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.683881173 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.071287199 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.161653215 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.515388135 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.220701867 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173891675 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378836338 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.838609134 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.070596106 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.120236685 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.613911554 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.615421101 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.49222407 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.616294376 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.617351464 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.390289381 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.795348478 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.04601709 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.21575393 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.197596033 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.684704971 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210040404 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.439379182 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.049146402 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.21608378 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355216602 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.138911601 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.619163677 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.003054694 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.643022264 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.132350676 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.54161074 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.586890155 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.8323177 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.597863492 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.279870252 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.621895674 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.047970561 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.222981011 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.558629855 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.955156134 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.22502993 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.146961629 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.102388619 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.538757059 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.764163483 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.500320711 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.02848814 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.502789551 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.578976252 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.465300677 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436071392 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.271048384 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.477198686 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.100837531 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.602507116 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.495013123 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.493848909 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.499286503 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.625492741 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.81572892 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.60241323 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.091135362 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.760739653 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.535998931 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.26834612 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.345577391 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.58641484 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.500451915 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.422172382 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.589930921 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.745647803 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.39083207 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.365175265 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.544065809 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.908765368 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.96072992 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.037932373 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.649267017 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.834821865 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.900392131 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.342980609 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.064825268 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.481139756 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.694499197 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.716157927 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.207861531 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.689366789 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.593325913 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.478941554 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.266518636 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.471226835 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.329190045 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.410636965 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.064866642 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.605160633 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.401766541 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115388579 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.932371637 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.502389181 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.354477131 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.546000409 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.54306724 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.464279347 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.176273338 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.776057353 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.549269899 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281344314 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19973908 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.008167061 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.121738665 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.283715426 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.210292099 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.289659942 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.917301574 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.223015425 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 3.730143138 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.63067018 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.281868393 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.293703731 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.058512555 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.91151296 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.115316467 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.806460447 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.916474408 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.377623769 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 3.631454412 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225268943 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.184557153 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624930364 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.401954515 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.549245845 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.553216619 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751002889 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.736013442 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.690358098 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.544425308 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.778484356 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.36248933 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.541145404 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.30760608 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.313187491 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.275667018 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.620796842 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.5740865 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.240427261 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85069131 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.474275899 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.446900958 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.498295499 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.220054597 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.755145031 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.351722004 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.321477456 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.31581294 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.365263831 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.540914761 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.156506916 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.463645376 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117340055 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.169900966 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.243320113 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309599396 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.430546465 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364980397 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.952889075 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.213234827 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.887120981 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067839802 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.707441916 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195731807 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.978083686 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.549638289 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.271722544 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.656891201 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.814008394 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.351753111 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.458457741 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.470652094 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.373370193 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.38540544 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.75341029 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.259208964 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.863577902 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.624844337 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.23430471 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.703290119 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.241397769 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.264898832 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.879635737 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.594390646 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.12251389 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.161461499 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.193635629 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.572129439 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.42240719 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.38024149 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412387271 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.049685837 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.258341223 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.34747491 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.301579381 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.643438794 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.151476514 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.678881128 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.404768923 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.506019478 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418941262 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.54971759 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.415900941 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.62941994 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.047497501 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.694898326 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.719649963 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.617733796 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.473871282 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 3.010171341 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.156495212 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.79514569 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.659251068 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.681720726 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.829228279 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.198217587 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.687320072 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032234238 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.615742542 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.656902566 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.841770681 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.67876556 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.455687834 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.55846294 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390397445 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.974937959 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.459751478 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.954454074 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.684394034 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.678968856 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.797492281 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.461736431 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.749554055 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.888006178 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.255057462 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.243835406 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.712921384 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.385046505 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.214242865 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.048728594 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.639301708 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.613007542 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.649545602 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.945521656 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.719644086 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.535717141 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.469180376 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.285931359 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 3.554051124 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.082618903 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.111608993 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.914774739 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.24349597 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.379863665 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.010716555 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.286430052 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.120494978 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.176816878 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.564189234 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.086982926 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.495801259 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.106441362 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.833750996 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.290258794 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.466608 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.471883932 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.709243428 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.371439026 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.057879903 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.515086902 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.342011354 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.336530481 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.664934071 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.415709162 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.604575999 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.779325776 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.577585611 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.633752 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149004011 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.416458032 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.314380579 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.642484021 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.165838358 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.896314683 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.452173543 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.813611523 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.416336115 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.310729782 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.855522358 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.579977105 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.067522722 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.477372264 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806903301 seconds)
  done (took 2561.504643582 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.393045573 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.375289169 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.392971194 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.412689491 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.476671112 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.498546776 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.399030908 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.376932569 seconds)
  done (took 61.594139394 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.252486448 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.232733839 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.730575547 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.298353938 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.431527858 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.506436096 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.589143404 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.872454059 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.561444187 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.413262874 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.470227163 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.352940882 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.644718384 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.347293566 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 7.319019866 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.877937941 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.343402325 seconds)
  done (took 113.580904857 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.431529801 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.074443904 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.398302344 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.682244285 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.302801943 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.624098734 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.364784535 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.378561223 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 8.119055607 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.089536625 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.19948019 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.217155392 seconds)
  done (took 94.276146033 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.355645798 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.409174401 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.415160676 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.42151815 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.449962406 seconds)
  done (took 14.327947695 seconds)
done (took 3194.194411078 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.47405279 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.748100204 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.733042045 seconds)
  done (took 7.612290157 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.283973741 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.37652678 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.476952233 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.379067468 seconds)
  done (took 11.673951036 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.499532013 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.705859927 seconds)
  done (took 7.332805297 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.828223577 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.269087179 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.777572421 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.439734708 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.215725797 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.212931678 seconds)
  done (took 24.16869938 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.281086765 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.223813743 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.240126619 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.204719533 seconds)
  done (took 11.145345601 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.190836504 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.236000735 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.242217458 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.430350123 seconds)
  done (took 24.222178909 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.758670168 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.572845688 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.147758211 seconds)
  done (took 10.809617149 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.189373406 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.776370193 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.199206882 seconds)
  done (took 11.43153162 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.384793747 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.207123133 seconds)
  done (took 8.829394846 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.430087286 seconds)
  done (took 4.563239905 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.701008274 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.678302719 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.00069359 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.157195615 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.396596523 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.674996764 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.746197626 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.811229083 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.062395103 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.838674556 seconds)
  done (took 31.243878996 seconds)
done (took 170.532138577 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.255429732 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.705381277 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.547450639 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.066028497 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.339060155 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.322525777 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.353518311 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.638668929 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.696585238 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.722587519 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.856794692 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.349034664 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.251024261 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.554559304 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.315548191 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.69087422 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.601770238 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.120270788 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.272857012 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.781551733 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.471586607 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.616189868 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.718681644 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.584250502 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.761007984 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.483008972 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.392235189 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.682227717 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.087112637 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.203704894 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.262253776 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.751894922 seconds)
  done (took 188.648106972 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.124606868 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.447683928 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.405060924 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.398814113 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.037770807 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.390012633 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.269742169 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.371386114 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.22801248 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.178223934 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.403059357 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.028038424 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.39166922 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.303308818 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.443164627 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.451788074 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.382772769 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.438339916 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.450748541 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.450035895 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.450972804 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.997315497 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.450058448 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.998824063 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.411124257 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.449515668 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.457555319 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.461527665 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.459575215 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.460678518 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.465400131 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.459959252 seconds)
  done (took 229.192739947 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.449880269 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.458207611 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.459882384 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.458968084 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.43997496 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.45864357 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.464626835 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.460169425 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.462425218 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.46242855 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.456745397 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.461429099 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.46742381 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.461305077 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.463121084 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.460515658 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.462655773 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.46141771 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.451120812 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.454536401 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.460241631 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.465364935 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.45914406 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.453431703 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.456357491 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.464802027 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.322861177 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.467601314 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.465951344 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.48861883 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.467577449 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.426233044 seconds)
  done (took 240.953251044 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.691130427 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.445927418 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.407113124 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.763366048 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.393422478 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.389204068 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.741029936 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.726936822 seconds)
  done (took 26.906252403 seconds)
done (took 687.982514272 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.166868337 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.341275163 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.639882579 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.688761631 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.093322596 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.764741721 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.68213133 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.964246325 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.286252014 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.945778785 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.975625756 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.686785174 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.299918992 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.699636222 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.648371464 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.938023362 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.86793381 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.017579678 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.613079633 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.297655862 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.545881609 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.384455346 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.979947611 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.333379701 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.964789497 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.509224973 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.483177939 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.865292087 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.672953135 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.765725285 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.560255484 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.911965395 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.563371657 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.507700777 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.755806472 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.749257323 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.69332867 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.799431905 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.457473577 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.048704979 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.1105287 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.933256271 seconds)
  done (took 131.61332021 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.325387016 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.305761469 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.474971665 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.377702054 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.957349621 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.431178707 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.540433726 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.482486342 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.40282554 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.476164118 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.535434519 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.960016786 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.506349548 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.962924943 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.518925319 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.583755546 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.373641291 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.889135599 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.529902557 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.499935531 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.341912359 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.481309435 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.332929108 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.51611681 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.338495317 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.371772284 seconds)
  done (took 67.732513371 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.410977295 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.475680184 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.631396661 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.671033506 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.560382921 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.438581306 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.892749896 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.641176142 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.487177331 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.871668482 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.566197854 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.603432996 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.650190957 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.842084458 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 6.062670125 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.639998344 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.696336255 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.615736762 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.682741187 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.732591975 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.659426853 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.580086083 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.905823074 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.642850235 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.153295615 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.655154308 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.859227058 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 3.091131073 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 6.00828976 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.579984719 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.631828646 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.893762877 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.859640945 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.838350192 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.633619784 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.520649641 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.501103112 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.596746803 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.482835637 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.622715073 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.890668888 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.546074163 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.931706469 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.082446463 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.471533468 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.695279407 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.966370548 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.62928134 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.628157237 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 5.070173547 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.871616274 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.471849229 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.621825574 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.53771199 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.268772995 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.528824176 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.306952676 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.400604913 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.297106191 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.677004222 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.19318174 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.499387053 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.300603634 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.086597308 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.411521915 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.328225362 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.291318743 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.358993582 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.551168537 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.379267228 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.847791453 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.197245406 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.138823739 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.186216114 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.293463336 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.626004279 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 5.100126299 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.336575553 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.508157448 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.491644914 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.413275307 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.738532434 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.139819071 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.34185726 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.243694754 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.128141204 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.208111275 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.436584495 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.479762066 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.610116389 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.704490284 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.406420079 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.525887837 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.507715018 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.382743635 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.490153045 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.112522701 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.127812681 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.430941946 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.725530251 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.195680531 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.362209135 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.799293263 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.521821638 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.428402692 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.147416546 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.514654422 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.099946668 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.512772624 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.101858055 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.271123379 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.359899909 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.392345851 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.455971862 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.108643589 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.673037695 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.260513187 seconds)
  done (took 363.480742882 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.086962948 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.084374741 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.083389648 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.08740629 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.082272214 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.668066213 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.144326807 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.086690345 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.665996358 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.143638216 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.082110825 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.084343997 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.086121255 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.089593144 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.620315148 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 4.604916448 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.705346634 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.0845045 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.082957835 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.087766757 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.92805844 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.094076924 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.11507739 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.087749242 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.151295113 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.263197243 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.165340225 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.212145965 seconds)
  done (took 180.699504915 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.216858156 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.683252577 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.258622949 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.594865951 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.865745318 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.418404922 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.546244416 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.341252584 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.305618964 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.253828998 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.452881925 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.649929682 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.808231231 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.007576192 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.692178444 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.149868138 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.213506836 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.744922347 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.599633466 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.575586147 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.748159011 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.809612106 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.698886225 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.856800017 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.766182815 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.873454459 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.954268211 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.570150286 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.6627248 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 3.389968276 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.605009917 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 3.5503669 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.698369195 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.577187258 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.82301965 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.972124948 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.270740818 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.237915586 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.778651412 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.550805413 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.508493535 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.856203761 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.886394889 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.601986546 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.544303348 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.978077522 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.539850755 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.679235864 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.718718986 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.498653871 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.65481562 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.660111218 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 3.091114356 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 5.388100799 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.720833237 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.680557541 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 3.18191357 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.871076196 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.524907328 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.943593212 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.547806685 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 3.353362624 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 4.03711538 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.642033654 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.581843582 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.428355347 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.66306972 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.961276016 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.928908266 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.580937036 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.945752811 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.757602332 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.551609787 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.702211592 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.729247371 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 3.196022023 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 3.248534126 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.691039707 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.679479615 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.635463735 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.734276533 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.534985501 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.843741959 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.602891259 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.529822472 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.939618001 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.998568508 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.544209166 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.583351481 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.694505271 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.736541463 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.744660588 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.877063937 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.635881209 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.190518302 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.764441936 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.975880705 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.558560366 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.6489799 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.53210116 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.709090648 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.76944725 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.547136704 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.864584547 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 3.121792113 seconds)
  done (took 297.972995539 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.318610703 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.61052248 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.832088558 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.153040597 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.955002026 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.522032253 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.837100533 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.661612004 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.860133266 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.80303614 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.793892473 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.651442121 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.584326433 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.32056856 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.639995009 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.751459764 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.630761394 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 3.160995772 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.90120011 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 5.46223242 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.076479788 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.387568431 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.904834155 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.935049214 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 3.054320086 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 3.075827659 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.227091129 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.673547699 seconds)
  done (took 91.255956456 seconds)
done (took 1135.124202042 seconds)
SAVING RESULT...
DONE!
