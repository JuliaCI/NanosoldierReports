cset: moving following pidspec: 2404121
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.847244033 seconds)
loading group "shootout"... done (took 1.12284365 seconds)
loading group "string"... done (took 0.674677902 seconds)
loading group "linalg"... done (took 8.541380628 seconds)
loading group "parallel"... done (took 0.163753868 seconds)
loading group "find"... done (took 2.935122572 seconds)
loading group "tuple"... done (took 2.080059121 seconds)
loading group "union"... done (took 14.318286177 seconds)
loading group "dates"... done (took 1.391009806 seconds)
loading group "micro"... done (took 0.211406654 seconds)
loading group "simd"... done (took 4.629917856 seconds)
loading group "io"... done (took 1.379958303 seconds)
loading group "random"... done (took 9.49346254 seconds)
loading group "problem"... done (took 1.608629574 seconds)
loading group "array"... done (took 25.606135379 seconds)
loading group "misc"... done (took 1.820103479 seconds)
loading group "scalar"... done (took 41.910304713 seconds)
loading group "sort"... done (took 3.197592195 seconds)
loading group "sparse"... done (took 12.715735271 seconds)
loading group "collection"... done (took 18.35887604 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.442502635 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.11350662 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161198019 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117695796 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.231931921 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123576726 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127323477 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.110792101 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.051897322 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140990319 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135168101 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423926721 seconds)
done (took 5.578820507 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.30629842 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.241302147 seconds)
    (2/2) benchmarking "String"...
    done (took 0.16283579 seconds)
  done (took 1.53414616 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.090891141 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057951599 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064668809 seconds)
  done (took 1.337278376 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063222943 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.139925244 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06404309 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064845656 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065405564 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067188238 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064133904 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064183008 seconds)
  done (took 1.656804122 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072088841 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065747829 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063646225 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065091606 seconds)
  done (took 1.394181484 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065680022 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124903023 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063338945 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062564457 seconds)
  done (took 1.443809624 seconds)
done (took 8.87492261 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158809766 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.782873085 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.854500956 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.145470749 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.31768076 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.348210211 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122003198 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.203020194 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.113180656 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075272196 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.159953366 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080299549 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.48320546 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.484824063 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071424773 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187279048 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.624308571 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085687656 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.115051455 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.243980579 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.083599551 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.083372881 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.088233083 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071728541 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.163686147 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.179759912 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.631178807 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099273246 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.16967488 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.090693391 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070145517 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074719406 seconds)
  done (took 10.626924522 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.1157204 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.111862444 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067184112 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.102764514 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093984888 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.068191164 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.073430998 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067101533 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.086428309 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.131578247 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090923775 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.124291698 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065863075 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071560369 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.099149606 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.161627697 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08294099 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081457011 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068288289 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081791486 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.094263987 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080389959 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078112798 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.077279926 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.113332442 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.135921566 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.090022644 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.109352542 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.067253145 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079880505 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.098458197 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.114925286 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068775614 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066408724 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.11060216 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.085515759 seconds)
  done (took 4.475509823 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.035032849 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093805377 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.106213852 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09781784 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107472083 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.096462902 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148899417 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122576376 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100258185 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067644579 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.176720224 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.703185795 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.122249751 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071629389 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.147790375 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.366904638 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.92378608 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07322424 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068455873 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.099335055 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070629653 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.141377843 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.06724969 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17931905 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.651308748 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07318666 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070063321 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.22103024 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.094299206 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064941143 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.147265015 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094863713 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069391255 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.580054373 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066465478 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064353224 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.086388704 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093904044 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066356357 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067106442 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078221588 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065224149 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.118592706 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081035217 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.560194064 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070398002 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.644714778 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.339365503 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074732872 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073013279 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.103226507 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065076614 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068449728 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.670532636 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.159156431 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067643633 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.293288131 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071877207 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069429854 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069572152 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101928022 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068023527 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069356531 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073893778 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.086689761 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.017046891 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.15477248 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.088052451 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07230199 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.443274292 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076194937 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068913909 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069857094 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.09535799 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.134493842 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066503019 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065827402 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110138941 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.237687036 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088588327 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068279343 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065247859 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064240767 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.556369181 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.987000228 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068510652 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066000796 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.500620942 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063372662 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.106189105 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064486732 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067207582 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087946134 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062815739 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064653795 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06191699 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062806299 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100467852 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067095348 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.555466944 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068115096 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.481838096 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069221157 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098610789 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.124235179 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.189537539 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104398936 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066493658 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.0634942 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072053073 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064210878 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063111492 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06790722 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064347496 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063393503 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065257996 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067471205 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06738314 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067194585 seconds)
  done (took 23.661917592 seconds)
done (took 40.932209141 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.396701325 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076502336 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077385342 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076408869 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076264109 seconds)
  done (took 1.893990266 seconds)
done (took 3.190559228 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.250935914 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.090980063 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063208652 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.202797118 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.086431887 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175994049 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.215944187 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.167534227 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088206862 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088456597 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088657413 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.220337291 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.231006987 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090245988 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161752002 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.232941708 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.090588136 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066112571 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088723886 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089992498 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.09084825 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063755252 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088636969 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090052954 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.160506795 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089219539 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06325913 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.163037846 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090948023 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.166289666 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091416498 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090400018 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091006562 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.162437346 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092469474 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.163525185 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063956018 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091383421 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.091248375 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.094124589 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093310846 seconds)
  done (took 6.212952193 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.088978925 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079802366 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081599837 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059833223 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068881601 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.078756916 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059798804 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078421538 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.093989097 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.078960115 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078784648 seconds)
  done (took 2.136670509 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.082536471 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079623973 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083750244 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.05932039 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070273231 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079448427 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059655594 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079178162 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082042787 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079797594 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079792549 seconds)
  done (took 2.058700369 seconds)
done (took 11.618719397 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.188285205 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.085946461 seconds)
  done (took 1.48128122 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.264992936 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.49520512 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.303614948 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.120279404 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.101431382 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.120149639 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.227759421 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.097682259 seconds)
  done (took 7.116680612 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.124700034 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065431343 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.066732316 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065286826 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066040595 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065168271 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.064654195 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.064829236 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.066961747 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065221283 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066354218 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.064889304 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.066958187 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.065887363 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066157025 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067813226 seconds)
  done (took 2.461905008 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.099708737 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066580339 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095347581 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059144272 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069204976 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060356182 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068100267 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070510362 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067654429 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067687506 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.068963508 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067747526 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068534318 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.068690284 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069397183 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070289773 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.0709649 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068305589 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070713872 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.071680793 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.06975364 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071939777 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073603168 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070058926 seconds)
  done (took 3.044471405 seconds)
done (took 15.327277489 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.182917159 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072131701 seconds)
  done (took 1.473464536 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.091744155 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.090217702 seconds)
  done (took 1.420841623 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072016503 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.057829595 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.074224733 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067007941 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.058632268 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058406215 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07397479 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059637262 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058877681 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058740281 seconds)
  done (took 1.88168367 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062581913 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064901434 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063079155 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061248545 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063442617 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059479952 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.061797367 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.059702998 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065450981 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059550276 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062931856 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080282518 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062195709 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080814448 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062053777 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062591145 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064504387 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062647821 seconds)
  done (took 2.399669121 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061188683 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.058896658 seconds)
  done (took 1.367029415 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.063911491 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059037627 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060827245 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060555993 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.058673222 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058416169 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.058979243 seconds)
  done (took 1.660859783 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427441828 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192689404 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.425055355 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067342071 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.082053065 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.295730903 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062970362 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067102376 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.06724631 seconds)
  done (took 2.969914085 seconds)
done (took 14.422348094 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083045466 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180356788 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109701104 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.411838611 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077016431 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065014534 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.094623697 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.205510811 seconds)
done (took 2.489911515 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.317835819 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.472026383 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.294093028 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.145931357 seconds)
  done (took 3.161885425 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.416977829 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.16503387 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.073891737 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.064850736 seconds)
  done (took 1.98494079 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065360298 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069102377 seconds)
  done (took 1.389812225 seconds)
done (took 8.115103762 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072852335 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.087686404 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058564338 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064686779 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061623938 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.061108176 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060067215 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.05886088 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.060897521 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.05896943 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.06099984 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.060846233 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060750449 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060626711 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06055252 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.060110462 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060932957 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06085313 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061112639 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.060578295 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061434542 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063022174 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061191841 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061718447 seconds)
  done (took 2.777578507 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079244556 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063058039 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063750528 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063501387 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.063895661 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.063948849 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.063929373 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063026881 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064989927 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063202692 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064521488 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06465122 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.062947009 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064684772 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063045716 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064658599 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064214607 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063299261 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063015761 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064761687 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064383755 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063743664 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065104576 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065020482 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066457218 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065695089 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.063921322 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064210733 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065286129 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065494808 seconds)
  done (took 3.208970413 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066792782 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057381791 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057655758 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067379284 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057220543 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058146308 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058645636 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057404179 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057729351 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058652341 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.05816851 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057435766 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058816306 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057505715 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057492311 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058081576 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062521106 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.077790707 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05781399 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057477574 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062253349 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.057835594 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058538031 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057993854 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058594907 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058097156 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.057957176 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058579938 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058285102 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.058959539 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061368127 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.062920631 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064428673 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058337401 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068734204 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06354139 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058471421 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065108786 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059518021 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059237179 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058618852 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058334832 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058558941 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.0587642 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069195926 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058649537 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059839934 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.058986788 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058700816 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058421094 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058477844 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060093433 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064072315 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.059671239 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058355456 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060167722 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059092718 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059182946 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058494726 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058206062 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058301479 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062522099 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.05993399 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059200798 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079725613 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.059789941 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.068820019 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058395056 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.058774664 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06249462 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.058820249 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077913293 seconds)
  done (took 5.633712967 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071856928 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068200951 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075848579 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067174426 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061162486 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058418842 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.0614668 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058353524 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067492032 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06180889 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058953088 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063386998 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068914233 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062144315 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059622416 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067655971 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062108794 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061691477 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058902915 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062607834 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060237812 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062191842 seconds)
  done (took 2.688471251 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144007077 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063974349 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105026893 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067725053 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066079437 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067294795 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06390516 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063846187 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063898566 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06441319 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064225583 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063953477 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065853718 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064552864 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06529358 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064684324 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064731446 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064962362 seconds)
  done (took 2.558281943 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076825022 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063506613 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.08974297 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.062999205 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063217933 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063292153 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067629109 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067706314 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063302469 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063638011 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067203681 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06340492 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063313563 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063590284 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063162945 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.063516142 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.063227377 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063575688 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067383373 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068013774 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068016768 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068274887 seconds)
  done (took 2.739402539 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078127234 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062599423 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078484751 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064060528 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057662833 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057894513 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064483548 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.074786328 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064309608 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062718601 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063228959 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059071595 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06528801 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063179145 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065252108 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063090922 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062707476 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063010122 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062620031 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057975372 seconds)
  done (took 2.566831416 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.096035006 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060388288 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061063233 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064847592 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060416554 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060434247 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064959613 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060473762 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060228514 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084093311 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06053199 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060594675 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065135103 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063384307 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060541054 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065105746 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06540489 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069582421 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06155725 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061160593 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085573803 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061481633 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066553766 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061578555 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06144521 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062842691 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061486477 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064530402 seconds)
  done (took 3.107496637 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065343933 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061714217 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061482149 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061341867 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061246718 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06119946 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061075645 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.061418898 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061190959 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061533034 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061097462 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061244131 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061202931 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061096766 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061331913 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061239507 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061306876 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06241523 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06172216 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061495349 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061424613 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061469238 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061414992 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0616906 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061904352 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061680829 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062012148 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062037335 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061788208 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.061969514 seconds)
  done (took 3.13472782 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072917384 seconds)
    (2/2) benchmarking "in"...
    done (took 0.06883603 seconds)
  done (took 1.426308062 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061760886 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07482215 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.056990319 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07011121 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065647168 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061406838 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066497842 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067031772 seconds)
  done (took 1.800713116 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.090925459 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.113155343 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059369212 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.059655376 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.088121578 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125771244 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.098018968 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072024351 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07443298 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06258813 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059766501 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.098602729 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.058942967 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073200295 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060444276 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069278154 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067444314 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07805452 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073205029 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058243269 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072817767 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060494921 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059975632 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061067948 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060974039 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067457548 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076597341 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07316867 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.068791423 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.057807053 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079167741 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058662058 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059786458 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068744226 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.090283613 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059037725 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09725004 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060251563 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064019754 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058602265 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071744161 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080560851 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.073945555 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077551008 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06045957 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060729097 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058387382 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.0607492 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063024238 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068652572 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058573084 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066960563 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058981013 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060461802 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070037099 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059349338 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064025049 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.068800286 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073267813 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070330731 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071887047 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075098547 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068448066 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.067831187 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060078604 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079567213 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061290682 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073845228 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07494031 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060727507 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073169243 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059047821 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058337755 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059137613 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093952831 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060999013 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060517845 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059600621 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059351093 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061484782 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07079677 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066572658 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069090638 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064305402 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077574672 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070717186 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060761141 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069185621 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079995639 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06477303 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060947313 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078745618 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064971391 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060775686 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080305967 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071956263 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064261004 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063116474 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065486911 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076150601 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063254669 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060332302 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070751647 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.0636096 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.24964367 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063040192 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06744019 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061192691 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069845897 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064444398 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059735083 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057059384 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.062939419 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.058917934 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056940673 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067721284 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.05797401 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072543804 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065070807 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072872472 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073324708 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068812247 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074239186 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.057946444 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057861684 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076689732 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067928662 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059284908 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076452827 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057510029 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.068797917 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057527243 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059216808 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.067798629 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.056977013 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059554681 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.057816309 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063265956 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059046012 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059658429 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064934666 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067171588 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070389079 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059045767 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067509018 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058456257 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.07452836 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068731258 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063685328 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061923677 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059588036 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071621615 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066297062 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.068973725 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058698387 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060845667 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059699836 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070496902 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069306032 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.060979659 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067341756 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064136072 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.059771587 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059391035 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060104892 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063127877 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062330777 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.0597827 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067428886 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068255098 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073711809 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067016087 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068809123 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058287489 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058649352 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060741911 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058658099 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.0641754 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068853158 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07536 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071438572 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081022055 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059227895 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069501197 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060500893 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076941386 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074061041 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060767471 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064152998 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058433673 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06135807 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069589363 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071665316 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075431258 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076302115 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065616412 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065672808 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060163375 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076439885 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060995709 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070168188 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07138795 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067235009 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060837313 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062685971 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070639321 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065591928 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062151383 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077914572 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069778982 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060846966 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076473401 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061689133 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072929118 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060874327 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066024641 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067706794 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.225824096 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069417311 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074437196 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05742562 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.058899874 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074218382 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059802381 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.05936175 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.066604439 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.073499975 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.062972717 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.06725865 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069367532 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068570898 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063066145 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068477792 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058801631 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06772526 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060708226 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069925783 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.057888273 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076320346 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056885115 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07355814 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058328984 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.06929219 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059224678 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068599159 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.0591183 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075505539 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059692606 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058856644 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070146551 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.056957946 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067600681 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.05741993 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.063538058 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.0649274 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.067574913 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059523338 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.067730554 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059425736 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068470866 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063605365 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.066948399 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068395485 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063908453 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058436213 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070658596 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07047197 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067656952 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060255299 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060217679 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059735963 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068928944 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060529607 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060271646 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068207267 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.0652333 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065511705 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060839935 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061024198 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060809572 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068113051 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.068934588 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077748947 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068171535 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067073384 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.06887012 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058606056 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075215149 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059103647 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067328643 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058856446 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066192873 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.06887377 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059470156 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079335746 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060813822 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067641051 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072099551 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068229006 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063396446 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077722086 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062216655 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068053816 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067959409 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064918243 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067613831 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061650445 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068655252 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069725949 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070919747 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061316429 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068651595 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070514022 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062595758 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070643352 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062594602 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069690004 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062571459 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059640277 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066106261 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073793085 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066246798 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066307093 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061427914 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060333363 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061828904 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070864451 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066676509 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070903765 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07785248 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06038271 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06257363 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060983406 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.230608929 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077875479 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068768615 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067157671 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.063673873 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057432014 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059566113 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059725418 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058382301 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.060866815 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057084681 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057539154 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068967755 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059418539 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062833614 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059228634 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059256503 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068628077 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062053096 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058689573 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065492898 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057875778 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063671884 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057277868 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059373761 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063115974 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057475239 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062122847 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068830777 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.074960128 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065211027 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068421976 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059634743 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066830474 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074004373 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065677077 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059361647 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06778989 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057281903 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076930063 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.067737478 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067040559 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068155375 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059053108 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07560806 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063846826 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070362322 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075358875 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06030167 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066650753 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058731951 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07528016 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063876935 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058423224 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067311473 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067209697 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06534321 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071500391 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059793035 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067710751 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064308136 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063853955 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061414365 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060772403 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068508304 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076018608 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060190353 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064723896 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067634069 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.06806844 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064161966 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072029005 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067944724 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06040156 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.060933954 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063520273 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.06036728 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072438481 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060012969 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064476126 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064328178 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058913507 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066374481 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076354441 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069143719 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069393361 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.058792356 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058590241 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07817891 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063839643 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065911301 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.06852783 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071026831 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07318375 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070426576 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078622416 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06180528 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067265003 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073855518 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061761899 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060591517 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065036091 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062612623 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07060492 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071305775 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068706848 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063573651 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069348975 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075901519 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063051104 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066843966 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068876644 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062585987 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072673596 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070167279 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.23358275 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060337324 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.058169378 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062351746 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068679322 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066836523 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.067841866 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059133009 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06523485 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.071998726 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066307298 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060719953 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057592418 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060753616 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067534022 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.062873846 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057403112 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063019231 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062088578 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065097776 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068594644 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063170875 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057678593 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075343056 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066799025 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067680244 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059644052 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.05971904 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058580542 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057547629 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069500237 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057692758 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.05948974 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063352665 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059484763 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07647457 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067767767 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074537073 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059075096 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063260067 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057820003 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068039576 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063267332 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058330188 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.06920482 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05820131 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075011133 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071147475 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065309877 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058575567 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064826394 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068275936 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074873832 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069140995 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068546307 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06240699 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069053259 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060636204 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070451679 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058895922 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058104191 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069710374 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068260864 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071981454 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.058700633 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069869086 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061937528 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068189168 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067837978 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06102863 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061046874 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061039372 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069190455 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064134827 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068917195 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064371446 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076623914 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060239919 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.070916731 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.068833228 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070861275 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074820078 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072348117 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068062652 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060267556 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067520319 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068038706 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060806313 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064957007 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06313153 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082487691 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061619327 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061358466 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074814219 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068000074 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061244444 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070371206 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066354519 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07170864 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06206952 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072307085 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067055383 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062061217 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066084929 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066101165 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060216775 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060843593 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061442563 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071974711 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066354248 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061931348 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082785739 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063541577 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.232923919 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070703617 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.065740733 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.059860226 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.05738147 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.059310123 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072030904 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07400137 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06196376 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067193384 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060083946 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068570556 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057279844 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067466123 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06657919 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067212556 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057436429 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05826964 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073310705 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074292578 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065892904 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074372723 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067621021 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059398706 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080161338 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068489239 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.05996372 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069552781 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060261895 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057727216 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057517992 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059631231 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070056499 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.057848212 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060273251 seconds)
  done (took 41.566415639 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102891311 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059589689 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058003849 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.057781981 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064980636 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059639703 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058303326 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059407168 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059664642 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060355209 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058632143 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058119424 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063676239 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073039989 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065726234 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061760469 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059205514 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059966815 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.05862158 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060117397 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065073411 seconds)
  done (took 2.705713543 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064581108 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061781457 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061475437 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061566161 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060719682 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059422346 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062719816 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058603148 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062258149 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058873506 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062399871 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058572942 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.058770651 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058805893 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05871789 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059878861 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062322688 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061455344 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058420051 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06185885 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060246018 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062296996 seconds)
  done (took 2.699503874 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062673534 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058864846 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067412548 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057464563 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057367776 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06042126 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.057623354 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.062963784 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063021844 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.062911386 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068174783 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059511464 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.057984323 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064431676 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057827496 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059029299 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102345478 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059210864 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059135576 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.057847102 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.060680364 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067843174 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058325205 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058419968 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063233229 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.06155693 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059334111 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061580042 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059295932 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063444505 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059756413 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058376964 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068097125 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067352504 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063410214 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06330021 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060672955 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059582624 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058500072 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058384127 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06746792 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.059795656 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059341346 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060407096 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068217265 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058400347 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058166076 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068351181 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058291212 seconds)
  done (took 4.411320373 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072862653 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108416918 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064900391 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090432177 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070240374 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063617338 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064109813 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091129021 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059065194 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059481684 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.0708762 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.070852396 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060530715 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.061763123 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065152684 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061957077 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062482613 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060775921 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063618953 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.060899366 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063760007 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065749064 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070843586 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.0711884 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062164636 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060452574 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060751627 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062194006 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.070767357 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.063853969 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062393817 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063817136 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071470613 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066343884 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.060877822 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.064015237 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072055052 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061774464 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061565929 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060035565 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061243824 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06272782 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066153812 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072684664 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06183202 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066533562 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062530529 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060952207 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072228695 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.06152923 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.064963039 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072727647 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062567726 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062126125 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062782655 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.071660932 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061511942 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060389422 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061855971 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071632768 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060119176 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062575226 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07322584 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061513437 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06472509 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072671964 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066852163 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062750354 seconds)
  done (took 6.001478563 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069980069 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.092939893 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073277161 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072658654 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068575576 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068361549 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068435156 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068308809 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068103481 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070948274 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068357892 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.130051421 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065330506 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.069657701 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068703214 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069189145 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070200134 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069430577 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069152901 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069086467 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069141253 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073696863 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069180803 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073649167 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073456269 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065708293 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.068999057 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.06911412 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073805226 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069017 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074390869 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069253463 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069271451 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074083266 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073923035 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069147834 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.059891745 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069378917 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069528558 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069332652 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.065956648 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074621332 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069412865 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066027392 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070422885 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070026714 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074748297 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074263984 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071154301 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072475324 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069594276 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074532265 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06932226 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069454133 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074785667 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077660657 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074809131 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074867441 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070783984 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07485922 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074860484 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077775804 seconds)
  done (took 5.877732028 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075690122 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063722957 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076457188 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.057708448 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058602641 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068233335 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058307069 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058216289 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064067982 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064022076 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065475271 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067262699 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069014373 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065301928 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067211842 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069045981 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067742123 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067873748 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064571438 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068162536 seconds)
  done (took 2.725940624 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.062995949 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062976883 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058467986 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073602253 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058492316 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066037509 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.058890602 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058894738 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058723178 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059068615 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064476723 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06358645 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059009153 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06643865 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062243538 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066240729 seconds)
  done (took 2.383463214 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064094706 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.065862571 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.091227092 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060279819 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061637344 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.05893445 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059544748 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058558487 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060729811 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072547441 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059590238 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061390867 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059370303 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058718174 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058699131 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061387602 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060309403 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059424576 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059388608 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093938686 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071338694 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060548811 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062143468 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060826233 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061782509 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.067998202 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061409655 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061661276 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.059840704 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062049816 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061647188 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.07073091 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061758615 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060491995 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058899627 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06060119 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060388474 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062222157 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062193066 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060083161 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.05912631 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061665034 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060068317 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060375325 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061142788 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062162178 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061207171 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070201953 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060418658 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062097829 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060287055 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062678454 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061336224 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071845479 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06276306 seconds)
  done (took 4.853900359 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078744419 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063602117 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057782011 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057706113 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063041401 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064297915 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064187127 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.063829336 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064209435 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058077408 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064198982 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063254988 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064123021 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063800607 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064070842 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063684726 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057973753 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.063843098 seconds)
  done (took 2.550740828 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068301743 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063312342 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063707228 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059508867 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059487781 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064021657 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058310211 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059546913 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05946457 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.059871907 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059972601 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059483012 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05954294 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060430906 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064017093 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059944027 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.05964106 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058495739 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.059820634 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058682304 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064543366 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058772266 seconds)
  done (took 2.7298311 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117107632 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082821294 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.156704219 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078145895 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088683872 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070071686 seconds)
  done (took 1.98645207 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094798005 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096666846 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063651157 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063385883 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06738805 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066040212 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06607817 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066074663 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068939098 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071594864 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066058373 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069282508 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068873929 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070647803 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067520533 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068466733 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067302777 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066858829 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064061287 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07462618 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067002297 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070237555 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067019503 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066991115 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067004626 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071734573 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070144872 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072734631 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066820614 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070297111 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0696349 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067308755 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070447689 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072820335 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064204828 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070099945 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066912109 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074830813 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068780503 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072377569 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064444734 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069241197 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070662618 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070386049 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07162696 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067945277 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070493602 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06749295 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067513723 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078949191 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072075374 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072257994 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069122997 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070848326 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070564089 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079143358 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073804487 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072847269 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070495761 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074525147 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072954904 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069598254 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072733809 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074249367 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069958901 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075103285 seconds)
  done (took 6.051801542 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105440946 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064214913 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066128238 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071277166 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070827531 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066351069 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066450446 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066408142 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066273784 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064031781 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101700134 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066572845 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071181273 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071109944 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067571889 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066948791 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067072884 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071886156 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06461753 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078448416 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067177601 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071926264 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071990821 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071771445 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072985818 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068832488 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067098288 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067373642 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067949939 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06756625 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070143326 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06715732 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07201467 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064731514 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071878224 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067217564 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066932696 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069878379 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066996299 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069254187 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072432244 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.344281748 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068749384 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067540128 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073558064 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067350619 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067266017 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06472578 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06734724 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064749609 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073426699 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073361125 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073288574 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073481824 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068184684 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067830686 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067859356 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067767771 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068026281 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069296527 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072552938 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067574498 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079151919 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067838241 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067900906 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.096566435 seconds)
  done (took 6.35637228 seconds)
done (took 125.792317589 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.258992183 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.224171243 seconds)
  done (took 1.858755601 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074325722 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.265212085 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07568827 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072636864 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132170016 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.131314288 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.105025474 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.069869791 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07191514 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069385053 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168085428 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.105329859 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07002166 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070294011 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069470331 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069348027 seconds)
  done (took 3.029238969 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.120777889 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.205981022 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.105275996 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068188822 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150554936 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07573437 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071925906 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075623523 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075329452 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.068765437 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.116376597 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08340085 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073993052 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074346395 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07167441 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073266594 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074140774 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075591652 seconds)
  done (took 3.073782435 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103299999 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111394344 seconds)
  done (took 1.627530902 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159635819 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108660724 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146439013 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.349968032 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139337701 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.145627847 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.150437078 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.142073952 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114187663 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139865102 seconds)
  done (took 3.007666544 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106106823 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102190176 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.324001363 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100190627 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080652932 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074821604 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072493785 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077513699 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072597821 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074064019 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119524933 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072679384 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.069917156 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121802829 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.096795434 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.105552477 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069996111 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076620125 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077957488 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.068953428 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073933323 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078315777 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177012086 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.076931802 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099853848 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073250353 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07766025 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073119628 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072628448 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076171102 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076952703 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099617336 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076876555 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082647886 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07438788 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095732999 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.069990434 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098468727 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072597417 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070985922 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074091021 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077117105 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070474816 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076224043 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073352603 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075707518 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078739365 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069239159 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073414804 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072884042 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071100152 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074606057 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074227634 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076296214 seconds)
  done (took 6.124464476 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.122916424 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109422918 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067586225 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114377507 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108974347 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068701003 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123650703 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103724953 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.121867036 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067498622 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067452153 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06676869 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07445874 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078301485 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119101513 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113667661 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070589839 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068376315 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112350928 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11254319 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067072531 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124431958 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115058521 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111575751 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066768539 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068109197 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066884008 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06816088 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075579743 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074961012 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067591553 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077919608 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079530212 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074420951 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066449386 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066594042 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066498463 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075285879 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076148532 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076473644 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074114837 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067288 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066980689 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067130343 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067720818 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066310407 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076694594 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075553883 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.076965495 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068154458 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06754275 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066913924 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069338432 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076642749 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07395418 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076274588 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078363493 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068415857 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067481905 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069011233 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078854024 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075927825 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075730619 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068368553 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076854667 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067365161 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077880809 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080934006 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068338583 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068553762 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067828762 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06761951 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068105858 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074553171 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074559743 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068150303 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069585813 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069375992 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077576951 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076301317 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068650987 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078554744 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06923308 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06938282 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069525636 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07126497 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081661947 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079166518 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070392121 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070393468 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069667769 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069873339 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069302321 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.235845707 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07540128 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074453195 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075284763 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066768448 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075635317 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074294681 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066630571 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072642609 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066075668 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066416969 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066329706 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072439086 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072016892 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.073832661 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067149522 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065966811 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07390363 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075282896 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066153695 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072241332 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074280051 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.072742041 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065640493 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075640778 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066319294 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075150416 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066232605 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074552343 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067556121 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073365747 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066376622 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065552273 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066218518 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07549493 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066546299 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06596624 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069297342 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06614391 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074356637 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07821602 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067399928 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074155629 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075411092 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06811004 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076324521 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06718824 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076418815 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067481833 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06746405 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066252525 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078073145 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066963316 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067968755 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067146019 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076227744 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06727143 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076698176 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074644466 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067001805 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077293203 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076833053 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074160424 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077062079 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068113321 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067459961 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067216181 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06743244 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076616557 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078054384 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069693793 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069228762 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074032556 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077171665 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06718178 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07402127 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074312572 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074717977 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067909382 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067803843 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077888509 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08042445 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076571776 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07963409 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077752922 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069943672 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076640463 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079918996 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069220831 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083978568 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069537168 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081431442 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081171753 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076961874 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.239535247 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077315456 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075447217 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075150788 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076662 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065999746 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066025879 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072366114 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.065982733 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066024997 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07182713 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066385888 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067220566 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080103785 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066324106 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075001022 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066781414 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073440467 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065814589 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066602687 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077681011 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066436761 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06664689 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073327581 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066203132 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072113954 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074804084 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072355971 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066054604 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066522894 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076675208 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076654791 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066974962 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066002672 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066485095 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074794929 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074096974 seconds)
  done (took 18.434815847 seconds)
done (took 38.587799804 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.168804673 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11117653 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.221206904 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.204658078 seconds)
  done (took 2.218363976 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100874569 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063089514 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.104432733 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.114232757 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064013163 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101485657 seconds)
  done (took 2.00031172 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200365625 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173612101 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.246012135 seconds)
  done (took 2.069952666 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36649967 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.147710968 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.256017683 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.513878107 seconds)
  done (took 2.836760981 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.133576449 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.129402049 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074869998 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.144130024 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082820007 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060005695 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.1440756 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067500742 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097303619 seconds)
  done (took 2.442070246 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139955551 seconds)
done (took 13.158589443 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.151495991 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.314599081 seconds)
    (3/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.306281225 seconds)
    (4/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.15158805 seconds)
    (5/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.101874118 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189178849 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.127636375 seconds)
    (8/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.198388387 seconds)
    (9/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069712516 seconds)
    (10/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.07216513 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.22954125 seconds)
    (12/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.338439891 seconds)
    (13/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070672561 seconds)
    (14/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.19187423 seconds)
    (15/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.083100208 seconds)
    (16/341) benchmarking ("sort", Int8, false)...
    done (took 0.181730991 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074772126 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.094536544 seconds)
    (19/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.296202025 seconds)
    (20/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.231643017 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074355556 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109521939 seconds)
    (23/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074709809 seconds)
    (24/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.247525677 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074508799 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.129463262 seconds)
    (27/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.210855591 seconds)
    (28/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.150046312 seconds)
    (29/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.334174804 seconds)
    (30/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.263698561 seconds)
    (31/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.290473848 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.124614156 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073106417 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.120222514 seconds)
    (35/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.191883782 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077880593 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.146980373 seconds)
    (38/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.140283666 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072423777 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064915407 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079851185 seconds)
    (42/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.143583607 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093932681 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.18742639 seconds)
    (45/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068259948 seconds)
    (46/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.16147548 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078551544 seconds)
    (48/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.228917604 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.2965834 seconds)
    (50/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.080393685 seconds)
    (51/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.128134023 seconds)
    (52/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.14125619 seconds)
    (53/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.207637608 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075948725 seconds)
    (55/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.174671281 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065714354 seconds)
    (57/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066837847 seconds)
    (58/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066345954 seconds)
    (59/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.14317579 seconds)
    (60/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.153546243 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074014878 seconds)
    (62/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.240089418 seconds)
    (63/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.34410586 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143506428 seconds)
    (65/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.08550636 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.17905437 seconds)
    (67/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072967359 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.118038361 seconds)
    (69/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.139901466 seconds)
    (70/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141145776 seconds)
    (71/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.105992812 seconds)
    (72/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072039586 seconds)
    (73/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071390848 seconds)
    (74/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.302005493 seconds)
    (75/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.068533362 seconds)
    (76/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.177218566 seconds)
    (77/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.10898448 seconds)
    (78/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167313062 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072908845 seconds)
    (80/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.204353987 seconds)
    (81/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.226660463 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.079399025 seconds)
    (83/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.19407094 seconds)
    (84/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093390761 seconds)
    (85/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.07233612 seconds)
    (86/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.198657705 seconds)
    (87/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083492458 seconds)
    (88/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.146028675 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072436919 seconds)
    (90/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.196251295 seconds)
    (91/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.166933755 seconds)
    (92/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064210698 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094483484 seconds)
    (94/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068867257 seconds)
    (95/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090421081 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.210993961 seconds)
    (97/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.195873279 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.185791412 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064939335 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.209302739 seconds)
    (101/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067621956 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071785092 seconds)
    (103/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073177911 seconds)
    (104/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072288723 seconds)
    (105/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068551442 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086601217 seconds)
    (107/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.14427284 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.069543046 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.208160148 seconds)
    (110/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.207083259 seconds)
    (111/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074395887 seconds)
    (112/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072811484 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121266125 seconds)
    (114/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064844149 seconds)
    (115/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.082376848 seconds)
    (116/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.131650937 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.09427346 seconds)
    (118/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267833585 seconds)
    (119/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.074572806 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090807617 seconds)
    (121/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069837195 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.079351789 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072029415 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074088662 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065227186 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093387567 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132773134 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202206764 seconds)
    (129/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.139053963 seconds)
    (130/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19015683 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066719452 seconds)
    (132/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.139783491 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07477276 seconds)
    (134/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074670455 seconds)
    (135/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.073046363 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.212182057 seconds)
    (137/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068433632 seconds)
    (138/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201792487 seconds)
    (139/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067624513 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069386474 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072941217 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.406176831 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076114344 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.157229958 seconds)
    (145/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087490955 seconds)
    (146/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065938812 seconds)
    (147/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.081277453 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 0.145972477 seconds)
    (149/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072179798 seconds)
    (150/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150964421 seconds)
    (151/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070305095 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06510719 seconds)
    (153/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067366342 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.079312605 seconds)
    (155/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07545955 seconds)
    (156/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.083637135 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071408251 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073679707 seconds)
    (159/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.088900684 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064596887 seconds)
    (161/341) benchmarking ("sort", Int64, false)...
    done (took 0.064894095 seconds)
    (162/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.081225147 seconds)
    (163/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074091412 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.112222945 seconds)
    (165/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064440467 seconds)
    (166/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.148100192 seconds)
    (167/341) benchmarking ("sort", Float32, false)...
    done (took 0.135680702 seconds)
    (168/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064559681 seconds)
    (169/341) benchmarking ("sort", Float64, false)...
    done (took 0.136388599 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092336123 seconds)
    (171/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.17745745 seconds)
    (172/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.080379276 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063287452 seconds)
    (174/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.06319134 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.137731811 seconds)
    (176/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.06754243 seconds)
    (177/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071915491 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06346677 seconds)
    (179/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064842036 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071019752 seconds)
    (181/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069071086 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072502677 seconds)
    (183/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074180484 seconds)
    (184/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.06414873 seconds)
    (185/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064103316 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068150905 seconds)
    (187/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.071089492 seconds)
    (188/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064684334 seconds)
    (189/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065291621 seconds)
    (190/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.067984901 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064054512 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063729598 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071380248 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.247395379 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085231672 seconds)
    (196/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066497278 seconds)
    (197/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.159549439 seconds)
    (198/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.174682993 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.08720219 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155419279 seconds)
    (201/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065674166 seconds)
    (202/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.20079382 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064915926 seconds)
    (204/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.07023794 seconds)
    (205/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064512005 seconds)
    (206/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.082978053 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085395792 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148668276 seconds)
    (209/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064508148 seconds)
    (210/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.071842142 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071174273 seconds)
    (212/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.172571922 seconds)
    (213/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067306883 seconds)
    (214/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066575397 seconds)
    (215/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064321159 seconds)
    (216/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064776469 seconds)
    (217/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064161218 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070041234 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.07167664 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071351938 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.079852642 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.18694287 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065111061 seconds)
    (224/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065792052 seconds)
    (225/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.080887544 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082850455 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150791282 seconds)
    (228/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.209695811 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067531087 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084568848 seconds)
    (231/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064974689 seconds)
    (232/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065229512 seconds)
    (233/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092569722 seconds)
    (234/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070115872 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065258369 seconds)
    (236/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065432991 seconds)
    (237/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.06580638 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083480851 seconds)
    (239/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064971374 seconds)
    (240/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.176177496 seconds)
    (241/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.069623608 seconds)
    (242/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066456067 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078341203 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076846224 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073552697 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133901237 seconds)
    (247/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.179070337 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074310684 seconds)
    (249/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068567317 seconds)
    (250/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.255176423 seconds)
    (251/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093111567 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06549386 seconds)
    (253/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226300234 seconds)
    (254/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073515171 seconds)
    (255/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.065083612 seconds)
    (256/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066080501 seconds)
    (257/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064195782 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.0658535 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070376454 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067356834 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.063733072 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.062924516 seconds)
    (263/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.225561774 seconds)
    (264/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064184581 seconds)
    (265/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.063809917 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.069271481 seconds)
    (267/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.065578446 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.063443867 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082760218 seconds)
    (270/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.069377173 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.071219155 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.143751092 seconds)
    (273/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064015371 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064172124 seconds)
    (275/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066068076 seconds)
    (276/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064051518 seconds)
    (277/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.067606217 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083052399 seconds)
    (279/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.07587106 seconds)
    (280/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064227678 seconds)
    (281/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06473395 seconds)
    (282/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.065343952 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063127938 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064486069 seconds)
    (285/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064395171 seconds)
    (286/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.069693268 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094371646 seconds)
    (288/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066457757 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070531813 seconds)
    (290/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.074966023 seconds)
    (291/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.171166046 seconds)
    (292/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.06545704 seconds)
    (293/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.070924389 seconds)
    (294/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.06459148 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149878482 seconds)
    (296/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.135464258 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.15853321 seconds)
    (298/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065687088 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063989377 seconds)
    (300/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06430331 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.06643704 seconds)
    (302/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079589304 seconds)
    (303/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069516033 seconds)
    (304/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064746882 seconds)
    (305/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065193694 seconds)
    (306/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.064614626 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064374704 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076557159 seconds)
    (309/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.064766767 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068382028 seconds)
    (311/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065297713 seconds)
    (312/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064247788 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063820829 seconds)
    (314/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064045641 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065031341 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.06400999 seconds)
    (317/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064202389 seconds)
    (318/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.069501276 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064807483 seconds)
    (320/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.069171721 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.069149637 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066703781 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.075813819 seconds)
    (324/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.066689363 seconds)
    (325/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066532625 seconds)
    (326/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075746878 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064198459 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066716651 seconds)
    (329/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065933894 seconds)
    (330/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063997184 seconds)
    (331/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064401728 seconds)
    (332/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064479508 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065159213 seconds)
    (334/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065501578 seconds)
    (335/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.064923425 seconds)
    (336/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065144394 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076336599 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064781102 seconds)
    (339/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064311709 seconds)
    (340/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067981882 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092317969 seconds)
  done (took 38.501971551 seconds)
done (took 39.972834235 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12431927 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077408726 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075157741 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072029976 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075514346 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.075501211 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075570281 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073269188 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.075582219 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07489452 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.105728931 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063119236 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070633614 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.077950318 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.0719548 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078789002 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075271424 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078067288 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.063873773 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078391019 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089161103 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076733637 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072792445 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079504178 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064593658 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072465682 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.118171962 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083799178 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.068740738 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073553048 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071240641 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.079652286 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071452993 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070888893 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073451241 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069198258 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074802623 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070390171 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.118722554 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069033132 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064309698 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07647074 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070768935 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071751812 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072390451 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075880468 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069116214 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.077356996 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06354587 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076062118 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119470937 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069448947 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068854177 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072219772 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069158683 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073474644 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068570489 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07531689 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068780642 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075471432 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073240692 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071598037 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06460848 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073002697 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071914035 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071340972 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062820494 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069237371 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063826558 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063834488 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063169325 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072680114 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070913081 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068884943 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063233214 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064035485 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063352622 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077018334 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071802588 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073239986 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064503001 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069487374 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068967448 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064764133 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069416663 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.075784143 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063479269 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064545542 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063515041 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079281087 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070889168 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064722303 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.0768853 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069842147 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069677023 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064468703 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063954157 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069859188 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072939683 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064666929 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063389693 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069928084 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069426406 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074540451 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066005797 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070923481 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071685751 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065228377 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074645275 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072969305 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075468991 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079059769 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075488872 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077779853 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066818694 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065147586 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.241348754 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064803799 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069716752 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071348526 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068448457 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07110091 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063625821 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062246266 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068407086 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06860416 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063319091 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063456739 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063223644 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071599281 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070124511 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061866875 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063241221 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072596425 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071622175 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062337111 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062147871 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071382776 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063373152 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068798895 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068079573 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071567369 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062495243 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063279651 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.06196614 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06248157 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062118657 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068221619 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069227023 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063714694 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071683655 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070033544 seconds)
done (took 12.673926718 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068087027 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.111179728 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.113934391 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.107355667 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.0798935 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065147432 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067619848 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084607166 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.0674492 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08908819 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089255057 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085409606 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.127488774 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062622633 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064165632 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064636756 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062260249 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076403837 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.11216462 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089253055 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107329286 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064115323 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.077732513 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08435059 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077347358 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083504735 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065718827 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06512951 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067408259 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081801797 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090282235 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064353953 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066505493 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083679893 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080733009 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073246566 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065522021 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071296633 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065357381 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064423983 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066304137 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082980896 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071312548 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071722427 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065311127 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065253011 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065464519 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072591734 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078576631 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070517691 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077212461 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081407538 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066192385 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064535393 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062670697 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072276933 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064394941 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065213206 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064876835 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064275734 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065451377 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068187434 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07023402 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075434091 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068735081 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072167127 seconds)
  done (took 6.530339695 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084170122 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092381664 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078074144 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078073544 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063474837 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064114827 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064543856 seconds)
  done (took 2.115871712 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068008794 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.103080624 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110168522 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.110098099 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.11982617 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.108507464 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065182019 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097056064 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06370472 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.104635883 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.12005432 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.112990998 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067651792 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076775556 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06538308 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.113534124 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065454177 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071846491 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109330098 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.114703138 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069454548 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096198368 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.07865043 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065653784 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.113583426 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.105292552 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067418051 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065557349 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067252935 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.064590446 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064432242 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087705551 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.105239444 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080531445 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065837581 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064226129 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.103451762 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065711911 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.102453417 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072260641 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.102442862 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067003224 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067214657 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064795564 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.0658039 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.107903594 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066703262 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.064905888 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064443998 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.106824363 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064383983 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.10567941 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067425581 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.06996313 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072070384 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071380257 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073102964 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065449738 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.108452296 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076280705 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067255908 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118440121 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117028141 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104507682 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.117236356 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074455276 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.108309706 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105100734 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065300567 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065786282 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066438176 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.11842375 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069237129 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068142893 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070422527 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073316004 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.119863238 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.123826241 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125506009 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081575565 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070276639 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.237555049 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070994903 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.118345264 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069204518 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064005695 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064975954 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063543201 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071945381 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065897931 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068885104 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063855274 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075008369 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.06695496 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066078593 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.110939619 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064270889 seconds)
  done (took 9.864573821 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069715778 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066866453 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065439914 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065140814 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065385995 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065125854 seconds)
  done (took 2.004039984 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092327491 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066004726 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077070668 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065185423 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086692254 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.106537216 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.10635886 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066793112 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081211404 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076148684 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.106755671 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.108101199 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.110471416 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066726229 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.106418086 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066661357 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.107527938 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069135428 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076439958 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067256686 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.07924263 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066958096 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067216977 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.115589456 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069137524 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067074396 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066748138 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077188206 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076422822 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067238906 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067040461 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068207601 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074919581 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067126893 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.109551118 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075024184 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066193178 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070672259 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068753474 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068289582 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.111442326 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067595335 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070156435 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070553871 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067250264 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074715842 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070406972 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069938453 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.109282934 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070292502 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07034225 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067089535 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068000865 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070322843 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074596995 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066926585 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070227596 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.109215358 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067275604 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075081062 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066202517 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068260973 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067534837 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068059126 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071309388 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071806494 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075541538 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067555299 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067713005 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066415044 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070839572 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066480841 seconds)
  done (took 7.12911165 seconds)
done (took 29.209016825 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.546137376 seconds)
  done (took 2.115434079 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.977638324 seconds)
  done (took 2.588781054 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.26555494 seconds)
  done (took 11.881638121 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.389374298 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.471875278 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.762939871 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136021347 seconds)
  done (took 3.409641707 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.882647744 seconds)
  done (took 2.505179978 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.237069775 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223934499 seconds)
  done (took 2.102829811 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.45726493 seconds)
  done (took 2.070147735 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.265760664 seconds)
  done (took 2.880940028 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233536885 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161514272 seconds)
  done (took 2.018010289 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.640868447 seconds)
  done (took 2.25558681 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.719404982 seconds)
  done (took 6.339089913 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.332191687 seconds)
  done (took 2.005280706 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240483521 seconds)
  done (took 1.859244702 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.635877818 seconds)
  done (took 4.252365333 seconds)
done (took 49.917860828 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085840569 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08364826 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083394307 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078750357 seconds)
  done (took 1.922376371 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075101707 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068434463 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070889148 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071227223 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068646741 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070404146 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071935107 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067795815 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069088631 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068195293 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066501752 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067977 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070444391 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067663847 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070109177 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071539681 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067944306 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068169415 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069876443 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067504381 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.071395282 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068355513 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067858138 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069200228 seconds)
  done (took 3.284618276 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078943046 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07031908 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073649908 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068727573 seconds)
  done (took 1.918504078 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077180365 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074229218 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082801331 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087937898 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073593947 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074364746 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081125023 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081530546 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.087564129 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084512161 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065620796 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065265624 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064351367 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083119673 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080665924 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060549606 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065228363 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075131243 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074064164 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076743844 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067520249 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063344508 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074128663 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075206159 seconds)
  done (took 3.424676512 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083592551 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063454583 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079316742 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08834979 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089580441 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063086535 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077143582 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.089746033 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126071961 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064457234 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069621206 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063376562 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102195374 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063242518 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078465514 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.10819932 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111133086 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067203957 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.095942697 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063322891 seconds)
  done (took 3.284091359 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078035479 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068323073 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068060962 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063313039 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.073909464 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.0701585 seconds)
  done (took 2.062946831 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.068936805 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.065856616 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065009506 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069804501 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06549701 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065442849 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065605498 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064318456 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064804321 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064832134 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064816464 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065193113 seconds)
  done (took 2.422870519 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215631671 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07049692 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067864613 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063682028 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065289192 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064486577 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078764321 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066785753 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.081718761 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064719788 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064926664 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066937692 seconds)
  done (took 2.603409039 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105732761 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108327483 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14069603 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114535207 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112552034 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093427128 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.162595418 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092049976 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161277393 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136342797 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115129873 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090858423 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08555849 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068021297 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098557671 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118346361 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136654377 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071316716 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111445281 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209009884 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132068483 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134062579 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146476498 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115268026 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090977054 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145783496 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094989752 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101189413 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121857061 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127367077 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11772787 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096371086 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070100433 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069251713 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150358684 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108465361 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119820481 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092086544 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106228946 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08842796 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108207487 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068678425 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082943501 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112553959 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085795714 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134117472 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093480146 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117185748 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08355464 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.31590034 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124408283 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132691878 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083462991 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101866991 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133700128 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109906121 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131100754 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103126816 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079447241 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115513432 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102880621 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096330959 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104658464 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077023927 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173915451 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087220707 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108859288 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108585036 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092782974 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09327151 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104071924 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134641998 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126189033 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126587349 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13982179 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091579569 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119349345 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100258903 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.127808954 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103703206 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071507253 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122082013 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129848317 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100563487 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101025169 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132362442 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092717071 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075273311 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101530924 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120187332 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07994304 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114902137 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081261347 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111883311 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14020969 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100553338 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115550693 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124318877 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.255458845 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153765135 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106260083 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070558394 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113454552 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108861248 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151825915 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091855302 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073677604 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096987159 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099696208 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150062486 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104861119 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077455364 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105637123 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13623013 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091318622 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.207677706 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092501293 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137892861 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108456195 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085182509 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073331339 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088763186 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11255461 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10691479 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110784026 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093114138 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083057481 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085337915 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115124769 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092780582 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079712413 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113224956 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103178693 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074089195 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086964478 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075056684 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14149414 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077183091 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139291303 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126743068 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076353409 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107780932 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095791739 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10666619 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097405426 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119887603 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143466572 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.18771998 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092251137 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097665577 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113722387 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.154016007 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.307345267 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090523371 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075457711 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098129715 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108775234 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094791012 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120110283 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091086347 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10351999 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099502279 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136628219 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140258246 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095731739 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097520133 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103785817 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118593847 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072542355 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152754921 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100797736 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115535054 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08884958 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139273347 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111050926 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087702356 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085844927 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098975649 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104312198 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106191244 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143686516 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095058962 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072130894 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092114392 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143849105 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076228002 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108778629 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090565119 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09153809 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118295126 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094294865 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080667131 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068375082 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129315823 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161661272 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069603591 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113651422 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.111621109 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104436163 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125855067 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070271473 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12485194 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143966059 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123293247 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.322911281 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16333348 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11447016 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116239072 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110778557 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102354318 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076583386 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.121680546 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131180391 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092645387 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088576851 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131110038 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115624678 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.1331062 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113607409 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115317661 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101674941 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103566468 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100319004 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102581993 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142831454 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121665637 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125201424 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082685443 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105177003 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11726338 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136295518 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081502037 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141305568 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084122896 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120074769 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077926889 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123983583 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076793619 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.169372446 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079330631 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100779481 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068674469 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073230776 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144664502 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114860767 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109432544 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102137788 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140568331 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139419575 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079264497 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109333871 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11726612 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106800302 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.302548701 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10690671 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086997351 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092147806 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104125368 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082891955 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.078761228 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111522711 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091040645 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122025189 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081679346 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072496339 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135316838 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101005589 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092062778 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073765228 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103828922 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120443308 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090480213 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084829087 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111857615 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10219264 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137607979 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088218503 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094950441 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121750986 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078134986 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090374466 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06795285 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084959172 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074536513 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128360137 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074716548 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116515816 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067632218 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130566603 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086614432 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091601447 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101273405 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110206391 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12696015 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093493868 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140698884 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088764482 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120904323 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107660376 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094865744 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087279713 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104573576 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101702044 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124673017 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096140803 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125361972 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147562268 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105044485 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148562045 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095647408 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.306697964 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105764538 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121231707 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108567412 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162963833 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134220625 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1088757 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107695546 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072806877 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092605077 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101414549 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108837004 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169379269 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122054552 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070038497 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101748378 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09250598 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10585769 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101023632 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079371874 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141359062 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100726103 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086473265 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109989387 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090078515 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103351226 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076164371 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099882058 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10425966 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094389925 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096601252 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114783977 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129669135 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112317438 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144457648 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100940466 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091693209 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118146845 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110461671 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110053076 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085854418 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086487769 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140932982 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121776416 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129598421 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102461837 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110602248 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112762089 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102089763 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130364382 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114275576 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.311252916 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079088713 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074838851 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066429262 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070082095 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120467561 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104321842 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108266124 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095462967 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.06995564 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100083519 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100637496 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070610758 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085383161 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090976476 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095426353 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089313202 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103883702 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.10967472 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093344378 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100561732 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094520527 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144358885 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.09884739 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085756634 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140548006 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147308956 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086376414 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090688399 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070057914 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077712386 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111886568 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150485124 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152287726 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077724604 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086014241 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085208701 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085975335 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070345084 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088293395 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087342414 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105125316 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098531013 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113035099 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105416115 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075136861 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102514492 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102084651 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092980331 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108733828 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122843015 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129848237 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145124549 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11584555 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109455687 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07651351 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081484706 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07710244 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08158925 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.281795074 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078211773 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074654952 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139628294 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089285671 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101735423 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104687694 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085065565 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072791107 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129940999 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067160444 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132511588 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069282069 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079388104 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079637462 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076295597 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090083536 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133416035 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105632062 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108216863 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10422362 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101971537 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157847923 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153663231 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079603367 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140029873 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07427902 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074710721 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074635328 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110133592 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088875869 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114051764 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14216651 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089948107 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101222387 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077201742 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144398561 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09914402 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103399086 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085372368 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078929343 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145322085 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07918789 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081219062 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089189851 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11200144 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072210761 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102931403 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083304947 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079332691 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167702835 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712721779 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091105794 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075673874 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097611409 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146374011 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.318170051 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094103307 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105808272 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116032458 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097780149 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.091478856 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105814581 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188016158 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072022988 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091299528 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100612755 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094974792 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098637444 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096037917 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087639335 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089751908 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085311556 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077046199 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104532154 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085588461 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093793401 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104611227 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080815349 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085278344 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12743824 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100592076 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.081267159 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086226644 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103465231 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08603116 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101421387 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068509986 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110860567 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088052328 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118651869 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097757925 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107424217 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126028891 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093828635 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137246898 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107575503 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122767358 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087051734 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07775034 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127425812 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090338694 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078665129 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14784845 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098178926 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.104894416 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104510037 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097193759 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114761551 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121903427 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116774324 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100395465 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.259911048 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099112011 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.099491677 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084260582 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076903653 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072127454 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074216119 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103680811 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083832033 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084752996 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109515203 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086093145 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0999672 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100259976 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119172666 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085369336 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09877029 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107981048 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088974252 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107668454 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09873872 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125650631 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170144545 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121159434 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127408587 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132888155 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076213292 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075091998 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067802605 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11282931 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0787349 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088702394 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077857054 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137563688 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081679187 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11225868 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243078566 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080149265 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093994077 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096056763 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068471648 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082593661 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107147075 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086261221 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078931615 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118518725 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081001521 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130733934 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112778134 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10070672 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096444555 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081269961 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116047654 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105212954 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131384935 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095824231 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075943205 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129046651 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108982447 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.324619866 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071880515 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078840999 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126836103 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10062482 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128161581 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078067679 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144958276 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138299338 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096976669 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130502631 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068773749 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085531342 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087239343 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12324753 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082416301 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107814292 seconds)
  done (took 68.238768609 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153170497 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.182630447 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.120839147 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132493281 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.289039708 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.298132025 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.151700411 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123316486 seconds)
  done (took 3.238172138 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069777694 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081386594 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079106382 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.240324256 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.095918998 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.065912158 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071201623 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080676677 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066534156 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065437139 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099658623 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065568579 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065855553 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.522084963 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065225535 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071598878 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066328403 seconds)
  done (took 3.662462661 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.350267696 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.530468708 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.317481897 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.756766139 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166262247 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.723469381 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074440673 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081257753 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.93887327 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.400177848 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.160920894 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088325042 seconds)
  done (took 21.364291529 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077465769 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.117968372 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.116692146 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072468909 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072074481 seconds)
  done (took 2.230741018 seconds)
done (took 121.303847322 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084650063 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.169384884 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066701583 seconds)
  done (took 2.042788464 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.119523033 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116534407 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.115229035 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.116041835 seconds)
  done (took 2.246815091 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075724385 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074373289 seconds)
  done (took 1.929052521 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225213448 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.213091993 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.088669216 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084303984 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077836757 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07913945 seconds)
  done (took 2.026900817 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072486435 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069307621 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069186457 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069448556 seconds)
  done (took 2.052323272 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.169115644 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065449641 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067585723 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069203831 seconds)
  done (took 2.146036189 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08579621 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084233891 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113164947 seconds)
  done (took 2.064648146 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08443502 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082757734 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076944771 seconds)
  done (took 2.02759714 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110149001 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094612237 seconds)
  done (took 1.983528428 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080343967 seconds)
  done (took 1.863649125 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092314377 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096064333 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.180890193 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.147657805 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.182757634 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170037206 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075294532 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075537597 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071316735 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070359659 seconds)
  done (took 2.940766767 seconds)
done (took 25.708974471 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085085849 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.209710153 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.316834415 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084923829 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652374404 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.313089806 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.730989399 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092819244 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.097939722 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066378161 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082734909 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631505629 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.732437037 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.148470974 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717834817 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.139442692 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.562525976 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067222618 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065991673 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066445101 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.71737214 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067598588 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066629145 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067024846 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558000919 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.330988367 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06758241 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.136350148 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067926517 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07040713 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.313689086 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068272536 seconds)
  done (took 14.145627942 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076024705 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124059936 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071158521 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081474404 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068161763 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067842447 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.069872409 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066889373 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108837979 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066568199 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083698187 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067029529 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071467033 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067723526 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086959869 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066587242 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068577988 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067300955 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066376242 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067200273 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08542259 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066231474 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067026101 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066982905 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066963202 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081196387 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067793907 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066642008 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066589516 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070729629 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071615782 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068015223 seconds)
  done (took 4.151893412 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127799998 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.142107338 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071971717 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.106458195 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.114551585 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.0688299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149819437 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090059479 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112411876 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066962509 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083367354 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066501822 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101999785 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067892594 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087280401 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066708685 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068795736 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066918898 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066550708 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068019597 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086095978 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066500989 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067037959 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067145947 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067181631 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082279963 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067682842 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066688766 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066902876 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07072224 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072497755 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067885939 seconds)
  done (took 4.443988876 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070470933 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069283092 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075110012 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078549943 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065369451 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066661485 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067509852 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064583674 seconds)
  done (took 2.357945583 seconds)
done (took 26.896045926 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079776208 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065741547 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069390077 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085750573 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071641184 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.108305658 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.062815117 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072494428 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069228123 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069295298 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070757841 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065549629 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06794095 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062833638 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069653807 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063884168 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.111625515 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068244943 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.108814559 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.109276361 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066351027 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069349177 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072194909 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.109427298 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.10880891 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.108603499 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072754296 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070815408 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06496618 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067281961 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.16923965 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.182444425 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073771608 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116099864 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064736212 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064236369 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06844953 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067000893 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.114119653 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073464668 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066554632 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073079408 seconds)
  done (took 5.257507903 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.188648678 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.191609559 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.184573276 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078751027 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.090534042 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078043287 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192762021 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076118485 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.073993331 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190133715 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.069863834 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074089113 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076307408 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067166324 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.073754838 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07016565 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078327351 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.069261718 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074192089 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07387226 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190316559 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067549612 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078468462 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075349281 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069547371 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075327205 seconds)
  done (took 4.447422252 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075688257 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088382399 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090626103 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143893242 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109773783 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081407219 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081804834 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092015672 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099710154 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06648983 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.08826913 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.0935933 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094783374 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073005568 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105514903 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085320597 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078576254 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068044751 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.072907034 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100366495 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088905283 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.133328811 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099147525 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086244957 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065218033 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075393284 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073654056 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083368507 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073936002 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078632218 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070090729 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069601709 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066745104 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077821224 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070556118 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.06414941 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089002716 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079312431 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081456249 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106489431 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077602823 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068328239 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.093714089 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13138268 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066312635 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068799378 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070656187 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079307006 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068158792 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09714083 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082093386 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066744629 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086632585 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068536041 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068057021 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082591997 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068301512 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068334622 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078227143 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072660505 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08716118 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072218079 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087428106 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066652994 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.077918867 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068979996 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068873928 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065567547 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100727384 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074017307 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116468088 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067963069 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064359111 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078820229 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078094723 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073449967 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.06619822 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085582635 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079644433 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07079796 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.07771944 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069414345 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069899061 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103123261 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065425274 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064510557 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064459368 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068835154 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07006273 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067386348 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079343338 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066314297 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071262479 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081995711 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067104553 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067499798 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069196133 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067983065 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066274276 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077199491 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071219794 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06910813 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080072469 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068524012 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070715892 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082717068 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077662059 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06732314 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068925443 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07119232 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070748386 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073486618 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072378737 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070823311 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073813422 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076924118 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075452288 seconds)
  done (took 11.028265498 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.209126568 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193296425 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068024972 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189558682 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07487661 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.123103678 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.190781837 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.192059874 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067335438 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.06902998 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066554234 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.136806575 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.13105186 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.141851281 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.122871299 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068935525 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093563671 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.14301278 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.197250528 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.190403605 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092968001 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075035169 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069644321 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068533853 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068781994 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075353673 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082971581 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075825968 seconds)
  done (took 5.152926002 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075526639 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.113352802 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071239302 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.09087488 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083199751 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066321131 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068674745 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067628319 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083508423 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072032566 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066223273 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071059903 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.06959852 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.066974617 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067190605 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073175034 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073758048 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.075357133 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070080649 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070691034 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077356248 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154465162 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071107569 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.06677441 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.06989189 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066471397 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.072981291 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074657098 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067187758 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101182411 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063683328 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07080105 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081301403 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067955598 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066935794 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.0677281 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.06701457 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066904305 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067440662 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065045543 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064891793 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073037834 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066290689 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072837313 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081473983 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07596886 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068305989 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069323337 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069270346 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063829436 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070514033 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070242876 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.06993862 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075633764 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070653316 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.06918186 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069045195 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098909382 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073301778 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066771429 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.066956327 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065134343 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068545712 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074835181 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083685918 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.068616244 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06544394 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067025664 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074441812 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081246147 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067393304 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072829904 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064073156 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067063937 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069094881 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069864879 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068521485 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065200616 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066852843 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067013226 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067997316 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066650982 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.594063355 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071109518 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065076316 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065435685 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06794611 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069021561 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072886195 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066020226 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069827272 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069168016 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067159442 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070431435 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073604159 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070566673 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087823264 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075467067 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.067836442 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065171453 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082341834 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069152224 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066476195 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.070999149 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071954538 seconds)
  done (took 9.98111502 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09792544 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067763429 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.087526512 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098436104 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076520886 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071217346 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080218977 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.066842527 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087915344 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065087049 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.074987563 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064371553 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079862657 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075414561 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067620082 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077694484 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.06910416 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08730225 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081062483 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064671419 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075249988 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.07853569 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.078877126 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.084540778 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084411821 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085178711 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078559214 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068635587 seconds)
  done (took 4.057570429 seconds)
done (took 41.710882458 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.888663249 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.071185505 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.883969796 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.374113736 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.105105384 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.879959001 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.020206768 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.869831767 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.464583102 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.951639988 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.622362628 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.494503411 seconds)
done (took 68.513349789 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.970315104 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.021454641 seconds)
    (2/2) benchmarking "String"...
    done (took 2.112503997 seconds)
  done (took 5.990374219 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.31318658 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.872596542 seconds)
    (3/3) benchmarking "different"...
    done (took 1.914426743 seconds)
  done (took 7.906815133 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.129579789 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.404276396 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.149367807 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.870543357 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.879505408 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.372242847 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.037525267 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.509452272 seconds)
  done (took 33.042158611 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.878456068 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.246315951 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.301977854 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.320171461 seconds)
  done (took 21.640476278 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.315403783 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.290686862 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.287336084 seconds)
    (4/4) benchmarking "different"...
    done (took 2.569624301 seconds)
  done (took 11.364380294 seconds)
done (took 92.010732388 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.876460473 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.178030835 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.904935716 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.049440536 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.952296335 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.950427317 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.883429887 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.900350566 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.879233789 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.877839204 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.877875855 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.879403221 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.890393218 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.923486733 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.876392675 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.955374797 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.130052028 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.884884144 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.904292168 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.62249194 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.221707183 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.887239164 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.889556488 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.931649468 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.270463449 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.921914412 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.30378047 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.883123466 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.488044754 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.888189458 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.878371942 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.880526806 seconds)
  done (took 207.652067652 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.874555267 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.68877416 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.720099519 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.875660796 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.201210927 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.217191539 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.727035013 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.22316783 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.8809115 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.88432331 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.828705682 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.877600605 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.877506298 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.421770527 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.909495162 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.893336564 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.720225347 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.62693956 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.915065307 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.793590925 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.886292671 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.392685194 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.378181592 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.663795799 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.883810016 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.910712091 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.019373771 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.878494961 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.37947701 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.677516904 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.896648894 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.887411501 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.372612151 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.105947149 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.878986939 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.885356427 seconds)
  done (took 181.073396394 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.106912788 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.897076294 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.92290355 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.987065856 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.80981062 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.684276457 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.878301034 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.871947701 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.870143879 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.881783284 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.877126281 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.941634173 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.039216384 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.90166933 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.877313993 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.877092494 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.946177223 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.880554312 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.871535313 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.871545088 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.97826104 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.220756457 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.982687725 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.874666892 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.888454746 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.985261782 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.88514791 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.874276811 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.872583504 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.984280303 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.880787952 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.011964222 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.989751864 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.888677751 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.932462328 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.883844705 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.065566503 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.875555332 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875073584 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.878477384 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.921600666 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.877930737 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.920103045 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.985396346 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.882325355 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.894890121 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.330682527 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.472138265 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.878937556 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.878467789 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.875181854 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.874430239 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.877232468 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.105089482 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.881706268 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.912163338 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.319099578 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.878625551 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.877854194 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.882193509 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.875357847 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.877134395 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.87977584 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.918851806 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.526124729 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.645547853 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.233570518 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.591100918 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.880959715 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.607998489 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.939032034 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.880657075 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.04957469 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.878940322 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.873444902 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.879646758 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.8773795 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.787927116 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.835706609 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.882831758 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.98459001 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.880124312 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.873794817 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.177040684 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.900379151 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.883857627 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.899568015 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.935245392 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.878459839 seconds)
    (89/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.875467951 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.878459444 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.887024645 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.861914748 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.879137475 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.879014998 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.879302618 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.875862417 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.244895002 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.88317077 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.190730219 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.265156199 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.967457241 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.298489833 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.833594885 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.883284657 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.875997655 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.892601791 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.88137743 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.8778958 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.887441457 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.87539641 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.880040753 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.882401109 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.876717494 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.874209006 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.87866302 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.880891201 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.895297122 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.877476442 seconds)
  done (took 418.339125711 seconds)
done (took 811.114689429 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.525187355 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.594082348 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.439912364 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.49904572 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.449952921 seconds)
  done (took 14.322248721 seconds)
done (took 16.140609051 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.906158802 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.905490958 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.886527603 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.907429457 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.904467915 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.899015473 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.907476056 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.91802616 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.912868162 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.904541789 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.909685841 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.899786434 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.910601454 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.912328918 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.914879403 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.914362296 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.903587034 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.893804171 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.909055203 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.90360759 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.908398197 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.906275266 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.900145102 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.907086116 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.911175933 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.906442808 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.900184777 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.906480448 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.903961528 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.909042691 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.922703208 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.918402721 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.913442092 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.911609687 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.911309364 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.91287209 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.911528342 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.91933658 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.904087184 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.916826958 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.911639823 seconds)
  done (took 80.057722568 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.895036824 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.049591224 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.158616898 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.934478337 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.894944409 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.155482576 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.962687407 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.052224228 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.058122828 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.169417692 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.165553911 seconds)
  done (took 24.320442903 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.890056509 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.06431171 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.16840193 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.934833263 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.893959151 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.16822334 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.963318777 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.054777083 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.0525176 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.168236586 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.171772922 seconds)
  done (took 24.365904905 seconds)
done (took 130.562399147 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.446741457 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.947613969 seconds)
  done (took 6.213234706 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.885677405 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.909790943 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.061789325 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.888427267 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.886575049 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.88884945 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.887573071 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.88767025 seconds)
  done (took 17.114200913 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.885413659 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.883173796 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.889846801 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.887210562 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.885733079 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.885300529 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.887615238 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.888942008 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.885657156 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.885091839 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.885457648 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.889036623 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.887708397 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.887083039 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.885328528 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.888046983 seconds)
  done (took 32.006528036 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.885246602 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.883914186 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.888934697 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.887363601 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.885602189 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.885109616 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.891573301 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.890976295 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.886182202 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.885172838 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.884070444 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.889329215 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.887801209 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.886088366 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.886456569 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.887448031 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.890415475 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.887581484 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.888353663 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.885017274 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.889119817 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.888358205 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.895501268 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.886120236 seconds)
  done (took 47.123416812 seconds)
done (took 104.294972045 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.466491469 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.066716668 seconds)
  done (took 9.353593531 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.891113754 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.888710752 seconds)
  done (took 5.709329196 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.886828826 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.885041086 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.889852938 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.88939464 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.887367769 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.885999834 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.889246489 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.891862652 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.888801625 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.887425009 seconds)
  done (took 20.703629505 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.89164083 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.887941025 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.887865738 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.885702936 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.89198562 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.890415525 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.888011764 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.885780219 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.88660344 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.891322808 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.888858102 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.889007001 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.887400214 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.892155316 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.89148664 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.887940423 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.88629095 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.886837528 seconds)
  done (took 35.815444659 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.888621094 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.887303532 seconds)
  done (took 5.60170257 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.890148279 seconds)
    (2/7) benchmarking "second"...
    done (took 1.888060322 seconds)
    (3/7) benchmarking "month"...
    done (took 1.887098934 seconds)
    (4/7) benchmarking "year"...
    done (took 1.889095475 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.893968756 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.889612877 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.887806616 seconds)
  done (took 15.052475607 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.892946038 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.034099966 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.080755726 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.372029211 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.890881841 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.891094741 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.547545043 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.890880943 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.895020521 seconds)
  done (took 20.319535615 seconds)
done (took 114.3812736 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.704913887 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.896780841 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.539915053 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.013484517 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.941750476 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.2130247 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.907570144 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.427805767 seconds)
done (took 44.470190056 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.968803665 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.89193508 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.93560107 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.933088077 seconds)
  done (took 22.588400691 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.898756695 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.532141109 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.923769334 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.984694228 seconds)
  done (took 23.254537643 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.390261391 seconds)
    (2/2) benchmarking "read"...
    done (took 2.414577746 seconds)
  done (took 6.643981565 seconds)
done (took 61.286673038 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.890180477 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.889142203 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.887366514 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.892207301 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.892526552 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.889299801 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.88899309 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.892406096 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.894552697 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.890613768 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.889503589 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.88756168 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.893748344 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.89250144 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.89293426 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.889552926 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.892721956 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.894420723 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.891067036 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.888963336 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.887524052 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.89466086 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.891811176 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.890748422 seconds)
  done (took 47.212817266 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.894922629 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.892420306 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.890442888 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.888837353 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.894718698 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.893761606 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.891418659 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.889651153 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.895213386 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.894721504 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.891393654 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.89072354 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.892401996 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.896169496 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.893426889 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.891686104 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.893049501 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.896750591 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.893183977 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.892547831 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.889940474 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.895392836 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.894721958 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.892071049 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.89256918 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.894805259 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.896841187 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.892914067 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.891818083 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.890318203 seconds)
  done (took 58.61669352 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.8923839 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.89239268 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.893786762 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.897039494 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.893026335 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.892153123 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.890124434 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.894867604 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.895036244 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.892623417 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.892045146 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.89439556 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.897183507 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.892435112 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.892638648 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.89080835 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.897322826 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.895059142 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.892377633 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.892723388 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.895629358 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.896738771 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.893555208 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.892240887 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.892134606 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.896401833 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.89521704 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.893067076 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.893140801 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.897246339 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.897924806 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.893952546 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.892795778 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.892119125 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.897745689 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.895644632 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.893708903 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.897382163 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.908317937 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.898087019 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.893896514 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.892545993 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.891794429 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.89608525 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.894765305 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.892782794 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.892572128 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.897935225 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.899081758 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.894540595 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.892454964 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.89299908 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.89889697 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.895635936 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.894369683 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.893884581 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.900396407 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.897990618 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.89578378 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.893708958 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.894816645 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.899295714 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.89638063 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.895477565 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.894329124 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.898941377 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.898894931 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.895907996 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.894916977 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.895034747 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.899842225 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.897224893 seconds)
  done (took 138.279185155 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.897867326 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.899192552 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.896441653 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.896324371 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.8936439 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.899138398 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.898405903 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.896288287 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.896554265 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.897745718 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.901176936 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.896824382 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.896911535 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.895447269 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.899220402 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.898905419 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.896592881 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.896176152 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.899091712 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.902407056 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.898197339 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.896092171 seconds)
  done (took 43.578319776 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.900585279 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.899216286 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.897217305 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.896443693 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.899176201 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.901579371 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.897389306 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.896509038 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.895821427 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.902006091 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.899805908 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.897988988 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.897681454 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.90038524 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.902903601 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.899812836 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.897343149 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.895961869 seconds)
  done (took 36.006143616 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.900376959 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.89752592 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.897806525 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.901002494 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.903322111 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.898581887 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.897419868 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.897357111 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.903512591 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.90128736 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.898410471 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.897748834 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.900665818 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903617215 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.899655075 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.898744417 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.896944678 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.898606131 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903325379 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.899769135 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.898624414 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.897727455 seconds)
  done (took 43.626110821 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.89993173 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.898371958 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.896885942 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.902070554 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.901845999 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.899515047 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.898502412 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.900846883 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.904167553 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.902798057 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.89873112 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.897763603 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.897115003 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.902008366 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.901470062 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.899553099 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.898924614 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.902755089 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.904677423 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.900443454 seconds)
  done (took 39.844754019 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.901291605 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.906215317 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.905128319 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.903310211 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.902147216 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.905454769 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.907204883 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.904668665 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.902651084 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.900775942 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.902008634 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.907698873 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.904205895 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.903181602 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.902530555 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.905630823 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.908696905 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.904512065 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.903238716 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.901884297 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.904920935 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.908244442 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.904948617 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.903188448 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.902595748 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.904927858 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.908323222 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.905497799 seconds)
  done (took 55.157607951 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.897732114 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.904726267 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.902828768 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.90159901 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.901183901 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.905019499 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.906226766 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.902625111 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.901786321 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.90053141 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.902940033 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.905345367 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.902838957 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.901869412 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.903602342 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.904945205 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.902232548 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.901507401 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.901040247 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.899058939 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.901898891 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.903187639 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.902454609 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.90142383 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.901917959 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.906461717 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.906343614 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.90333857 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.902247495 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.901218656 seconds)
  done (took 58.914408468 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.927427306 seconds)
    (2/2) benchmarking "in"...
    done (took 1.924267652 seconds)
  done (took 5.691973269 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.905305146 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.90760588 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.903583117 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.903141705 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.901774924 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.90561595 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.907851967 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.904894236 seconds)
  done (took 17.076054999 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.905823765 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.916229483 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.905401648 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.904118345 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.905852811 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.912480925 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.909026449 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.910364865 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.909452834 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.905859427 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.911762445 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.917131753 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.920307888 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.912446127 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.90443474 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.904418519 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.908512407 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.914207803 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.910171703 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.904979957 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.911379813 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.908701794 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.910945212 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.910320955 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.904120638 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.910659128 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.916739412 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.912925532 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.912912455 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.905607514 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.916343705 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.904386679 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.910213852 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.914096095 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.90916812 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.904930573 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.914614632 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.90587564 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.911651637 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.907477634 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.910950346 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.910835755 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.910613004 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.919991491 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.914445318 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.906688276 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.906384696 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.907460506 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.907092386 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.918514076 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.918232447 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.90939016 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.906753736 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.906667673 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.916217285 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.912950477 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.909472671 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.911341011 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.914739948 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.918068568 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.918575616 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.936348498 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.920718341 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.909206309 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.909281908 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.9249402 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.946371455 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.91468461 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.91214571 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.906462051 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.916787082 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.908592923 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.91115215 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.907873565 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.924640831 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.919403364 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.910602155 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.912196017 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.911502705 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.909507439 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.911832518 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.909416189 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.913183157 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.91486707 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.92450788 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.941737079 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.909396549 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.910350508 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.916276726 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.914075921 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.917324035 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.913655218 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.907774697 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.906641012 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.915666441 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.914516462 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.911389725 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.91079101 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.908454198 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.923595983 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.912930083 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.910584522 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.915930683 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.920431157 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.906344066 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.915226659 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.916281003 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.915015702 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.920419338 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.910709506 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.913445249 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.913525671 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.914322352 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.917260268 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.908289021 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.914957588 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.922476079 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.924584202 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.913849735 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.917456444 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.915449876 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.913648782 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.926638825 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.948370446 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.911867273 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.916742889 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.918461467 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.925806212 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.916585408 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.913020581 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.918236908 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.909724196 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.909626557 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.914529391 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.913531265 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.917603332 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.91097833 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.912736003 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.908726482 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.951813453 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.930401676 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.918686707 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.917785622 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.913886625 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.917840311 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.911882163 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.921136447 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.925207157 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.913928577 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.913570029 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.910021426 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.914973525 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.917189255 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.918210382 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.911501862 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.910901295 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.91283848 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.916354865 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.92288976 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.916698811 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.911634171 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.913307773 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.914286234 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.915683799 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.918515753 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.914141545 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.914415608 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.913972244 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.915376604 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.919748641 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.92232155 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.915520376 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.919938651 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.911463846 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.909983185 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.918643248 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.914895797 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.912661861 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.919472931 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.928812157 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.920688746 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.930946693 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.924630197 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.924029806 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.914671801 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.916146863 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.914289387 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.919696638 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.920012765 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.913181995 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.913389982 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.920256666 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.939947373 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.931187965 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.925073368 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.918022582 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.920752328 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.917163799 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.920633261 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.913305143 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.921726992 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.921752546 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.916720815 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.916080384 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.912770436 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.922367749 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.919929211 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.916505976 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.921311888 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.91577927 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.911729769 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.918453543 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.919761541 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.921332234 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.914689713 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.913842941 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.914148987 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.916668029 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.931617653 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.922551427 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.913506751 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.917169269 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.91774634 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.917559735 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.919542833 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.920599154 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.921579353 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.914814324 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.917457527 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.928398898 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.92232548 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.91908231 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.915574719 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.913967134 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.918447365 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.915183559 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.925889625 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.927091201 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.92181009 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.914081685 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.922927157 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.917628101 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.926995008 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.921880708 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.919795228 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.917948822 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.919169562 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.916793606 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.920057661 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.930521891 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.915847888 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.919357449 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.915356175 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.920129855 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.922230587 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.926443514 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.920166683 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.923821257 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.928323253 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.92252559 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.917678423 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.924263852 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.924095372 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.919160638 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.921184759 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.920191731 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.934833927 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.935263089 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.922083602 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.91729865 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.919268915 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.922309304 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.915373824 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.922463808 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.932397711 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.920569065 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.919283398 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.921344067 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.919182029 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.921877336 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.932197289 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.9256222 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.92353084 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.921423836 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.920857294 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.919590812 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.920867285 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.927146746 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.921113039 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.922648678 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.921177343 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.916429127 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.92505699 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.92296777 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.931547487 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.917454121 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.92129887 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.92707263 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.920215451 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.922495531 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.92557445 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.918814266 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.922182151 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.92223871 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.920203283 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.924959646 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.925758414 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.927775644 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.93500838 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.925877728 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.929585242 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.922737196 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.936891638 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.924655933 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.919723262 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.921508133 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.92664945 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.932180119 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.921195353 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.925107573 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.93385183 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.921553633 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.920778932 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.925854432 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.917413915 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.926392384 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.92638243 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.923579098 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.9289261 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.925829677 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.919151941 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.925785583 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.925657535 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.92385078 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.926369514 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.924436056 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.923605065 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.919723422 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.923523629 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.926877373 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.924798851 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.922999661 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.922450555 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.919618781 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.922561028 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.936953393 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.927786776 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.923472608 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.927549811 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.920574745 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.932099797 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.926272873 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.928090393 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.924857164 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.921906394 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.924798459 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.92085774 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.924703839 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.927156225 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.925432394 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.925265294 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.937553583 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.931377548 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.924621183 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.924049964 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.927507408 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.928809124 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.937463491 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.951442564 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.924639105 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.927799381 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.926473177 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.936860029 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.931736717 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.934521548 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.929661848 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.934698347 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.926786854 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.920652821 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.933183989 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.945733582 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.927026213 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.922913014 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.922773741 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.93054243 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.925223637 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.925865698 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.930051143 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.930767089 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.925188697 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.938745081 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.921850103 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.923514054 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.929170584 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.928229575 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.927685492 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.922562482 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.92843745 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.927814387 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.926288347 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.932049043 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.933397748 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.933333442 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.923662209 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.931206669 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.93731179 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.924306383 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.929477172 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.931125274 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.928392978 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.930491603 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.926585776 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.922945871 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.929959843 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.926479622 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.926008527 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.931261344 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.937074351 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.928152725 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.920919543 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.923277567 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.932939183 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.92577909 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.927256219 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.928577711 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.936521433 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.931005504 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.941344714 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.942640255 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.93059443 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.927586307 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.937298477 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.937639181 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.927290965 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.9230564 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.93165605 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.935264364 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.932480801 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.930246765 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.928364357 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.92786472 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.935284445 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.930052256 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.931419686 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.929748191 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.926288776 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.932107031 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.930578535 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.933549003 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.928752829 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.929965067 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.928928217 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.930680489 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.930672614 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.931795964 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.92768606 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.929481572 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.937176542 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.935819328 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.930838221 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.926485923 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.9265578 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.92992172 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.927361385 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.930008485 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.929906505 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.928760119 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.926915737 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.934712485 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.93728774 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.928185195 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.937377603 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.933752562 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.93604149 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.930306335 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.932747024 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.928842676 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.925464959 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.941061301 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.931718701 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.932013203 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.929771397 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.928209045 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.935768996 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.930411981 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.9386651 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.935620137 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.933239441 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.928417632 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.936126363 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.94012017 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.934069146 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.933940823 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.941509682 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.940617955 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.935618952 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.928825662 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.928267722 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.928150014 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.92926096 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.937672809 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.938051767 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.938588142 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.933159284 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.934211165 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.932001657 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.933148912 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.926330343 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.93131368 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.941011208 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.94646079 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.941617847 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.929353573 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.933996039 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.931384075 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.937658018 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.947691078 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.937153114 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.935098765 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.932206987 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.934503609 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.930732222 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.93974961 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.93922903 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.939331661 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.935874978 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.945711249 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.954784611 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.935666558 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.944328709 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.970886622 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.931362572 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.935637372 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.93829051 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.936541029 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.934754914 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.934973987 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.932720741 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.93928912 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.931497958 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.930661542 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.946045949 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.934296102 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.931524417 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.933467795 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.932946356 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.940109253 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.931715949 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.944916038 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.939354312 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.934351007 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.933152413 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.934457182 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.930560395 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.929029085 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.92851347 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.939643043 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.935272532 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.936649929 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.944830048 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.933948225 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.935349264 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.948227334 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.946443748 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.937607714 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.937125394 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.938251025 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.940906366 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.938734594 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.931518399 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.936786536 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.93929024 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.943113848 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.946805666 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.9401875 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.937070089 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.936451711 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.932355893 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.933819565 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.94991926 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.950377056 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.939890889 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.939890756 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.945080725 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.932935708 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.943496596 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.941321955 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.933761917 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.936911706 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.938698225 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.937660344 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.933976013 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.933962221 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.94104862 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.94292119 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.935627008 seconds)
  done (took 1148.795551403 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.937370932 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.934324427 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.932602504 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.931816313 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.931464748 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.930467581 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.937349914 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.937429709 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.936089205 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.934187734 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.932923126 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.932456672 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.932636884 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.935358027 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.94056698 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.938652068 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.936648192 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.933255885 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.932872947 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.932813261 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.931587258 seconds)
  done (took 42.493626169 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.937722467 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.934800208 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.934581185 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.933790089 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.932597876 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.934693062 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.938163452 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.940283805 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.937632707 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.934183889 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.934071738 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.933542072 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.931182914 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.932449276 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.937633991 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.939216 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.938772305 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.934800701 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.934625563 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.933857059 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.933448554 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.936951555 seconds)
  done (took 44.449326018 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.938999581 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.937233458 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.939120364 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.933633981 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.932728522 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.940971917 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.939059605 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.940948279 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.936669575 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.937082169 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.94742001 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.945041245 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.934246165 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.94201795 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.941329966 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.943521377 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.057448335 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.94200308 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.940561544 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.935653372 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.93789881 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.94453903 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.933488109 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.935791638 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.939150685 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.943630171 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.938464312 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.9361225 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.936219412 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.938222297 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.943431782 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.938477694 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.945011601 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.948754103 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.940232048 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.938608809 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.944144607 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.939064245 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.935533271 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.934470195 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.955901518 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.971575809 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.939859887 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.943311661 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.94951684 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.937496115 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.937226339 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.944884693 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.946476473 seconds)
  done (took 97.095438938 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.941402149 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.93950171 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.936966844 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.935783251 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.936851781 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.935686176 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.937956051 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.941317888 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.941427613 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.938217317 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.93789623 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.938199259 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.937522128 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.937029516 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.941211512 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.945274308 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.943622574 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.940668258 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.937961906 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.937659526 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.938808682 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.937510622 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.937403404 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.942131536 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.942450233 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.940811049 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.939564414 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.938598728 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.938073627 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.938823633 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.939203387 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.941477001 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.945525931 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.943935904 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.939987549 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.939146985 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.938510129 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.938429328 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.937313262 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.937467117 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.942751917 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.943560326 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.940816895 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.939423576 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.938879342 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.939891529 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.938868451 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.940063341 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.944446016 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.94552865 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.943504104 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.940871021 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.938629921 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.939525258 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.939114769 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.939048206 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.94188039 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.943530453 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.944047727 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.942355753 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.940096055 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.940464042 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.941366044 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.940855732 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.941705541 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.944078196 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.947683502 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.944880477 seconds)
  done (took 133.821890407 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.943359629 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.942405783 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.942702434 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.941935877 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.948212226 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.947812842 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.946647692 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.944486275 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.943895379 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.944357243 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.943913202 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.941472273 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.945596274 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.947318967 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.950191528 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.948562097 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.944609302 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.944549914 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.944735328 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.94468648 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.942547904 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.942473865 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.948381216 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.94925908 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.947730836 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.944792945 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.945352808 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.944695215 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945050481 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.944825145 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.945844035 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.947943011 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.950534949 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.949720466 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.947233226 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.945421419 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.94544711 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.944535903 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.944944646 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.942826853 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.946161714 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.948438443 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.950100429 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.947315448 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.946269826 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.945492199 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.946457781 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.945677292 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.942506292 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.946588429 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.950991031 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.952375837 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.949638061 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.947874064 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.946418674 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.943593363 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.946528622 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.945895652 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.944343264 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.947433473 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.949766861 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.948064353 seconds)
  done (took 122.533247071 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.943493279 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.943140899 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.943178607 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.94451786 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.9453452 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.948991114 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.948898058 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.945856497 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.944672474 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.94408099 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.943724543 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.94358377 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.944274784 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944742954 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.947356717 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.949711949 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947604952 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.945554939 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.945410801 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.945837944 seconds)
  done (took 40.787226191 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.946024639 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.949806199 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.949720017 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.948323535 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.945163523 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.945590062 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.94765842 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.944117942 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.943249004 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.943349514 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.948251193 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.950072598 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948311101 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.946536653 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.945690356 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.946141351 seconds)
  done (took 33.022599793 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.947359168 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.949177399 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.953585935 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.951989323 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.946893079 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.945600986 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.945963094 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.945061674 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.944264017 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.944350923 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.946605194 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.949628685 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.951707467 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.951337531 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.946655049 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.946427763 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.946392257 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.944951659 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.945329886 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.949032957 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.950796172 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.952189689 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.95162659 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.949176198 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.947610441 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.947165494 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.945715068 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.946218523 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.944661153 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.945849477 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.94978409 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.952131269 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.949780452 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.948308068 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.949553504 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.947202757 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.946523282 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.945605147 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.946017259 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.950311761 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.954230697 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.952545445 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.952229622 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.949199376 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.947825656 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.947098064 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.947148828 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.946135565 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.946048142 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.949638911 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.95223037 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.954770618 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.950713699 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.948824774 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.948310999 seconds)
  done (took 109.042827016 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.947776892 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.949243888 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.954045729 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.954731905 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.953069231 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.949940025 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.949372728 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.94855576 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.948015604 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.947915159 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.947203516 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.948629749 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.952295203 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.954234719 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.951648157 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.949830057 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.949798161 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.948824625 seconds)
  done (took 36.983700198 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.948004367 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.95179239 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.955302476 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.954360865 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.953343606 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.949945975 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.949649376 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.948811598 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.948699164 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.947402224 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948245645 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.950394331 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.952152352 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.954231596 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.952433678 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950753776 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.949782527 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.949661397 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.948937771 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.948459106 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.948343844 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.952978168 seconds)
  done (took 44.793980915 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.954021782 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.951087301 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.969705209 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.97862496 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.976592661 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.996099065 seconds)
  done (took 13.71181944 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.949170611 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95255593 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.954149702 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.955363605 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.953406388 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.952564024 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.950839755 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.951020228 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.950454786 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.950719769 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95050737 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.952198606 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954644668 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957772134 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.957402778 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.954176627 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.951833458 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.950692739 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.951271032 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.951741903 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.951152344 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.950981322 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.952853812 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954594501 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.958216212 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955626157 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9534976 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.952278078 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.952145013 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.952115503 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.951816241 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.951155041 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.952210287 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956177502 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.9590904 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.958646728 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.957107811 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95438701 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.952762419 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.953238621 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.951819291 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.9515524 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.950903912 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.951661681 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955236627 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.957425333 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.957446698 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.955814751 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.954063786 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.953973623 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.953185802 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95289019 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.952255668 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.952022009 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.953998663 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956884696 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.957995556 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.958907952 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.95746271 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.954304519 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954038753 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.953114831 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.954037256 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.953395672 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95245386 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.952481726 seconds)
  done (took 130.825351693 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957964934 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.956314169 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.954508917 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.955295119 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.954041351 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.954808388 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.95364334 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.953629442 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954568584 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.958489318 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959706068 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.959859541 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.958243515 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.955506052 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.954612504 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955751906 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.954974545 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.954205716 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.953621865 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.953960299 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957758355 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957760789 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95994905 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958661236 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956636671 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.956024881 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.955266526 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.955655031 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.954866685 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.955022819 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955603918 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957408367 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.959995891 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.961647141 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96057129 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.959665918 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.957360273 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956763181 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95576442 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.95647336 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955232864 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.955102456 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.95464344 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.955011441 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.959222608 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.96031418 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.960453834 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.95925389 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.957304938 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.956375413 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956459718 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.956186363 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956773924 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.956335706 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.95587128 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.958373137 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96138524 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.962991848 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.962369188 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.959960541 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.957674146 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.956994465 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.957127996 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.956907186 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95619202 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.956220489 seconds)
  done (took 131.055948299 seconds)
done (took 2675.244553298 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.997950547 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.039599953 seconds)
  done (took 15.930444001 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.094479063 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.007735949 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.111804911 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.053689133 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.964789904 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.996423514 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.961097431 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.963589792 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.048317342 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.964169497 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.04610182 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.964485672 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.963688674 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.965052802 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.966380155 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.964212756 seconds)
  done (took 53.970124243 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.966440052 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.966872103 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.962510096 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.961655377 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.985389428 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.064618372 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.990553118 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.968235937 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.982466199 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.013776249 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.989436237 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.971136653 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.978715461 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.973362684 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.080336601 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.025415518 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.04032097 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.062486707 seconds)
  done (took 37.873987879 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.065510726 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.982334698 seconds)
  done (took 10.946527363 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.986639383 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.976025354 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.973621717 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.969059456 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.996001753 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.996002628 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.985587682 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.975936466 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.984987769 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.984650223 seconds)
  done (took 71.75518762 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.967594971 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.966526916 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.262299351 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.981363181 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.980394613 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.003078564 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.970100908 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.006531898 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.974607017 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.96698308 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.981144379 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.267487415 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.979488321 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.964090624 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.390800363 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.987800671 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.975564235 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.005253296 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.014489369 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.974683475 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.975521906 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.971113142 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.211549654 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.778104273 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.968218477 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.978372519 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.973002615 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.961966681 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.961740202 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.964602802 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.967939641 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.963991238 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.972257639 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.970068473 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.984544454 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.975048402 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.597791018 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.987336044 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.973215271 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.054109409 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.024542747 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.973267796 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.963844431 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.972251441 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.963106602 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.975095269 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.708529263 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.049775596 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.967008046 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.142183827 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.46436484 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.989234955 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.115419401 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.112021264 seconds)
  done (took 139.135378345 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.967133933 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.410900796 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.112169705 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.966705274 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.32448615 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.177449326 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.748659965 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.010180585 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.965540734 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.186467651 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.130623623 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.098574239 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.971580556 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.972522685 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.97436305 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.970673576 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.143918488 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.036960798 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.966128932 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.969574287 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.995734641 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.205210395 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.089813741 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.970924018 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.987349141 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.181105556 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.018268879 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.095784765 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.367629802 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.969415725 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.032942614 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.9717377 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.96930673 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.967470231 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.021399666 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.078173032 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.074624701 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.972062452 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.576386571 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.967574949 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.620608548 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.168966205 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.080968119 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.096558528 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.115395627 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.176572397 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.655122673 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.967547342 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.700859402 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.131920048 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.180719965 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.192140882 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.065027136 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.969535232 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.389125285 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.973736647 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.973000748 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.204272676 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.115844271 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.091156303 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.970074777 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.970113255 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.969278238 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.203000113 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.971834561 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.081784941 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.971640514 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.974582671 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.090787109 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.094898024 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.111791491 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.189733662 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.005790734 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.915593993 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.266245239 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.174896978 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.032718395 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.198202356 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.972624702 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.971980381 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.070780712 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.423564969 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.128952867 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.204003732 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.274738909 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.005078882 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.492067456 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.968789768 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.190598425 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.117065964 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.286802426 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.11219869 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.022669244 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.832171422 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.965950504 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.968927751 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.882666391 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.093688471 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.975495706 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.509707458 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.216041202 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.060070384 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.988848663 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.439571237 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.076823309 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.971149085 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.585996099 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.969605425 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.185215578 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.01877456 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.974230925 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.976852557 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.125897124 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.939195167 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.972715805 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.31741553 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.032131512 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.971877341 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.129662843 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.973526398 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.229262271 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.692615929 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.206479224 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.978192883 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.010768697 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.1455703 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.111666357 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.972713474 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.3031405 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.213616718 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.067086836 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.281845966 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.97508768 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.975953664 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.270426396 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.03644598 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.977888259 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.146528375 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.903342887 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.131159381 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.972746139 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.320902606 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.998484994 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.028927835 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.978013723 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.235136931 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.00704486 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.019464602 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.972367212 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.106534562 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.972942272 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.04792711 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.133064638 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.978336213 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.977256818 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.849923948 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.974072603 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.122565307 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.199477777 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.991650806 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.04766374 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.363689158 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.973830112 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.081589416 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.000551472 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.396897048 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.516150081 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.134286969 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.629742781 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.24636479 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.974022471 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.206359604 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.247317712 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.97560416 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.975792363 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.76330955 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.400111141 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.977306191 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.13271758 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.57499974 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.334214598 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.187983577 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.974375527 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.024386433 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.974315729 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.22436853 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.502532437 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.189897017 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.979606393 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.978881052 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.978434803 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.97822543 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.175900652 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.006762588 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.680698567 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.113806499 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.239887588 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.201906909 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.280454875 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.0310226 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.974567342 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.284737092 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.977609179 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.039395144 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.976332076 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.98912144 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.214777653 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.979149895 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.277394522 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.316865487 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.18789034 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.021586748 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.975909119 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.976238656 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.976448052 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.137873314 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.086018156 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.983101829 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.115639413 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.019749546 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.094899494 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.178211087 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.252799836 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.917956445 seconds)
  done (took 910.131723745 seconds)
done (took 1241.63287902 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.97329612 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.97677671 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.976851949 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.97759167 seconds)
  done (took 29.810341676 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.974385951 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.97329299 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.973598922 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.97607435 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.977194703 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.980978044 seconds)
  done (took 13.770735086 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.977714091 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.979051575 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.9773173 seconds)
  done (took 22.841775262 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.383417533 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.284814959 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.070242342 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.142890854 seconds)
  done (took 10.80737709 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.979784073 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.980167981 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.981804422 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.980029246 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.979413557 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.981962931 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.982649551 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.980668995 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.979963256 seconds)
  done (took 19.742806535 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.450666434 seconds)
done (took 105.336217772 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.108532039 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.297548837 seconds)
    (3/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.230288694 seconds)
    (4/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.469363148 seconds)
    (5/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.002679948 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.120127529 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.141131466 seconds)
    (8/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.981868353 seconds)
    (9/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.131217025 seconds)
    (10/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.122989739 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.205552198 seconds)
    (12/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.889887445 seconds)
    (13/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.132625124 seconds)
    (14/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.976742535 seconds)
    (15/341) benchmarking ("collect", "all", Float32, true)...
    done (took 3.834165139 seconds)
    (16/341) benchmarking ("sort", Int8, false)...
    done (took 5.586935593 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.001974651 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.815958452 seconds)
    (19/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.270283968 seconds)
    (20/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.520377996 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.995701422 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.105095979 seconds)
    (23/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.986223764 seconds)
    (24/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.105537557 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.996413108 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.976341655 seconds)
    (27/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 8.725821381 seconds)
    (28/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.354768566 seconds)
    (29/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.448055441 seconds)
    (30/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.306277163 seconds)
    (31/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.192622028 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.366563316 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.996833536 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.104991784 seconds)
    (35/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.142307183 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 6.981043901 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 4.394942672 seconds)
    (38/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.242209754 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.29919194 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.818431258 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.03204598 seconds)
    (42/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.143505473 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.855982693 seconds)
    (44/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.989657764 seconds)
    (45/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.139777507 seconds)
    (46/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.514025643 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.500800891 seconds)
    (48/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.47319832 seconds)
    (49/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.345098927 seconds)
    (50/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.996169047 seconds)
    (51/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.118821474 seconds)
    (52/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.225730951 seconds)
    (53/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.990981687 seconds)
    (54/341) benchmarking ("perf_countequals", "Int8")...
    done (took 4.07882165 seconds)
    (55/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.137081684 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.296399512 seconds)
    (57/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.987603683 seconds)
    (58/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.935376155 seconds)
    (59/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.982003356 seconds)
    (60/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 3.577352917 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.131336569 seconds)
    (62/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.137707296 seconds)
    (63/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.761134814 seconds)
    (64/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.146468453 seconds)
    (65/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.182390058 seconds)
    (66/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.728038955 seconds)
    (67/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.008943323 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 1.990753352 seconds)
    (69/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.115738636 seconds)
    (70/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.475535494 seconds)
    (71/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.98839936 seconds)
    (72/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.988153886 seconds)
    (73/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.987827995 seconds)
    (74/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.979338143 seconds)
    (75/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.245357259 seconds)
    (76/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.199395789 seconds)
    (77/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.052597457 seconds)
    (78/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.55494939 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.999080363 seconds)
    (80/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.978429595 seconds)
    (81/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.354202876 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.050472405 seconds)
    (83/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.392660917 seconds)
    (84/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.99340995 seconds)
    (85/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.974587827 seconds)
    (86/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.467227321 seconds)
    (87/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.322936343 seconds)
    (88/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.264204483 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.012017246 seconds)
    (90/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.321682897 seconds)
    (91/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.983835135 seconds)
    (92/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.492255489 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.151141714 seconds)
    (94/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.013943711 seconds)
    (95/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.982869733 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.146298848 seconds)
    (97/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.281842519 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 6.985486509 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 4.980818904 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.236431291 seconds)
    (101/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.202381679 seconds)
    (102/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.996096045 seconds)
    (103/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.873150913 seconds)
    (104/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.153154122 seconds)
    (105/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.558540225 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.504783159 seconds)
    (107/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.987567357 seconds)
    (108/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.242934596 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.982580058 seconds)
    (110/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.889060897 seconds)
    (111/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.963797869 seconds)
    (112/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.469079034 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.989388927 seconds)
    (114/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.398160568 seconds)
    (115/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.435324332 seconds)
    (116/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.336176333 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.985382862 seconds)
    (118/341) benchmarking ("sort", BigInt, false)...
    done (took 8.689790141 seconds)
    (119/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.203953284 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.15862103 seconds)
    (121/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.123437029 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.100887198 seconds)
    (123/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.121365465 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.991130976 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.34720562 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.116041485 seconds)
    (127/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.157675637 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.128037143 seconds)
    (129/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.982917451 seconds)
    (130/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.168607988 seconds)
    (131/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.515026875 seconds)
    (132/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.171006419 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.010932748 seconds)
    (134/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.992227526 seconds)
    (135/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.286782165 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.570408863 seconds)
    (137/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.227098981 seconds)
    (138/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.286959464 seconds)
    (139/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.335223021 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.04938291 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.102383492 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.986291393 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.291331935 seconds)
    (144/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.982714217 seconds)
    (145/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.003196325 seconds)
    (146/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.329171181 seconds)
    (147/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.308278131 seconds)
    (148/341) benchmarking ("sort", Bool, false)...
    done (took 2.208368956 seconds)
    (149/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.000164395 seconds)
    (150/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.983244171 seconds)
    (151/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.997048228 seconds)
    (152/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.98600044 seconds)
    (153/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.20690964 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.407718708 seconds)
    (155/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.997990112 seconds)
    (156/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.635129385 seconds)
    (157/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.002056234 seconds)
    (158/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 1.999461452 seconds)
    (159/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.089237996 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.993903442 seconds)
    (161/341) benchmarking ("sort", Int64, false)...
    done (took 8.561651605 seconds)
    (162/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.262609445 seconds)
    (163/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.995613651 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.231713364 seconds)
    (165/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.415645754 seconds)
    (166/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.074421629 seconds)
    (167/341) benchmarking ("sort", Float32, false)...
    done (took 6.663706909 seconds)
    (168/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.898662769 seconds)
    (169/341) benchmarking ("sort", Float64, false)...
    done (took 6.698416023 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.849340326 seconds)
    (171/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.202323491 seconds)
    (172/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.133504341 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.221425778 seconds)
    (174/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.371143984 seconds)
    (175/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.160345741 seconds)
    (176/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.112323051 seconds)
    (177/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.012699729 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.339865404 seconds)
    (179/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.325565878 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.99393186 seconds)
    (181/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.676321745 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.019332021 seconds)
    (183/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.985424451 seconds)
    (184/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.314204887 seconds)
    (185/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.251299826 seconds)
    (186/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.155545738 seconds)
    (187/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.300885945 seconds)
    (188/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.425013995 seconds)
    (189/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.998381895 seconds)
    (190/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.261080244 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.465556978 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.232434342 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.007325146 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.12527064 seconds)
    (195/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.260467416 seconds)
    (196/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.994055622 seconds)
    (197/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.932282994 seconds)
    (198/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.234355337 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.48203263 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.993651236 seconds)
    (201/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.517533091 seconds)
    (202/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.515726924 seconds)
    (203/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.351671331 seconds)
    (204/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.156830316 seconds)
    (205/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.988438066 seconds)
    (206/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.181953995 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.785554812 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.019203323 seconds)
    (209/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.390198882 seconds)
    (210/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.009632362 seconds)
    (211/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.001594557 seconds)
    (212/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.131724436 seconds)
    (213/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.141380482 seconds)
    (214/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.032900133 seconds)
    (215/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.198493601 seconds)
    (216/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 6.99519403 seconds)
    (217/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 4.704873302 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.115949522 seconds)
    (219/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.440191002 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.010281 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.304215867 seconds)
    (222/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.996231938 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.302176436 seconds)
    (224/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.00132564 seconds)
    (225/341) benchmarking ("map", identity, Bool, true)...
    done (took 4.861813642 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.240338399 seconds)
    (227/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.026106165 seconds)
    (228/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.499259709 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.52140207 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.46987852 seconds)
    (231/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.626407417 seconds)
    (232/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.084432833 seconds)
    (233/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.033010926 seconds)
    (234/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.13843254 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.472855389 seconds)
    (236/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.295826776 seconds)
    (237/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.401403334 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.119479744 seconds)
    (239/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.411600301 seconds)
    (240/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.14056113 seconds)
    (241/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.128180958 seconds)
    (242/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.481048358 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.817699856 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.412220931 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.000686875 seconds)
    (246/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.139911636 seconds)
    (247/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.092075694 seconds)
    (248/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.023558595 seconds)
    (249/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.996051267 seconds)
    (250/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 3.794704362 seconds)
    (251/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.008142525 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.987837467 seconds)
    (253/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.135549738 seconds)
    (254/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.998099365 seconds)
    (255/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.537579074 seconds)
    (256/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.333251923 seconds)
    (257/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.6814548 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 6.996306782 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 4.001877246 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.125121129 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.270820624 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.37082093 seconds)
    (263/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.998022128 seconds)
    (264/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.343187909 seconds)
    (265/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.50417436 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.08256916 seconds)
    (267/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.136991685 seconds)
    (268/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.990427469 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.528013593 seconds)
    (270/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.152736678 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.188131824 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.011926931 seconds)
    (273/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.262447324 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.516303254 seconds)
    (275/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.05933296 seconds)
    (276/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.370729334 seconds)
    (277/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.18405119 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.23964722 seconds)
    (279/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.006940859 seconds)
    (280/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.817248006 seconds)
    (281/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.518221666 seconds)
    (282/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.00162385 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 3.745816585 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.492522458 seconds)
    (285/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.533890522 seconds)
    (286/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.000565365 seconds)
    (287/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.388858472 seconds)
    (288/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.093513453 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.012708421 seconds)
    (290/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.697143489 seconds)
    (291/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.140343397 seconds)
    (292/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.107262266 seconds)
    (293/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.012562711 seconds)
    (294/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 6.992452261 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.126896878 seconds)
    (296/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.194806088 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.00242518 seconds)
    (298/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.091212093 seconds)
    (299/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.342842857 seconds)
    (300/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.121120157 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.891457043 seconds)
    (302/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.103369898 seconds)
    (303/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.284796542 seconds)
    (304/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.35515592 seconds)
    (305/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.431585583 seconds)
    (306/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.103897365 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.501376536 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.844236129 seconds)
    (309/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.014268272 seconds)
    (310/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.264301521 seconds)
    (311/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.300939844 seconds)
    (312/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.649022132 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.387989927 seconds)
    (314/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.003686672 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.09393963 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 4.076128337 seconds)
    (317/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.158509421 seconds)
    (318/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.156343077 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 6.994395555 seconds)
    (320/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 4.658897238 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.185370537 seconds)
    (322/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.142398579 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.086560838 seconds)
    (324/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.367810835 seconds)
    (325/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.305469947 seconds)
    (326/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.723140689 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.4265785 seconds)
    (328/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.29169822 seconds)
    (329/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.274787369 seconds)
    (330/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.256929959 seconds)
    (331/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.22678539 seconds)
    (332/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.273487774 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.412348566 seconds)
    (334/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.369173923 seconds)
    (335/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.13156923 seconds)
    (336/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.003768425 seconds)
    (337/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.101245087 seconds)
    (338/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.439860668 seconds)
    (339/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.452477087 seconds)
    (340/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.419631457 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.970482922 seconds)
  done (took 1176.769079295 seconds)
done (took 1178.822156975 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.029964012 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.999441278 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.575101624 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.015480506 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.999524098 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.001255718 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.551632869 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.037421673 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.008691348 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.553583885 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.020483716 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.002017615 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.011180073 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.014671172 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.008276424 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.010801831 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.004504361 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.023234026 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.009522103 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.001476602 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.057748966 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.002083137 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.997649263 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.044906312 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.9997427 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.007300771 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.022899845 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.065192662 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.065509188 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.003351789 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.007691855 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.399785322 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.065570964 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.006094395 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.008177401 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.008248401 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.005497197 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.008438191 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.02577254 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.011264944 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.004577877 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.014635704 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.008243486 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.007395158 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.006361472 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.005930068 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.007197042 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.101345028 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.010103928 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.408009405 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.077842639 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.025361115 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.065415623 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.003197869 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.001332422 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.001709023 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.065529128 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.004786568 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.004489021 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.407875119 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.116487982 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.009322083 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.407947305 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.07881862 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.013176834 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.012094126 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.001200581 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.026075804 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.398608047 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.606968685 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.03952472 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.025629264 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.004129861 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.004989474 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.012968312 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.556623492 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.023087011 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.684812495 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.033228431 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.01009999 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.006183109 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.004586559 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.002203251 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.007189432 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.021471295 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.002127101 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.006247391 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.007929114 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.012717862 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.400938004 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.059941599 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.574984092 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.015632112 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.027226725 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.021957364 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.683363451 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.036002424 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.020274443 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.004420922 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.399665314 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.057757449 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.02587001 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.004584131 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.008335217 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.097291333 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.027129212 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.026636779 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.002071511 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.02611215 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.009989071 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.003181592 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.014571779 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.026885044 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.016869132 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.01026766 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.004370591 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.015824018 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.011079517 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.02588889 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.018188169 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.01701338 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.018431308 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.010010525 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.056936746 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.024415207 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.012902612 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.099909053 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.009384909 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.09858879 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.01276894 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.011369895 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.004475796 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.409175517 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.062878497 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.028405245 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.010046337 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.029012671 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.028078565 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.011850133 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.01100038 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.016317771 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.01260735 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.057157503 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.010963893 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.035357354 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.05547256 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.013971319 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.010520767 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.022461359 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.01615043 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.026588974 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.009460098 seconds)
done (took 316.942753879 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.052254756 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.369397927 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.071968767 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.006126259 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.074611839 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.058026226 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.00316521 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.002780067 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.003655631 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.417428259 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.003499283 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.004655787 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.39677331 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.010029442 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.055866613 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.00458793 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.006856315 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.286184094 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.011406287 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.067447752 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.025144553 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.012455234 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.010579044 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.419867939 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.00631093 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.015877582 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.06854031 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.009248308 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.268685075 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.011884369 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.022489034 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.266979353 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.061824444 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.007202427 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.006618862 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.005447493 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.074219969 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.011884886 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.053299802 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.053108054 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.067156054 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.018112078 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.015517732 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.037670354 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.015356059 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.012768101 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.009013873 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.013646393 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.006145934 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.009652667 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.264908864 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.008981562 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.007284644 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.00729954 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.006772348 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.012428254 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.007212358 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.011386237 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.065748431 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.014990078 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.060081432 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.418471585 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.426326477 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.009420932 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.0224734 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.011047024 seconds)
  done (took 159.812552325 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.085662965 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.107079336 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.089684652 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.011472438 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.0664587 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.09647962 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.012167197 seconds)
  done (took 16.402623168 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.013677865 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.006706627 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.032590461 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.038218576 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.009238908 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.173226527 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.024183453 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.010266776 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.037458447 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.008180843 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.361380709 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.044462717 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.014488373 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.019958875 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.025736912 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.039345398 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.008399998 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.009285593 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.114228117 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.082353694 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.008113635 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.008102423 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.045333131 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.022126394 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.009072301 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.009342231 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.013191803 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.018807514 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.011173112 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.012387853 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.011611129 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.027397812 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.011554839 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.997237436 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.011856809 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.011893274 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.011991017 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.008914016 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.008163004 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.395523076 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.015492939 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.01344409 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.015393595 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.014862268 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.013457799 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.03860309 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.008753342 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.007992616 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.007790154 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.008765641 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.044762416 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.007939614 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.00792508 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.010035724 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.044290427 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.009611709 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.011905104 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.009230319 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.00972333 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.009531293 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.009793587 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.084250299 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.038660297 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.010574601 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.039849547 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.05370924 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.013493136 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.013196013 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.012014106 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.044515456 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.008446639 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.040723055 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.009732977 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.103954986 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.009622019 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.190465926 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.040657721 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.0189286 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.019594295 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.975229362 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.025610401 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.016611215 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.016111619 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.021082905 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.010517016 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.009413912 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.010275752 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.010092705 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.017618637 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.009722347 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.060185486 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.009762142 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.013197763 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.10125238 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.010662643 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.119319698 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.043956783 seconds)
  done (took 202.217198761 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.019969127 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.016281949 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.031395694 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.016624957 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.014746716 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.02004597 seconds)
  done (took 14.061461812 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.018361576 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.020712151 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.013130724 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.012366852 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.015221176 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.013917054 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.010580618 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.013541854 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.018363766 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.010006366 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.015264083 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.013894834 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.013307008 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.014694293 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.012212682 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.01152887 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.011488796 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.011508119 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.012447422 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.014706052 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.21382164 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.021074368 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.021760073 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.023428249 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.02415188 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.014417489 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.026327169 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.012852194 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.013930887 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.023102896 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.021325438 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.017099315 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.018828176 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.023314232 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.019630294 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.019779309 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.019702432 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.017716339 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.015483587 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.017533434 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.017212373 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.019180169 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.017847028 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.018258086 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.020024457 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.028637386 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.026736189 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.029538565 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.01961138 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.020620155 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.019909934 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.015876083 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.017866714 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.017037263 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.02285531 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.022841014 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.021903187 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.014783679 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.017897286 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.020016868 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.020904867 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.018988582 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.020114265 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.022145902 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.018163615 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.019163352 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.022957081 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.025738468 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.021733231 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.022833299 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.024098355 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.023424219 seconds)
  done (took 147.47843678 seconds)
done (took 541.902138714 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.036120769 seconds)
  done (took 8.979547626 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.277538773 seconds)
  done (took 9.367266438 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.403799204 seconds)
  done (took 14.358019667 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.040611199 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.038342415 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.036556844 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.024225299 seconds)
  done (took 30.103985249 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.277937713 seconds)
  done (took 9.231015858 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.039634654 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.022491171 seconds)
  done (took 16.109008405 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.214681463 seconds)
  done (took 9.175502047 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.247616415 seconds)
  done (took 9.206186445 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.04574545 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.036768587 seconds)
  done (took 16.066271373 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.021308183 seconds)
  done (took 8.97303044 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.451991109 seconds)
  done (took 10.499902385 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.032360067 seconds)
  done (took 9.011892717 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.102909375 seconds)
  done (took 9.055874463 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.788814712 seconds)
  done (took 9.741143195 seconds)
done (took 171.825920026 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.031176177 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.020674118 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.020794237 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.019047997 seconds)
  done (took 30.034907226 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.062265583 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.061629652 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.0606476 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.065584339 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.048593964 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.047947232 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.05879652 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.058501377 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.048665553 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.079043841 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.06407895 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.080743744 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.064632472 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.060684867 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.061956489 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.078254332 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.075029131 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.059992836 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.050469144 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.064682138 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.079713497 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.077885824 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.019385818 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.01916125 seconds)
  done (took 51.40535442 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.225218859 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.093576714 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.192991772 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.064333836 seconds)
  done (took 10.520705124 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.018220433 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.092899839 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.079327131 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.066723237 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.07998788 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.190650002 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.078146276 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.226079299 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.200586955 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.196230374 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.024918269 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.036765722 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.038336439 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.079956101 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.19066552 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.019003034 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.018956958 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.197295024 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.095940366 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.222183946 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.020122394 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.079903044 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.079688284 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.079633297 seconds)
  done (took 52.358055743 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.021450191 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.034443267 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.032549798 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.022578638 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.023732975 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.022905184 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.034981535 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.02565162 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.054033979 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.0294883 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.023575064 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.023825948 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.022783878 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.021543225 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.021191528 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.040986556 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.038159901 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.021322745 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.024366038 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.032120491 seconds)
  done (took 42.519124146 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.019268571 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.020949788 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.256331602 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.186887419 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.021037459 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.02412454 seconds)
  done (took 34.475036896 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.044184497 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.046088553 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.029235756 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.056747959 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.090603778 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.035083656 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.111557659 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.231253655 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.034046301 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.106793259 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.049790627 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.031942218 seconds)
  done (took 26.830920415 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.020113351 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.023021015 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.023122102 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.037201891 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.035505515 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.031764113 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.03657776 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.020969485 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.039853923 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.046774795 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.034215823 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.043373141 seconds)
  done (took 46.341348389 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.215107766 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.181695455 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350681488 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.704009256 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.529090527 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.099009527 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.422395815 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.533224181 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.813549365 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.845243753 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.522352194 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.067970675 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.538272468 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.975337568 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.028523843 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.310436132 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.028000542 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.952867764 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.450521448 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.101700621 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.02950185 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.024111378 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.03041938 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.554828139 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.346061483 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.030966052 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.186273571 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052426071 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.026598359 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.237141592 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.044689783 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.041845402 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.191232035 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.324901708 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.541173327 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.125454308 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.111127622 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.030765036 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.077394438 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.06022358 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.037022376 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.04024116 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.024613431 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.042655186 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.271663763 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.028119853 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.035675314 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.610595231 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.980896332 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.148921725 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203176309 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.712652077 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.067607436 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.96842939 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15965592 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.306637777 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.033077755 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.0271968 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098103673 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.071348868 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.201715156 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.108924129 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215892457 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.976324642 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.529806915 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221338522 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.032972633 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.036154413 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.28022505 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.302198938 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.108222007 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.141380065 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.774914889 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.028704739 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.028632162 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.912621404 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.14376167 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.026763082 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.764819307 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.540830515 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.986521911 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133919863 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.610407991 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035006457 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.025439235 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.040340969 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.609684595 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.982816355 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.113878426 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.097760165 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.35883998 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.031803562 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.033696173 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.061227454 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031162164 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.011970576 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.680603985 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.102123407 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.979599434 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.580402075 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.061935496 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.984237849 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.058425001 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.036304693 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453427951 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083295021 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.784419798 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.640307134 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.311808559 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.60263005 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.037083407 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.02823743 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.112932821 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112192421 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.026123679 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.716045068 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.047738065 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.121550226 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208524309 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.02582056 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.98112119 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.043497665 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195186251 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062289908 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.059127178 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.034621196 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.042935717 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.028215015 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.034001269 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.060694957 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053634794 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.538923865 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.147362186 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.031622248 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.974942177 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.040241343 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.515054527 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.131084562 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.074231724 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454582343 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.62705765 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.505288892 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.993542583 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.886857909 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.487347147 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137784648 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111531397 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.646936559 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.194182417 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.112716598 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.028252912 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.187094076 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.042671042 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.041503988 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.033013338 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.644838354 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.693336997 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.078621299 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.032823533 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.004591176 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.051258412 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.242007237 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.695543179 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.069345073 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.043468207 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.114065623 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.192338949 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.034050993 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.986844342 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392957098 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245322948 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.546916435 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.261775199 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.701165949 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.127940048 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.043131154 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.188685774 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.113408072 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.703825349 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.656968408 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.366222947 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.491226894 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.026339281 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.033316318 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.12378944 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.434300661 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.055634756 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.787462082 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.035359131 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.539819616 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.065054135 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.593256596 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.985226621 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.041713847 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.489678794 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.041077516 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.591389196 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.13801406 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20756302 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.033617968 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.031764013 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042157749 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.81932622 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148523462 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.105724949 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.11480793 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.988277208 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.703101538 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.07841284 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.034562514 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.032385934 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.466994373 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.273163982 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.054229567 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.034440132 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120740013 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.121482047 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.643651745 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.038187335 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.037253184 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.515978092 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.041314858 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.033189339 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.041054415 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.189727013 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076477987 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.092914682 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.162012319 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562196733 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.142827006 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.118260054 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.034088074 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.041136484 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.30307742 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052797911 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.301163123 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.521395456 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.649318577 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.737418151 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.140126485 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.650327489 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.063071258 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.039578334 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.618067154 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.07253635 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035587814 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.201718917 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.73473077 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.173941137 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.083990484 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.126929684 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.032068252 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.493585585 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.629292445 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.116237841 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.96820461 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.157389076 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.041245313 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.219637587 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.921879462 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.037663926 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.54382253 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047911422 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.225301416 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.205641498 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.439495338 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542324725 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.737919406 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.992095687 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.047054212 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.138314549 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.309444305 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.038473984 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.08047017 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675493352 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.713065181 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.822144726 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.574033091 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.268571569 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.189086421 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.491764528 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.142177184 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.051586763 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.973918109 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.240603098 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.997425325 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168871074 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.987325483 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.097256637 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.340136801 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.061903624 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.494122583 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.081856678 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.553217929 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.406990278 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.107444068 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.14560502 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.067455923 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.036494554 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110746324 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.03696562 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.003886495 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.166187859 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.046373033 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.452220127 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08722726 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.084964362 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.044031209 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.62298951 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.070273353 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.044169397 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.585421854 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.07193358 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166021457 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121782549 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.119540137 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.16100699 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.13107964 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.052910541 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.60911439 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.498983024 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.137978788 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614545981 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106837455 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.788073649 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.038074606 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.197550715 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.046395191 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.70219247 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090594909 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.427321624 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.047089398 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.229037573 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350724576 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.138963522 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.048204808 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.993924674 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.618699224 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.102920947 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.516867363 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.042856756 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.79605532 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.531636484 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094199335 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.564837853 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.017729462 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.042507126 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.470192658 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.730019801 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.7877092 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079037246 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042336543 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.177649269 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.22409428 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.167303197 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.76980343 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.0527518 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.067549544 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198002005 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1702593 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.981465182 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.568760062 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.790747373 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.310185507 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.059586234 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.206883478 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.164497895 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.210307355 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.086596654 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120961593 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.789645375 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.500128066 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.153334264 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.994832452 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046808547 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.72107572 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.200806795 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.13322891 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314379615 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.477933391 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.172397376 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.153849546 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.052831946 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.593207038 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.746261521 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.739381398 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.371770636 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.55486806 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623816634 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.785369552 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.792103129 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.206315286 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.157966572 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452232685 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.963494893 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.410069224 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.318122097 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.055330457 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.996614338 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.216977665 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.047850669 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.120679765 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.719515839 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.330575824 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.107436636 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152374193 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.654757968 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.060730476 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077510072 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.268580284 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.069693611 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.065129503 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.047861551 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.578885007 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.43104731 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.066473359 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.00078949 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.79890781 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.996334419 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.205161425 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.053677564 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.085987901 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.836586472 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.132808375 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.20133239 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.570401472 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.162949741 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.086703007 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.995140211 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.830294852 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.03110154 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.735279382 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.827602918 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068032484 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.047622077 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211398539 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.032925112 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097940704 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.054939014 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.353608836 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.311680178 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.510169766 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217501225 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414646938 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.332718645 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.57532114 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.155169686 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.280495199 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.996375973 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.151267381 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.026297359 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.098510173 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125601048 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.045318019 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.05147493 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.28542274 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.173405089 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.191930994 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.126152121 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.144409506 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.06967363 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.166416085 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.195484768 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.050660609 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.052033429 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.04534723 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.310958628 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.050546431 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.012409787 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.207001946 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128280921 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.433140422 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.126151274 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.641276304 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.054037668 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.582941921 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206617807 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.558118803 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051242282 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.146166615 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.116471376 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.047176794 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.514011645 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.693565571 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.215156443 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.301610323 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.075675243 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.075420323 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.097385687 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.0523245 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.169809419 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.593711728 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.424457421 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.045432273 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.511301578 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128716487 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.057658406 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.808904914 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.526253007 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.048514579 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.84651276 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.191330197 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.482773622 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.65096649 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.051082828 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188818051 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.054401656 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.00246769 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.050414063 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.087205267 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.557931838 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.058289216 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.583075037 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.211941688 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191858288 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.055238611 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.05606623 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.063186821 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.210621853 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.642153429 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075736145 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.316559999 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218936825 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.062396126 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.579559822 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.762609237 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.185733459 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.099170612 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.064097046 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.41289614 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.801045758 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.086982685 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.587591083 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212982571 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.051592283 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.279505716 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.297847505 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.054545884 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.241540204 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051705509 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395924361 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.186580532 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.606811967 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.159703833 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.027260377 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.448565251 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.077549729 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.581428139 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.506514956 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144616824 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.055722177 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072758563 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.04822447 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.126012122 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.655604552 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245884333 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.182685392 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.266476189 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.570887501 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.05579633 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.004113997 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.052412019 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079065943 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.054834134 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.004357062 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.121058293 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.905431799 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240112759 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.374742386 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.005190596 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.22382634 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.041181664 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.008382929 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.532161412 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.053268017 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.358404955 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.004299077 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.057728253 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.005897426 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.156801347 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.193770685 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.422379265 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.05678198 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.746079731 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.062622295 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.055601616 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.060057123 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.14506652 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.052555544 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295275098 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.514137555 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.303748009 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.219967342 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.915720502 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.852835494 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.022484627 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09860475 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.054433899 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.608346046 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.153270932 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.24680656 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.135534843 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.032825841 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.583720849 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07746137 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.769355944 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.060686078 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.056699241 seconds)
  done (took 2388.407683199 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.142060742 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.18330338 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.135389866 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.135282576 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.218064046 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.240434767 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.121770772 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.072903104 seconds)
  done (took 59.229012471 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.055487009 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.052268179 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.473303738 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.062039127 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.056143141 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.096569794 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.389197732 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.097006286 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.054875176 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.065398254 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.055761637 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.063780411 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.060834888 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.067460326 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.066128343 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.345156183 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.085870289 seconds)
  done (took 81.189576792 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.106969079 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.88812142 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.063497624 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.27236154 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.159919672 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.298980992 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.060761432 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.063837548 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.714075941 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.708179031 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.067285839 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.071413382 seconds)
  done (took 90.482651543 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.063003478 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.054420735 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.05550513 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.055678801 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.056018491 seconds)
  done (took 12.280061291 seconds)
done (took 2928.15477199 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.274705461 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.209511123 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.158859934 seconds)
  done (took 6.355325825 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.118878606 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.184891638 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.246800227 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.197534959 seconds)
  done (took 10.743101945 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.333151976 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.547923645 seconds)
  done (took 6.864060917 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.580436013 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.069174328 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.590332527 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.059395142 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.059942008 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.061334396 seconds)
  done (took 23.180341116 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.061984498 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.063521925 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.060362614 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.056375041 seconds)
  done (took 10.23647612 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.056750384 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.049824946 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.061951381 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.076545821 seconds)
  done (took 22.226884289 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.350129961 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.316366243 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.803648577 seconds)
  done (took 9.453230974 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.870306038 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.433534238 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.847194622 seconds)
  done (took 10.138037968 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.008980845 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.983889101 seconds)
  done (took 7.98341277 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.217717301 seconds)
  done (took 4.207744152 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.530019577 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.537413961 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.886724646 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.912546025 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.04579695 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.369212757 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.431039914 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.451987614 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.728614634 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.569148823 seconds)
  done (took 28.44686622 seconds)
done (took 156.332507891 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.990871372 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.475049152 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.244597536 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.224532031 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.15831112 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.240402439 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.141820066 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.992734776 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.630799424 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.626047211 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.730239297 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.159008789 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.129134274 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.460665694 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.129237891 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.422675718 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.468885069 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.969444009 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.283999239 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.945466857 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.171047863 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.313748581 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.42705347 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.319484032 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.470883851 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.193382047 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.184595603 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.430068598 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.541196332 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.19192199 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.203786453 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.215306595 seconds)
  done (took 183.072084113 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.060842161 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.063049963 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.062707277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.064138886 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.958613362 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.064038571 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.0638339 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.068428017 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.870646061 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.861519091 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.063706674 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.959359054 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.064359274 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.06336461 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.067857317 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.069613457 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.997969168 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.070348174 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.062691595 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.063659404 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.063515291 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.739272899 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.072307855 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.766384742 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.973405091 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.065269853 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.067195461 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.070600917 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.070086843 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.063994233 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.063616716 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.06428855 seconds)
  done (took 218.698364434 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.061167632 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.065220131 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.068537849 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.068941786 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.065647062 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.066741978 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.066761563 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.065094227 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.064918999 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.067059583 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.071362916 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.071604371 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.067603168 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.065588519 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.06912312 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.066992746 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.066659923 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.067597682 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.069109741 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.064256531 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.066051444 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.065562329 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.065838589 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.061968394 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.06417971 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.066002595 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.062764887 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.063177683 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.063251299 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.061998458 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.06617197 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.063587774 seconds)
  done (took 228.108963746 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.360295655 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.061464042 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.061800065 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.437487687 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.062490376 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.060679494 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.41651856 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.360034334 seconds)
  done (took 21.818832213 seconds)
done (took 653.702728772 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.739785225 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.936895384 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.238133384 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.089200042 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.672248735 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.15832247 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.081603394 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.186217968 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.834954739 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.200463038 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.540212122 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.095940303 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.910630904 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.123660673 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.238872129 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.167206282 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.45326058 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.754879206 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.262422967 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.884109047 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.337459844 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.054189258 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.209759085 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.898002392 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.55786 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.088634371 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.18246991 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.45966719 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.090896625 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.355991798 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.119495702 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.473968034 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.112055787 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.090599028 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.161236003 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.14159255 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.398781721 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.10882298 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.227551506 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.830850376 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.895964168 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.705499302 seconds)
  done (took 111.0577396 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.072470554 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.070928073 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.07031289 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.070704417 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.071051161 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.070910144 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.070009596 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.070824514 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.070016057 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.071293566 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.071338119 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.071440947 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.072265058 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.075858172 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.071383635 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.071098061 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.0716391 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.071970391 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.071149052 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.072189356 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.071470717 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.071189586 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.067597284 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.071798327 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.071876949 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.071411655 seconds)
  done (took 55.866837426 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.064775954 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.279460081 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.433935363 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.105982325 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.066188033 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.069154375 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.106749027 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.076824671 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.068540761 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.067544372 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.171029927 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.072478131 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.081897206 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.431476525 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.103728529 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.066369344 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.064609047 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.066381803 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.286699031 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.08804954 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.108720489 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.076814347 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.107476243 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.087422039 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.069006204 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.067064745 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.070294978 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.574816622 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.081734036 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.170936834 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.167953754 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.118210685 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.472814613 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.435803018 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.146493733 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.076576533 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.066978246 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.217182608 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.084142812 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.068035402 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.107351121 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.078611056 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.424115918 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.696832829 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.089836815 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.066530375 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.574260409 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.229984842 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.124201547 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.083686476 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.43253994 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.106994504 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.067363483 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.069544396 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.111103553 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.078805302 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.068118692 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.366526188 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.085141093 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.108301125 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.079671565 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.069561569 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.293368608 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.082355865 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.27803208 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.082335788 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.076242938 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.070794663 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.425416121 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.107238482 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.689431368 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.092410053 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.066829614 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.172529113 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.284921938 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.608575768 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.088479024 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.294932349 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.496173154 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.120913381 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.083388234 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.554769176 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.123250197 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.084355204 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.068428985 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.068202438 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.06852735 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.113061704 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.109340177 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.611184502 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.695440321 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.395133934 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.122980825 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.086684792 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.071304103 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.365211599 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.082546534 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.06864969 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.427189178 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.717688779 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.092937408 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.078475276 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.673041829 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.09387638 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.111305634 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.085287582 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.434936832 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.109248305 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.115593304 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.069273649 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.078297526 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.074057964 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.111270278 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.08371977 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.06950566 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.66882681 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.243656618 seconds)
  done (took 258.593945467 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.07384254 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.071235613 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.070044577 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.071458323 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.071010991 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.071624206 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.069022342 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.069781957 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.07151628 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.068523324 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.069991708 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.070996875 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.075130027 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.071394423 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.103454051 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.072431493 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.867217373 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.069050437 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.070361429 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.07395707 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.78645273 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.07854753 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.071873073 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.074563478 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.072946931 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.073904736 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.074733396 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.099325419 seconds)
  done (took 173.590104926 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.072063583 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.142139452 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.089998147 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.140010811 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.086772861 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.071471524 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.102495886 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.09583888 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.081301806 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.071445517 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.071820441 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.111581561 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.082640072 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.17536724 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.117927982 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.115166175 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.182810376 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.083136651 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.071746435 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.071836387 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.141012886 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.093933465 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.112281697 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.152106809 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.087603961 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.140886525 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.094442635 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.072395653 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.072232689 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.198778126 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.099232902 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.112433721 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.123672558 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.1002694 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.205859633 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.203460623 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.189047762 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.115737115 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.081511295 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.073779897 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.07368618 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.080234651 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.141713637 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.089084587 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.07455653 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.209550808 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.100305565 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.073828282 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.098824542 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.074075241 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.09078735 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.098626543 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.123651771 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.214709464 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.140628722 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.105314501 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.106152253 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.096527787 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.078038886 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.177688609 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.093064799 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.201400317 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.101690553 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.08159149 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.076185568 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.078885015 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.1460974 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.122922597 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.1860173 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.086660706 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.178261776 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.15532065 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.089546746 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.07543531 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.076402396 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.145893188 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.195105903 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.204131725 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.254011674 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.205070328 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.176800375 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.150135506 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.112664162 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.115839181 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.091637341 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.202589922 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.206160751 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.087058519 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.075669927 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.076235228 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.075931447 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.111612984 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.158656737 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.130532349 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.201152479 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.126933805 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.127550359 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.086851165 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.093704776 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.084967998 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.121658659 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.087412472 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.094172295 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.426185176 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.130883106 seconds)
  done (took 224.867426961 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.516797228 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.132570374 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.169456109 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.335950217 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.516373139 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.056984544 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.129632171 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.144889762 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.143031833 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.278572001 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.202173383 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.198256309 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.127700377 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.10868213 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.129584716 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.138211788 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.170673211 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.504867678 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.252216217 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.980957822 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.137258791 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.41924451 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.454230622 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.496665664 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.199828852 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.598507104 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.775978817 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.242353986 seconds)
  done (took 70.576244601 seconds)
done (took 896.539194293 seconds)
SAVING RESULT...
DONE!
